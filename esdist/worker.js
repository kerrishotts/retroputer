(() => {
  // src/core/Bus.js
  var _size = Symbol("_size");
  var _buffer = Symbol("_buffer");
  var _value = Symbol("_value");
  var _receivers = Symbol("_receivers");
  var _mask = Symbol("_mask");
  var MASKS = [
    0,
    255,
    65535,
    16777215,
    4294967295
  ];
  var Bus = class {
    constructor(size = 2, mask2 = 4294967295) {
      this[_size] = size;
      this[_mask] = mask2 & MASKS[size];
      this[_value] = 0;
      this[_receivers] = [];
    }
    addReceiver(receiver) {
      if (receiver) {
        this[_receivers].push(receiver);
      }
    }
    set value(v) {
      this[_value] = (v < 0 ? ~v + 1 : v) & this[_mask];
    }
    get value() {
      return this[_value];
    }
    get size() {
      return this[_size];
    }
    signal(v, hold = false) {
      if (v !== void 0) {
        this.value = v;
      }
      let curValue = this.value;
      for (let i = this[_receivers].length - 1; i >= 0; i--) {
        this[_receivers][i](curValue);
      }
      if (!hold) {
        this.value = 0;
      }
    }
  };

  // src/core/SystemBus.js
  var MAP_SIZE = 2;
  var MAP_MASK = 65535;
  var ADDRESS_SIZE = 4;
  var ADDRESS_MASK = 524287;
  var DATA_SIZE = 2;
  var DATA_MASK = 65535;
  var COMMAND_SIZE = 1;
  var COMMAND_MASK = 3;
  var EXECUTE_SIZE = 1;
  var EXECUTE_MASK = 1;
  var _mapBus = Symbol("_mapBus");
  var _addressBus = Symbol("_addressBus");
  var _dataBus = Symbol("_dataBus");
  var _commandBus = Symbol("_commandBus");
  var _executeBus = Symbol("_executeBus");
  var COMMANDS_MEMORY_READ_BYTE = 0;
  var COMMANDS_MEMORY_READ_WORD = 1;
  var COMMANDS_MEMORY_WRITE_BYTE = 2;
  var COMMANDS_MEMORY_WRITE_WORD = 3;
  var SystemBus = class {
    constructor() {
      this[_mapBus] = new Bus(MAP_SIZE, MAP_MASK);
      this[_addressBus] = new Bus(ADDRESS_SIZE, ADDRESS_MASK);
      this[_dataBus] = new Bus(DATA_SIZE, DATA_MASK);
      this[_commandBus] = new Bus(COMMAND_SIZE, COMMAND_MASK);
      this[_executeBus] = new Bus(EXECUTE_SIZE, EXECUTE_MASK);
    }
    get mapBus() {
      return this[_mapBus];
    }
    get addressBus() {
      return this[_addressBus];
    }
    get dataBus() {
      return this[_dataBus];
    }
    get commandBus() {
      return this[_commandBus];
    }
    get executeBus() {
      return this[_executeBus];
    }
    get map() {
      return this[_mapBus].value;
    }
    set map(v) {
      this[_mapBus].value = v & MAP_MASK;
    }
    get command() {
      return this[_commandBus].value;
    }
    get address() {
      return this[_addressBus].value;
    }
    get data() {
      return this[_dataBus].value;
    }
    set data(v) {
      this[_dataBus].value = v;
    }
    readByte(address2) {
      this[_addressBus].value = address2;
      this[_dataBus].value = 0;
      this[_commandBus].value = COMMANDS_MEMORY_READ_BYTE;
      this[_executeBus].signal(1);
      return this[_dataBus].value;
    }
    readWord(address2) {
      this[_addressBus].value = address2;
      this[_dataBus].value = 0;
      this[_commandBus].value = COMMANDS_MEMORY_READ_WORD;
      this[_executeBus].signal(1);
      return this[_dataBus].value;
    }
    writeByte(address2, value) {
      this[_addressBus].value = address2;
      this[_dataBus].value = value & 255;
      this[_commandBus].value = COMMANDS_MEMORY_WRITE_BYTE;
      this[_executeBus].signal(1);
    }
    writeWord(address2, value) {
      this[_addressBus].value = address2;
      this[_dataBus].value = value;
      this[_commandBus].value = COMMANDS_MEMORY_WRITE_WORD;
      this[_executeBus].signal(1);
    }
  };

  // src/core/Memory.js
  var _rom = Symbol("_rom");
  var _shared = Symbol("_shared");
  var _startingAddress = Symbol("_startingAddress");
  var _endingAddress = Symbol("_endingAddress");
  var _size2 = Symbol("_size");
  var _buffer2 = Symbol("_buffer");
  var _data = Symbol("_data");
  var _systemBus = Symbol("_systemBus");
  var MemoryBank = class {
    constructor({ systemBus, address: address2 = 0, size = 0, rom = false, shared = false, buffer: buffer2 = void 0 }) {
      this[_buffer2] = buffer2 || new (shared ? SharedArrayBuffer : ArrayBuffer)(size);
      this[_data] = new Uint8Array(this[_buffer2], buffer2 ? address2 : 0, size);
      this[_size2] = size;
      this[_startingAddress] = address2;
      this[_endingAddress] = address2 + size - 1;
      this[_shared] = shared;
      this[_rom] = rom;
      this[_systemBus] = systemBus;
      this.signaled = this.signaled.bind(this);
      if (systemBus) {
        systemBus.executeBus.addReceiver(this.signaled);
      }
    }
    get shared() {
      return this[_shared];
    }
    get rom() {
      return this[_rom];
    }
    get startingAddress() {
      return this[_startingAddress];
    }
    get size() {
      return this[_size2];
    }
    get endingAddress() {
      return this[_endingAddress];
    }
    read(address2) {
      return this[_data][address2 & 16383];
    }
    write(address2, value, override = false) {
      if (!this[_rom] || override) {
        this[_data][address2 - this[_startingAddress]] = value;
      }
    }
    signaled() {
      const command = this[_systemBus].command;
      const address2 = this[_systemBus].address;
      if (address2 >= this[_startingAddress] && address2 <= this[_endingAddress]) {
        switch (command) {
          default:
          case COMMANDS_MEMORY_READ_BYTE:
            this[_systemBus].data = this.read(address2);
            break;
          case COMMANDS_MEMORY_READ_WORD:
            this[_systemBus].data = this.read(address2) << 8 | this.read(address2 + 1);
            break;
          case COMMANDS_MEMORY_WRITE_BYTE:
            this.write(address2, this[_systemBus].data);
            break;
          case COMMANDS_MEMORY_WRITE_WORD:
            const data = this[_systemBus].data;
            const hi = (data & 65280) >> 8;
            const lo = data & 255;
            this.write(address2, hi);
            this.write(address2 + 1, lo);
            break;
        }
      }
    }
  };
  var _pages = Symbol("_pages");
  var Memory = class {
    constructor({ systemBus, pageCount = 32, pageSize = 16384, romPages = [28, 29, 30, 31], shared = false, buffer: buffer2 = null }) {
      const pages = [];
      this[_buffer2] = buffer2 || new (shared ? SharedArrayBuffer : ArrayBuffer)(pageCount * pageSize);
      for (let i = 0; i < pageCount; i++) {
        pages.push(new MemoryBank({
          systemBus,
          address: i * pageSize,
          size: pageSize,
          rom: romPages.indexOf(i) > -1,
          shared,
          buffer: this[_buffer2]
        }));
      }
      this[_pages] = pages;
      this[_systemBus] = systemBus;
    }
    get pages() {
      return this[_pages];
    }
    get size() {
      const pages = this[_pages];
      let size = 0;
      pages.forEach((page) => size += page.size);
      return size;
    }
    pageForAddress(address2) {
      const pages = this[_pages];
      const map = this[_systemBus].map;
      const page = (address2 & 507904) >> 14;
      switch (page) {
        case 1:
          return pages[map & 31];
        case 2:
          return pages[(map & 992) >> 5];
        case 3:
          return pages[(map & 31744) >> 10];
        default:
          return pages[page];
      }
    }
    readByte(address2) {
      const page = this.pageForAddress(address2);
      return page.read(address2);
    }
    readUnmappedByte(address2) {
      const page = this[_pages][(address2 & 507904) >> 14];
      return page.read(address2);
    }
    readWord(address2) {
      const page = this.pageForAddress(address2);
      return (page.read(address2) << 8) + page.read(address2 + 1);
    }
    writeByte(address2, value, override = false) {
      const page = this.pageForAddress(address2);
      page.write(address2, value, override);
    }
    writeUnmappedByte(address2, value) {
      const page = this[_pages][(address2 & 507904) >> 14];
      return page.write(address2, value);
    }
    writeWord(address2, value) {
      const page = this.pageForAddress(address2);
      const hi = (value & 65280) >> 8;
      const lo = value & 255;
      page.write(address2, hi);
      page.write(address2 + 1, lo);
    }
    loadFromJS(bin, override = false) {
      bin.forEach((segment) => {
        const addr = segment.addr;
        segment.data.forEach((v, i) => {
          this.writeByte(i + addr, v, override);
        });
      });
    }
    copyWithin(sourceAddress, targetAddress, length) {
      new Uint8Array(this[_buffer2]).copyWithin(targetAddress, sourceAddress, sourceAddress + length);
    }
    setWithin(buffer2, address2) {
      new Uint8Array(this[_buffer2]).set(buffer2, address2);
    }
    fillWithin(data, address2, length) {
      new Uint8Array(this[_buffer2]).fill(data, address2, address2 + length);
    }
    swapWithin(sourceAddress, targetAddress, length) {
      const source = Uint8Array.from(new Uint8Array(this[_buffer2], sourceAddress, length));
      const target = Uint8Array.from(new Uint8Array(this[_buffer2], targetAddress, length));
      this.setWithin(source, targetAddress);
      this.setWithin(target, sourceAddress);
    }
    reset(withPattern = false) {
      for (let i = 0; i < this.size; i++) {
        this.writeUnmappedByte(i, withPattern ? (i & 3) * 31 : 0);
      }
    }
  };

  // src/core/IOBus.js
  var _irqServiceBus = Symbol("_irqService");
  var _irqSignalBus = Symbol("_irqSignal");
  var _deviceSelectBus = Symbol("_deviceSelect");
  var _addressSelectBus = Symbol("_addressSeect");
  var _dataBus2 = Symbol("_data");
  var _commandBus2 = Symbol("_command");
  var _executeBus2 = Symbol("_execute");
  var IOBus = class {
    constructor() {
      this[_irqServiceBus] = new Bus(2);
      this[_irqSignalBus] = new Bus(1, 15);
      this[_deviceSelectBus] = new Bus(1, 15);
      this[_addressSelectBus] = new Bus(1, 15);
      this[_dataBus2] = new Bus(1);
      this[_commandBus2] = new Bus(1, 1);
      this[_executeBus2] = new Bus(1, 1);
    }
    get irqServiceBus() {
      return this[_irqServiceBus];
    }
    get irqSignalBus() {
      return this[_irqSignalBus];
    }
    get deviceSelectBus() {
      return this[_deviceSelectBus];
    }
    get addressSelectBus() {
      return this[_addressSelectBus];
    }
    get dataBus() {
      return this[_dataBus2];
    }
    get commandBus() {
      return this[_commandBus2];
    }
    get executeBus() {
      return this[_executeBus2];
    }
  };

  // src/core/ALU.js
  var _op1 = Symbol("_op1");
  var _op2 = Symbol("_op2");
  var _ret = Symbol("_ret");
  var _flags = Symbol("_flags");
  var _command = Symbol("_command");
  var _execute = Symbol("_execute");
  var COMMANDS = {
    ADD: 1,
    SUB: 2,
    MUL: 3,
    DIV: 4,
    MOD: 5,
    SMUL: 6,
    SDIV: 7,
    SMOD: 8,
    NEG: 9,
    SHL: 10,
    SHR: 11,
    AND: 12,
    OR: 13,
    XOR: 14,
    NOT: 15
  };
  var SIZES = {
    BYTE: 0,
    WORD: 1,
    ADDR: 2,
    RET_8: 0,
    RET_16: 256,
    RET_19: 512,
    RET_32: 768,
    OP1_8: 0,
    OP1_16: 64,
    OP1_19: 128,
    OP1_32: 192,
    OP2_8: 0,
    OP2_16: 16,
    OP2_19: 32,
    OP2_32: 48
  };
  var signBit = [128, 32768, 262144];
  var mask = [255, 65535, 524287];
  var carryBit = [256, 65536, 524288];
  var ALU = class {
    constructor() {
      this[_op1] = new Bus(4);
      this[_op2] = new Bus(4);
      this[_ret] = new Bus(4);
      this[_flags] = new Bus(1, 7);
      this[_command] = new Bus(2, 1023);
      this[_execute] = new Bus(1, 1);
      this.signaled = this.signaled.bind(this);
      this[_execute].addReceiver(this.signaled);
      this.stats = {
        ops: 0,
        [COMMANDS.ADD]: 0,
        [COMMANDS.AND]: 0,
        [COMMANDS.DIV]: 0,
        [COMMANDS.MOD]: 0,
        [COMMANDS.MUL]: 0,
        [COMMANDS.NEG]: 0,
        [COMMANDS.NOT]: 0,
        [COMMANDS.OR]: 0,
        [COMMANDS.SDIV]: 0,
        [COMMANDS.SMOD]: 0,
        [COMMANDS.SMUL]: 0,
        [COMMANDS.SHL]: 0,
        [COMMANDS.SHR]: 0,
        [COMMANDS.SUB]: 0,
        [COMMANDS.XOR]: 0
      };
    }
    resetStats() {
      this.stats = {
        ops: 0,
        [COMMANDS.ADD]: 0,
        [COMMANDS.AND]: 0,
        [COMMANDS.DIV]: 0,
        [COMMANDS.MOD]: 0,
        [COMMANDS.MUL]: 0,
        [COMMANDS.NEG]: 0,
        [COMMANDS.NOT]: 0,
        [COMMANDS.OR]: 0,
        [COMMANDS.SDIV]: 0,
        [COMMANDS.SMOD]: 0,
        [COMMANDS.SMUL]: 0,
        [COMMANDS.SHL]: 0,
        [COMMANDS.SHR]: 0,
        [COMMANDS.SUB]: 0,
        [COMMANDS.XOR]: 0
      };
    }
    get op1Bus() {
      return this[_op1];
    }
    get op2Bus() {
      return this[_op2];
    }
    get retBus() {
      return this[_ret];
    }
    get flagsBus() {
      return this[_flags];
    }
    get commandBus() {
      return this[_command];
    }
    get executeBus() {
      return this[_execute];
    }
    signaled() {
      const command = this.commandBus.data;
      const op1 = this.op1Bus.data;
      const op2 = this.op2Bus.data;
      const sizeOfRet = (command & 768) >> 8;
      const sizeOfOp1 = (command & 192) >> 6;
      const sizeOfOp2 = (command & 48) >> 4;
      const op = command & 15;
      this.stats[op]++;
      this.stats.ops++;
      let a = op1;
      if (a < 0) {
        a += carryBit[sizeOfOp1];
      }
      a &= mask[sizeOfOp1];
      let b2 = op2;
      if (b2 < 0) {
        b2 += carryBit[sizeOfOp2];
      }
      b2 &= mask[sizeOfOp2];
      const signA = a & signBit[sizeOfOp1] ? 1 : 0;
      const signB = b2 & signBit[sizeOfOp2] ? 1 : 0;
      let zero = 0;
      let carry = 0;
      const carryIn = (this.flagsBus.data & 4) >> 2;
      let negative = 0;
      let overflow = 0;
      let ret = 0;
      switch (op) {
        case COMMANDS.SUB: {
          ret = a + -b2 + carryIn;
          if (ret < 0) {
            carry = 1;
          }
          break;
        }
        case COMMANDS.ADD:
          ret = a + b2 + carryIn;
          break;
        case COMMANDS.MUL:
          ret = a * b2;
          break;
        case COMMANDS.MOD:
        case COMMANDS.DIV:
          if (b2 === 0) {
            carry = 1;
            overflow = 1;
            negative = 1;
            zero = 1;
            ret = 0;
          } else {
            if (op === COMMANDS.DIV) {
              ret = Math.floor(a / b2);
            } else {
              ret = a % b2;
            }
          }
          break;
        case COMMANDS.AND:
          ret = a & b2;
          break;
        case COMMANDS.OR:
          ret = a | b2;
          break;
        case COMMANDS.XOR:
          ret = a ^ b2;
          break;
        case COMMANDS.NOT:
          ret = ~a;
          break;
        case COMMANDS.NEG:
          ret = -a;
          break;
        case COMMANDS.SHL:
          ret = a << (b2 & 63);
          break;
        case COMMANDS.SHR:
          ret = a >> (b2 & 63);
          break;
        default:
      }
      if (ret < 0) {
        ret += carryBit[sizeOfRet];
      }
      negative = ret & signBit[sizeOfRet] ? 1 : 0;
      carry = carry | (ret & ~mask[sizeOfRet] ? 1 : 0);
      ret &= mask[sizeOfRet];
      if ((op === COMMANDS.ADD || op === COMMANDS.MUL) && signA === signB) {
        if (signA !== negative) {
          overflow = 1;
        }
      } else if (op === COMMANDS.SUB && signA !== signB) {
        if (signA !== negative) {
          overflow = 1;
        }
      }
      zero = ret === 0 ? 1 : 0;
      this.retBus.data = ret;
      this.flagsBus.data = negative << 3 | carry << 2 | overflow << 1 | zero;
    }
  };

  // src/core/FPU.js
  var FPU = class {
    constructor() {
      this.init();
    }
    init() {
      this.stack = new Float64Array(8);
      this.flags = {
        overflow: false,
        underflow: false,
        infinity: false,
        nan: false,
        negative: false,
        zero: false,
        stackException: false,
        divideByZero: false
      };
      this.SP = 0;
    }
    updateFlags() {
      const v = this.peek();
      this.flags.infinity = !Number.isFinite(v);
      this.flags.nan = Number.isNaN(v);
      this.flags.negative = v < 0;
      this.flags.zero = v === 0;
    }
    pop() {
      this.SP--;
      if (this.SP < 0) {
        this.SP = this.stack.length - 1;
        this.flags.stackException = true;
      }
      this.SP = this.SP & 7;
      return this.stack[this.SP];
    }
    peek() {
      return this.stack[this.SP - 1 & 7];
    }
    push(v) {
      this.stack[this.SP] = v;
      this.SP++;
      if (this.SP > this.stack.length - 1) {
        this.SP = 0;
        this.flags.stackException = true;
      }
    }
    pushBytes(bytes2) {
      const dataView = new DataView(this.stack.buffer);
      for (let i = 0; i < 8; i++) {
        dataView.setUint8(this.SP * 8 + i, bytes2[i]);
      }
      this.SP++;
      if (this.SP > this.stack.length - 1) {
        this.SP = 0;
        this.flags.stackException = true;
      }
    }
    popBytes() {
      this.SP--;
      if (this.SP < 0) {
        this.SP = this.stack.length - 1;
        this.flags.stackException = true;
      }
      this.SP = this.SP & 7;
      const dataView = new DataView(this.stack.buffer);
      return Array.from({ length: 8 }, (_, i) => dataView.getUint8(this.SP * 8 + i));
    }
    dup() {
      const v = this.peek();
      this.push(v);
    }
    swap() {
      const a = this.pop();
      const b2 = this.pop();
      this.push(a);
      this.push(b2);
    }
    int() {
      const a = this.pop();
      this.push(Math.round(a));
    }
    add() {
      const b2 = this.pop();
      const a = this.pop();
      this.push(a + b2);
    }
    sub() {
      const b2 = this.pop();
      const a = this.pop();
      this.push(a - b2);
    }
    mul() {
      const b2 = this.pop();
      const a = this.pop();
      this.push(a * b2);
    }
    div() {
      const b2 = this.pop();
      const a = this.pop();
      if (b2 === 0) {
        this.flags.divideByZero = true;
        this.push(0);
        return;
      }
      this.push(a / b2);
    }
    mod() {
      const b2 = this.pop();
      const a = this.pop();
      if (b2 === 0) {
        this.flags.divideByZero = true;
        this.push(0);
        return;
      }
      this.push(a % b2);
    }
    pow() {
      const b2 = this.pop();
      const a = this.pop();
      this.push(Math.pow(a, b2));
    }
    sqrt() {
      const b2 = this.pop();
      const a = this.pop();
      this.push(Math.sqrt(a, b2));
    }
    abs() {
      const a = this.pop();
      this.push(Math.abs(a));
    }
    neg() {
      const a = this.pop();
      this.push(-a);
    }
    sin() {
      const a = this.pop();
      this.push(Math.sin(a));
    }
    cos() {
      const a = this.pop();
      this.push(Math.cos(a));
    }
    tan() {
      const a = this.pop();
      this.push(Math.tan(a));
    }
    asin() {
      const a = this.pop();
      this.push(Math.asin(a));
    }
    acos() {
      const a = this.pop();
      this.push(Math.acos(a));
    }
    atan() {
      const a = this.pop();
      this.push(Math.atan(a));
    }
    log() {
      const a = this.pop();
      this.push(Math.log(a));
    }
    log2() {
      const a = this.pop();
      this.push(Math.log2(a));
    }
    log10() {
      const a = this.pop();
      this.push(Math.log10(a));
    }
    e() {
      this.push(Math.E);
    }
    pi() {
      this.push(Math.PI);
    }
    isnan() {
      const a = this.pop();
      if (Number.isNaN(a))
        this.push(1);
      else
        this.push(0);
    }
    isinf() {
      const a = this.pop();
      if (Number.isFinite(a))
        this.push(0);
      else
        this.push(1);
    }
    ld0() {
      this.push(0);
    }
    ld1() {
      this.push(1);
    }
  };

  // src/core/Device.js
  var _controller = Symbol("_controller");
  var _ioBus = Symbol("_ioBus");
  var _memory = Symbol("_memory");
  var _buffer3 = Symbol("_buffer");
  var _device = Symbol("_device");
  var _priority = Symbol("_priority");
  var _addrStart = Symbol("_addrStart");
  var _addrEnd = Symbol("_addrEnd");
  var Device = class {
    constructor({ device = 0, length = 16, priority = 15, controller, memory = void 0, clock = void 0 }) {
      this[_controller] = controller;
      this[_ioBus] = controller.ioBus;
      this[_memory] = memory;
      this[_device] = device;
      this[_priority] = priority;
      this._length = length;
      this[_addrStart] = device << 4;
      this[_addrEnd] = this[_addrStart] + length - 1;
      this[_buffer3] = new Uint8Array(new ArrayBuffer(length << 1));
      this.putOnBus = this.putOnBus.bind(this);
      this.pullFromBus = this.pullFromBus.bind(this);
      this._read = this._read.bind(this);
      this._write = this._write.bind(this);
      controller.register(this);
      this.ioBus.executeBus.addReceiver(() => {
        const ioBus = this[_ioBus];
        const selectedDevice = ioBus.deviceSelectBus.value;
        const baseAddress = selectedDevice << 4;
        const busAddress = baseAddress + ioBus.addressSelectBus.value;
        if (busAddress >= this[_addrStart] && busAddress <= this[_addrEnd]) {
          const command = ioBus.commandBus.value;
          const address2 = busAddress - this[_addrStart];
          const fn = command === 0 ? this.putOnBus : this.pullFromBus;
          if (fn) {
            fn(address2);
          }
        }
      });
      this.tick = this.tick.bind(this);
      if (clock) {
        clock.addReceiver(this.tick);
      }
    }
    _read(address2 = 0) {
      return this[_buffer3][address2];
    }
    _write(address2 = 0, data = 0) {
      this[_buffer3][this._length + address2] = data;
      if (this.mirrored[address2]) {
        this[_buffer3][address2] = data;
      }
    }
    putOnBus(address2 = 0) {
      const ioBus = this[_ioBus];
      ioBus.dataBus.value = this._read(address2);
    }
    pullFromBus(address2 = 0) {
      const data = this[_ioBus].dataBus.value;
      this._write(address2, data);
    }
    get addrStart() {
      return this[_addrStart];
    }
    get addrEnd() {
      return this[_addrEnd];
    }
    get mirrored() {
      return {};
    }
    get device() {
      return this[_device];
    }
    get ioBus() {
      return this[_ioBus];
    }
    get memory() {
      return this[_memory];
    }
    get priority() {
      return this[_priority];
    }
    get controller() {
      return this[_controller];
    }
    requestService(r) {
      this.controller.sendInterruptForDevice(this);
    }
    tick() {
    }
  };

  // src/core/Controller.js
  var _processor = Symbol("_processor");
  var _ioBus2 = Symbol("_ioBus");
  var _devices = Symbol("_devices");
  var _deviceMap = Symbol("_deviceMap");
  var Controller = class {
    constructor({ processor, ioBus, clock }) {
      this[_processor] = processor;
      processor.registerController(this);
      this[_ioBus2] = ioBus;
      this[_devices] = [];
      this[_deviceMap] = [];
      this.tick = this.tick.bind(this);
      if (clock) {
        clock.addReceiver(this.tick);
      }
    }
    get ioBus() {
      return this[_ioBus2];
    }
    get processor() {
      return this[_processor];
    }
    get devices() {
      return this[_devices];
    }
    register(device) {
      this[_devices].push(device);
      this[_devices].sort((a, b2) => a.priority - b2.priority);
      this[_deviceMap] = this[_devices].reduce((m, device2) => {
        for (let addr = device2.addrStart; addr <= device2.addrEnd; addr += 16) {
          m[addr >> 4] = device2;
        }
        return m;
      }, []);
    }
    pureRead(address2) {
      const deviceSelection = address2 >> 4;
      const actualDevice = this[_deviceMap][deviceSelection];
      return (actualDevice ? actualDevice._read(address2 - actualDevice.addrStart) : 0) || 0;
    }
    pureWrite(address2, value) {
      const deviceSelection = address2 >> 4;
      const actualDevice = this[_deviceMap][deviceSelection];
      if (actualDevice)
        actualDevice._write(address2 - actualDevice.addrStart, value);
    }
    sendInterruptForDevice(device) {
      const ioBus = this[_ioBus2];
      ioBus.irqServiceBus.value |= 1 << device.device;
    }
    pingProcessor() {
      if (this.ioBus.irqServiceBus.value !== 0) {
        for (let device of this.devices) {
          if (this.ioBus.irqServiceBus.value & 1 << device.device) {
            this.ioBus.irqSignalBus.signal(device.device);
            break;
          }
        }
      }
    }
    ackInterrupt(deviceNum) {
      this.ioBus.irqServiceBus.value &= ~(1 << deviceNum);
      this.ioBus.irqSignalBus.value = 0;
    }
    tick() {
      this.pingProcessor();
    }
  };

  // src/util/endianness.js
  var buffer = new ArrayBuffer(2);
  var bytes = new Uint8Array(buffer);
  var words = new Uint16Array(buffer);
  words[0] = 4660;
  var endianness = bytes[0] == 18 ? "big" : "little";
  var isLittleEndian = endianness === "little";

  // src/core/RegisterFile.js
  var _buffer4 = Symbol("_buffer");
  var _byteData = Symbol("_data");
  var _wordData = Symbol("_word");
  var REGISTER_COUNT = 24;
  var REGISTER_INDEX = {
    A: 0,
    AL: 1,
    B: 2,
    BL: 3,
    C: 4,
    CL: 5,
    D: 6,
    DL: 7,
    X: 8,
    XL: 9,
    Y: 10,
    YL: 11,
    BP: 12,
    SP: 14,
    STATUS: 16,
    FLAGS: 17,
    PC: 18,
    MM: 20,
    MP: 22
  };
  var FLAGS_INDEX = {
    Z: 0,
    ZERO: 0,
    Z_SET_MASK: 1,
    Z_CLR_MASK: 254,
    V: 1,
    OVERFLOW: 1,
    V_SET_MASK: 2,
    V_CLR_MASK: 253,
    C: 2,
    CARRY: 2,
    C_SET_MASK: 4,
    C_CLR_MASK: 251,
    N: 3,
    NEGATIVE: 3,
    N_SET_MASK: 8,
    N_CLR_MASK: 247,
    SS: 4,
    SINGLE_STEP: 4,
    SS_SET_MASK: 16,
    SS_CLR_MASK: 239,
    IS: 5,
    INTERRUPT_SERVICE: 5,
    IS_SET_MASK: 32,
    IS_CLR_MASK: 223,
    ID: 6,
    INTERRUPT_DISABLE: 6,
    ID_SET_MASK: 64,
    ID_CLR_MASK: 191,
    EX: 7,
    EXCEPTION: 7,
    EX_SET_MASK: 128,
    EX_CLR_MASK: 127
  };
  var RegisterFile = class {
    constructor() {
      this[_buffer4] = new ArrayBuffer(REGISTER_COUNT);
      this[_byteData] = new Uint8Array(this[_buffer4]);
      this[_wordData] = new Uint16Array(this[_buffer4]);
    }
    getRegister(index) {
      if ((index & 1) === 0) {
        return this[_wordData][index >> 1];
      } else {
        return this[_byteData][index - (isLittleEndian ? 1 : 0)];
      }
    }
    getSizeOfRegister(index) {
      return index & 1 ? SIZES.BYTE : SIZES.WORD;
    }
    getRegisterMask(index) {
      if ((index & 1) === 0) {
        return 65535;
      } else {
        return 255;
      }
    }
    setRegister(index, value) {
      if ((index & 1) === 0) {
        this[_wordData][index >> 1] = value & 65535;
      } else {
        this[_byteData][index - (isLittleEndian ? 1 : 0)] = value;
      }
    }
    get A() {
      return this.getRegister(REGISTER_INDEX.A);
    }
    get AL() {
      return this.getRegister(REGISTER_INDEX.AL);
    }
    get B() {
      return this.getRegister(REGISTER_INDEX.B);
    }
    get BL() {
      return this.getRegister(REGISTER_INDEX.BL);
    }
    get C() {
      return this.getRegister(REGISTER_INDEX.C);
    }
    get CL() {
      return this.getRegister(REGISTER_INDEX.CL);
    }
    get D() {
      return this.getRegister(REGISTER_INDEX.D);
    }
    get DL() {
      return this.getRegister(REGISTER_INDEX.DL);
    }
    get X() {
      return this.getRegister(REGISTER_INDEX.X);
    }
    get XL() {
      return this.getRegister(REGISTER_INDEX.XL);
    }
    get Y() {
      return this.getRegister(REGISTER_INDEX.Y);
    }
    get YL() {
      return this.getRegister(REGISTER_INDEX.YL);
    }
    get BP() {
      return this.getRegister(REGISTER_INDEX.BP);
    }
    get SP() {
      return this.getRegister(REGISTER_INDEX.SP);
    }
    get STATUS() {
      return this.getRegister(REGISTER_INDEX.STATUS);
    }
    get FLAGS() {
      return this.getRegister(REGISTER_INDEX.FLAGS);
    }
    get PC() {
      return this.getRegister(REGISTER_INDEX.PC);
    }
    get MM() {
      return this.getRegister(REGISTER_INDEX.MM);
    }
    get MP() {
      return this.getRegister(REGISTER_INDEX.MP);
    }
    set A(v) {
      this.setRegister(REGISTER_INDEX.A, v);
    }
    set AL(v) {
      this.setRegister(REGISTER_INDEX.AL, v);
    }
    set B(v) {
      this.setRegister(REGISTER_INDEX.B, v);
    }
    set BL(v) {
      this.setRegister(REGISTER_INDEX.BL, v);
    }
    set C(v) {
      this.setRegister(REGISTER_INDEX.C, v);
    }
    set CL(v) {
      this.setRegister(REGISTER_INDEX.CL, v);
    }
    set D(v) {
      this.setRegister(REGISTER_INDEX.D, v);
    }
    set DL(v) {
      this.setRegister(REGISTER_INDEX.DL, v);
    }
    set X(v) {
      this.setRegister(REGISTER_INDEX.X, v);
    }
    set XL(v) {
      this.setRegister(REGISTER_INDEX.XL, v);
    }
    set Y(v) {
      this.setRegister(REGISTER_INDEX.Y, v);
    }
    set YL(v) {
      this.setRegister(REGISTER_INDEX.YL, v);
    }
    set BP(v) {
      this.setRegister(REGISTER_INDEX.BP, v);
    }
    set SP(v) {
      this.setRegister(REGISTER_INDEX.SP, v);
    }
    set STATUS(v) {
      this.setRegister(REGISTER_INDEX.STATUS, v);
    }
    set FLAGS(v) {
      this.setRegister(REGISTER_INDEX.FLAGS, v);
    }
    set PC(v) {
      this.setRegister(REGISTER_INDEX.PC, v);
    }
    set MM(v) {
      this.setRegister(REGISTER_INDEX.MM, v);
    }
    set MP(v) {
      this.setRegister(REGISTER_INDEX.MP, v);
    }
    get ZERO() {
      return this.FLAGS & FLAGS_INDEX.Z_SET_MASK;
    }
    get CARRY() {
      return (this.FLAGS & FLAGS_INDEX.C_SET_MASK) >> FLAGS_INDEX.CARRY;
    }
    get SINGLE_STEP() {
      return (this.FLAGS & FLAGS_INDEX.SS_SET_MASK) >> FLAGS_INDEX.SINGLE_STEP;
    }
    get INTERRUPT_SERVICE() {
      return (this.FLAGS & FLAGS_INDEX.IS_SET_MASK) >> FLAGS_INDEX.INTERRUPT_SERVICE;
    }
    get INTERRUPT_DISABLE() {
      return (this.FLAGS & FLAGS_INDEX.ID_SET_MASK) >> FLAGS_INDEX.INTERRUPT_DISABLE;
    }
    get EXCEPTION() {
      return (this.FLAGS & FLAGS_INDEX.EX_SET_MASK) >> FLAGS_INDEX.EXCEPTION;
    }
    get OVERFLOW() {
      return (this.FLAGS & FLAGS_INDEX.V_SET_MASK) >> FLAGS_INDEX.OVERFLOW;
    }
    get NEGATIVE() {
      return (this.FLAGS & FLAGS_INDEX.N_SET_MASK) >> FLAGS_INDEX.NEGATIVE;
    }
    set ZERO(v) {
      this.FLAGS = this.FLAGS & FLAGS_INDEX.Z_CLR_MASK | (v && FLAGS_INDEX.Z_SET_MASK);
    }
    set CARRY(v) {
      this.FLAGS = this.FLAGS & FLAGS_INDEX.C_CLR_MASK | (v && FLAGS_INDEX.C_SET_MASK);
    }
    set SINGLE_STEP(v) {
      this.FLAGS = this.FLAGS & FLAGS_INDEX.SS_CLR_MASK | (v && FLAGS_INDEX.SS_SET_MASK);
    }
    set INTERRUPT_SERVICE(v) {
      this.FLAGS = this.FLAGS & FLAGS_INDEX.IS_CLR_MASK | (v && FLAGS_INDEX.IS_SET_MASK);
    }
    set INTERRUPT_DISABLE(v) {
      this.FLAGS = this.FLAGS & FLAGS_INDEX.ID_CLR_MASK | (v && FLAGS_INDEX.ID_SET_MASK);
    }
    set EXCEPTION(v) {
      this.FLAGS = this.FLAGS & FLAGS_INDEX.EX_CLR_MASK | (v && FLAGS_INDEX.EX_SET_MASK);
    }
    set OVERFLOW(v) {
      this.FLAGS = this.FLAGS & FLAGS_INDEX.V_CLR_MASK | (v && FLAGS_INDEX.V_SET_MASK);
    }
    set NEGATIVE(v) {
      this.FLAGS = this.FLAGS & FLAGS_INDEX.N_CLR_MASK | (v && FLAGS_INDEX.N_SET_MASK);
    }
    toJSON() {
      return {
        A: this.A,
        B: this.B,
        C: this.C,
        D: this.D,
        X: this.X,
        Y: this.Y,
        BP: this.BP,
        SP: this.SP,
        STATUS: this.STATUS,
        PC: this.PC,
        MP: this.MP,
        MM: this.MM,
        FLAGS: {
          ZERO: this.ZERO,
          CARRY: this.CARRY,
          SINGLE_STEP: this.SINGLE_STEP,
          INTERRUPT_SERVICE: this.INTERRUPT_SERVICE,
          INTERRUPT_DISABLE: this.INTERRUPT_DISABLE,
          EXCEPTION: this.EXCEPTION,
          OVERFLOW: this.OVERFLOW,
          NEGATIVE: this.NEGATIVE
        }
      };
    }
  };

  // src/isa/tasks.js
  var SIZE_BYTE = SIZES.BYTE;
  var SIZE_WORD = SIZES.WORD;
  var SIZE_ADDR = SIZES.ADDR;
  var STACK_BYTE = 0;
  var STACK_WORD = 536870912;
  var STACK_ADDR = 1073741824;
  var STACK_TYPE_MASK = 1610612736;
  var STACK_DATA_MASK = 536870911;
  var FLAGS_PUSH_TO_ALU = 1;
  var FLAGS_PULL_FROM_ALU = 2;
  var FLAGS_PUSH_AND_PULL = 3;
  var mapSize = (size) => size === SIZE_BYTE ? STACK_BYTE : size === SIZE_WORD ? STACK_WORD : size === SIZE_ADDR ? STACK_ADDR : size === STACK_BYTE ? SIZE_BYTE : size === STACK_WORD ? SIZE_WORD : size === STACK_ADDR ? SIZE_ADDR : size;
  var push = (stack, data, size) => {
    const newSize = mapSize(size);
    return stack.push(newSize | data);
  };
  var pop = (stack) => {
    const s0 = stack.pop() | 0;
    const data = s0 & STACK_DATA_MASK;
    return data;
  };
  var popWithSize = (stack) => {
    const s0 = stack.pop() | 0;
    const data = s0 & STACK_DATA_MASK;
    const stackSize = s0 & STACK_TYPE_MASK;
    const size = mapSize(stackSize);
    return [data, size];
  };
  var TASK_OPCODE_MASK = 2130706432;
  var TASK_OPERAND_MASK = 16777215;
  var opcodeFromTask = (task) => task & TASK_OPCODE_MASK;
  var operandFromTask = (task) => task & TASK_OPERAND_MASK;
  var TASKS = {
    NOP: 0,
    GET_REGISTER_AND_PUSH: 16777216,
    POP_INTO_REGISTER: 33554432,
    PUSH_BYTE: 50331648,
    PUSH_WORD: 67108864,
    PUSH_ADDR: 83886080,
    GET_BYTE_FROM_MEMORY: 100663296,
    GET_WORD_FROM_MEMORY: 117440512,
    POP_BYTE_INTO_MEMORY: 134217728,
    POP_WORD_INTO_MEMORY: 150994944,
    DECOMPOSE_WORD_TO_BYTES: 268435456,
    RECOMPOSE_BYTES_TO_WORD: 285212672,
    DECOMPOSE_BYTE_TO_NIBBLE: 301989888,
    RECOMPOSE_NIBBLE_TO_BYTE: 318767104,
    DECOMPOSE_ADDR: 805306368,
    RECOMPOSE_ADDR: 822083584,
    GET_ADDR_FROM_MEMORY: 838860800,
    SET_BIT: 335544320,
    CLEAR_BIT: 352321536,
    PICK: 369098752,
    TRAP: 385875968,
    DUP: 402653184,
    SWAP: 419430400,
    CLEAR_FLAG_IMM: 436207616,
    SET_FLAG_IMM: 452984832,
    TEST_FLAG_IMM: 469762048,
    PULL_FLAGS_FROM_ALU: 486539264,
    PUSH_FLAGS_TO_ALU: 503316480,
    IO_IN: 536870912,
    IO_OUT: 553648128,
    ADD: 1073741824,
    SUB: 1107296256,
    CMP: 1140850688,
    AND: 1174405120,
    OR: 1207959552,
    TEST: 1241513984,
    XOR: 1275068416,
    SHL: 1342177280,
    SHR: 1375731712,
    MUL: 1610612736,
    DIV: 1644167168,
    MOD: 1677721600,
    SMUL: 1879048192,
    SDIV: 1912602624,
    SMOD: 1946157056
  };
  var TASK_FNS = new Array(256).fill(() => 0);
  [
    [TASKS.NOP, () => 0],
    [TASKS.GET_REGISTER_AND_PUSH, ({ stack, registerFile, arg }) => {
      push(stack, registerFile.getRegister(arg), registerFile.getSizeOfRegister(arg));
    }],
    [TASKS.POP_INTO_REGISTER, ({ stack, registerFile, arg }) => {
      registerFile.setRegister(arg, pop(stack));
    }],
    [TASKS.PUSH_BYTE, ({ stack, arg }) => {
      push(stack, arg, SIZE_BYTE);
    }],
    [TASKS.PUSH_WORD, ({ stack, arg }) => {
      push(stack, arg, SIZE_WORD);
    }],
    [TASKS.PUSH_ADDR, ({ stack, arg }) => {
      push(stack, arg, SIZE_ADDR);
    }],
    [TASKS.GET_BYTE_FROM_MEMORY, ({ stack, memory }) => {
      push(stack, memory.readByte(pop(stack)), SIZE_BYTE);
    }],
    [TASKS.GET_WORD_FROM_MEMORY, ({ stack, memory }) => {
      push(stack, memory.readWord(pop(stack)), SIZE_WORD);
    }],
    [TASKS.GET_ADDR_FROM_MEMORY, ({ stack, memory }) => {
      const addr = pop(stack);
      push(stack, memory.readWord(addr), SIZE_WORD);
      push(stack, memory.readWord(addr + 2), SIZE_WORD);
    }],
    [TASKS.POP_BYTE_INTO_MEMORY, ({ stack, memory }) => {
      const byte = pop(stack);
      const addr = pop(stack);
      memory.writeByte(addr, byte);
    }],
    [TASKS.POP_WORD_INTO_MEMORY, ({ stack, memory }) => {
      const word = pop(stack);
      const addr = pop(stack);
      memory.writeWord(addr, word);
    }],
    [TASKS.DECOMPOSE_WORD_TO_BYTES, ({ stack }) => {
      const word = pop(stack);
      push(stack, (word & 65280) >> 8, SIZE_BYTE);
      push(stack, word & 255, SIZE_BYTE);
    }],
    [TASKS.RECOMPOSE_BYTES_TO_WORD, ({ stack }) => {
      const s0 = pop(stack);
      const s1 = pop(stack);
      push(stack, s1 << 8 | s0, SIZE_WORD);
    }],
    [TASKS.DECOMPOSE_BYTE_TO_NIBBLE, ({ stack }) => {
      const byte = pop(stack);
      push(stack, (byte & 240) >> 4, SIZE_BYTE);
      push(stack, byte & 15, SIZE_BYTE);
    }],
    [TASKS.RECOMPOSE_NIBBLE_TO_BYTE, ({ stack }) => {
      const s0 = pop(stack);
      const s1 = pop(stack);
      push(stack, s1 << 4 | s0, SIZE_BYTE);
    }],
    [TASKS.DECOMPOSE_ADDR, ({ stack }) => {
      const addr = pop(stack);
      push(stack, addr >> 3, SIZE_WORD);
      push(stack, addr & 7, SIZE_WORD);
    }],
    [TASKS.RECOMPOSE_ADDR, ({ stack }) => {
      const lo = pop(stack);
      const hi = pop(stack);
      push(stack, (hi << 3) + lo, SIZE_ADDR);
    }],
    [TASKS.TRAP, ({ stack, ioBus }) => {
      const s0 = pop(stack) & 15;
      ioBus.irqServiceBus.value = s0;
      ioBus.irqSignalBus.signal();
    }],
    [TASKS.IO_IN, ({ stack, ioBus }) => {
      const s0 = pop(stack) & 255;
      ioBus.deviceSelectBus.value = (s0 & 240) >> 4;
      ioBus.addressSelectBus.value = s0 & 15;
      ioBus.commandBus.value = 0;
      ioBus.executeBus.signal();
      push(stack, ioBus.dataBus.value, SIZE_BYTE);
    }],
    [TASKS.IO_OUT, ({ stack, ioBus }) => {
      const s0 = pop(stack) & 255;
      const s1 = pop(stack) & 255;
      ioBus.deviceSelectBus.value = (s1 & 240) >> 4;
      ioBus.addressSelectBus.value = s1 & 15;
      ioBus.dataBus.value = s0;
      ioBus.commandBus.value = 1;
      ioBus.executeBus.signal();
    }],
    [TASKS.DUP, ({ stack }) => {
      const s0 = stack.pop();
      stack.push(s0);
      stack.push(s0);
    }],
    [TASKS.SWAP, ({ stack }) => {
      const s0 = stack.pop();
      const s1 = stack.pop();
      stack.push(s0);
      stack.push(s1);
    }],
    [TASKS.SET_BIT, ({ stack, arg }) => {
      const bit = 1 << arg;
      stack.push(stack.pop() | bit);
    }],
    [TASKS.CLEAR_BIT, ({ stack, arg }) => {
      const bit = ~(1 << arg);
      stack.push(stack.pop() & bit);
    }],
    [TASKS.PICK, ({ stack }) => {
      const s0 = pop(stack);
      const s1 = stack.pop();
      const s2 = stack.pop();
      stack.push(s0 !== 0 ? s2 : s1);
    }],
    [TASKS.SET_FLAG_IMM, ({ arg, registerFile }) => {
      const flags = registerFile.FLAGS;
      const bit = 1 << arg;
      registerFile.FLAGS = flags | bit;
    }],
    [TASKS.CLEAR_FLAG_IMM, ({ arg, registerFile }) => {
      const flags = registerFile.FLAGS;
      const bit = ~(1 << arg);
      registerFile.FLAGS = flags & bit;
    }],
    [TASKS.TEST_FLAG_IMM, ({ stack, arg, registerFile }) => {
      const flags = registerFile.FLAGS;
      const bit = 1 << arg;
      push(stack, (flags & bit) >> arg > 0 ? 1 : 0, SIZE_BYTE);
    }],
    [TASKS.PULL_FLAGS_FROM_ALU, ({ arg, alu, registerFile }) => {
      registerFile.FLAGS = registerFile.FLAGS & 240 | alu.flagsBus.data & arg;
    }],
    [TASKS.PUSH_FLAGS_TO_ALU, ({ arg, alu, registerFile }) => {
      alu.flagsBus.data = registerFile.FLAGS & 15 & arg;
    }]
  ].forEach(([command, fn]) => {
    const idx = command >>> 24;
    TASK_FNS[idx] = fn;
  });
  var makeArithOp = (command, eatReturn) => {
    return ({ arg, stack, alu, registerFile }) => {
      const [s0, sz0] = popWithSize(stack);
      const [s1, sz1] = popWithSize(stack);
      const retSize = sz1 > sz0 ? sz1 : sz0;
      alu.op1Bus.data = s1;
      alu.op2Bus.data = s0;
      alu.commandBus.data = retSize << 8 | sz1 << 6 | sz0 << 4 | command;
      alu.flagsBus.data = arg & FLAGS_PUSH_TO_ALU ? registerFile.FLAGS & 15 : 0;
      alu.executeBus.signal();
      if (arg & FLAGS_PULL_FROM_ALU) {
        registerFile.FLAGS = registerFile.FLAGS & 240 | alu.flagsBus.data;
        if (command === COMMANDS.SDIV || command === COMMANDS.DIV || command === COMMANDS.SMOD || command === COMMANDS.MOD) {
          if (s0 === 0) {
            registerFile.EXCEPTION = 1;
          }
        }
      }
      const ret = alu.retBus.data;
      if (!eatReturn)
        push(stack, ret, retSize);
    };
  };
  Object.entries(TASKS).forEach(([k, v]) => {
    if (v >= 1073741824) {
      let eatReturn = false;
      if (k.startsWith("CMP")) {
        k = k.replace("CMP", "SUB");
        eatReturn = true;
      }
      const op = k.split("_")[0];
      const command = COMMANDS[op];
      TASK_FNS[v >>> 24] = makeArithOp(command, eatReturn);
    }
  });
  var taskToHex = (n) => n.toString(16).padStart(8, "0");
  var TASK_MAP = new Map(Object.entries(TASKS).map(([k, v]) => [v, k]));
  var mapTask = (task) => {
    const opcode = opcodeFromTask(task);
    const operand = operandFromTask(task);
    const opcodeName = TASK_MAP.get(opcode);
    return `${taskToHex(task)} => ${taskToHex(opcode)}(${opcodeName}) ${taskToHex(operand)}`;
  };
  var executeTask = (task, { stack, alu, registerFile, ioBus, memory }) => {
    const opcode = opcodeFromTask(task);
    const operand = operandFromTask(task);
    TASK_FNS[opcode >>> 24]({ arg: operand, stack, alu, registerFile, ioBus, memory });
  };

  // src/isa/opcodes.js
  var taskCache = new Map();
  var equivCache = new Map();
  var SIZE_BYTE2 = SIZES.BYTE;
  var SIZE_WORD2 = SIZES.WORD;
  var SIZE_ADDR2 = SIZES.ADDR;
  function _constructArgs(instruction, operands) {
    const args = {};
    const argLocations = Object.entries(operands);
    let i, l, arg, msb, lsb, x, bit, v;
    for (i = 0, l = argLocations.length; i < l; i++) {
      [arg, [msb, lsb]] = argLocations[i];
      v = 0;
      for (x = msb; x >= lsb; x--) {
        bit = instruction & 1 << x ? 1 : 0;
        v = v << 1 | bit;
      }
      args[arg] = v;
    }
    return args;
  }
  function decodeToTasks(instruction, { operands, decode: decode2 }) {
    const cachedInst = taskCache.get(instruction);
    if (cachedInst)
      return cachedInst;
    const args = _constructArgs(instruction, operands);
    const tasks = decode2(args);
    taskCache.set(instruction, tasks);
    return tasks;
  }
  function decodeToTaskEquiv(instruction, { operands, equiv }) {
    const cachedInst = equivCache.get(instruction);
    let args, fn;
    if (cachedInst) {
      args = cachedInst.args;
      fn = cachedInst.fn;
    } else {
      args = _constructArgs(instruction, operands);
      fn = equiv.bind(void 0, args);
      equivCache.set(instruction, { args, fn });
    }
    return fn;
  }
  function decode(instruction, opcode, useEquiv = true) {
    if (opcode.equiv && useEquiv)
      return decodeToTaskEquiv(instruction, opcode);
    return decodeToTasks(instruction, opcode);
  }
  var aluOp = ({ alu, registerFile, command, op0, sz0, op1, sz1, flagHandling }) => {
    const retSize = sz1 > sz0 ? sz1 : sz0;
    alu.op1Bus.data = op0;
    alu.op2Bus.data = op1;
    alu.commandBus.data = retSize << 8 | sz0 << 6 | sz1 << 4 | command;
    alu.flagsBus.data = flagHandling & FLAGS_PUSH_TO_ALU ? registerFile.FLAGS & 15 : 0;
    alu.executeBus.signal();
    if (flagHandling & FLAGS_PULL_FROM_ALU) {
      registerFile.FLAGS = registerFile.FLAGS & 240 | alu.flagsBus.data;
      if (command === COMMANDS.SDIV || command === COMMANDS.DIV || command === COMMANDS.SMOD || command === COMMANDS.MOD) {
        if (op1 === 0) {
          registerFile.EXCEPTION = 1;
        }
      }
    }
    return alu.retBus.data;
  };
  var OPCODES = {};
  [
    ["fclr", "Clears Floating Point Unit", "0000_0000", {}, (_, { fpu }) => fpu.init()],
    ["fadd", "Add two FP numbers together", "0001_0000", {}, (_, { fpu }) => fpu.add()],
    ["fsub", "Subtract two FP numbers", "0001_0001", {}, (_, { fpu }) => fpu.sub()],
    ["fcmp", "Compare two FP numbers", "0001_0010", {}, (_, { fpu }) => fpu.sub()],
    ["fmul", "Multiply two FP numbers", "0001_0011", {}, (_, { fpu }) => fpu.mul()],
    ["fmod", "Return modulo of two FP numbers", "0001_0100", {}, (_, { fpu }) => fpu.mod()],
    ["fdiv", "Divide two FP numbers", "0001_0101", {}, (_, { fpu }) => fpu.div()],
    ["fpow", "Raise to power", "0001_0110", {}, (_, { fpu }) => fpu.pow()],
    ["fsqrt", "Square Root", "0001_0111", {}, (_, { fpu }) => fpu.sqrt()],
    ["fneg", "Negate FP Number", "0001_1000", {}, (_, { fpu }) => fpu.neg()],
    ["fexc", "Exchange top two FP numbers", "0001_1001", {}, (_, { fpu }) => fpu.swap()],
    ["fint", "Convert FP number to integer", "0001_1010", {}, (_, { fpu }) => fpu.int()],
    ["fabs", "Absolute Value of FP Number", "0001_1011", {}, (_, { fpu }) => fpu.abs()],
    ["fsin", "Sine", "0010_0000", {}, (_, { fpu }) => fpu.sin()],
    ["fcos", "Cosine", "0010_0001", {}, (_, { fpu }) => fpu.cos()],
    ["ftan", "Tangent", "0010_0010", {}, (_, { fpu }) => fpu.tan()],
    ["fasin", "Arc Sine", "0010_0100", {}, (_, { fpu }) => fpu.asin()],
    ["facos", "Arc Cosine", "0010_0101", {}, (_, { fpu }) => fpu.acos()],
    ["fatan", "Arc Tangent", "0010_0110", {}, (_, { fpu }) => fpu.atan()],
    ["fisnan", "Check if FP Number is NaN", "0011_0000", {}, (_, { fpu }) => fpu.isnan()],
    ["fisinf", "Check if FP Number is Infinte", "0011_0001", {}, (_, { fpu }) => fpu.isinf()],
    ["flog2", "Perform Log 2", "0011_0010", {}, (_, { fpu }) => fpu.log2()],
    ["flog10", "Perform Log 10", "0011_0011", {}, (_, { fpu }) => fpu.log10()],
    ["fld0", "Load zero constant", "0111_0000", {}, (_, { fpu }) => fpu.ld0()],
    ["fld1", "Load one constant", "0111_0001", {}, (_, { fpu }) => fpu.ld1()],
    ["flde", "Load e constant", "0111_0010", {}, (_, { fpu }) => fpu.e()],
    ["fldpi", "Load pi constant", "0111_0011", {}, (_, { fpu }) => fpu.pi()],
    ["fldr", "Load from register", "1000_0000", { r: [3, 0] }, ({ r }, { registerFile, fpu }) => fpu.push(registerFile.getRegister(r))],
    [
      "fldm",
      "Load from memory",
      "1000_0001",
      { b: [7, 4], r: [3, 0] },
      ({ b: b2, r }, { memory, registerFile, fpu }) => {
        const addr = (registerFile.getRegister(b2) << 3) + registerFile.getRegister(r);
        fpu.pushBytes([
          memory.readByte(addr + 0),
          memory.readByte(addr + 1),
          memory.readByte(addr + 2),
          memory.readByte(addr + 3),
          memory.readByte(addr + 4),
          memory.readByte(addr + 5),
          memory.readByte(addr + 6),
          memory.readByte(addr + 7)
        ]);
      }
    ],
    [
      "fldim",
      "Load from memory, indirect",
      "1000_0010",
      { b: [7, 4], r: [3, 0] },
      ({ b: b2, r }, { memory, registerFile, fpu }) => {
        let addr = (registerFile.getRegister(b2) << 3) + registerFile.getRegister(r);
        const bank = memory.readWord(addr);
        const offs = memory.readWord(addr + 2);
        addr = (bank << 3) + offs;
        fpu.pushBytes([
          memory.readByte(addr + 0),
          memory.readByte(addr + 1),
          memory.readByte(addr + 2),
          memory.readByte(addr + 3),
          memory.readByte(addr + 4),
          memory.readByte(addr + 5),
          memory.readByte(addr + 6),
          memory.readByte(addr + 7)
        ]);
      }
    ],
    ["fstr", "Store to register", "1000_0100", { r: [3, 0] }, ({ r }, { registerFile, fpu }) => registerFile.setRegister(r, fpu.pop())],
    [
      "fstm",
      "Store to memory",
      "1000_0101",
      { b: [7, 4], r: [3, 0] },
      ({ b: b2, r }, { memory, registerFile, fpu }) => {
        const bytes2 = fpu.popBytes();
        const addr = (registerFile.getRegister(b2) << 3) + registerFile.getRegister(r);
        for (let i = 0; i < 8; i++)
          memory.writeByte(addr + i, bytes2[i]);
      }
    ],
    [
      "fstim",
      "Store to memory, indirect",
      "1000_0110",
      { b: [7, 4], r: [3, 0] },
      ({ b: b2, r }, { memory, registerFile, fpu }) => {
        const bytes2 = fpu.popBytes();
        let addr = (registerFile.getRegister(b2) << 3) + registerFile.getRegister(r);
        const bank = memory.readWord(addr);
        const offs = memory.readWord(addr + 2);
        addr = (bank << 3) + offs;
        for (let i = 0; i < 8; i++)
          memory.writeByte(addr + i, bytes2[i]);
      }
    ]
  ].forEach(([asm, description, pattern, operands, equiv]) => {
    OPCODES[asm] = {
      asm,
      pattern: `1010_1110 ${pattern}`,
      operands,
      description,
      flags: "xdshncvz",
      equiv
    };
  });
  OPCODES["nop"] = {
    asm: "nop",
    pattern: "0000_0000",
    operands: {},
    description: "Performs no operation",
    flags: "xdshncvz",
    equiv: () => {
    },
    decode: () => [
      TASKS.NOP
    ]
  };
  OPCODES["halt"] = {
    asm: "halt",
    pattern: "0011_1110",
    operands: {},
    description: "Halts the processor until an interrupt occurs",
    flags: "xdshncvz",
    equiv: (_, { registerFile }) => registerFile.SINGLE_STEP = 1,
    decode: () => [
      TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP
    ]
  };
  OPCODES["wait"] = {
    asm: "wait $r",
    pattern: "1010_1111 bbbb_bbbb",
    operands: { b: [7, 0] },
    description: "[TODO] Waits until a specific interrupt occurs",
    flags: "xdshncvz",
    equiv: (_, { registerFile }) => registerFile.SINGLE_STEP = 1,
    decode: ({ b: b2 = 0 } = {}) => [
      TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP
    ]
  };
  OPCODES["brk"] = {
    asm: "brk",
    pattern: "0011_1111",
    operands: {},
    description: "Halts the processor if a debugger is attached",
    flags: "xdshncvz",
    equiv: (_, { registerFile }) => {
      registerFile.SINGLE_STEP = 1;
      registerFile.INTERRUPT_DISABLE = 1;
    },
    decode: () => [
      TASKS.SET_FLAG_IMM | FLAGS_INDEX.INTERRUPT_DISABLE,
      TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP
    ]
  };
  OPCODES["not"] = {
    asm: "not $r",
    pattern: "0000_1001 0000_rrrr",
    operands: { r: [3, 0] },
    description: "!reg",
    flags: "xdshNcvZ",
    equiv: ({ r }, { alu, registerFile }) => {
      const mask2 = r & 1 ? 255 : 65535;
      const sign = r & 1 ? 128 : 32768;
      const v = ~registerFile.getRegister(r) & mask2;
      registerFile.setRegister(r, v);
      registerFile.NEGATIVE = v & sign ? 1 : 0;
      registerFile.ZERO = v === 0 ? 1 : 0;
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | r,
      (r & 1 ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | (r & 1 ? 255 : 65535),
      TASKS.XOR | FLAGS_PULL_FROM_ALU,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["neg"] = {
    asm: "neg $r",
    pattern: "0000_1001 0001_rrrr",
    operands: { r: [3, 0] },
    description: "-1 * reg",
    flags: "xdshNcvZ",
    equiv: ({ r }, { alu, registerFile }) => {
      const mask2 = r & 1 ? 255 : 65535;
      const sign = r & 1 ? 128 : 32768;
      const v = -registerFile.getRegister(r) & mask2;
      registerFile.setRegister(r, v);
      registerFile.NEGATIVE = v & sign ? 1 : 0;
      registerFile.ZERO = v === 0 ? 1 : 0;
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | r,
      (r & 1 ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | (r & 1 ? 255 : 65535),
      TASKS.XOR,
      (r & 1 ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | 1,
      TASKS.ADD | FLAGS_PULL_FROM_ALU,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["exc"] = {
    asm: "exc $r",
    pattern: "0000_1001 0010_rrrr",
    operands: { r: [3, 0] },
    description: "Swaps high and low regions of the register",
    flags: "xdshNcvZ",
    equiv: ({ r }, { alu, registerFile }) => {
      const mask2 = r & 1 ? 255 : 65535;
      const sign = r & 1 ? 128 : 32768;
      let v = registerFile.getRegister(r);
      if (r & 1) {
        v = (v & 15) << 4 | (v & 240) >> 4;
      } else {
        v = (v & 255) << 8 | (v & 65280) >> 8;
      }
      registerFile.setRegister(r, v);
      registerFile.NEGATIVE = v & sign ? 1 : 0;
      registerFile.ZERO = v === 0 ? 1 : 0;
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | r,
      r & 1 ? TASKS.DECOMPOSE_BYTE_TO_NIBBLE : TASKS.DECOMPOSE_WORD_TO_BYTES,
      TASKS.PUSH_WORD | (r & 1 ? 4 : 8),
      TASKS.SHL,
      TASKS.OR | FLAGS_PULL_FROM_ALU,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["swap_ds"] = {
    asm: "swap $d, $s",
    pattern: "0000_1110 dddd_ssss",
    operands: { s: [3, 0], d: [7, 4] },
    description: "Swaps register values",
    flags: "xdshncvz",
    equiv: ({ d, s }, { registerFile }) => {
      const dV = registerFile.getRegister(d);
      const sV = registerFile.getRegister(s);
      registerFile.setRegister(d, sV);
      registerFile.setRegister(s, dV);
    },
    decode: ({ d = 0, s = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | d,
      TASKS.GET_REGISTER_AND_PUSH | s,
      TASKS.POP_INTO_REGISTER | d,
      TASKS.POP_INTO_REGISTER | s
    ]
  };
  OPCODES["mov_ds"] = {
    asm: "mov $d, $s",
    pattern: "0000_1111 dddd_ssss",
    operands: { s: [3, 0], d: [7, 4] },
    description: "Moves value of source to dest",
    flags: "xdshncvz",
    equiv: ({ d, s }, { registerFile }) => {
      const sV = registerFile.getRegister(s);
      registerFile.setRegister(d, sV);
    },
    decode: ({ d = 0, s = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | s,
      TASKS.POP_INTO_REGISTER | d
    ]
  };
  [
    ["inc", TASKS.ADD, `1100_rrrr`, COMMANDS.ADD],
    ["dec", TASKS.SUB, `1101_rrrr`, COMMANDS.SUB]
  ].forEach(([opcode, task, pattern, command]) => {
    OPCODES[`${opcode}_r`] = {
      asm: `${opcode} $r`,
      pattern,
      operands: { r: [3, 0] },
      description: `${opcode}rements register`,
      flags: "xdshNCVZ",
      equiv: ({ r }, { registerFile, alu }) => {
        registerFile.setRegister(r, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(r),
          sz0: r & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: 1,
          sz1: r & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          flagHandling: FLAGS_PULL_FROM_ALU
        }));
      },
      decode: ({ r = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | r,
        (r & 1 ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | 1,
        task | FLAGS_PULL_FROM_ALU,
        TASKS.POP_INTO_REGISTER | r
      ]
    };
  });
  [
    ["set", TASKS.SET_FLAG_IMM, `1011_0fff`],
    ["clr", TASKS.CLEAR_FLAG_IMM, `1011_1fff`]
  ].forEach(([opcode, task, pattern]) => {
    OPCODES[`${opcode}_f`] = {
      asm: `${opcode} $f`,
      pattern,
      operands: { f: [2, 0] },
      description: `${opcode}s specified flag`,
      flags: "XDSHNCVZ",
      equiv: task === TASKS.SET_FLAG_IMM ? ({ f }, { registerFile }) => registerFile.FLAGS |= 1 << f : ({ f }, { registerFile }) => registerFile.FLAGS &= ~(1 << f),
      decode: ({ f = 0 } = {}) => [
        task | f
      ]
    };
  });
  [
    ["add", TASKS.ADD, "0000_0001", "0100_1dd1", "0100_1dd0", COMMANDS.ADD, FLAGS_PUSH_AND_PULL, true],
    ["sub", TASKS.SUB, "0000_0010", "0101_0dd1", "0101_0dd0", COMMANDS.SUB, FLAGS_PUSH_AND_PULL, true],
    ["cmp", TASKS.CMP, "0000_0011", "0101_1dd1", "0101_1dd0", COMMANDS.SUB, FLAGS_PULL_FROM_ALU, false],
    ["and", TASKS.AND, "0000_0100", "0110_0dd1", "0110_0dd0", COMMANDS.AND, FLAGS_PUSH_AND_PULL, true],
    ["or", TASKS.OR, "0000_0101", "0110_1dd1", "0110_1dd0", COMMANDS.OR, FLAGS_PUSH_AND_PULL, true],
    ["test", TASKS.AND, "0000_0110", "0111_0dd1", "0111_0dd0", COMMANDS.AND, FLAGS_PULL_FROM_ALU, false],
    ["xor", TASKS.XOR, "0000_0111", "0111_1dd1", "0111_1dd0", COMMANDS.XOR, FLAGS_PUSH_AND_PULL, true]
  ].forEach(([opcode, task, ds, db, dw, command, flagHandling, storeReturn], idx) => {
    OPCODES[`${opcode}_ds`] = {
      asm: `${opcode} $d, $s`,
      pattern: `${ds} dddd_ssss`,
      operands: { s: [3, 0], d: [7, 4] },
      description: `${opcode}s dest and source, storing result in dest`,
      flags: idx < 3 ? "xdshNCVZ" : "xdshNcvZ",
      equiv: !storeReturn ? ({ d, s }, { registerFile, alu }) => {
        aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d),
          sz0: d & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: registerFile.getRegister(s),
          sz1: s & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          flagHandling
        });
      } : ({ d, s }, { registerFile, alu }) => {
        registerFile.setRegister(d, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d),
          sz0: d & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: registerFile.getRegister(s),
          sz1: s & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          flagHandling
        }));
      },
      decode: !storeReturn ? ({ d = 0, s = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d,
        TASKS.GET_REGISTER_AND_PUSH | s,
        task | FLAGS_PULL_FROM_ALU
      ] : ({ d = 0, s = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d,
        TASKS.GET_REGISTER_AND_PUSH | s,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | d
      ]
    };
    OPCODES[`${opcode}_db`] = {
      asm: `${opcode} $d, $b`,
      pattern: `${db} bbbb_bbbb`,
      operands: { d: [10, 9], b: [7, 0] },
      description: `${opcode}s dest and imm8, storing result in dest`,
      flags: idx < 3 ? "xdshNCVZ" : "xdshNcvZ",
      equiv: !storeReturn ? ({ d, b: b2 }, { registerFile, alu }) => {
        aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d * 2 + 1),
          sz0: SIZE_BYTE2,
          op1: b2,
          sz1: SIZE_BYTE2,
          flagHandling
        });
      } : ({ d, b: b2 }, { registerFile, alu }) => {
        registerFile.setRegister(d * 2 + 1, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d * 2 + 1),
          sz0: SIZE_BYTE2,
          op1: b2,
          sz1: SIZE_BYTE2,
          flagHandling
        }));
      },
      decode: !storeReturn ? ({ d = 0, b: b2 = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | (d << 1 | 1),
        TASKS.PUSH_BYTE | b2,
        task | FLAGS_PULL_FROM_ALU
      ] : ({ d = 0, b: b2 = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | (d << 1 | 1),
        TASKS.PUSH_BYTE | b2,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | (d << 1 | 1)
      ]
    };
    OPCODES[`${opcode}_dw`] = {
      asm: `${opcode} $d, $w`,
      pattern: `${dw} wwww_wwww wwww_wwww`,
      operands: { d: [18, 17], w: [15, 0] },
      description: `${opcode}s dest and imm16, storing result in dest`,
      flags: idx < 3 ? "xdshNCVZ" : "xdshNcvZ",
      equiv: !storeReturn ? ({ d, w }, { registerFile, alu }) => {
        aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d * 2),
          sz0: SIZE_WORD2,
          op1: w,
          sz1: SIZE_WORD2,
          flagHandling
        });
      } : ({ d, w }, { registerFile, alu }) => {
        registerFile.setRegister(d * 2, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d * 2),
          sz0: SIZE_WORD2,
          op1: w,
          sz1: SIZE_WORD2,
          flagHandling
        }));
      },
      decode: !storeReturn ? ({ d = 0, w = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d << 1,
        TASKS.PUSH_WORD | w,
        task | FLAGS_PULL_FROM_ALU
      ] : ({ d = 0, w = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d << 1,
        TASKS.PUSH_WORD | w,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | d << 1
      ]
    };
  });
  OPCODES["trap_b"] = {
    asm: "trap $b",
    pattern: "0000_1000 bbbb_bbbb",
    operands: { b: [7, 0] },
    description: "Executes the specified trap",
    flags: "xdshncvz",
    equiv: ({ r }, { registerFile, memory }) => {
      OPCODES["br_call_f"].equiv({ w: 1, i: 1, m: 1, a: b }, { registerFile, memory });
    },
    decode: ({ b: b2 = 0 } = {}) => [
      ...OPCODES["br_call_f"].decode({ w: 1, i: 1, m: 1, a: b2 })
    ]
  };
  OPCODES["trap_r"] = {
    asm: "trap $r",
    pattern: "0100_0rrr",
    operands: { r: [2, 0] },
    description: "[TODO] Executes the specified trap in the given register",
    flags: "xdshncvz",
    equiv: ({ r }, { registerFile, memory }) => {
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.NOP
    ]
  };
  OPCODES["enter_n"] = {
    asm: "enter $n",
    pattern: "0011_1000 nnnn_nnnn",
    operands: { n: [7, 0] },
    description: "Enters a stack frame",
    flags: "xdshncvz",
    equiv: ({ n }, { registerFile, memory }) => {
      OPCODES["push_r"].equiv({ r: REGISTER_INDEX.BP }, { registerFile, memory });
      OPCODES["mov_ds"].equiv({ d: REGISTER_INDEX.BP, s: REGISTER_INDEX.SP }, { registerFile, memory });
      registerFile.SP -= n;
    },
    decode: ({ n = 0 } = {}) => [
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.BP }),
      ...OPCODES["mov_ds"].decode({ d: REGISTER_INDEX.BP, s: REGISTER_INDEX.SP }),
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
      TASKS.PUSH_WORD | n,
      TASKS.SUB,
      TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP
    ]
  };
  OPCODES["exit_n"] = {
    asm: "exit $n",
    pattern: "0011_1001 nnnn_nnnn",
    operands: { n: [7, 0] },
    description: "Leaves a stack frame",
    flags: "xdshncvz",
    equiv: ({ n }, { registerFile, memory }) => {
      registerFile.SP += n;
      OPCODES["pop_r"].equiv({ r: REGISTER_INDEX.BP }, { registerFile, memory });
    },
    decode: ({ n = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
      TASKS.PUSH_WORD | n,
      TASKS.ADD,
      TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.BP })
    ]
  };
  [
    ["shl", TASKS.SHL, "0000_1011 dddd_ssss", COMMANDS.SHL],
    ["shr", TASKS.SHR, "0000_1101 dddd_ssss", COMMANDS.SHR],
    ["mul", TASKS.MUL, "1010_1000 dddd_ssss", COMMANDS.MUL],
    ["div", TASKS.DIV, "1010_1001 dddd_ssss", COMMANDS.DIV],
    ["mod", TASKS.MOD, "1010_1010 dddd_ssss", COMMANDS.MOD],
    ["smul", TASKS.SMUL, "1010_1011 dddd_ssss", COMMANDS.SMUL],
    ["sdiv", TASKS.SDIV, "1010_1100 dddd_ssss", COMMANDS.SDIV],
    ["smod", TASKS.SMOD, "1010_1101 dddd_ssss", COMMANDS.SMOD]
  ].forEach(([opcode, task, pattern, command], idx) => {
    OPCODES[`${opcode}_ds`] = {
      asm: `${opcode} $d, $s`,
      pattern,
      operands: { s: [3, 0], d: [7, 4] },
      description: `${opcode} dest and source, storing result in dest`,
      flags: idx < 2 ? "xdshNCvZ" : (opcode.indexOf("mul") > -1 ? "x" : "X") + "dshNCVZ",
      equiv: ({ d = 0, s = 0 } = {}, { registerFile, alu }) => {
        registerFile.setRegister(d, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d),
          sz0: d & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: registerFile.getRegister(s),
          sz1: s & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          flagHandling: FLAGS_PUSH_AND_PULL
        }));
      },
      decode: ({ d = 0, s = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d,
        TASKS.GET_REGISTER_AND_PUSH | s,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | d
      ]
    };
  });
  [
    ["shl", TASKS.SHL, "0000_1010 rrrr_nnnn", COMMANDS.SHL],
    ["shr", TASKS.SHR, "0000_1100 rrrr_nnnn", COMMANDS.SHR]
  ].forEach(([opcode, task, pattern, command]) => {
    OPCODES[`${opcode}_rn`] = {
      asm: `${opcode} $r, $n`,
      pattern,
      operands: { n: [3, 0], r: [7, 4] },
      description: `${opcode} reg by specified bits`,
      flags: "xdshNCvZ",
      equiv: ({ r, n }, { registerFile, alu }) => {
        registerFile.setRegister(r, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(r),
          sz0: r & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: n,
          sz1: SIZE_BYTE2,
          flagHandling: FLAGS_PUSH_AND_PULL
        }));
      },
      decode: ({ r = 0, n = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | r,
        TASKS.PUSH_BYTE | n,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | r
      ]
    };
  });
  OPCODES["in_rp"] = {
    asm: "in $r, $p",
    pattern: "0011_0000 rrrr_0000 pppppppp",
    operands: { r: [15, 12], p: [7, 0] },
    description: "Reads a value from port and stores in reg",
    flags: "xdshncvz",
    equiv: ({ r, p }, { registerFile, ioBus }) => {
      ioBus.deviceSelectBus.value = (p & 240) >> 4;
      ioBus.addressSelectBus.value = p & 15;
      ioBus.commandBus.value = 0;
      ioBus.executeBus.signal();
      registerFile.setRegister(r, ioBus.dataBus.value);
    },
    decode: ({ r = 0, p = 0 } = {}) => [
      TASKS.PUSH_BYTE | p,
      TASKS.IO_IN,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["out_rp"] = {
    asm: "out $r, $p",
    pattern: "0011_0001 rrrr_0000 pppppppp",
    operands: { r: [15, 12], p: [7, 0] },
    description: "Writes value in reg to port",
    flags: "xdshncvz",
    equiv: ({ r, p }, { registerFile, ioBus }) => {
      ioBus.deviceSelectBus.value = (p & 240) >> 4;
      ioBus.addressSelectBus.value = p & 15;
      ioBus.dataBus.value = registerFile.getRegister(r);
      ioBus.commandBus.value = 1;
      ioBus.executeBus.signal();
    },
    decode: ({ r = 0, p = 0 } = {}) => [
      TASKS.PUSH_BYTE | p,
      TASKS.GET_REGISTER_AND_PUSH | r,
      TASKS.IO_OUT
    ]
  };
  OPCODES["ld_dw"] = {
    asm: "ld $d, $w",
    pattern: "0001_ddd0 0000_0000 wwww_wwww wwww_wwww",
    operands: { d: [27, 25], w: [15, 0] },
    description: "Loads an immediate word into dest",
    flags: "xdshncvz",
    equiv: ({ d, w }, { registerFile }) => {
      registerFile.setRegister(d * 2, w);
    },
    decode: ({ d = 0, w = 0 } = {}) => [
      TASKS.PUSH_WORD | w,
      TASKS.POP_INTO_REGISTER | d << 1
    ]
  };
  OPCODES["ld_db"] = {
    asm: "ld $d, $b",
    pattern: "0001_ddd1 0000_0000 bbbb_bbbb",
    operands: { d: [19, 17], b: [7, 0] },
    description: "Loads an immediate byte into dest",
    flags: "xdshncvz",
    equiv: ({ d, b: b2 }, { registerFile }) => {
      registerFile.setRegister(d * 2 + 1, b2);
    },
    decode: ({ d = 0, b: b2 = 0 } = {}) => [
      TASKS.PUSH_BYTE | b2,
      TASKS.POP_INTO_REGISTER | (d << 1 | 1)
    ]
  };
  var calcAddress = ({ m, i, x, y, a }, { registerFile, memory }) => {
    let addr = a;
    if (m === 2)
      addr = addr + registerFile.BP & 65535;
    if (m === 3)
      addr = addr + (registerFile.D << 3);
    if (x === 1)
      addr += registerFile.X;
    if (i === 1)
      addr = (memory.readWord(addr) << 3) + memory.readWord(addr + 2);
    if (y === 1)
      addr += registerFile.Y;
    return addr & 524287;
  };
  var addressingTasks = ({ m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [
    ...m === 2 ? [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.BP,
      TASKS.ADD,
      TASKS.PUSH_WORD | 65535,
      TASKS.AND
    ] : m === 3 ? [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.D,
      TASKS.PUSH_WORD | 0,
      TASKS.RECOMPOSE_ADDR,
      TASKS.ADD
    ] : [],
    ...x === 1 ? [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.X,
      TASKS.ADD
    ] : [],
    ...i === 1 ? [
      TASKS.GET_ADDR_FROM_MEMORY,
      TASKS.RECOMPOSE_ADDR
    ] : [],
    ...y === 1 ? [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.Y,
      TASKS.ADD
    ] : []
  ];
  OPCODES["ld"] = {
    asm: "ld $d, $a $x $y $m:$i",
    pattern: "0001_dddd mmix_yaaa aaaa_aaaa aaaa_aaaa",
    operands: { d: [27, 24], m: [23, 22], i: [21, 21], x: [20, 20], y: [19, 19], a: [18, 0] },
    description: "Loads a value from memory",
    flags: "xdshncvz",
    equiv: ({ d, m, i, x, y, a }, { registerFile, memory }) => {
      if (d & 1)
        registerFile.setRegister(d, memory.readByte(calcAddress({ m, i, x, y, a }, { registerFile, memory })));
      else
        registerFile.setRegister(d, memory.readWord(calcAddress({ m, i, x, y, a }, { registerFile, memory })));
    },
    decode: ({ d = 0, m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [
      TASKS.PUSH_ADDR | a,
      ...addressingTasks({ m, i, x, y, a }),
      d & 1 ? TASKS.GET_BYTE_FROM_MEMORY : TASKS.GET_WORD_FROM_MEMORY,
      TASKS.POP_INTO_REGISTER | d
    ]
  };
  OPCODES["st"] = {
    asm: "st $a, $s $x $y $m:$i",
    pattern: "0010_ssss mmix_yaaa aaaa_aaaa aaaa_aaaa",
    operands: { s: [27, 24], m: [23, 22], i: [21, 21], x: [20, 20], y: [19, 19], a: [18, 0] },
    description: "Stores a value to memory",
    flags: "xdshncvz",
    equiv: ({ s, m, i, x, y, a }, { registerFile, memory }) => {
      const data = registerFile.getRegister(s);
      if (s & 1)
        memory.writeByte(calcAddress({ m, i, x, y, a }, { registerFile, memory }), data);
      else
        memory.writeWord(calcAddress({ m, i, x, y, a }, { registerFile, memory }), data);
    },
    decode: ({ s = 0, m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [
      TASKS.PUSH_ADDR | a,
      ...addressingTasks({ m, i, x, y, a }),
      TASKS.GET_REGISTER_AND_PUSH | s,
      s & 1 ? TASKS.POP_BYTE_INTO_MEMORY : TASKS.POP_WORD_INTO_MEMORY
    ]
  };
  OPCODES["push_r"] = {
    asm: `push $r`,
    pattern: "1110_rrrr",
    operands: { r: [3, 0] },
    description: "Push the register on stack",
    flags: "xdshncvz",
    equiv: ({ r }, { registerFile, memory }) => {
      registerFile.SP -= r & 1 ? 1 : 2;
      if (r & 1)
        memory.writeByte(registerFile.SP, registerFile.getRegister(r));
      else
        memory.writeWord(registerFile.SP, registerFile.getRegister(r));
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
      TASKS.PUSH_WORD | (r & 1 ? 1 : 2),
      TASKS.SUB,
      TASKS.DUP,
      TASKS.GET_REGISTER_AND_PUSH | r,
      r & 1 ? TASKS.POP_BYTE_INTO_MEMORY : TASKS.POP_WORD_INTO_MEMORY,
      TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP
    ]
  };
  OPCODES["pop_r"] = {
    asm: `pop $r`,
    pattern: "1111_rrrr",
    operands: { r: [3, 0] },
    description: "Pop top of stack into register",
    flags: "xdshncvz",
    equiv: ({ r }, { registerFile, memory }) => {
      let data;
      if (r & 1)
        data = memory.readByte(registerFile.SP);
      else
        data = memory.readWord(registerFile.SP);
      registerFile.SP += r & 1 ? 1 : 2;
      registerFile.setRegister(r, data);
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
      TASKS.DUP,
      TASKS.PUSH_WORD | (r & 1 ? 1 : 2),
      TASKS.ADD,
      TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,
      r & 1 ? TASKS.GET_BYTE_FROM_MEMORY : TASKS.GET_WORD_FROM_MEMORY,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["pushall"] = {
    asm: `pushall`,
    pattern: "1010_0000",
    operands: {},
    description: "Pushes SP, A, B, C, D, X, Y, and BP",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.SP }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.A }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.B }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.C }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.D }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.X }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.Y }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.BP }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.SP }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.A }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.B }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.C }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.D }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.X }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.Y }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.BP })
    ]
  };
  OPCODES["popall"] = {
    asm: `popall`,
    pattern: "1010_0001",
    operands: {},
    description: "Reverse of pushall",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.BP }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.Y }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.X }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.D }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.C }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.B }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.A }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.SP }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.BP }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.Y }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.X }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.D }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.C }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.B }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.A }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.SP })
    ]
  };
  OPCODES["pushf"] = {
    asm: `pushf`,
    pattern: "1010_0010",
    operands: {},
    description: "Push flags onto stack",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.STATUS }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.STATUS })
    ]
  };
  OPCODES["popf"] = {
    asm: `popf`,
    pattern: "1010_0011",
    operands: {},
    description: "Pops flags from stack",
    flags: "XDSHNCVZ",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.STATUS }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.STATUS })
    ]
  };
  OPCODES["pushmm"] = {
    asm: `pushmm`,
    pattern: "1010_0100",
    operands: {},
    description: "Push memory map register to stack",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.MM }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.MM })
    ]
  };
  OPCODES["popmm"] = {
    asm: `popmm`,
    pattern: "1010_0101",
    operands: {},
    description: "Pops value on stack into memory map register",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.MM }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.MM })
    ]
  };
  OPCODES["ret"] = {
    asm: `ret`,
    pattern: "1010_0111",
    operands: {},
    description: "Return from subroutine",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.PC }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.PC })
    ]
  };
  [
    ["brs_calls_f", "1001_nfff mmix_yuw1 aaaa_aaaa", 8],
    ["br_call_f", "1001_nfff mmix_yuw0 aaaa_aaaa aaaa_aaaa", 0]
  ].forEach(([opcode, pattern, offset]) => {
    OPCODES[opcode] = {
      asm: `${opcode} $n $f $m $i $x $y $u $w $a`,
      pattern,
      operands: {
        n: [27 - offset, 27 - offset],
        f: [26 - offset, 24 - offset],
        m: [23 - offset, 22 - offset],
        i: [21 - offset, 21 - offset],
        x: [20 - offset, 20 - offset],
        y: [19 - offset, 19 - offset],
        u: [18 - offset, 18 - offset],
        w: [17 - offset, 17 - offset],
        s: [16 - offset, 16 - offset],
        a: [15 - offset, 0]
      },
      description: "Conditional branch/call to address (U=unconditional; N=Not; W=Call)",
      flags: "xdshncvz",
      equiv: ({ n, f, m, i, x, y, u, w, s, a }, { registerFile, memory }) => {
        if (w === 1)
          OPCODES["push_r"].equiv({ r: REGISTER_INDEX.PC }, { registerFile, memory });
        let addr = s === 0 ? a : ((a & 128) > 0 ? 65280 : 0) | a;
        if (m === 0)
          addr = addr + registerFile.PC & 65535;
        addr = calcAddress({ m, i, x, y, a: addr }, { registerFile, memory });
        if (m !== 0)
          addr = memory.readWord(addr);
        if (u === 1) {
          switch (f) {
            case 0:
              registerFile.PC = addr;
              break;
            case 2:
              if (n === 0 && registerFile.NEGATIVE !== registerFile.OVERFLOW || n === 1 && registerFile.CARRY)
                registerFile.PC = addr;
              break;
            case 3:
              if (n === 0 && (registerFile.NEGATIVE !== registerFile.OVERFLOW || registerFile.ZERO) || n === 1 && (registerFile.CARRY || registerFile.ZERO))
                registerFile.PC = addr;
              break;
            case 4:
              if (n === 0 && registerFile.NEGATIVE === registerFile.OVERFLOW && !registerFile.ZERO || n === 1 && (!registerFile.CARRY && !registerFile.ZERO))
                registerFile.PC = addr;
              break;
            case 5:
              if (n === 0 && registerFile.NEGATIVE === registerFile.OVERFLOW && registerFile.ZERO || n === 1 && (!registerFile.CARRY || registerFile.ZERO))
                registerFile.PC = addr;
              break;
          }
        } else {
          let flagValue = registerFile.FLAGS & 1 << f ? 1 : 0;
          if (n === 1)
            flagValue = 1 - flagValue;
          if (flagValue === 1)
            registerFile.PC = addr;
        }
      },
      decode: ({ n = 0, f = 0, m = 0, i = 0, x = 0, y = 0, u = 0, w = 0, s = 0, a = 0 } = {}) => [
        ...w === 1 ? [
          TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
          TASKS.PUSH_WORD | 2,
          TASKS.SUB,
          TASKS.DUP,
          TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,
          TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,
          TASKS.POP_WORD_INTO_MEMORY
        ] : [],
        ...s === 0 ? [
          TASKS.PUSH_WORD | a
        ] : [
          TASKS.PUSH_WORD | (((a & 128) > 0 ? 65280 : 0) | a)
        ],
        ...m === 0 ? [
          TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,
          TASKS.ADD
        ] : [],
        ...addressingTasks({ m, i, x, y, a }),
        ...m !== 0 ? [
          TASKS.GET_WORD_FROM_MEMORY
        ] : [],
        ...u === 1 ? [
          TASKS.POP_INTO_REGISTER | REGISTER_INDEX.PC
        ] : [
          TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,
          n === 1 ? TASKS.SWAP : TASKS.NOP,
          TASKS.TEST_FLAG_IMM | f,
          TASKS.PICK,
          TASKS.POP_INTO_REGISTER | REGISTER_INDEX.PC
        ]
      ]
    };
  });
  [
    ["loops_r", "1000_rrrr mmix_y..1 aaaa_aaaa", 8],
    ["loop_r", "1000_rrrr mmix_y..0 aaaa_aaaa aaaa_aaaa", 0]
  ].forEach(([opcode, pattern, offset]) => {
    OPCODES[opcode] = {
      asm: `${opcode} $r $m $i $x $y $a`,
      pattern,
      operands: {
        r: [27 - offset, 24 - offset],
        m: [23 - offset, 22 - offset],
        i: [21 - offset, 21 - offset],
        x: [20 - offset, 20 - offset],
        y: [19 - offset, 19 - offset],
        s: [16 - offset, 16 - offset],
        a: [15 - offset, 0]
      },
      description: "Decrements register and branches if carry is not set",
      flags: "xdshncvz",
      equiv: opcode === "loops_r" ? ({ r, m, i, x, y, s, a }, { registerFile, memory, alu }) => {
        OPCODES["dec_r"].equiv({ r }, { registerFile, memory, alu }), OPCODES["brs_calls_f"].equiv({ n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a }, { registerFile, memory });
      } : ({ r, m, i, x, y, s, a }, { registerFile, memory, alu }) => {
        OPCODES["dec_r"].equiv({ r }, { registerFile, memory, alu }), OPCODES["br_call_f"].equiv({ n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a }, { registerFile, memory });
      },
      decode: opcode === "loops_r" ? ({ r = 0, m = 0, i = 0, x = 0, y = 0, s = 0, a = 0 } = {}) => [
        ...OPCODES["dec_r"].decode({ r }),
        ...OPCODES["brs_calls_f"].decode({ n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a })
      ] : ({ r = 0, m = 0, i = 0, x = 0, y = 0, s = 0, a = 0 } = {}) => [
        ...OPCODES["dec_r"].decode({ r }),
        ...OPCODES["br_call_f"].decode({ n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a })
      ]
    };
  });

  // src/isa/decodeInstruction.js
  var INVALID_INSTRUCTION = {
    size: 0,
    tasks: null
  };
  var INVALID_DECODE = {
    size: 0,
    opcode: null,
    instruction: 0
  };
  var opMap = [
    null,
    new Map(),
    new Map(),
    new Map(),
    new Map()
  ];
  function _decodeInstruction(bytes2) {
    let complete = false;
    let instruction = 0;
    let byte = 0;
    let size = 0;
    let idx = 0;
    let opcode;
    let op, p1;
    while (!complete) {
      byte = bytes2[idx];
      idx += 1;
      if (byte === void 0) {
        return INVALID_DECODE;
      }
      instruction = instruction << 8 | byte;
      size = idx;
      if (size > 4) {
        return INVALID_DECODE;
      }
      op = instruction >> (size - 1 << 3) & 255;
      if (size === 1) {
        if (op === 0) {
          opcode = OPCODES.nop;
        }
        if (op === 62) {
          opcode = OPCODES.halt;
        }
        if (op === 63) {
          opcode = OPCODES.brk;
        }
        if (op === 160) {
          opcode = OPCODES.pushall;
        }
        if (op === 161) {
          opcode = OPCODES.popall;
        }
        if (op === 162) {
          opcode = OPCODES.pushf;
        }
        if (op === 163) {
          opcode = OPCODES.popf;
        }
        if (op === 164) {
          opcode = OPCODES.pushmm;
        }
        if (op === 165) {
          opcode = OPCODES.popmm;
        }
        if (op === 167) {
          opcode = OPCODES.ret;
        }
        if (op >= 64 && op <= 71) {
          opcode = OPCODES.trap_r;
        }
        if (op >= 176 && op <= 183) {
          opcode = OPCODES.set_f;
        }
        if (op >= 184 && op <= 191) {
          opcode = OPCODES.clr_f;
        }
        if (op >= 192 && op <= 207) {
          opcode = OPCODES.inc_r;
        }
        if (op >= 208 && op <= 223) {
          opcode = OPCODES.dec_r;
        }
        if (op >= 224 && op <= 239) {
          opcode = OPCODES.push_r;
        }
        if (op >= 240 && op <= 255) {
          opcode = OPCODES.pop_r;
        }
      }
      p1 = size > 1 ? instruction >> (size - 2 << 3) & 255 : 0;
      if (size === 2) {
        if (op === 1) {
          opcode = OPCODES.add_ds;
        }
        if (op === 2) {
          opcode = OPCODES.sub_ds;
        }
        if (op === 3) {
          opcode = OPCODES.cmp_ds;
        }
        if (op === 4) {
          opcode = OPCODES.and_ds;
        }
        if (op === 5) {
          opcode = OPCODES.or_ds;
        }
        if (op === 6) {
          opcode = OPCODES.test_ds;
        }
        if (op === 7) {
          opcode = OPCODES.xor_ds;
        }
        if (op === 8) {
          opcode = OPCODES.trap_b;
        }
        if (op === 9) {
          if (p1 >= 0 && p1 <= 15) {
            opcode = OPCODES.not;
          }
          if (p1 >= 16 && p1 <= 31) {
            opcode = OPCODES.neg;
          }
          if (p1 >= 32 && p1 <= 47) {
            opcode = OPCODES.exc;
          }
        }
        if (op === 10) {
          opcode = OPCODES.shl_rn;
        }
        if (op === 11) {
          opcode = OPCODES.shl_ds;
        }
        if (op === 12) {
          opcode = OPCODES.shr_rn;
        }
        if (op === 13) {
          opcode = OPCODES.shr_ds;
        }
        if (op === 14) {
          opcode = OPCODES.swap_ds;
        }
        if (op === 15) {
          opcode = OPCODES.mov_ds;
        }
        if (op === 56) {
          opcode = OPCODES.enter_n;
        }
        if (op === 57) {
          opcode = OPCODES.exit_n;
        }
        if (op === 168) {
          opcode = OPCODES.mul_ds;
        }
        if (op === 169) {
          opcode = OPCODES.div_ds;
        }
        if (op === 170) {
          opcode = OPCODES.mod_ds;
        }
        if (op === 171) {
          opcode = OPCODES.smul_ds;
        }
        if (op === 172) {
          opcode = OPCODES.sdiv_ds;
        }
        if (op === 173) {
          opcode = OPCODES.smod_ds;
        }
        if (op === 174) {
          switch (p1) {
            case 0:
              opcode = OPCODES.fclr;
              break;
            case 16:
              opcode = OPCODES.fadd;
              break;
            case 17:
              opcode = OPCODES.fsub;
              break;
            case 18:
              opcode = OPCODES.fcmp;
              break;
            case 19:
              opcode = OPCODES.fmul;
              break;
            case 20:
              opcode = OPCODES.fmod;
              break;
            case 21:
              opcode = OPCODES.fdiv;
              break;
            case 22:
              opcode = OPCODES.fpow;
              break;
            case 23:
              opcode = OPCODES.fsqrt;
              break;
            case 24:
              opcode = OPCODES.fneg;
              break;
            case 25:
              opcode = OPCODES.fexc;
              break;
            case 26:
              opcode = OPCODES.fint;
              break;
            case 27:
              opcode = OPCODES.fabs;
              break;
            case 32:
              opcode = OPCODES.fsin;
              break;
            case 33:
              opcode = OPCODES.fcos;
              break;
            case 34:
              opcode = OPCODES.ftan;
              break;
            case 36:
              opcode = OPCODES.fasin;
              break;
            case 37:
              opcode = OPCODES.facos;
              break;
            case 38:
              opcode = OPCODES.fatan;
              break;
            case 48:
              opcode = OPCODES.fisnan;
              break;
            case 49:
              opcode = OPCODES.fisinf;
              break;
            case 50:
              opcode = OPCODES.flog2;
              break;
            case 51:
              opcode = OPCODES.flog10;
              break;
            case 112:
              opcode = OPCODES.fld0;
              break;
            case 113:
              opcode = OPCODES.fld1;
              break;
            case 114:
              opcode = OPCODES.flde;
              break;
            case 115:
              opcode = OPCODES.fldpi;
              break;
            default:
          }
        }
        if (op === 175) {
          opcode = OPCODES.wait;
        }
        if (op >= 72 && op <= 79 && (op & 1) === 1) {
          opcode = OPCODES.add_db;
        }
        if (op >= 80 && op <= 87 && (op & 1) === 1) {
          opcode = OPCODES.sub_db;
        }
        if (op >= 88 && op <= 95 && (op & 1) === 1) {
          opcode = OPCODES.cmp_db;
        }
        if (op >= 96 && op <= 103 && (op & 1) === 1) {
          opcode = OPCODES.and_db;
        }
        if (op >= 104 && op <= 111 && (op & 1) === 1) {
          opcode = OPCODES.or_db;
        }
        if (op >= 112 && op <= 119 && (op & 1) === 1) {
          opcode = OPCODES.test_db;
        }
        if (op >= 120 && op <= 127 && (op & 1) === 1) {
          opcode = OPCODES.xor_db;
        }
      }
      if (size === 3) {
        if (op >= 72 && op <= 79 && (op & 1) === 0) {
          opcode = OPCODES.add_dw;
        }
        if (op >= 80 && op <= 87 && (op & 1) === 0) {
          opcode = OPCODES.sub_dw;
        }
        if (op >= 88 && op <= 95 && (op & 1) === 0) {
          opcode = OPCODES.cmp_dw;
        }
        if (op >= 96 && op <= 103 && (op & 1) === 0) {
          opcode = OPCODES.and_dw;
        }
        if (op >= 104 && op <= 111 && (op & 1) === 0) {
          opcode = OPCODES.or_dw;
        }
        if (op >= 112 && op <= 119 && (op & 1) === 0) {
          opcode = OPCODES.test_dw;
        }
        if (op >= 120 && op <= 127 && (op & 1) === 0) {
          opcode = OPCODES.xor_dw;
        }
        if (op >= 16 && op <= 31 && (op & 1) === 1 && p1 === 0) {
          opcode = OPCODES.ld_db;
        }
        if (op === 48) {
          opcode = OPCODES.in_rp;
        }
        if (op === 49) {
          opcode = OPCODES.out_rp;
        }
        if (op >= 128 && op <= 143 && (p1 & 1) === 1) {
          opcode = OPCODES.loops_r;
        }
        if (op >= 144 && op <= 159 && (p1 & 1) === 1) {
          opcode = OPCODES.brs_calls_f;
        }
        if (op === 174) {
          switch (p1) {
            case 128:
              opcode = OPCODES.fldr;
              break;
            case 129:
              opcode = OPCODES.fldm;
              break;
            case 130:
              opcode = OPCODES.fldim;
              break;
            case 132:
              opcode = OPCODES.fstr;
              break;
            case 133:
              opcode = OPCODES.fstm;
              break;
            case 134:
              opcode = OPCODES.fstim;
              break;
            default:
          }
        }
      }
      if (size === 4) {
        if (op >= 16 && op <= 31 && (op & 1) === 0 && p1 === 0) {
          opcode = OPCODES.ld_dw;
        }
        if (op >= 16 && op <= 31 && p1 != 0) {
          opcode = OPCODES.ld;
        }
        if (op >= 32 && op <= 47) {
          opcode = OPCODES.st;
        }
        if (op >= 128 && op <= 143 && (p1 & 1) === 0) {
          opcode = OPCODES.loop_r;
        }
        if (op >= 144 && op <= 159 && (p1 & 1) === 0) {
          opcode = OPCODES.br_call_f;
        }
      }
      complete = opcode !== void 0;
    }
    if (!complete) {
      return INVALID_DECODE;
    }
    return { size, opcode, instruction };
  }
  for (let b2 = 0; b2 < 256; b2++) {
    const r = _decodeInstruction([b2]);
    if (r !== INVALID_DECODE) {
      opMap[r.size].set(b2, r.opcode);
    }
  }
  for (let b2 = 0; b2 < 256; b2++) {
    for (let bb = 0; bb < 256; bb++) {
      const op = b2 << 8 | bb;
      let r = _decodeInstruction([b2, bb]);
      if (r !== INVALID_DECODE) {
        opMap[2].set(op, r.opcode);
      }
      r = _decodeInstruction([b2, bb, 0]);
      if (r !== INVALID_DECODE) {
        opMap[3].set(op, r.opcode);
      }
      r = _decodeInstruction([b2, bb, 0, 0]);
      if (r !== INVALID_DECODE) {
        opMap[4].set(op, r.opcode);
      }
    }
  }
  var necessaryBytesForInstruction = (bytes2) => {
    let op = 0, idx = 0;
    const len = bytes2.length;
    if (len === 0)
      return -1;
    op = bytes2[idx++];
    if (opMap[1].has(op))
      return 1;
    if (idx >= len)
      return -1;
    op = op << 8 | bytes2[idx++];
    if (opMap[2].has(op))
      return 2;
    if (idx >= len)
      return -1;
    idx++;
    if (opMap[3].has(op))
      return 3;
    if (idx >= len)
      return -1;
    idx++;
    if (opMap[4].has(op))
      return 4;
    if (idx >= len)
      return -1;
    return -1;
  };
  var __decodeInstruction = (bytes2) => {
    let op = 0, idx = 0;
    let opcode = null, instruction = 0;
    const len = bytes2.length;
    if (len === 0)
      return INVALID_DECODE;
    op = bytes2[idx++];
    instruction = op;
    if (opcode = opMap[1].get(op))
      return { size: 1, opcode, instruction };
    if (idx >= len)
      return INVALID_DECODE;
    op = op << 8 | bytes2[idx++];
    instruction = op;
    if (opcode = opMap[2].get(op))
      return { size: 2, opcode, instruction };
    if (idx >= len)
      return INVALID_DECODE;
    instruction = instruction << 8 | bytes2[idx++];
    if (opcode = opMap[3].get(op))
      return { size: 3, opcode, instruction };
    if (idx >= len)
      return INVALID_DECODE;
    instruction = instruction << 8 | bytes2[idx++];
    if (opcode = opMap[4].get(op))
      return { size: 4, opcode, instruction };
    if (idx >= len)
      return INVALID_DECODE;
    return INVALID_DECODE;
  };
  var decodeInstruction = (bytes2, useEquiv = true) => {
    const r = __decodeInstruction(bytes2);
    if (r !== INVALID_DECODE) {
      return { size: r.size, tasks: decode(r.instruction, r.opcode, useEquiv) };
    }
    return INVALID_INSTRUCTION;
  };

  // src/core/Processor.js
  var _alu = Symbol("_alu");
  var _fpu = Symbol("_fpu");
  var _registerFile = Symbol("_registerFile");
  var _controller2 = Symbol("_controller");
  var _memory2 = Symbol("_memory");
  var _systemBus2 = Symbol("_systemBus");
  var _ioBus3 = Symbol("_ioBus");
  var _clock = Symbol("_clock");
  var _debug = Symbol("_debug");
  var _taskQueue = Symbol("_taskQueue");
  var _stack = Symbol("_stack");
  var _cache = Symbol("_cache");
  var _pendingServiceRequest = Symbol("_pendingServiceRequest");
  var Processor = class {
    constructor({ memory, systemBus, ioBus, clock, debug = null } = {}) {
      this[_alu] = new ALU();
      this[_fpu] = new FPU();
      this[_registerFile] = new RegisterFile();
      this[_memory2] = memory;
      this[_systemBus2] = systemBus;
      this[_systemBus2].map = this[_registerFile].MM;
      this[_ioBus3] = ioBus;
      this[_clock] = clock;
      this[_debug] = debug;
      this[_pendingServiceRequest] = -1;
      this[_stack] = [];
      this[_taskQueue] = [];
      this[_cache] = [];
      this.useEquiv = true;
      this.tick = this.tick.bind(this);
      this.clock.addReceiver(this.tick);
      this.serviceDevices = this.serviceDevices.bind(this);
      ioBus.irqSignalBus.addReceiver(this.serviceDevices);
      this.stats = {
        ticks: 0,
        insts: 0,
        misses: 0,
        decodes: 0,
        reads: 0,
        tasks: 0
      };
      this._context = {
        stack: this[_stack],
        registerFile: this[_registerFile],
        alu: this[_alu],
        fpu: this[_fpu],
        memory: this[_memory2],
        ioBus: this[_ioBus3]
      };
      this.reset();
    }
    reset() {
      this[_stack] = [];
      this[_taskQueue] = [];
      this[_cache] = [];
      this[_pendingServiceRequest] = -1;
      this[_registerFile].PC = 65280;
      this[_registerFile].MP = 65280;
      this[_registerFile].BP = 8192;
      this[_registerFile].SP = 8192;
      this[_registerFile].MM = 31809;
      this.registers.SINGLE_STEP = 0;
      this.registers.INTERRUPT_DISABLE = 1;
    }
    resetStats() {
      this.stats.ticks = 0;
      this.stats.insts = 0;
      this.stats.misses = 0;
      this.stats.decodes = 0;
      this.stats.reads = 0;
      this.stats.tasks = 0;
    }
    get alu() {
      return this[_alu];
    }
    get fpu() {
      return this[_fpu];
    }
    get registers() {
      return this[_registerFile];
    }
    get memory() {
      return this[_memory2];
    }
    get systemBus() {
      return this[_systemBus2];
    }
    get ioBus() {
      return this[_ioBus3];
    }
    get controller() {
      return this[_controller2];
    }
    get clock() {
      return this[_clock];
    }
    get debug() {
      return this[_debug];
    }
    get internalState() {
      return {
        pc: this.registers.PC,
        mp: this.registers.MP,
        cache: this[_cache],
        stack: this[_stack],
        tasks: this[_taskQueue],
        stats: this.stats
      };
    }
    registerController(controller) {
      this[_controller2] = controller;
    }
    inject(addr, byte) {
      const cache = this[_cache];
      cache.push(byte);
      this.stats.reads++;
    }
    jump(addr, call = false) {
      this[_cache] = [];
      this[_taskQueue] = [];
      this.stats.misses++;
      if (call) {
        this.registers.SP -= 2;
        this.memory.writeWord(this.registers.SP, this.registers.PC);
      }
      this.registers.PC = addr;
      this.registers.MP = addr;
    }
    _fetch() {
      const memory = this.memory;
      let mp = this.registers.MP;
      let bytes2 = [memory.readByte(mp++)];
      let nbfi = necessaryBytesForInstruction(bytes2);
      while ((nbfi < 0 || bytes2.length < nbfi) && bytes2.length < 5) {
        bytes2.push(memory.readByte(mp++));
        nbfi = necessaryBytesForInstruction(bytes2);
      }
      if (nbfi < 0) {
        mp = this.registers.MP + 1;
      }
      this[_cache] = bytes2;
      this.registers.PC = mp;
      this.registers.MP = mp;
    }
    _decode() {
      const cache = this[_cache];
      const { tasks } = decodeInstruction(cache, this.useEquiv);
      if (tasks) {
        this.stats.decodes++;
        this[_taskQueue] = tasks;
      } else {
        this[_taskQueue] = [];
      }
    }
    _execute() {
      const tasks = this[_taskQueue];
      let pc = this.registers.PC;
      let mp = this.registers.MP;
      let mm = this.registers.MM;
      let jump = false;
      this[_systemBus2].map = this[_registerFile].MM;
      this.stats.insts++;
      if (Array.isArray(tasks)) {
        for (let i = 0, l = tasks.length; i < l; i++) {
          this.stats.tasks++;
          executeTask(tasks[i], this._context);
        }
      } else {
        this.stats.tasks++;
        tasks(this._context);
      }
      if (this.registers.PC !== pc) {
        jump = true;
        this.stats.misses++;
        pc = this.registers.PC;
        mp = this.registers.PC;
      }
      if (this.debug) {
        if (this.registers.SINGLE_STEP && this.registers.INTERRUPT_DISABLE) {
          this.debug.signal();
        }
      }
      this.registers.PC = pc;
      this.registers.MP = mp;
      this[_cache] = [];
      this[_taskQueue] = [];
    }
    serviceDevices() {
      const ioBus = this.ioBus;
      if (ioBus.irqServiceBus.value !== 0 && !this.registers.INTERRUPT_DISABLE) {
        const whichDevice = ioBus.irqSignalBus.value;
        if (this[_pendingServiceRequest] > -1 && this[_pendingServiceRequest] !== whichDevice) {
          throw new Error("Multiple services at the same time!");
        }
        this[_pendingServiceRequest] = whichDevice;
      }
    }
    _reallyServiceDevices() {
      const whichDevice = this[_pendingServiceRequest];
      if (whichDevice < 0)
        return;
      this[_pendingServiceRequest] = -1;
      const trapToTrigger = 128 | whichDevice << 3;
      const trapVectorLookup = trapToTrigger << 1;
      const trapTarget = this.memory.readWord(trapVectorLookup);
      if (!this.registers.INTERRUPT_DISABLE)
        this.registers.SINGLE_STEP = 0;
      this.registers.STATUS = this.registers.STATUS & 255 | trapToTrigger << 8;
      this.jump(trapTarget, true);
      this.controller.ackInterrupt(whichDevice);
    }
    tick() {
      this.stats.ticks++;
      if (this.registers.SINGLE_STEP && !this.registers.INTERRUPT_DISABLE) {
        this._reallyServiceDevices();
        return;
      }
      this._fetch();
      this._decode();
      this._execute();
      this._reallyServiceDevices();
    }
  };

  // src/util/supportsSharedArrayBuffer.js
  var supportsSharedArrayBuffer_default = typeof SharedArrayBuffer !== "undefined";

  // src/core/Computer.js
  var TIMING_METHODS = {
    AUTO: 0,
    INTERVAL: 1,
    TIMEOUT: 2,
    RAF: 3,
    BLOCKING: 4,
    FIXED: 5,
    SENTINEL: 6
  };
  var SHARED_MEMORY = {
    AUTO: 0,
    NOT_SHARED: 1,
    SHARED: 2
  };
  var detectedTimingMethod = typeof requestAnimationFrame !== "undefined" ? TIMING_METHODS.RAF : TIMING_METHODS.TIMEOUT;
  var _clock2 = Symbol("_clock");
  var _processor2 = Symbol("_processor");
  var _memory3 = Symbol("_memory");
  var _ioBus4 = Symbol("_ioBus");
  var _systemBus3 = Symbol("_systemBus");
  var _controller3 = Symbol("_controller");
  var _debug2 = Symbol("_debug");
  var _stopSignal = Symbol("_stopSignal");
  var _runID = Symbol("_runID");
  var _sentinel = Symbol("_sentinel");
  var Computer = class {
    constructor({
      performance: performance2,
      debug = false,
      sliceTime = 16,
      sliceGranularity = 4095,
      timingMethod = TIMING_METHODS.AUTO,
      shared = SHARED_MEMORY.AUTO,
      stats,
      sentinel
    } = {}) {
      const clock = new Bus(1, 1);
      const systemBus = new SystemBus();
      let realShared = false;
      switch (shared) {
        case SHARED_MEMORY.AUTO:
          realShared = supportsSharedArrayBuffer_default;
          break;
        case SHARED_MEMORY.SHARED:
          realShared = true;
          break;
        default:
        case SHARED_MEMORY.NOT_SHARED:
          realShared = false;
          break;
      }
      const memory = new Memory({ systemBus, shared: realShared });
      const ioBus = new IOBus();
      const debugLine = debug ? new Bus(1, 1) : null;
      const processor = new Processor({ memory, systemBus, ioBus, clock, debug: debugLine });
      const controller = new Controller({ processor, ioBus, clock });
      this.stats = {
        time: 0,
        ticks: 0,
        slices: 0,
        timeThisSlice: 0,
        ticksThisSlice: 0,
        ticksLastSlice: 0,
        processorStats: { ...processor.stats },
        processorStatsLastSlice: { ...processor.stats },
        processorStatsThisSecond: { ...processor.stats },
        processorStatsLastSecond: { ...processor.stats },
        aluStats: { ...processor.alu.stats },
        aluStatsLastSlice: { ...processor.alu.stats },
        aluStatsThisSecond: { ...processor.alu.stats },
        aluStatsLastSecond: { ...processor.alu.stats },
        timeSinceLastSecond: 0
      };
      this._stats = stats;
      this[_stopSignal] = false;
      if (debugLine) {
        debugLine.addReceiver(() => {
          this[_stopSignal] = true;
          this.stop();
        });
      }
      this[_clock2] = clock;
      this[_systemBus3] = systemBus;
      this[_memory3] = memory;
      this[_ioBus4] = ioBus;
      this[_debug2] = debugLine;
      this[_processor2] = processor;
      this[_controller3] = controller;
      this[_sentinel] = sentinel ? new Uint8Array(sentinel) : null;
      this._options = {
        sliceTime,
        sliceGranularity,
        timingMethod: timingMethod === TIMING_METHODS.AUTO ? detectedTimingMethod : timingMethod,
        performance: performance2
      };
      this[_runID] = null;
    }
    get clock() {
      return this[_clock2];
    }
    get systemBus() {
      return this[_systemBus3];
    }
    get memory() {
      return this[_memory3];
    }
    get ioBus() {
      return this[_ioBus4];
    }
    get controller() {
      return this[_controller3];
    }
    get debugLine() {
      return this[_debug2];
    }
    get processor() {
      return this[_processor2];
    }
    reset() {
      this.memory.reset(true);
      this.processor.reset();
    }
    tick() {
      this.stats.ticksThisSlice++;
      this.clock.signal();
    }
    step() {
      if (this.debug) {
        if (this.running)
          this.stop();
        this.processor.registers.INTERRUPT_DISABLE = 1;
        this.processor.registers.SINGLE_STEP = 1;
        this.runSlice();
        this._stopSignal = false;
      } else {
        this.tick();
        this._updateStatsAfterSlice();
      }
    }
    runSlice() {
      if (this._stats)
        this._stats.begin();
      const { sliceTime: timeout, sliceGranularity: granularity, performance: performance2, timingMethod } = this._options;
      this[_stopSignal] = false;
      this.stats.slices++;
      const start = performance2.now();
      if (timingMethod === TIMING_METHODS.SENTINEL) {
        while (!this[_stopSignal]) {
          this.tick();
          this.tick();
          this.tick();
          this.tick();
          this.tick();
          if (Atomics.load(this[_sentinel], 0) !== 0) {
            Atomics.store(this[_sentinel], 0, 0);
            break;
          }
        }
      } else if (timeout > 0 && timingMethod !== TIMING_METHODS.BLOCKING) {
        let now = start;
        let slice = now;
        let delta = 0;
        let c = 0;
        if (timingMethod === TIMING_METHODS.FIXED) {
          let ticks = 0;
          while (!this[_stopSignal] && ticks++ <= granularity) {
            this.tick();
          }
        } else {
          while (!this[_stopSignal]) {
            this.tick();
            if (c++ >= granularity) {
              c = 0;
              slice = now;
              now = performance2.now();
              delta = now - slice;
              if (now + delta >= start + timeout) {
                break;
              }
            }
          }
        }
      } else {
        while (!this[_stopSignal]) {
          this.tick();
        }
      }
      if (this[_stopSignal]) {
        this.stop();
      }
      const end = performance2.now();
      const totalTime = end - start;
      this.stats.timeThisSlice = totalTime;
      this.stats.time += totalTime;
      this._updateStatsAfterSlice();
      if (this._stats)
        this._stats.end();
      return totalTime;
    }
    run() {
      const { timingMethod, sliceTime } = this._options;
      const realTimingMethod = timingMethod === TIMING_METHODS.FIXED ? detectedTimingMethod : timingMethod;
      if (this.running)
        this.stop();
      switch (realTimingMethod) {
        case TIMING_METHODS.SENTINEL: {
          this[_runID] = setTimeout(function slice() {
            this.runSlice();
            if (this.running) {
              this[_runID] = setTimeout(slice.bind(this), 0);
            }
          }.bind(this), 0);
          break;
        }
        case TIMING_METHODS.TIMEOUT: {
          this[_runID] = setTimeout(function slice() {
            const timeTaken = this.runSlice();
            if (this.running) {
              this[_runID] = setTimeout(slice.bind(this), sliceTime - timeTaken);
            }
          }.bind(this), 0);
          break;
        }
        case TIMING_METHODS.RAF: {
          this[_runID] = requestAnimationFrame(function slice() {
            const timeTaken = this.runSlice();
            if (this.running) {
              this[_runID] = requestAnimationFrame(slice.bind(this));
            }
          }.bind(this));
          break;
        }
        case TIMING_METHODS.BLOCKING: {
          this[_runID] = 1;
          this.runSlice();
          break;
        }
        case TIMING_METHODS.INTERVAL:
        default: {
          this[_runID] = setInterval(() => {
            this.runSlice();
          }, sliceTime + 1);
        }
      }
    }
    stop() {
      const { timingMethod } = this._options;
      const realTimingMethod = timingMethod === TIMING_METHODS.FIXED ? detectedTimingMethod : timingMethod;
      this[_stopSignal] = true;
      if (this[_runID]) {
        switch (realTimingMethod) {
          case TIMING_METHODS.SENTINEL:
          case TIMING_METHODS.BLOCKING:
            break;
          case TIMING_METHODS.TIMEOUT: {
            clearTimeout(this[_runID]);
            break;
          }
          case TIMING_METHODS.RAF: {
            cancelAnimationFrame(this[_runID]);
            break;
          }
          case TIMING_METHODS.INTERVAL:
          default: {
            clearInterval(this[_runID]);
          }
        }
      }
      this[_runID] = null;
    }
    get running() {
      return this[_runID] !== null;
    }
    get stepping() {
      return this.processor.registers.SINGLE_STEP;
    }
    get options() {
      return this._options;
    }
    set options(options) {
      const running = this.running;
      this.stop();
      this._options = options;
      if (running) {
        this.run();
      }
    }
    _updateStatsAfterSlice() {
      this.stats.ticksLastSlice = this.stats.ticksThisSlice;
      this.stats.ticks += this.stats.ticksThisSlice;
      this.stats.ticksThisSlice = 0;
      this.stats.timeSinceLastSecond += this.stats.timeThisSlice;
      for (let [k, v] of Object.entries(this.processor.stats)) {
        this.stats.processorStats[k] += v;
        this.stats.processorStatsThisSecond[k] += v;
      }
      this.stats.processorStatsLastSlice = { ...this.processor.stats };
      for (let [k, v] of Object.entries(this.processor.alu.stats)) {
        this.stats.aluStats[k] += v;
        this.stats.aluStatsThisSecond[k] += v;
      }
      this.stats.aluStatsLastSlice = { ...this.processor.alu.stats };
      if (this.stats.timeSinceLastSecond >= 1e3) {
        this.stats.processorStatsLastSecond = { ...this.stats.processorStatsThisSecond };
        for (let [k, v] of Object.entries(this.processor.stats)) {
          this.stats.processorStatsThisSecond[k] = 0;
        }
        this.stats.aluStatsLastSecond = { ...this.stats.aluStatsThisSecond };
        for (let [k, v] of Object.entries(this.processor.alu.stats)) {
          this.stats.aluStatsThisSecond[k] = 0;
        }
        this.stats.timeSinceLastSecond -= 1e3;
      }
      this.processor.resetStats();
      this.processor.alu.resetStats();
    }
  };

  // src/basm/constants.js
  var REGISTERS = {
    A: 0,
    AL: 1,
    B: 2,
    BL: 3,
    C: 4,
    CL: 5,
    D: 6,
    DL: 7,
    X: 8,
    XL: 9,
    Y: 10,
    YL: 11,
    BP: 12,
    BPL: 13,
    SP: 14,
    SPL: 15
  };
  var REGISTER_NAMES = Object.entries(REGISTERS).reduce((o, [k, v]) => (o[v] = k, o), {});
  var FLAG_NAMES = ["Z", "V", "C", "N", "SS", "IS", "ID", "EX"];
  var OPCODES2 = {
    NOP: "nop",
    ADD: "add",
    AND: "and",
    CMP: "cmp",
    SUB: "sub",
    OR: "or",
    TEST: "test",
    XOR: "xor",
    TRAP: "trap",
    NOT: "not",
    NEG: "neg",
    EXC: "exc",
    SHL: "shl",
    SHR: "shr",
    SWAP: "swap",
    MOV: "mov",
    LD: "ld",
    ST: "st",
    INC: "inc",
    IN: "in",
    OUT: "out",
    ENTER: "enter",
    EXIT: "exit",
    BRK: "brk",
    LOOP: "loop",
    LOOPS: "loops",
    BR: "br",
    BRS: "brs",
    CALL: "call",
    CALLS: "calls",
    PUSHALL: "pushall",
    POPALL: "popall",
    PUSHF: "pushf",
    POPF: "popf",
    PUSHMM: "pushmm",
    POPMM: "popmm",
    PUSH: "push",
    POP: "pop",
    RET: "ret",
    MUL: "mul",
    MOD: "mod",
    DIV: "div",
    SMUL: "smul",
    SMOD: "smod",
    SDIV: "sdiv",
    SET: "set",
    CLR: "clr",
    DEC: "dec",
    HALT: "halt",
    WAIT: "wait",
    FCLR: "fclr",
    FLDR: "fldr",
    FLDM: "fldm",
    FLDIM: "fldim",
    FSTR: "fstr",
    FSTM: "fstm",
    FSTIM: "fstim",
    FADD: "fadd",
    FSUB: "fsub",
    FCMP: "fcmp",
    FMUL: "fmul",
    FDIV: "fdiv",
    FMOD: "fmod",
    FPOW: "fpow",
    FSQRT: "fsqrt",
    FABS: "fabs",
    FSIN: "fsin",
    FCOS: "fcos",
    FTAN: "ftan",
    FASIN: "fasin",
    FACOS: "facos",
    FATAN: "fatan",
    FNEG: "fneg",
    FEXC: "fexc",
    FINT: "fint",
    FISNAN: "fisnan",
    FISINF: "fisinf",
    FLOG2: "flog2",
    FLOG10: "flog10",
    FLD0: "fld0",
    FLD1: "fld1",
    FLDE: "flde",
    FLDPI: "fldpi"
  };

  // src/basm/disassemble.js
  var toNum = (n, width, base) => (n < 0 ? "-" : "") + (base === 16 ? "0x" : base === 2 ? "0b" : "") + (Math.abs(n) || 0).toString(base).padStart(base === 16 ? width : base === 2 ? width * 8 : 0, "0").toUpperCase();
  var address = ({ size, instruction, opcode, base } = {}) => {
    const modeByte = size === 3 ? (instruction & 65280) >>> 8 : (instruction & 16711680) >>> 16;
    const reg = size === 3 ? (instruction & 983040) >>> 16 : (instruction & 251658240) >>> 24;
    const flg = size === 3 ? (instruction & 458752) >>> 16 : (instruction & 117440512) >>> 24;
    const cond = size === 3 ? (instruction & 983040) >>> 16 : (instruction & 251658240) >>> 24;
    const negate = !!(size === 3 ? instruction & 524288 : instruction & 134217728);
    const indirect = !!(modeByte & 32);
    const indexByX = !!(modeByte & 16);
    const indexByY = !!(modeByte & 8);
    const addressingMode = (modeByte & 192) >> 6;
    const short = !!(modeByte & 1);
    const which = !!(modeByte & 2);
    const always = !!(modeByte & 4);
    const canBeRelative = !(opcode === OPCODES2.LD || opcode === OPCODES2.ST);
    const usesFlags = opcode === OPCODES2.BR || opcode === OPCODES2.BRS || opcode === OPCODES2.CALL || opcode === OPCODES2.CALLS;
    const isLoadOrStore = opcode === OPCODES2.LD || opcode === OPCODES2.ST;
    let v = size === 3 ? instruction & 255 : instruction & 65535;
    if (isLoadOrStore)
      v |= size === 3 ? instruction & 1792 : instruction & 458752;
    const relV19 = -(v & 262144) + (v & 262143);
    const relV16 = -(v & 32768) + (v & 32767);
    const relV8 = -(v & 128) + (v & 127);
    let out = `${opcode}`;
    if (usesFlags) {
      if (!always) {
        out = `${out} ${negate ? "!" : ""}${FLAG_NAMES[flg]},`;
      } else {
        switch (cond) {
          case 0:
            break;
          case 2:
            out = `${out} .lt,`;
            break;
          case 3:
            out = `${out} .lte,`;
            break;
          case 4:
            out = `${out} .gt,`;
            break;
          case 5:
            out = `${out} .gte,`;
            break;
          case 10:
            out = `${out} .blo,`;
            break;
          case 11:
            out = `${out} .ble,`;
            break;
          case 12:
            out = `${out} .abv,`;
            break;
          case 13:
            out = `${out} .abe,`;
            break;
          default:
            out = `${out} .???,`;
        }
      }
    } else {
      if (opcode === OPCODES2.LD || opcode === OPCODES2.LOOP || opcode === OPCODES2.LOOPS) {
        out = `${out} ${REGISTER_NAMES[reg]},`;
      }
    }
    switch (addressingMode) {
      case 0:
        if (indirect) {
          out = `${out} ?${toNum(v, (size - 2) * 2, base)}?`;
        } else {
          if (opcode === OPCODES2.CALLS || opcode === OPCODES2.BRS)
            out = `${out} ${toNum(relV8, (size - 2) * 2, base)} `;
          else if (opcode === OPCODES2.CALL || opcode === OPCODES2.BR)
            out = `${out} ${toNum(relV16, (size - 2) * 2, base)} `;
          else
            out = `${out} ${toNum(v, (size - 2) * 2, base)} `;
        }
        break;
      case 1:
        if (indirect) {
          out = `${out} <${toNum(v, (size - 2) * 2, base)}>`;
        } else {
          out = `${out} [${toNum(v, (size - 2) * 2, base)}]`;
        }
        break;
      case 2:
        if (indirect) {
          out = `${out} <BP+${toNum(relV19, (size - 2) * 2, base)}>`;
        } else {
          out = `${out} [BP+${toNum(relV19, (size - 2) * 2, base)}]`;
        }
        break;
      case 3:
        if (indirect) {
          out = `${out} <D+${toNum(v, (size - 2) * 2, base)}>`;
        } else {
          out = `${out} [D+${toNum(v, (size - 2) * 2, base)}]`;
        }
        break;
    }
    if (indexByX) {
      out = `${out.substr(0, out.length - 1)}, X${out.substr(out.length - 1)}`;
    }
    if (indexByY) {
      if (!indirect) {
        out = `${out.substr(0, out.length - 1)}, Y${out.substr(out.length - 1)}`;
      } else
        out = `${out}, Y`;
    }
    if (!usesFlags) {
      if (opcode === OPCODES2.ST) {
        out = `${out}, ${REGISTER_NAMES[reg]}`;
      }
    }
    return out;
  };
  function disassemble(bytes2, { base = 16 } = {}) {
    let complete = false;
    let instruction = 0;
    let byte = 0;
    let size = 0;
    let idx = 0;
    let code;
    let op, p1;
    while (!complete && idx < bytes2.length) {
      byte = bytes2[idx];
      idx += 1;
      if (byte === void 0) {
        return null;
      }
      instruction = instruction << 8 | byte;
      size = idx;
      if (size > 4) {
        return null;
      }
      op = instruction >> (size - 1 << 3) & 255;
      if (size === 1) {
        if (op === 0) {
          code = `${OPCODES2.NOP}`;
        }
        if (op === 62) {
          code = `${OPCODES2.HALT}`;
        }
        if (op === 63) {
          code = `${OPCODES2.BRK}`;
        }
        if (op === 160) {
          code = `${OPCODES2.PUSHALL}`;
        }
        if (op === 161) {
          code = `${OPCODES2.POPALL}`;
        }
        if (op === 162) {
          code = `${OPCODES2.PUSHF}`;
        }
        if (op === 163) {
          code = `${OPCODES2.POPF}`;
        }
        if (op === 164) {
          code = `${OPCODES2.PUSHMM}`;
        }
        if (op === 165) {
          code = `${OPCODES2.POPMM}`;
        }
        if (op === 167) {
          code = `${OPCODES2.RET}`;
        }
        if (op >= 64 && op <= 71) {
          code = `${OPCODES2.TRAP} ${REGISTER_NAMES[op & 7]}`;
        }
        if (op >= 176 && op <= 183) {
          code = `${OPCODES2.SET} ${FLAG_NAMES[op & 7]}`;
        }
        if (op >= 184 && op <= 191) {
          code = `${OPCODES2.CLR} ${FLAG_NAMES[op & 7]}`;
        }
        if (op >= 192 && op <= 207) {
          code = `${OPCODES2.INC} ${REGISTER_NAMES[op & 15]}`;
        }
        if (op >= 208 && op <= 223) {
          code = `${OPCODES2.DEC} ${REGISTER_NAMES[op & 15]}`;
        }
        if (op >= 224 && op <= 239) {
          code = `${OPCODES2.PUSH} ${REGISTER_NAMES[op & 15]}`;
        }
        if (op >= 240 && op <= 255) {
          code = `${OPCODES2.POP} ${REGISTER_NAMES[op & 15]}`;
        }
      }
      p1 = size > 1 ? instruction >> (size - 2 << 3) & 255 : 0;
      if (size === 2) {
        if (op === 1) {
          code = `${OPCODES2.ADD} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 2) {
          code = `${OPCODES2.SUB} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 3) {
          code = `${OPCODES2.CMP} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 4) {
          code = `${OPCODES2.AND} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 5) {
          code = `${OPCODES2.OR} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 6) {
          code = `${OPCODES2.TEST} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 7) {
          code = `${OPCODES2.XOR} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 8) {
          code = `${OPCODES2.TRAP} ${toNum(p1, 2, base)}`;
        }
        if (op === 9) {
          if (p1 >= 0 && p1 <= 15) {
            code = `${OPCODES2.NOT} ${REGISTER_NAMES[p1 & 15]}`;
          }
          if (p1 >= 16 && p1 <= 31) {
            code = `${OPCODES2.NEG} ${REGISTER_NAMES[p1 & 15]}`;
          }
          if (p1 >= 32 && p1 <= 47) {
            code = `${OPCODES2.EXC} ${REGISTER_NAMES[p1 & 15]}`;
          }
        }
        if (op === 10) {
          code = `${OPCODES2.SHL} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${toNum(p1 & 15, 2, base)}`;
        }
        if (op === 11) {
          code = `${OPCODES2.SHL} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 12) {
          code = `${OPCODES2.SHR} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${toNum(p1 & 15, 2, base)}`;
        }
        if (op === 13) {
          code = `${OPCODES2.SHR} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 14) {
          code = `${OPCODES2.SWAP} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 15) {
          code = `${OPCODES2.MOV} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 56) {
          code = `${OPCODES2.ENTER} ${toNum(p1, 2, base)}`;
        }
        if (op === 57) {
          code = `${OPCODES2.EXIT} ${toNum(p1, 2, base)}`;
        }
        if (op === 168) {
          code = `${OPCODES2.MUL} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 169) {
          code = `${OPCODES2.DIV} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 170) {
          code = `${OPCODES2.MOD} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 171) {
          code = `${OPCODES2.SMUL} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 172) {
          code = `${OPCODES2.SDIV} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 173) {
          code = `${OPCODES2.SMOD} ${REGISTER_NAMES[(p1 & 240) >> 4]}, ${REGISTER_NAMES[p1 & 15]}`;
        }
        if (op === 174) {
          switch (p1) {
            case 0:
              code = `${OPCODES2.FCLR}`;
              break;
            case 16:
              code = `${OPCODES2.FADD}`;
              break;
            case 17:
              code = `${OPCODES2.FSUB}`;
              break;
            case 18:
              code = `${OPCODES2.FCMP}`;
              break;
            case 19:
              code = `${OPCODES2.FMUL}`;
              break;
            case 20:
              code = `${OPCODES2.FMOD}`;
              break;
            case 21:
              code = `${OPCODES2.FDIV}`;
              break;
            case 22:
              code = `${OPCODES2.FPOW}`;
              break;
            case 23:
              code = `${OPCODES2.FSQRT}`;
              break;
            case 24:
              code = `${OPCODES2.FNEG}`;
              break;
            case 25:
              code = `${OPCODES2.FEXC}`;
              break;
            case 26:
              code = `${OPCODES2.FINT}`;
              break;
            case 27:
              code = `${OPCODES2.FABS}`;
              break;
            case 32:
              code = `${OPCODES2.FSIN}`;
              break;
            case 33:
              code = `${OPCODES2.FCOS}`;
              break;
            case 34:
              code = `${OPCODES2.FTAN}`;
              break;
            case 36:
              code = `${OPCODES2.FASIN}`;
              break;
            case 37:
              code = `${OPCODES2.FACOS}`;
              break;
            case 38:
              code = `${OPCODES2.FATAN}`;
              break;
            case 48:
              code = `${OPCODES2.FISNAN}`;
              break;
            case 49:
              code = `${OPCODES2.FISINF}`;
              break;
            case 50:
              code = `${OPCODES2.FLOG2}`;
              break;
            case 51:
              code = `${OPCODES2.FLOG10}`;
              break;
            case 112:
              code = `${OPCODES2.FLD0}`;
              break;
            case 113:
              code = `${OPCODES2.FLD1}`;
              break;
            case 114:
              code = `${OPCODES2.FLDE}`;
              break;
            case 115:
              code = `${OPCODES2.FLDPI}`;
              break;
          }
        }
        if (op >= 72 && op <= 79 && (op & 1) === 1) {
          code = `${OPCODES2.ADD} ${REGISTER_NAMES[op & 7]}, ${toNum(p1, 2, base)}`;
        }
        if (op >= 80 && op <= 87 && (op & 1) === 1) {
          code = `${OPCODES2.SUB} ${REGISTER_NAMES[op & 7]}, ${toNum(p1, 2, base)}`;
        }
        if (op >= 88 && op <= 95 && (op & 1) === 1) {
          code = `${OPCODES2.CMP} ${REGISTER_NAMES[op & 7]}, ${toNum(p1, 2, base)}`;
        }
        if (op >= 96 && op <= 103 && (op & 1) === 1) {
          code = `${OPCODES2.AND} ${REGISTER_NAMES[op & 7]}, ${toNum(p1, 2, base)}`;
        }
        if (op >= 104 && op <= 111 && (op & 1) === 1) {
          code = `${OPCODES2.OR} ${REGISTER_NAMES[op & 7]}, ${toNum(p1, 2, base)}`;
        }
        if (op >= 112 && op <= 119 && (op & 1) === 1) {
          code = `${OPCODES2.TEST} ${REGISTER_NAMES[op & 7]}, ${toNum(p1, 2, base)}`;
        }
        if (op >= 120 && op <= 127 && (op & 1) === 1) {
          code = `${OPCODES2.XOR} ${REGISTER_NAMES[op & 7]}, ${toNum(p1, 2, base)}`;
        }
      }
      const p2 = size > 2 ? instruction >> (size - 3 << 3) & 255 : 0;
      if (size === 3) {
        if (op >= 72 && op <= 79 && (op & 1) === 0) {
          code = `${OPCODES2.ADD} ${REGISTER_NAMES[op & 7]}, ${toNum(p1 << 8 | p2, 4, base)}`;
        }
        if (op >= 80 && op <= 87 && (op & 1) === 0) {
          code = `${OPCODES2.SUB} ${REGISTER_NAMES[op & 7]}, ${toNum(p1 << 8 | p2, 4, base)}`;
        }
        if (op >= 88 && op <= 95 && (op & 1) === 0) {
          code = `${OPCODES2.CMP} ${REGISTER_NAMES[op & 7]}, ${toNum(p1 << 8 | p2, 4, base)}`;
        }
        if (op >= 96 && op <= 103 && (op & 1) === 0) {
          code = `${OPCODES2.AND} ${REGISTER_NAMES[op & 7]}, ${toNum(p1 << 8 | p2, 4, base)}`;
        }
        if (op >= 104 && op <= 111 && (op & 1) === 0) {
          code = `${OPCODES2.OR} ${REGISTER_NAMES[op & 7]}, ${toNum(p1 << 8 | p2, 4, base)}`;
        }
        if (op >= 112 && op <= 119 && (op & 1) === 0) {
          code = `${OPCODES2.TEST} ${REGISTER_NAMES[op & 7]}, ${toNum(p1 << 8 | p2, 4, base)}`;
        }
        if (op >= 120 && op <= 127 && (op & 1) === 0) {
          code = `${OPCODES2.XOR} ${REGISTER_NAMES[op & 7]}, ${toNum(p2 << 8 | p2, 4, base)}`;
        }
        if (op >= 16 && op <= 31 && (op & 1) === 1 && p1 === 0) {
          code = address({ size, instruction, base, opcode: OPCODES2.LD });
        }
        if (op === 48) {
          code = `${OPCODES2.IN} ${REGISTER_NAMES[p1 >>> 4]}, ${toNum(p2, 2, base)}`;
        }
        if (op === 49) {
          code = `${OPCODES2.OUT} ${toNum(p2, 2, base)}, ${REGISTER_NAMES[p1 >>> 4]}`;
        }
        if (op >= 128 && op <= 143 && (p1 & 1) === 1) {
          code = address({ size, instruction, base, opcode: OPCODES2.LOOPS });
        }
        if (op >= 144 && op <= 159 && (p1 & 1) === 1) {
          code = address({ size, instruction, base, opcode: p1 & 2 ? OPCODES2.CALLS : OPCODES2.BRS });
        }
        if (op === 174) {
          switch (p1) {
            case 128:
              code = `${OPCODES2.FLDR} ${REGISTER_NAMES[p2 & 15]}`;
              break;
            case 129:
              code = `${OPCODES2.FLDM} [${REGISTER_NAMES[(p2 & 240) >> 4]}, ${REGISTER_NAMES[p2 & 15]}]`;
              break;
            case 130:
              code = `${OPCODES2.FLDIM} <${REGISTER_NAMES[(p2 & 240) >> 4]}, ${REGISTER_NAMES[p2 & 15]}>`;
              break;
            case 132:
              code = `${OPCODES2.FSTR} ${REGISTER_NAMES[p2 & 15]}`;
              break;
            case 133:
              code = `${OPCODES2.FSTM} [${REGISTER_NAMES[(p2 & 240) >> 4]}, ${REGISTER_NAMES[p2 & 15]}]`;
              break;
            case 134:
              code = `${OPCODES2.FSTIM} <${REGISTER_NAMES[(p2 & 240) >> 4]}, ${REGISTER_NAMES[p2 & 15]}>`;
              break;
            default:
              code = `???`;
          }
        }
      }
      const p3 = size > 3 ? instruction >> (size - 4 << 3) & 255 : 0;
      if (size === 4) {
        if (op >= 16 && op <= 31 && (op & 1) === 0 && p1 === 0) {
          code = address({ size, instruction, base, opcode: OPCODES2.LD });
        }
        if (op >= 16 && op <= 31 && p1 != 0) {
          code = address({ size, instruction, base, opcode: OPCODES2.LD });
        }
        if (op >= 32 && op <= 47) {
          code = address({ size, instruction, base, opcode: OPCODES2.ST });
        }
        if (op >= 128 && op <= 143 && (p1 & 1) === 0) {
          code = address({ size, instruction, base, opcode: OPCODES2.LOOP });
        }
        if (op >= 144 && op <= 159 && (p1 & 1) === 0) {
          code = address({ size, instruction, base, opcode: p1 & 2 ? OPCODES2.CALL : OPCODES2.BR });
        }
      }
      complete = code !== void 0;
    }
    if (!complete) {
      return null;
    }
    return { size, code, instruction };
  }
  function disassembleAll(bytes2, { base = 16, addr } = {}) {
    const arr = bytes2.map((i) => i);
    let out = "";
    let offset = 0;
    while (arr.length > 0) {
      let result, idx = 1, code = "", size = 0;
      do {
        const tryBytes = arr.slice(0, idx + 1);
        result = disassemble(tryBytes, base);
        idx++;
      } while (result === null && idx < arr.length && idx < 5);
      if (result) {
        size = result.size;
        code = result.code;
      } else {
        code = "???";
        size = 1;
      }
      const used = arr.splice(0, size);
      out += (addr !== void 0 ? toNum(addr + offset, 5, 16).substr(2) + ": " : "") + used.map((b2) => toNum(b2, 2, 16).substr(2)).join(" ").padEnd(11, " ") + "    " + code + "\n";
      offset += size;
    }
    return out;
  }

  // src/core/Diagnostics.js
  var round = (n, places = 0) => {
    const multiplier = 10 ** places;
    const v = Math.round(n * multiplier) / multiplier;
    return v;
  };
  var numToString = (n, { padWhole = 0, padDecimal = 2, padSign = 0 } = {}) => {
    const [whole, decimal] = Math.abs(n).toString().split(".");
    const neg = n < 0;
    return `${(neg ? "-" : "").padStart(padSign)}${whole.padStart(padWhole, "0")}${padDecimal ? "." : ""}${(decimal || "").padEnd(padDecimal, "0")}`;
  };
  var STATE = {
    PAUSED: "paused",
    RUNNING: "running",
    STEPPING: "stepping"
  };
  var Diagnostics = class {
    constructor(computer) {
      this.computer = computer;
    }
    get state() {
      let curState = STATE.PAUSED;
      if (this.computer.running) {
        curState = STATE.RUNNING;
      }
      if (this.computer.stepping && this.computer.debug) {
        curState = STATE.STEPPING;
      }
      return curState;
    }
    dumpRegisters() {
      return [
        this.computer.processor.registers.A,
        this.computer.processor.registers.B,
        this.computer.processor.registers.C,
        this.computer.processor.registers.D,
        this.computer.processor.registers.X,
        this.computer.processor.registers.Y,
        this.computer.processor.registers.BP,
        this.computer.processor.registers.SP,
        this.computer.processor.registers.STATUS,
        this.computer.processor.registers.PC,
        this.computer.processor.registers.MP,
        this.computer.processor.registers.MM
      ];
    }
    dumpFPU() {
      return [
        ...this.computer.processor.fpu.stack,
        this.computer.processor.fpu.SP
      ];
    }
    dumpFlags() {
      const reg = this.computer.processor.registers;
      return {
        N: reg.NEGATIVE,
        V: reg.OVERFLOW,
        Z: reg.ZERO,
        C: reg.CARRY,
        EX: reg.EXCEPTION,
        ID: reg.INTERRUPT_DISABLE,
        IS: reg.INTERRUPT_SERVICE,
        SS: reg.SINGLE_STEP
      };
    }
    dumpMemory({ start = 0, length = 256, width = 16 } = {}) {
      const numRows = Math.ceil(length / width);
      const numCols = width;
      return Array.from({ length: numRows }, (_, row) => [
        ...Array.from({ length: numCols }, (_2, col) => this.computer.memory.readByte(start + (row * width + col)))
      ]);
    }
    disassembleMemory({ start = 0, length = 16 } = {}) {
      return disassembleAll(Array.from({ length }, (_, idx) => this.computer.memory.readByte(start + idx)), { addr: start });
    }
    dumpInstructionCache() {
      return this.computer.processor.internalState.cache;
    }
    dumpTaskQueue({ mapped = false } = {}) {
      return this.computer.processor.internalState.tasks.reduce((acc, cur, idx) => {
        const which = idx % 2;
        if (which === 0) {
          acc.push([cur, void 0]);
        } else {
          const last = acc.pop();
          last[1] = mapped ? mapTask(cur) : cur;
          acc.push(last);
        }
        return acc;
      }, []);
    }
    dumpTaskStack() {
      return this.computer.processor.internalState.stack;
    }
    dumpStatistics() {
      return {
        ticks: numToString(this.computer.stats.processorStats.ticks, { padDecimal: 0 }),
        tasks: numToString(this.computer.stats.processorStats.tasks, { padDecimal: 0 }),
        insts: numToString(this.computer.stats.processorStats.insts, { padDecimal: 0 }),
        aluOps: numToString(this.computer.stats.aluStats.ops, { padDecimal: 0 }),
        slices: numToString(this.computer.stats.slices, { padDecimal: 0 }),
        microOpsPerSlice: numToString(this.computer.stats.processorStatsLastSlice.tasks, { padDecimal: 0 }),
        instsPerSlice: numToString(this.computer.stats.processorStatsLastSlice.insts, { padDecimal: 0 }),
        totalTime: numToString(round(this.computer.stats.time, 0), { padDecimal: 0 }),
        timeThisSlice: numToString(round(this.computer.stats.timeThisSlice, 0), { padDecimal: 0 }),
        MMOPs: numToString(round(this.computer.stats.processorStatsLastSecond.tasks / 1e6, 4), { padDecimal: 4 }),
        MIPs: numToString(round(this.computer.stats.processorStatsLastSecond.insts / 1e6, 4), { padDecimal: 4 }),
        MAOPs: numToString(round(this.computer.stats.aluStatsLastSecond.ops / 1e6, 4), { padDecimal: 4 }),
        microOpsPerInst: numToString(round(this.computer.stats.processorStatsLastSlice.insts !== 0 ? this.computer.stats.processorStatsLastSlice.tasks / this.computer.stats.processorStatsLastSlice.insts : 0, 4), { padDecimal: 4 })
      };
    }
    resetStatistics() {
      this.computer.stats.slices = 0;
      this.computer.stats.time = 0;
      this.computer.processor.stats.ticks = 0;
      this.computer.processor.stats.tasks = 0;
      this.computer.processor.stats.insts = 0;
      this.computer.processor.alu.stats.ops = 0;
    }
  };

  // src/devices/Console.js
  var ADR_CTRL = 0;
  var ADR_RECV = 1;
  var ADR_SEND = 2;
  var ADR_ACK = 3;
  var MASK_CTRL_WRITE = 2;
  var DATA_ACK = 1;
  var ConsoleDevice = class extends Device {
    _put(ch) {
      if (typeof process !== "undefined") {
        process.stdout.write(ch);
      } else {
        console.log(ch);
      }
    }
    pullFromBus(address2) {
      super.pullFromBus(address2);
      const isWrite = address2 === ADR_CTRL && (this._read(ADR_CTRL) & MASK_CTRL_WRITE) !== 0;
      if (isWrite) {
        const ch = this._read(ADR_SEND);
        this._put(String.fromCharCode(ch));
        this._write(ADR_ACK, DATA_ACK);
      }
    }
    get mirrored() {
      return {
        [ADR_CTRL]: true,
        [ADR_SEND]: true,
        [ADR_RECV]: true,
        [ADR_ACK]: true
      };
    }
  };

  // src/www/worker/BrowserConsole.js
  var BrowserConsole = class extends ConsoleDevice {
    constructor(opts) {
      super(opts);
      this._output = "";
    }
    _put(ch) {
      this._output += ch;
      if (ch === "\n") {
        console.log(this._output);
        this._output = "";
      }
    }
  };

  // src/devices/Screen.js
  var PALETTE_PAGE = 0;
  var BG_COLOR = 1;
  var LAYER_SEL = 2;
  var LAYER_SRC = 3;
  var LAYER_CFG = 4;
  var LAYER_BG = 5;
  var LAYER_FG = 6;
  var LAYER_XOFFSET = 7;
  var LAYER_YOFFSET = 8;
  var LAYER_XCROP = 9;
  var LAYER_YCROP = 10;
  var LAYER_MODE = 11;
  var SPRITE_SEL = 12;
  var SPRITE_SRC = 13;
  var SPRITE_IDX = 14;
  var SPRITE_CFG = 15;
  var SPRITE_DIM = 16;
  var SPRITE_BG = 17;
  var SPRITE_FG = 18;
  var SPRITE_X_HI = 19;
  var SPRITE_X_LO = 20;
  var SPRITE_Y_HI = 21;
  var SPRITE_Y_LO = 22;
  var SPRITE_COL_HI = 25;
  var SPRITE_COL_LO = 26;
  var BORDER_COLOR = 27;
  var BORDER_CFG = 28;
  var TRAP_ON_RASTER = 29;
  var CURRENT_RASTER = 30;
  var RESET_WAIT = 31;
  var TARGET_FPS = 60;
  var SCREEN_COLUMNS = 640;
  var SCREEN_ROWS = 480;
  var ADDRESSABLE_COLUMNS = 512;
  var ADDRESSABLE_ROWS = 384;
  var BORDER_WIDTH = (SCREEN_COLUMNS - ADDRESSABLE_COLUMNS) / 2;
  var BORDER_HEIGHT = (SCREEN_ROWS - ADDRESSABLE_ROWS) / 2;
  var MS_PER_SEC = 1e3;
  var MODES = {
    FAST: 1,
    SLOW: 2
  };
  var MIRROR_MAP = {
    [PALETTE_PAGE]: true,
    [BG_COLOR]: true,
    [LAYER_SEL]: true,
    [SPRITE_SEL]: true,
    [SPRITE_COL_HI]: true,
    [SPRITE_COL_LO]: true,
    [BORDER_COLOR]: true,
    [BORDER_CFG]: true,
    [TRAP_ON_RASTER]: true,
    [CURRENT_RASTER]: true,
    [RESET_WAIT]: true
  };
  var Screen = class extends Device {
    constructor({ device = 1, length = 32, controller, memory = void 0, clock = void 0, performance: performance2, stats }) {
      super({ device, length, controller, memory, clock });
      this._baseDevice = device;
      this._raster = 0;
      this._column = 0;
      this._delta = 0;
      this._wait = false;
      this._mode = MODES.SLOW;
      this._performance = performance2;
      this._ticksPerRaster = 8;
      this._ticksSinceRaster = 0;
      this._ticksPerSecond = 248e3;
      this._ticksThisSecond = 0;
      this._ticksLastSecond = 0;
      this._adjustPerformance = true;
      this._lastPerformance = performance2.now();
      this._startTime = this._lastPerformance;
      this._stats = stats;
      this._frame = new Uint8Array(new ArrayBuffer(SCREEN_ROWS * SCREEN_COLUMNS * 4));
      this._pixelFrame = new Uint8Array(new ArrayBuffer(SCREEN_ROWS * SCREEN_COLUMNS));
      this._cfg = {};
      this._spritesByLayer = [[], [], [], []];
      this.reset();
    }
    get adjustPerformance() {
      return this._adjustPerformance;
    }
    set adjustPerformance(v) {
      this._adjustPerformance = v;
    }
    get frame() {
      return this._frame;
    }
    get transferrableFrame() {
      const _frame = this._frame;
      this._frame = new Uint8Array(new ArrayBuffer(SCREEN_ROWS * SCREEN_COLUMNS * 4));
      return _frame;
    }
    get ticksBetweenRasterLines() {
      return this._ticksPerRaster;
    }
    set ticksBetweenRasterLines(v) {
      this._ticksPerRaster = Number(v);
    }
    get mode() {
      return this._mode;
    }
    set mode(v) {
      this._mode = v;
    }
    reset() {
      this._write(PALETTE_PAGE, 29);
      this._write(BG_COLOR, 9);
      this._write(BORDER_CFG, 128);
      this._write(BORDER_COLOR, 128);
      this._write(TRAP_ON_RASTER, 0);
      this._write(CURRENT_RASTER, 0);
      this._write(RESET_WAIT, 0);
      this._cfg = {
        layers: Array.from({ length: 4 }, (_, idx) => ({
          src: (idx === 0 ? 128 : 0) | idx + 4,
          cfg: 28,
          bg: 0,
          fg: 255,
          mode: 0,
          visible: idx === 0 ? 1 : 0,
          zIndex: idx,
          page: idx + 4,
          scale: 0,
          tilePage: 28,
          yOffset: 0,
          xOffset: 0,
          yWindow: 0,
          xWindow: 0,
          lineSpacing: 0
        })),
        sprites: Array.from({ length: 16 }, () => ({
          src: 0,
          idx: 0,
          page: 0,
          zIndex: 0,
          tilePage: 28,
          dimensions: 0,
          height: 0,
          width: 0,
          bg: 0,
          fg: 0,
          x: 0,
          y: 0,
          scale: 0,
          visible: 0,
          collided: 0
        }))
      };
    }
    _read(address2 = 0) {
      const r = super._read(address2);
      if (address2 > LAYER_SEL && address2 < SPRITE_SEL) {
        const layer = this._cfg.layers[this._read(LAYER_SEL) & 3];
        switch (address2) {
          case LAYER_SRC:
            return layer.src;
          case LAYER_CFG:
            return layer.cfg;
          case LAYER_BG:
            return layer.bg;
          case LAYER_FG:
            return layer.fg;
          case LAYER_XOFFSET:
            return layer.xOffset;
          case LAYER_YOFFSET:
            return layer.yOffset;
          case LAYER_XCROP:
            return layer.xWindow;
          case LAYER_YCROP:
            return layer.yWindow;
          case LAYER_MODE:
            return layer.mode;
        }
      }
      if (address2 > SPRITE_SEL && address2 < SPRITE_COL_HI) {
        const sprite = this._cfg.sprites[this._read(SPRITE_SEL) & 15];
        switch (address2) {
          case SPRITE_SRC:
            return sprite.src;
          case SPRITE_CFG:
            return sprite.cfg;
          case SPRITE_IDX:
            return sprite.idx;
          case SPRITE_DIM:
            return sprite.dimensions;
          case SPRITE_FG:
            return sprite.fg;
          case SPRITE_BG:
            return sprite.bg;
          case SPRITE_X_HI:
            return (sprite.x & 65280) >>> 8;
          case SPRITE_X_LO:
            return sprite.x & 255;
          case SPRITE_Y_HI:
            return (sprite.y & 65280) >>> 8;
          case SPRITE_Y_LO:
            return sprite.y & 255;
        }
      }
      return r;
    }
    _write(address2 = 0, data = 0) {
      super._write(address2, data);
      if (address2 > LAYER_SEL && address2 < SPRITE_SEL) {
        const layer = this._cfg.layers[this._read(LAYER_SEL) & 3];
        switch (address2) {
          case LAYER_SRC: {
            layer.src = data;
            layer.visible = (layer.src & 128) >>> 7;
            layer.zIndex = (layer.src & 96) >>> 5;
            layer.page = layer.src & 31;
            return;
          }
          case LAYER_CFG: {
            layer.cfg = data;
            layer.scale = (layer.cfg & 192) >> 6;
            layer.lineSpacing = (layer.cfg & 32) >> 5;
            layer.tilePage = layer.cfg & 31;
            return;
          }
          case LAYER_BG:
            return layer.bg = data;
          case LAYER_FG:
            return layer.fg = data;
          case LAYER_XOFFSET:
            return layer.xOffset = data;
          case LAYER_YOFFSET:
            return layer.yOffset = data;
          case LAYER_XCROP:
            return layer.xWindow = data;
          case LAYER_YCROP:
            return layer.yWindow = data;
          case LAYER_MODE:
            return layer.mode = data & 3;
        }
      }
      if (address2 > SPRITE_SEL && address2 < SPRITE_COL_HI) {
        const sprite = this._cfg.sprites[this._read(SPRITE_SEL) & 15];
        switch (address2) {
          case SPRITE_SRC: {
            sprite.src = data;
            sprite.visible = (sprite.src & 128) >>> 7;
            sprite.zIndex = (sprite.src & 96) >>> 5;
            sprite.page = sprite.src & 31;
            return;
          }
          case SPRITE_CFG: {
            sprite.cfg = data;
            sprite.scale = (sprite.cfg & 192) >>> 6;
            sprite.tilePage = sprite.cfg & 31;
            return;
          }
          case SPRITE_IDX:
            return sprite.idx = data;
          case SPRITE_DIM: {
            sprite.dimensions = data;
            sprite.height = (sprite.dimensions & 240) >>> 4;
            sprite.width = sprite.dimensions & 15;
            return;
          }
          case SPRITE_FG:
            return sprite.fg = data;
          case SPRITE_BG:
            return sprite.bg = data;
          case SPRITE_X_HI:
            return sprite.x = sprite.x & 255 | data << 8;
          case SPRITE_X_LO:
            return sprite.x = sprite.x & 65280 | data;
          case SPRITE_Y_HI:
            return sprite.y = sprite.y & 255 | data << 8;
          case SPRITE_Y_LO:
            return sprite.y = sprite.y & 65280 | data;
        }
      }
    }
    pullFromBus(address2) {
      super.pullFromBus(address2);
      switch (address2) {
        case RESET_WAIT:
          return this.resetWait();
      }
    }
    get mirrored() {
      return MIRROR_MAP;
    }
    resetWait() {
      this._wait = false;
      if (this._stats)
        this._stats.begin();
    }
    tick() {
      super.tick();
      this._ticksThisSecond++;
      if (this._mode === MODES.FAST) {
        this._ticksSinceRaster++;
        if (this._wait) {
          if (this._ticksSinceRaster > this._ticksPerRaster) {
            this._ticksSinceRaster = 0;
            this._raster++;
            if (this._raster > 480)
              this._raster = 480;
          }
          this._write(CURRENT_RASTER, this._raster >> 1);
          return;
        }
        this._spritesByLayer = this._getSprites();
        this._generateScreen();
        this._raster = 0;
        this._wait = true;
        this.requestService();
        this._write(CURRENT_RASTER, this._raster >> 1);
        this._adjustRasterSpeed();
      } else {
        if (this._wait)
          return;
        this._ticksSinceRaster++;
        if (this._raster === 0) {
          if (this._stats)
            this._stats.begin();
        }
        if (this._ticksSinceRaster >= this._ticksPerRaster) {
          this._ticksSinceRaster = 0;
          this._generateRasterLine2();
          this._raster++;
          if (this._raster > SCREEN_ROWS) {
            if (this._stats)
              this._stats.end();
            this._raster = 0;
            this._wait = true;
            this._spritesByLayer = this._getSprites();
          }
          if (this._raster === this._read(TRAP_ON_RASTER) << 1) {
            this.requestService();
          }
          this._write(CURRENT_RASTER, this._raster >> 1);
          this._adjustRasterSpeed();
        }
      }
    }
    _getLayers() {
      return this._cfg.layers;
    }
    _getSprites() {
      const spritesByLayer = [[], [], [], []];
      const sprites = this._cfg.sprites;
      for (let i = 0; i < 16; i++) {
        const sprite = sprites[i];
        if (sprite.visible === 1)
          sprite.pageAddr = (sprite.page << 14) + (sprite.idx << 8);
        sprite.tilePageAddr = sprite.tilePage << 14;
        sprite.xOffset = sprite.x - (sprite.x > 32767 ? 65536 : 0);
        sprite.yOffset = sprite.y - (sprite.y > 32767 ? 65536 : 0);
        sprite.maxWidth = sprite.width << 3;
        sprite.maxHeight = sprite.height << 3;
        spritesByLayer[sprite.zIndex & 3].push(sprite);
      }
      return spritesByLayer;
    }
    _drawPixelOnRaster(x, y, scale, tilePixel, currentRaster) {
      for (let sY = (1 << scale) - 1; sY >= 0; sY--) {
        if (y + sY === currentRaster) {
          for (let sX = (1 << scale) - 1; sX >= 0; sX--) {
            const offset = (y + sY) * SCREEN_COLUMNS + (x + sX);
            this._pixelFrame[offset] = tilePixel;
          }
        }
      }
      return;
    }
    _drawPixel(x, y, scale, tilePixel) {
      for (let sY = (1 << scale) - 1; sY >= 0; sY--) {
        for (let sX = (1 << scale) - 1; sX >= 0; sX--) {
          const offset = (y + sY) * SCREEN_COLUMNS + (x + sX);
          this._pixelFrame[offset] = tilePixel;
        }
      }
      return;
    }
    _generateScreen() {
      if (this._stats)
        this._stats.begin();
      const palettePage = this._read(PALETTE_PAGE);
      const paletteAddr = palettePage << 14;
      const bgColor = this._read(BG_COLOR);
      const borderCfg = this._read(BORDER_CFG);
      const borderColor = borderCfg & 128 ? this._read(BORDER_COLOR) : bgColor;
      const extraBorderWidth = (borderCfg & 7) << 1;
      const extraBorderHeight = (borderCfg & 56) >> 2;
      const trapOnRaster = this._read(TRAP_ON_RASTER);
      const currentRaster = this._raster;
      const layers = this._getLayers();
      let spritesByLayer = this._spritesByLayer;
      this._pixelFrame.fill(bgColor);
      for (let layerIdx = 0; layerIdx < 4; layerIdx++) {
        const layer = layers[layerIdx];
        const sprites = spritesByLayer[layerIdx];
        if (layer.visible) {
          const pageAddr = layer.page << 14;
          const tilePageAddr = layer.tilePage << 14;
          const halfWidth = (layer.mode & 1) === 0;
          const maxWidth = SCREEN_COLUMNS - (BORDER_WIDTH << 1) >> halfWidth;
          const maxHeight = SCREEN_ROWS - (BORDER_HEIGHT << 1) >> halfWidth;
          const xOffset = layer.xOffset - ((layer.xOffset > 127) << 8) << halfWidth;
          const yOffset = layer.yOffset - ((layer.yOffset > 127) << 8) << halfWidth;
          const xLeftCrop = layer.xWindow << halfWidth;
          const xRightCrop = maxWidth - xLeftCrop;
          const yTopCrop = layer.yWindow << halfWidth;
          const yBottomCrop = maxHeight - yTopCrop;
          const scale = layer.scale + 1 - (layer.mode & 1);
          if (layer.mode >= 2) {
            const rows = ADDRESSABLE_ROWS / (2 - (layer.mode & 1));
            const cols = ADDRESSABLE_COLUMNS / (2 - (layer.mode & 1));
            const firstVisibleRow = layer.yWindow;
            const lastVisibleRow = rows - layer.yWindow;
            const firstVisibleColumn = layer.xWindow;
            const lastVisibleColumn = cols - layer.xWindow;
            for (let row = lastVisibleRow - 1; row >= firstVisibleRow; row--) {
              for (let col = lastVisibleColumn - 1; col >= firstVisibleColumn; col--) {
                const x = BORDER_WIDTH + (col << scale) + xOffset;
                const y = BORDER_HEIGHT + (row << scale) + yOffset;
                if (x >= 0 && y >= 0 && x < SCREEN_COLUMNS && y < SCREEN_ROWS) {
                  let tilePixel = this.memory.readUnmappedByte(pageAddr + (row << 8) + col);
                  if (tilePixel === 0)
                    tilePixel = layer.bg;
                  if (tilePixel === 255)
                    tilePixel = layer.fg;
                  if (tilePixel !== 0)
                    this._drawPixel(x, y, scale, tilePixel);
                }
              }
            }
          } else {
            const rows = 24 * (layer.mode + 1);
            const cols = 32 * (layer.mode + 1);
            const firstVisibleRow = layer.yWindow;
            const lastVisibleRow = rows - layer.yWindow;
            const firstVisibleColumn = layer.xWindow;
            const lastVisibleColumn = cols - layer.xWindow;
            const lineSpacing = layer.lineSpacing;
            const rowMultiplier = 8 + lineSpacing;
            const rowHeight = rowMultiplier - 1;
            let tilePos;
            let tile;
            let tileFgColor;
            let tileBgColor;
            let row, _y, y;
            let col, _x, x;
            let tilePixel;
            let layerFg = layer.fg;
            let layerBg = layer.bg;
            for (row = lastVisibleRow - 1; row >= firstVisibleRow; row--) {
              for (col = lastVisibleColumn - 1; col >= firstVisibleColumn; col--) {
                tilePos = (row << 5 + (layer.mode !== 0)) + col;
                tile = this.memory.readUnmappedByte(pageAddr + tilePos);
                tileFgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 4096);
                tileBgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 8192);
                for (_y = rowHeight; _y >= 0; _y--) {
                  for (_x = 7; _x >= 0; _x--) {
                    x = BORDER_WIDTH + (col * 8 + _x << scale) + xOffset;
                    y = BORDER_HEIGHT + (row * rowMultiplier + _y << scale) + yOffset;
                    if (x >= 0 && y >= 0 && x < SCREEN_COLUMNS && y < SCREEN_ROWS) {
                      tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (_y << 3) + _x);
                      if (_y > 7) {
                        if (tile < 128) {
                          tilePixel = 0;
                        } else {
                          tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (7 << 3) + _x);
                        }
                      }
                      tilePixel = tilePixel < 1 ? tileBgColor : tilePixel < 255 ? tilePixel : tileFgColor;
                      tilePixel = tilePixel < 1 ? layerBg : tilePixel < 255 ? tilePixel : layerFg;
                      if (tilePixel !== 0)
                        this._drawPixel(x, y, scale, tilePixel);
                    }
                  }
                }
              }
            }
          }
        }
        for (let spriteIdx = sprites.length - 1; spriteIdx >= 0; spriteIdx--) {
          const sprite = sprites[spriteIdx];
          if (sprite.visible) {
            const rows = sprite.height;
            const cols = sprite.width;
            let row, y, _y;
            let col, x, _x;
            let tilePos, tile, tileFgColor, tileBgColor, scale;
            let tilePixel;
            let spriteBg = sprite.bg;
            let spriteFg = sprite.fg;
            for (row = rows - 1; row >= 0; row--) {
              for (col = cols - 1; col >= 0; col--) {
                tilePos = row * cols + col;
                tile = this.memory.readUnmappedByte(sprite.pageAddr + tilePos);
                tileFgColor = this.memory.readUnmappedByte(sprite.pageAddr + tilePos + 64);
                tileBgColor = this.memory.readUnmappedByte(sprite.pageAddr + tilePos + 128);
                scale = sprite.scale;
                for (_y = 7; _y >= 0; _y--) {
                  y = (row * 8 + _y << scale) + sprite.yOffset;
                  for (_x = 7; _x >= 0; _x--) {
                    x = (col * 8 + _x << scale) + sprite.xOffset;
                    tilePixel = this.memory.readUnmappedByte(sprite.tilePageAddr + (tile << 6) + (_y << 3) + _x);
                    tilePixel = tilePixel < 1 ? tileBgColor : tilePixel < 255 ? tilePixel : tileFgColor;
                    tilePixel = tilePixel < 1 ? spriteBg : tilePixel < 255 ? tilePixel : spriteFg;
                    if (tilePixel !== 0)
                      this._drawPixel(x, y, scale, tilePixel);
                  }
                }
              }
            }
          }
        }
      }
      for (let y = SCREEN_ROWS - 1; y >= 0; y--) {
        for (let x = SCREEN_COLUMNS - 1; x >= 0; x--) {
          const offset = y * SCREEN_COLUMNS + x;
          const curPixelColor = y < BORDER_HEIGHT + extraBorderHeight || y >= SCREEN_ROWS - (BORDER_HEIGHT + extraBorderHeight) || x < BORDER_WIDTH + extraBorderWidth || x >= SCREEN_COLUMNS - (BORDER_WIDTH + extraBorderWidth) ? borderColor : this._pixelFrame[offset];
          const paletteOffset = curPixelColor << 2;
          const r = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 0);
          const g = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 1);
          const b2 = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 2);
          const frameOffset = offset * 4;
          this._frame[frameOffset + 0] = r;
          this._frame[frameOffset + 1] = g;
          this._frame[frameOffset + 2] = b2;
          this._frame[frameOffset + 3] = 255;
        }
      }
      if (this._stats)
        this._stats.end();
    }
    _generateRasterLine2() {
      const palettePage = this._read(PALETTE_PAGE);
      const paletteAddr = palettePage << 14;
      const bgColor = this._read(BG_COLOR);
      const borderCfg = this._read(BORDER_CFG);
      const borderColor = borderCfg & 128 ? this._read(BORDER_COLOR) : bgColor;
      const extraBorderWidth = (borderCfg & 7) << 1;
      const extraBorderHeight = (borderCfg & 56) >> 2;
      const trapOnRaster = this._read(TRAP_ON_RASTER);
      const currentRaster = this._raster;
      const layers = this._getLayers();
      let spritesByLayer = this._spritesByLayer;
      if (currentRaster === 0)
        this._pixelFrame.fill(bgColor);
      for (let layerIdx = 0; layerIdx < 4; layerIdx++) {
        const layer = layers[layerIdx];
        const sprites = spritesByLayer[layerIdx];
        if (layer.visible) {
          const pageAddr = layer.page << 14;
          const tilePageAddr = layer.tilePage << 14;
          const halfWidth = (layer.mode & 1) === 0;
          const maxWidth = SCREEN_COLUMNS - (BORDER_WIDTH << 1) >> halfWidth;
          const maxHeight = SCREEN_ROWS - (BORDER_HEIGHT << 1) >> halfWidth;
          const xOffset = layer.xOffset - ((layer.xOffset > 127) << 8) << halfWidth;
          const yOffset = layer.yOffset - ((layer.yOffset > 127) << 8) << halfWidth;
          const xLeftCrop = layer.xWindow << halfWidth;
          const xRightCrop = maxWidth - xLeftCrop;
          const yTopCrop = layer.yWindow << halfWidth;
          const yBottomCrop = maxHeight - yTopCrop;
          const scale = layer.scale + 1 - (layer.mode & 1);
          if (layer.mode >= 2) {
            const rows = ADDRESSABLE_ROWS / (2 - (layer.mode & 1));
            const cols = ADDRESSABLE_COLUMNS / (2 - (layer.mode & 1));
            const firstVisibleRow = layer.yWindow;
            const lastVisibleRow = rows - layer.yWindow;
            const firstVisibleColumn = layer.xWindow;
            const lastVisibleColumn = cols - layer.xWindow;
            let row = currentRaster;
            for (let col = lastVisibleColumn - 1; col >= firstVisibleColumn; col--) {
              const x = BORDER_WIDTH + (col << scale) + xOffset;
              const y2 = BORDER_HEIGHT + (row << scale) + yOffset;
              if (x >= 0 && y2 >= 0 && x < SCREEN_COLUMNS && y2 < SCREEN_ROWS) {
                let tilePixel = this.memory.readUnmappedByte(pageAddr + (row << 8) + col);
                if (tilePixel === 0)
                  tilePixel = layer.bg;
                if (tilePixel === 255)
                  tilePixel = layer.fg;
                if (tilePixel !== 0)
                  this._drawPixel(x, y2, scale, tilePixel);
              }
            }
          } else {
            const rows = 24 * (layer.mode + 1);
            const cols = 32 * (layer.mode + 1);
            const firstVisibleRow = layer.yWindow;
            const lastVisibleRow = rows - layer.yWindow;
            const firstVisibleColumn = layer.xWindow;
            const lastVisibleColumn = cols - layer.xWindow;
            const lineSpacing = layer.lineSpacing;
            const rowMultiplier = 8 + lineSpacing;
            const rowHeight = rowMultiplier - 1;
            let row = Math.floor(currentRaster / rowMultiplier);
            for (let col = lastVisibleColumn - 1; col >= firstVisibleColumn; col--) {
              const tilePos = (row << 5 + (layer.mode !== 0)) + col;
              const tile = this.memory.readUnmappedByte(pageAddr + tilePos);
              const tileFgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 4096);
              const tileBgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 8192);
              let _y = currentRaster % rowMultiplier;
              const y2 = BORDER_HEIGHT + (row * rowMultiplier + _y << scale) + yOffset;
              for (let _x = 7; _x >= 0; _x--) {
                const x = BORDER_WIDTH + (col * 8 + _x << scale) + xOffset;
                const offset = y2 * SCREEN_COLUMNS + x;
                if (x >= 0 && y2 >= 0 && x < SCREEN_COLUMNS && y2 < SCREEN_ROWS) {
                  let tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (_y << 3) + _x);
                  if (_y > 7) {
                    if (tile < 128) {
                      tilePixel = 0;
                    } else {
                      tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (7 << 3) + _x);
                    }
                  }
                  if (tilePixel === 0)
                    tilePixel = tileBgColor;
                  if (tilePixel === 255)
                    tilePixel = tileFgColor;
                  if (tilePixel === 0)
                    tilePixel = layer.bg;
                  if (tilePixel === 255)
                    tilePixel = layer.fg;
                  if (tilePixel !== 0)
                    this._drawPixel(x, y2, scale, tilePixel);
                }
              }
            }
          }
        }
        for (let spriteIdx = sprites.length - 1; spriteIdx >= 0; spriteIdx--) {
          const sprite = sprites[spriteIdx];
          if (sprite.visible) {
            const rows = sprite.height;
            const cols = sprite.width;
            const scale = sprite.scale;
            if (currentRaster < sprite.yOffset)
              continue;
            if (currentRaster > sprite.yOffset + rows * 8 << scale)
              continue;
            for (let row = rows - 1; row >= 0; row--) {
              for (let col = cols - 1; col >= 0; col--) {
                const tilePos = row * cols + col;
                const tile = this.memory.readUnmappedByte(sprite.pageAddr + tilePos);
                const tileFgColor = this.memory.readUnmappedByte(sprite.pageAddr + tilePos + 64);
                const tileBgColor = this.memory.readUnmappedByte(sprite.pageAddr + tilePos + 128);
                for (let _y = 7; _y >= 0; _y--) {
                  const y2 = (row * 8 + _y << scale) + sprite.yOffset;
                  for (let _x = 7; _x >= 0; _x--) {
                    const x = (col * 8 + _x << scale) + sprite.xOffset;
                    let tilePixel = this.memory.readUnmappedByte(sprite.tilePageAddr + (tile << 6) + (_y << 3) + _x);
                    tilePixel = tilePixel < 1 ? tileBgColor : tilePixel < 255 ? tilePixel : tileFgColor;
                    tilePixel = tilePixel < 1 ? sprite.bg : tilePixel < 255 ? tilePixel : sprite.fg;
                    if (tilePixel !== 0)
                      this._drawPixelOnRaster(x, y2, scale, tilePixel, currentRaster);
                  }
                }
              }
            }
          }
        }
      }
      let y = currentRaster;
      for (let x = SCREEN_COLUMNS - 1; x >= 0; x--) {
        const offset = y * SCREEN_COLUMNS + x;
        const curPixelColor = y < BORDER_HEIGHT + extraBorderHeight || y >= SCREEN_ROWS - (BORDER_HEIGHT + extraBorderHeight) || x < BORDER_WIDTH + extraBorderWidth || x >= SCREEN_COLUMNS - (BORDER_WIDTH + extraBorderWidth) ? borderColor : this._pixelFrame[offset];
        const paletteOffset = curPixelColor << 2;
        const r = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 0);
        const g = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 1);
        const b2 = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 2);
        const frameOffset = offset * 4;
        this._frame[frameOffset + 0] = r;
        this._frame[frameOffset + 1] = g;
        this._frame[frameOffset + 2] = b2;
        this._frame[frameOffset + 3] = 255;
      }
    }
    _generateRasterLine() {
      const palettePage = this._read(PALETTE_PAGE);
      const paletteAddr = palettePage << 14;
      const bgColor = this._read(BG_COLOR);
      const borderCfg = this._read(BORDER_CFG);
      const borderColor = borderCfg & 128 ? this._read(BORDER_COLOR) : bgColor;
      const extraBorderWidth = (borderCfg & 7) << 1;
      const extraBorderHeight = (borderCfg & 56) >> 2;
      const trapOnRaster = this._read(TRAP_ON_RASTER);
      const currentRaster = this._raster;
      const layers = this._getLayers();
      let spritesByLayer = this._spritesByLayer;
      const y = currentRaster;
      let i = 0, j = 0, l = 0;
      let curPixelColor = 0, tempPixelColor = 0;
      let r = 0, g = 0, b2 = 0, paletteOffset, frameOffset;
      let layer;
      let charCol, charColX, charRow, charRowY, tilePos, tile, tilePixel, tileFgColor, tileBgColor;
      let aX, aY;
      let pageAddr, tilePageAddr;
      let halfWidth;
      let whichBit;
      let lineHeight, lineSpacing, rowMultiplier;
      let maxWidth = 0, maxHeight = 0;
      let xOffset = 0, yOffset = 0;
      let xLeftCrop = 0, xRightCrop = 0;
      let yTopCrop = 0, yBottomCrop = 0;
      let sprites = [];
      let sprite;
      for (let x = 0; x < SCREEN_COLUMNS; x++) {
        if (x < BORDER_WIDTH + extraBorderWidth || x >= ADDRESSABLE_COLUMNS + BORDER_WIDTH - extraBorderWidth) {
          curPixelColor = borderColor;
        } else if (y < BORDER_HEIGHT + extraBorderHeight || y >= ADDRESSABLE_ROWS + BORDER_HEIGHT - extraBorderHeight) {
          curPixelColor = borderColor;
        } else {
          curPixelColor = bgColor;
          for (i = 0; i < 4; i++) {
            layer = layers[i];
            if (layer.visible === 1) {
              pageAddr = layer.page << 14;
              tilePageAddr = layer.tilePage << 14;
              halfWidth = (layer.mode & 1) === 0;
              lineSpacing = layer.lineSpacing;
              lineHeight = 8 + lineSpacing;
              rowMultiplier = lineHeight - 1;
              maxWidth = SCREEN_COLUMNS - (BORDER_WIDTH << 1) >> halfWidth;
              maxHeight = SCREEN_ROWS - (BORDER_HEIGHT << 1) >> halfWidth;
              xOffset = layer.xOffset - ((layer.xOffset > 127) << 8) << halfWidth;
              yOffset = layer.yOffset - ((layer.yOffset > 127) << 8) << halfWidth;
              xLeftCrop = layer.xWindow << halfWidth;
              xRightCrop = maxWidth - xLeftCrop;
              yTopCrop = layer.yWindow << halfWidth;
              yBottomCrop = maxHeight - yTopCrop;
              aX = x - BORDER_WIDTH - xOffset >> halfWidth >> layer.scale;
              aY = y - BORDER_HEIGHT - yOffset >> halfWidth >> layer.scale;
              if (aX < xLeftCrop || aX >= xRightCrop)
                tempPixelColor = 0;
              else if (aY < yTopCrop || aY >= yBottomCrop)
                tempPixelColor = 0;
              else if (layer.mode >= 2) {
                tempPixelColor = this.memory.readUnmappedByte(pageAddr + (aY << 8) + aX);
              } else {
                charCol = aX >>> 3;
                charColX = aX & 7;
                charRow = aY / lineHeight;
                charRowY = aY % lineHeight;
                tilePos = (charRow << 5 + (layer.mode !== 0)) + charCol;
                tile = this.memory.readUnmappedByte(pageAddr + tilePos);
                tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (charRowY << 3) + charColX);
                if (charRowY > 7) {
                  if (tile < 128) {
                    tilePixel = 0;
                  } else {
                    tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (7 << 3) + charColX);
                  }
                }
                tileFgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 4096);
                tileBgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 8192);
                if (tilePixel === 0)
                  tempPixelColor = tileBgColor;
                else if (tilePixel === 255)
                  tempPixelColor = tileFgColor;
                else
                  tempPixelColor = tilePixel;
                if (tempPixelColor === 0)
                  tempPixelColor = layer.bg;
                else if (tempPixelColor === 255)
                  tempPixelColor = layer.fg;
              }
              curPixelColor = tempPixelColor !== 0 ? tempPixelColor : curPixelColor;
            }
            sprites = spritesByLayer[i];
            for (j = 0, l = sprites.length; j < l; j++) {
              sprite = sprites[j];
              if (sprite.visible === 1) {
                pageAddr = sprite.pageAddr;
                tilePageAddr = sprite.tilePageAddr;
                xOffset = sprite.xOffset;
                yOffset = sprite.yOffset;
                maxWidth = sprite.maxWidth;
                maxHeight = sprite.maxHeight;
                aX = x - xOffset >> sprite.scale;
                aY = y - yOffset >> sprite.scale;
                tempPixelColor = 0;
                if (aX >= 0 && aX < maxWidth && (aY >= 0 && aY < maxHeight)) {
                  charCol = aX >>> 3;
                  charColX = aX & 7;
                  charRow = aY >>> 3;
                  charRowY = aY & 7;
                  tilePos = charRow * sprite.width + charCol;
                  tile = this.memory.readUnmappedByte(pageAddr + tilePos);
                  tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (charRowY << 3) + charColX);
                  tileFgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 64);
                  tileBgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 128);
                  if (tilePixel === 0)
                    tempPixelColor = tileBgColor;
                  else if (tilePixel === 255)
                    tempPixelColor = tileFgColor;
                  else
                    tempPixelColor = tilePixel;
                  if (tempPixelColor === 0)
                    tempPixelColor = sprite.bg;
                  else if (tempPixelColor === 255)
                    tempPixelColor = sprite.fg;
                }
                curPixelColor = tempPixelColor !== 0 ? tempPixelColor : curPixelColor;
              }
            }
          }
        }
        paletteOffset = curPixelColor << 2;
        r = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 0);
        g = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 1);
        b2 = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 2);
        frameOffset = (y << 9) + (y << 7) + x << 2;
        this._frame[frameOffset + 0] = r;
        this._frame[frameOffset + 1] = g;
        this._frame[frameOffset + 2] = b2;
        this._frame[frameOffset + 3] = 255;
      }
    }
    _adjustRasterSpeed() {
      const now = this._performance.now();
      if (now >= this._lastPerformance + MS_PER_SEC) {
        const delta = (now - this._lastPerformance) / MS_PER_SEC;
        this._lastPerformance = now;
        this._ticksPerSecond = (this._ticksLastSecond + this._ticksThisSecond / delta) / 2;
        if (this.adjustPerformance) {
          this._ticksPerRaster = Math.floor(this._ticksPerSecond / (TARGET_FPS * SCREEN_ROWS));
        }
        this._ticksLastSecond = this._ticksThisSecond / delta;
        this._ticksThisSecond = 0;
      }
    }
  };

  // src/devices/DMA.js
  var SOURCE_ADDRESS = 0;
  var TARGET_ADDRESS = 4;
  var LENGTH = 8;
  var MODE = 12;
  var FILL = 13;
  var SKIP = 10;
  var TIMES = 14;
  var MODE_COPY = 1;
  var MODE_SWAP = 2;
  var MODE_FILL = 4;
  var MIRROR_MAP2 = {
    [SOURCE_ADDRESS + 0]: true,
    [SOURCE_ADDRESS + 1]: true,
    [SOURCE_ADDRESS + 2]: true,
    [TARGET_ADDRESS + 0]: true,
    [TARGET_ADDRESS + 1]: true,
    [TARGET_ADDRESS + 2]: true,
    [LENGTH + 0]: true,
    [LENGTH + 1]: true,
    [MODE]: true,
    [FILL]: true,
    [SKIP]: true,
    [SKIP + 1]: true,
    [TIMES]: true,
    [TIMES + 1]: true
  };
  var DMA = class extends Device {
    constructor({ device = 13, length = 16, controller, memory = void 0, clock = void 0 }) {
      super({ device, length, controller, memory, clock });
    }
    pullFromBus(address2) {
      super.pullFromBus(address2);
      if (address2 === MODE) {
        let source = (this._read(SOURCE_ADDRESS + 0) << 16 | this._read(SOURCE_ADDRESS + 1) << 8 | this._read(SOURCE_ADDRESS + 2)) & 524287;
        let target = (this._read(TARGET_ADDRESS + 0) << 16 | this._read(TARGET_ADDRESS + 1) << 8 | this._read(TARGET_ADDRESS + 2)) & 524287;
        const length = (this._read(LENGTH + 0) << 8 | this._read(LENGTH + 1)) & 65535;
        const fill = this._read(FILL);
        const skip = (this._read(SKIP) << 8 | this._read(SKIP + 1)) & 65535;
        let times = (this._read(TIMES) << 8 | this._read(TIMES + 1)) & 65535;
        const mode = this._read(MODE);
        do {
          switch (mode) {
            case MODE_COPY:
              this.memory.copyWithin(source, target, length);
              break;
            case MODE_SWAP:
              this.memory.swapWithin(source, target, length);
              break;
            case MODE_FILL:
              this.memory.fillWithin(fill, source, length);
              break;
          }
          times--;
          source += skip;
          target += skip;
        } while (times > 0);
      }
    }
    get mirrored() {
      return MIRROR_MAP2;
    }
  };

  // src/devices/Keyboard.js
  var PORT_KEY_PRESSED = 0;
  var PORT_BUFFER_REMAINING = 1;
  var PORT_ROW_0_QUAD_0 = 2;
  var PORT_ROW_0_QUAD_1 = 3;
  var PORT_ROW_1_QUAD_0 = 4;
  var PORT_ROW_1_QUAD_1 = 5;
  var PORT_ROW_2_QUAD_0 = 6;
  var PORT_ROW_2_QUAD_1 = 7;
  var PORT_ROW_3_QUAD_0 = 8;
  var PORT_ROW_3_QUAD_1 = 9;
  var PORT_ROW_4_QUAD_0 = 10;
  var PORT_ROW_4_QUAD_1 = 11;
  var MIRROR_MAP3 = {
    [PORT_KEY_PRESSED]: true,
    [PORT_BUFFER_REMAINING]: true,
    [PORT_ROW_0_QUAD_0]: true,
    [PORT_ROW_0_QUAD_1]: true,
    [PORT_ROW_1_QUAD_0]: true,
    [PORT_ROW_1_QUAD_1]: true,
    [PORT_ROW_2_QUAD_0]: true,
    [PORT_ROW_2_QUAD_1]: true,
    [PORT_ROW_3_QUAD_0]: true,
    [PORT_ROW_3_QUAD_1]: true,
    [PORT_ROW_4_QUAD_0]: true,
    [PORT_ROW_4_QUAD_1]: true
  };
  var BS = 8;
  var TAB = 9;
  var FF = 12;
  var CR = 13;
  var ARR = 16;
  var ARL = 17;
  var F1 = 18;
  var F2 = 19;
  var F3 = 20;
  var F4 = 21;
  var F5 = 22;
  var F6 = 23;
  var F7 = 24;
  var F8 = 25;
  var F9 = 26;
  var F10 = 27;
  var DEL = 29;
  var ARU = 30;
  var ARD = 31;
  var KEYBOARD_MAP = [
    [
      ["Backquote", "`", "~", 255, 142, 0],
      [["Digit1", "Numpad1"], "1", "!", 228, 134, 28],
      [["Digit2", "Numpad2"], "2", "@", 229, 135, 29],
      [["Digit3", "Numpad3"], "3", "#", 251, 136, 30],
      [["Digit4", "Numpad4"], "4", "$", 240, 152, 31],
      [["Digit5", "Numpad5"], "5", "%", 241, 168, 0],
      [["Digit6", "Numpad6"], "6", "^", 242, 150, 0],
      [["Digit7", "Numpad7"], "7", "&", 243, 151, 0],
      [["Digit8", "Numpad8", "NumpadMultiply"], "8", "*", 244, 166, 0],
      [["Digit9", "Numpad9"], "9", "(", 245, 167, 0],
      [["Digit0", "Numpad0"], "0", ")", 246, 158, 27],
      [["Minus", "NumpadSubtract"], "-", "_", 237, 147, 0],
      [["Equal", "NumpadEqual", "NumpadAdd"], "=", "+", 235, 149, 0],
      ["Backspace", BS, DEL, 127, DEL, FF],
      ["F1", F1, F1, F1, F1, F1],
      ["F2", F2, F2, F2, F2, F2]
    ],
    [
      ["Tab", TAB, TAB, 0, 0, 0],
      ["KeyQ", "q", "Q", 218, 213, "Q".charCodeAt(0) - 64],
      ["KeyW", "w", "W", 194, 209, "W".charCodeAt(0) - 64],
      ["KeyE", "e", "E", 191, 184, "E".charCodeAt(0) - 64],
      ["KeyR", "r", "R", 201, 214, "R".charCodeAt(0) - 64],
      ["KeyT", "t", "T", 203, 210, "T".charCodeAt(0) - 64],
      ["KeyY", "y", "Y", 187, 183, "Y".charCodeAt(0) - 64],
      ["KeyU", "u", "U", 233, 227, "U".charCodeAt(0) - 64],
      ["KeyI", "i", "I", 223, 196, "I".charCodeAt(0) - 64],
      ["KeyO", "o", "O", 232, 226, "O".charCodeAt(0) - 64],
      ["KeyP", "p", "P", 178, 131, "P".charCodeAt(0) - 64],
      ["BracketLeft", "[", "{", 236, 133, 0],
      ["BracketRight", "]", "}", 234, 132, 0],
      ["Backslash", "\\", "|", 239, 164, 0],
      ["F3", F3, F3, F3, F3, F3],
      ["F4", F4, F4, F4, F4, F4]
    ],
    [
      ["CapsLock", 0, 0, 0, 0, 0],
      ["KeyA", "a", "A", 195, 198, "A".charCodeAt(0) - 64],
      ["KeyS", "s", "S", 197, 216, "S".charCodeAt(0) - 64],
      ["KeyD", "d", "D", 180, 181, "D".charCodeAt(0) - 64],
      ["KeyF", "f", "F", 204, 199, "F".charCodeAt(0) - 64],
      ["KeyG", "g", "G", 206, 215, "G".charCodeAt(0) - 64],
      ["KeyH", "h", "H", 185, 182, "H".charCodeAt(0) - 64],
      ["KeyJ", "j", "J", 221, 179, "J".charCodeAt(0) - 64],
      ["KeyK", "k", "K", 219, 159, "K".charCodeAt(0) - 64],
      ["KeyL", "l", "L", 222, 186, "L".charCodeAt(0) - 64],
      ["Semicolon", ";", ":", 176, 163, 0],
      ["Quote", `'`, `"`, 177, 165, 0],
      void 0,
      [["Enter", "NumpadEnter"], CR, CR, CR, CR, CR],
      ["F5", F5, F5, F5, F5, F5],
      ["F6", F6, F6, F6, F6, F6]
    ],
    [
      ["ShiftLeft", 0, 0, 0, 0, 0],
      ["KeyZ", "z", "Z", 192, 212, "Z".charCodeAt(0) - 64],
      ["KeyX", "x", "X", 193, 207, "X".charCodeAt(0) - 64],
      ["KeyC", "c", "C", 217, 190, "C".charCodeAt(0) - 64],
      ["KeyV", "v", "V", 200, 211, "V".charCodeAt(0) - 64],
      ["KeyB", "b", "B", 202, 208, "B".charCodeAt(0) - 64],
      ["KeyN", "n", "N", 188, 189, "N".charCodeAt(0) - 64],
      ["KeyM", "m", "M", 231, 225, "M".charCodeAt(0) - 64],
      ["Comma", ",", "<", 220, 205, 0],
      [["Period", "NumpadDecimal"], ".", ">", 230, 224, 0],
      [["Slash", "NumpadDivide"], "/", "?", 238, 143, 0],
      void 0,
      ["ArrowUp", ARU, ARU, ARU, ARU, ARU],
      ["ShiftRight", 0, 0, 0, 0, 0],
      ["F7", F7, F7, F7, F7, F7],
      ["F8", F8, F8, F8, F8, F8]
    ],
    [
      [["MetaLeft", "MetaRight"], 0, 0, 0, 0, 0],
      [["AltLeft", "AltRight"], 0, 0, 0, 0, 0],
      [["ControlLeft", "ControlRight"], 0, 0, 0, 0, 0],
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      ["Space", 32, 32, 32, 32, 32],
      void 0,
      void 0,
      ["ArrowLeft", ARL, ARL, ARL, ARL, ARL],
      ["ArrowDown", ARD, ARD, ARD, ARD, ARD],
      ["ArrowRight", ARR, ARR, ARR, ARR, ARR],
      ["F9", F9, F9, F9, F9, F9],
      ["F10", F10, F10, F10, F10, F10]
    ]
  ];
  var KEYCODE_MAP = {};
  KEYBOARD_MAP.map((keys, row) => keys && keys.map((data, col) => {
    if (data) {
      const [key, unshifted, shifted, gru, grs, ctl] = data;
      const tmp = { addr: row * 16 + col, unshifted, shifted, gru, grs, ctl };
      if (typeof tmp.unshifted === "string")
        tmp.unshifted = tmp.unshifted.charCodeAt(0);
      if (typeof tmp.shifted === "string")
        tmp.shifted = tmp.shifted.charCodeAt(0);
      if (typeof tmp.gru === "string")
        tmp.gru = tmp.gru.charCodeAt(0);
      if (typeof tmp.grs === "string")
        tmp.grs = tmp.grs.charCodeAt(0);
      if (typeof tmp.ctl === "string")
        tmp.ctl = tmp.ctl.charCodeAt(0);
      if (Array.isArray(key)) {
        for (let theKey of key) {
          KEYCODE_MAP[theKey] = tmp;
        }
      } else {
        KEYCODE_MAP[key] = tmp;
      }
    }
  }));
  function mapKeyCode(code) {
    const data = KEYCODE_MAP[code];
    if (data) {
      const addr = data.addr;
      if (addr !== void 0) {
        const bit = addr & 7;
        const quad = (addr & 248) >> 3;
        const mask2 = ~(1 << bit);
        return { mask: mask2, bit, port: quad + 2, data };
      }
      return {};
    }
    return {};
  }
  var Keyboard = class extends Device {
    constructor({ device = 3, length = 16, controller, memory = void 0, clock = void 0 }) {
      super({ device, length, controller, memory, clock });
      this._buffer = "";
    }
    get isShifted() {
      return this._read(PORT_ROW_3_QUAD_0) & 1 || this._read(PORT_ROW_3_QUAD_1) & 32;
    }
    get isGr() {
      return !!(this._read(PORT_ROW_4_QUAD_0) & 2);
    }
    get isCtl() {
      return !!(this._read(PORT_ROW_4_QUAD_0) & 4);
    }
    setRawKey(row, col) {
      const bit = col & 7;
      const port = 2 + ((row * 16 + col & 248) >> 3);
      const mask2 = ~(1 << bit);
      const cur = this._read(port);
      this._write(port, cur & mask2 | 1 << bit);
    }
    clearRawKey(row, col) {
      const bit = col & 7;
      const port = 2 + ((row * 16 + col & 248) >> 3);
      const mask2 = ~(1 << bit);
      const cur = this._read(port);
      this._write(port, cur & mask2);
    }
    getRawKey(row, col) {
      const bit = col & 7;
      const port = 2 + ((row * 16 + col & 248) >> 3);
      const mask2 = ~(1 << bit);
      const cur = this._read(port);
      return cur & 1 << bit ? 1 : 0;
    }
    keyPressed(which) {
      this._buffer += String.fromCharCode(which);
      this.requestService();
    }
    keyDown(which) {
      const { mask: mask2, port, bit, data } = mapKeyCode(which);
      if (port !== void 0) {
        const cur = this._read(port);
        this._write(port, cur & mask2 | 1 << bit);
      }
      if (data) {
        const isShifted = this._read(PORT_ROW_3_QUAD_0) & 1 || this._read(PORT_ROW_3_QUAD_1) & 32;
        const isGr = !!(this._read(PORT_ROW_4_QUAD_0) & 2);
        const isCtl = !!(this._read(PORT_ROW_4_QUAD_0) & 4);
        let key;
        if (isCtl) {
          this.keyPressed(data.ctl);
          return;
        }
        if (!isGr && !isShifted) {
          this.keyPressed(data.unshifted);
          return;
        }
        if (!isGr && isShifted) {
          this.keyPressed(data.shifted);
          return;
        }
        if (isGr && !isShifted) {
          this.keyPressed(data.gru);
          return;
        }
        if (isGr && isShifted) {
          this.keyPressed(data.grs);
          return;
        }
      }
      this.requestService();
    }
    keyUp(which) {
      const { mask: mask2, port, data } = mapKeyCode(which);
      if (port !== void 0) {
        const cur = this._read(port);
        this._write(port, cur & mask2);
      }
      this.requestService();
    }
    _read(address2 = 0) {
      let data = super._read(address2);
      if (address2 === PORT_KEY_PRESSED) {
        data = this._buffer.charCodeAt(0);
      }
      if (address2 === PORT_BUFFER_REMAINING) {
        data = 255 - Math.min(this._buffer.length, 255);
      }
      return data;
    }
    putOnBus(address2 = 0) {
      super.putOnBus(address2);
      if (address2 === PORT_KEY_PRESSED) {
        this._buffer = this._buffer.substr(1);
      }
    }
    get mirrored() {
      return MIRROR_MAP3;
    }
  };

  // src/devices/Timers.js
  var PORT_RTC_HOURS = 0;
  var PORT_RTC_MINUTES = 1;
  var PORT_RTC_SECONDS = 2;
  var PORT_RTC_HUNDREDTHS = 3;
  var PORT_TIMER_0_HIGH = 4;
  var PORT_TIMER_0_LOW = 5;
  var PORT_TIMER_1_HIGH = 6;
  var PORT_TIMER_1_LOW = 7;
  var PORT_TIMER_2_HIGH = 8;
  var PORT_TIMER_2_LOW = 9;
  var PORT_TIMER_3_HIGH = 10;
  var PORT_TIMER_3_LOW = 11;
  var PORT_RANDOM_HIGH = 12;
  var PORT_RANDOM_LOW = 13;
  var PORT_TIMER_MODES = 14;
  var PORT_RESET = 15;
  var MIRROR_MAP4 = {
    [PORT_RTC_HOURS]: true,
    [PORT_RTC_MINUTES]: true,
    [PORT_RTC_SECONDS]: true,
    [PORT_RTC_HUNDREDTHS]: true,
    [PORT_TIMER_0_HIGH]: true,
    [PORT_TIMER_0_LOW]: true,
    [PORT_TIMER_1_HIGH]: true,
    [PORT_TIMER_1_LOW]: true,
    [PORT_TIMER_2_HIGH]: true,
    [PORT_TIMER_2_LOW]: true,
    [PORT_TIMER_3_HIGH]: true,
    [PORT_TIMER_3_LOW]: true,
    [PORT_TIMER_MODES]: true,
    [PORT_RANDOM_HIGH]: true,
    [PORT_RANDOM_LOW]: true,
    [PORT_RESET]: true
  };
  var TIMER_MODES = {
    DISABLED: 0,
    ONE_SHOT: 1,
    MULTI_SHOT: 2,
    RANDOM: 3
  };
  var Timers = class extends Device {
    constructor({ device = 0, length = 16, controller, memory = void 0, clock = void 0, performance: performance2 }) {
      super({ device, length, controller, memory, clock });
      this._timers = Array.from({ length: 5 }, (_, idx) => ({
        mode: idx < 4 ? TIMER_MODES.DISABLED : TIMER_MODES.RANDOM,
        cur: 0,
        dur: 0,
        start: 0,
        read: void 0
      }));
      this._performance = performance2;
      this._lastTime = performance2.now();
      this._tickSkip = 0;
    }
    tick() {
      super.tick();
      if (this._tickSkip > 0) {
        this._tickSkip--;
        return;
      }
      this._tickSkip = 100;
      const now = this._performance.now();
      const then = this._lastTime;
      const delta = now - then;
      this._lastTime = now;
      for (let i = 0; i < this._timers.length; i++) {
        const timer = this._timers[i];
        switch (timer.mode) {
          case TIMER_MODES.ONE_SHOT:
            if (timer.cur < timer.dur) {
              timer.cur = timer.cur + delta;
            } else {
              timer.read = timer.cur;
              timer.cur = 0;
              timer.dur = 0;
              this.requestService();
            }
            break;
          case TIMER_MODES.MULTI_SHOT:
            timer.cur = timer.cur + delta;
            if (timer.cur >= timer.dur) {
              timer.read = timer.cur;
              timer.cur -= timer.dur;
              this.requestService();
            }
            break;
          case TIMER_MODES.RANDOM:
            timer.cur = Math.floor(Math.random() * 65536);
            if (timer.read === void 0) {
              timer.read = timer.cur;
            }
            break;
        }
      }
    }
    _write(address2 = 0, data) {
      super._write(address2, data);
      switch (address2) {
        case PORT_RANDOM_HIGH:
        case PORT_TIMER_3_HIGH:
        case PORT_TIMER_2_HIGH:
        case PORT_TIMER_1_HIGH:
        case PORT_TIMER_0_HIGH:
          this._timers[address2 - 4 >> 1].dur = this[_buffer3][address2] << 8 | this[_buffer3][address2 + 1];
          this._timers[address2 - 4 >> 1].cur = 0;
          break;
        case PORT_TIMER_MODES:
          this._timers[0].mode = data & 3;
          this._timers[1].mode = (data & 12) >> 2;
          this._timers[2].mode = (data & 48) >> 4;
          this._timers[3].mode = (data & 192) >> 6;
          break;
      }
    }
    _read(address2 = 0) {
      let data = super._read(address2);
      switch (address2) {
        case PORT_RTC_HOURS:
          data = new Date().getHours();
          break;
        case PORT_RTC_MINUTES:
          data = new Date().getMinutes();
          break;
        case PORT_RTC_SECONDS:
          data = new Date().getSeconds();
          break;
        case PORT_RTC_HUNDREDTHS:
          data = Math.floor(new Date().getMilliseconds() / 10);
          break;
        case PORT_RANDOM_HIGH:
        case PORT_TIMER_3_HIGH:
        case PORT_TIMER_2_HIGH:
        case PORT_TIMER_1_HIGH:
        case PORT_TIMER_0_HIGH:
          data = this._timers[address2 - 4 >> 1].read;
          if (data === void 0)
            data = Math.floor(this._timers[address2 - 4 >> 1].cur);
          data = (data & 65280) >> 8;
          break;
        case PORT_RANDOM_LOW:
        case PORT_TIMER_3_LOW:
        case PORT_TIMER_2_LOW:
        case PORT_TIMER_1_LOW:
        case PORT_TIMER_0_LOW:
          data = this._timers[address2 - 4 >> 1].read;
          if (data === void 0)
            data = Math.floor(this._timers[address2 - 4 >> 1].cur);
          data = data & 255;
          break;
      }
      return data;
    }
    putOnBus(address2 = 0) {
      super.putOnBus(address2);
      switch (address2) {
        case PORT_RANDOM_LOW:
        case PORT_TIMER_3_LOW:
        case PORT_TIMER_2_LOW:
        case PORT_TIMER_1_LOW:
        case PORT_TIMER_0_LOW:
          const data = this._timers[address2 - 4 >> 1].read;
          if (data !== void 0)
            this._timers[address2 - 4 >> 1].read = void 0;
          break;
      }
    }
    get mirrored() {
      return MIRROR_MAP4;
    }
  };

  // src/roms/kernel.js
  var kernel_default = [
    { addr: 0, data: [
      167,
      167
    ] },
    { addr: 4352, data: [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ] },
    { addr: 45056, data: [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      23,
      22,
      22,
      23,
      22,
      19,
      21,
      23,
      37,
      64,
      180,
      157,
      20,
      0,
      0,
      0,
      48,
      80,
      0,
      167,
      37,
      64,
      180,
      165,
      49,
      16,
      0,
      167
    ] },
    { addr: 458752, data: [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      0,
      0,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      255,
      0,
      255,
      255,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      255,
      255
    ] },
    { addr: 475136, data: [
      0,
      0,
      0,
      0,
      0,
      0,
      63,
      0,
      0,
      63,
      0,
      0,
      0,
      63,
      63,
      0,
      63,
      0,
      0,
      0,
      63,
      0,
      63,
      0,
      63,
      63,
      0,
      0,
      63,
      63,
      63,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      127,
      0,
      0,
      127,
      0,
      0,
      0,
      127,
      127,
      0,
      127,
      0,
      0,
      0,
      127,
      0,
      127,
      0,
      127,
      127,
      0,
      0,
      127,
      127,
      127,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      255,
      0,
      255,
      0,
      0,
      0,
      255,
      0,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      16,
      16,
      16,
      0,
      32,
      32,
      32,
      0,
      48,
      48,
      48,
      0,
      64,
      64,
      64,
      0,
      80,
      80,
      80,
      0,
      96,
      96,
      96,
      0,
      112,
      112,
      112,
      0,
      128,
      128,
      128,
      0,
      144,
      144,
      144,
      0,
      160,
      160,
      160,
      0,
      176,
      176,
      176,
      0,
      192,
      192,
      192,
      0,
      208,
      208,
      208,
      0,
      224,
      224,
      224,
      0,
      240,
      240,
      240,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      51,
      0,
      0,
      0,
      102,
      0,
      0,
      0,
      153,
      0,
      0,
      0,
      204,
      0,
      0,
      0,
      255,
      0,
      0,
      51,
      0,
      0,
      0,
      51,
      51,
      0,
      0,
      51,
      102,
      0,
      0,
      51,
      153,
      0,
      0,
      51,
      204,
      0,
      0,
      51,
      255,
      0,
      0,
      102,
      0,
      0,
      0,
      102,
      51,
      0,
      0,
      102,
      102,
      0,
      0,
      102,
      153,
      0,
      0,
      102,
      204,
      0,
      0,
      102,
      255,
      0,
      0,
      153,
      0,
      0,
      0,
      153,
      51,
      0,
      0,
      153,
      102,
      0,
      0,
      153,
      153,
      0,
      0,
      153,
      204,
      0,
      0,
      153,
      255,
      0,
      0,
      204,
      0,
      0,
      0,
      204,
      51,
      0,
      0,
      204,
      102,
      0,
      0,
      204,
      153,
      0,
      0,
      204,
      204,
      0,
      0,
      204,
      255,
      0,
      0,
      255,
      0,
      0,
      0,
      255,
      51,
      0,
      0,
      255,
      102,
      0,
      0,
      255,
      153,
      0,
      0,
      255,
      204,
      0,
      0,
      255,
      255,
      0,
      51,
      0,
      0,
      0,
      51,
      0,
      51,
      0,
      51,
      0,
      102,
      0,
      51,
      0,
      153,
      0,
      51,
      0,
      204,
      0,
      51,
      0,
      255,
      0,
      51,
      51,
      0,
      0,
      51,
      51,
      51,
      0,
      51,
      51,
      102,
      0,
      51,
      51,
      153,
      0,
      51,
      51,
      204,
      0,
      51,
      51,
      255,
      0,
      51,
      102,
      0,
      0,
      51,
      102,
      51,
      0,
      51,
      102,
      102,
      0,
      51,
      102,
      153,
      0,
      51,
      102,
      204,
      0,
      51,
      102,
      255,
      0,
      51,
      153,
      0,
      0,
      51,
      153,
      51,
      0,
      51,
      153,
      102,
      0,
      51,
      153,
      153,
      0,
      51,
      153,
      204,
      0,
      51,
      153,
      255,
      0,
      51,
      204,
      0,
      0,
      51,
      204,
      51,
      0,
      51,
      204,
      102,
      0,
      51,
      204,
      153,
      0,
      51,
      204,
      204,
      0,
      51,
      204,
      255,
      0,
      51,
      255,
      0,
      0,
      51,
      255,
      51,
      0,
      51,
      255,
      102,
      0,
      51,
      255,
      153,
      0,
      51,
      255,
      204,
      0,
      51,
      255,
      255,
      0,
      102,
      0,
      0,
      0,
      102,
      0,
      51,
      0,
      102,
      0,
      102,
      0,
      102,
      0,
      153,
      0,
      102,
      0,
      204,
      0,
      102,
      0,
      255,
      0,
      102,
      51,
      0,
      0,
      102,
      51,
      51,
      0,
      102,
      51,
      102,
      0,
      102,
      51,
      153,
      0,
      102,
      51,
      204,
      0,
      102,
      51,
      255,
      0,
      102,
      102,
      0,
      0,
      102,
      102,
      51,
      0,
      102,
      102,
      102,
      0,
      102,
      102,
      153,
      0,
      102,
      102,
      204,
      0,
      102,
      102,
      255,
      0,
      102,
      153,
      0,
      0,
      102,
      153,
      51,
      0,
      102,
      153,
      102,
      0,
      102,
      153,
      153,
      0,
      102,
      153,
      204,
      0,
      102,
      153,
      255,
      0,
      102,
      204,
      0,
      0,
      102,
      204,
      51,
      0,
      102,
      204,
      102,
      0,
      102,
      204,
      153,
      0,
      102,
      204,
      204,
      0,
      102,
      204,
      255,
      0,
      102,
      255,
      0,
      0,
      102,
      255,
      51,
      0,
      102,
      255,
      102,
      0,
      102,
      255,
      153,
      0,
      102,
      255,
      204,
      0,
      102,
      255,
      255,
      0,
      153,
      0,
      0,
      0,
      153,
      0,
      51,
      0,
      153,
      0,
      102,
      0,
      153,
      0,
      153,
      0,
      153,
      0,
      204,
      0,
      153,
      0,
      255,
      0,
      153,
      51,
      0,
      0,
      153,
      51,
      51,
      0,
      153,
      51,
      102,
      0,
      153,
      51,
      153,
      0,
      153,
      51,
      204,
      0,
      153,
      51,
      255,
      0,
      153,
      102,
      0,
      0,
      153,
      102,
      51,
      0,
      153,
      102,
      102,
      0,
      153,
      102,
      153,
      0,
      153,
      102,
      204,
      0,
      153,
      102,
      255,
      0,
      153,
      153,
      0,
      0,
      153,
      153,
      51,
      0,
      153,
      153,
      102,
      0,
      153,
      153,
      153,
      0,
      153,
      153,
      204,
      0,
      153,
      153,
      255,
      0,
      153,
      204,
      0,
      0,
      153,
      204,
      51,
      0,
      153,
      204,
      102,
      0,
      153,
      204,
      153,
      0,
      153,
      204,
      204,
      0,
      153,
      204,
      255,
      0,
      153,
      255,
      0,
      0,
      153,
      255,
      51,
      0,
      153,
      255,
      102,
      0,
      153,
      255,
      153,
      0,
      153,
      255,
      204,
      0,
      153,
      255,
      255,
      0,
      204,
      0,
      0,
      0,
      204,
      0,
      51,
      0,
      204,
      0,
      102,
      0,
      204,
      0,
      153,
      0,
      204,
      0,
      204,
      0,
      204,
      0,
      255,
      0,
      204,
      51,
      0,
      0,
      204,
      51,
      51,
      0,
      204,
      51,
      102,
      0,
      204,
      51,
      153,
      0,
      204,
      51,
      204,
      0,
      204,
      51,
      255,
      0,
      204,
      102,
      0,
      0,
      204,
      102,
      51,
      0,
      204,
      102,
      102,
      0,
      204,
      102,
      153,
      0,
      204,
      102,
      204,
      0,
      204,
      102,
      255,
      0,
      204,
      153,
      0,
      0,
      204,
      153,
      51,
      0,
      204,
      153,
      102,
      0,
      204,
      153,
      153,
      0,
      204,
      153,
      204,
      0,
      204,
      153,
      255,
      0,
      204,
      204,
      0,
      0,
      204,
      204,
      51,
      0,
      204,
      204,
      102,
      0,
      204,
      204,
      153,
      0,
      204,
      204,
      204,
      0,
      204,
      204,
      255,
      0,
      204,
      255,
      0,
      0,
      204,
      255,
      51,
      0,
      204,
      255,
      102,
      0,
      204,
      255,
      153,
      0,
      204,
      255,
      204,
      0,
      204,
      255,
      255,
      0,
      255,
      0,
      0,
      0,
      255,
      0,
      51,
      0,
      255,
      0,
      102,
      0,
      255,
      0,
      153,
      0,
      255,
      0,
      204,
      0,
      255,
      0,
      255,
      0,
      255,
      51,
      0,
      0,
      255,
      51,
      51,
      0,
      255,
      51,
      102,
      0,
      255,
      51,
      153,
      0,
      255,
      51,
      204,
      0,
      255,
      51,
      255,
      0,
      255,
      102,
      0,
      0,
      255,
      102,
      51,
      0,
      255,
      102,
      102,
      0,
      255,
      102,
      153,
      0,
      255,
      102,
      204,
      0,
      255,
      102,
      255,
      0,
      255,
      153,
      0,
      0,
      255,
      153,
      51,
      0,
      255,
      153,
      102,
      0,
      255,
      153,
      153,
      0,
      255,
      153,
      204,
      0,
      255,
      153,
      255,
      0,
      255,
      204,
      0,
      0,
      255,
      204,
      51,
      0,
      255,
      204,
      102,
      0,
      255,
      204,
      153,
      0,
      255,
      204,
      204,
      0,
      255,
      204,
      255,
      0,
      255,
      255,
      0,
      0,
      255,
      255,
      51,
      0,
      255,
      255,
      102,
      0,
      255,
      255,
      153,
      0,
      255,
      255,
      204,
      0,
      255,
      255,
      255,
      0
    ] },
    { addr: 491520, data: [
      5,
      21,
      32,
      15,
      255,
      3,
      255,
      4,
      0,
      0,
      255,
      0,
      164,
      0,
      0,
      19,
      19,
      255,
      0,
      32,
      0,
      18,
      0,
      0,
      5,
      21,
      32,
      255,
      255,
      4,
      18,
      32,
      5,
      24,
      32,
      255,
      255,
      4,
      16,
      0,
      6,
      42,
      64,
      255,
      255,
      5,
      9,
      32,
      6,
      48,
      64,
      255,
      255,
      5,
      8,
      0
    ] },
    { addr: 499712, data: [
      12,
      27,
      49,
      55,
      18,
      219,
      219,
      219,
      219,
      219,
      219,
      219,
      219,
      219,
      219,
      219,
      13,
      27,
      49,
      56,
      18,
      219,
      227,
      220,
      232,
      219,
      219,
      219,
      219,
      219,
      219,
      27,
      50,
      53,
      53,
      18,
      32,
      32,
      82,
      69,
      84,
      82,
      79,
      80,
      85,
      84,
      69,
      82,
      32,
      66,
      65,
      83,
      73,
      67,
      32,
      49,
      46,
      48,
      27,
      49,
      57,
      18,
      219,
      222,
      219,
      222,
      219,
      219,
      219,
      219,
      219,
      27,
      50,
      53,
      53,
      18,
      32,
      32,
      32,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      45,
      27,
      50,
      48,
      18,
      219,
      227,
      220,
      232,
      219,
      219,
      219,
      219,
      27,
      50,
      53,
      53,
      18,
      13,
      27,
      50,
      49,
      18,
      219,
      222,
      219,
      221,
      219,
      219,
      219,
      27,
      50,
      53,
      53,
      18,
      32,
      32,
      32,
      49,
      51,
      49,
      48,
      55,
      50,
      32,
      67,
      111,
      100,
      101,
      32,
      66,
      121,
      116,
      101,
      115,
      32,
      70,
      114,
      101,
      101,
      27,
      50,
      50,
      18,
      219,
      222,
      219,
      221,
      219,
      219,
      27,
      50,
      53,
      53,
      18,
      32,
      32,
      32,
      32,
      32,
      54,
      53,
      53,
      51,
      54,
      32,
      72,
      101,
      97,
      112,
      32,
      66,
      121,
      116,
      101,
      115,
      32,
      70,
      114,
      101,
      101,
      27,
      50,
      51,
      18,
      219,
      219,
      219,
      219,
      219,
      27,
      50,
      53,
      53,
      18,
      13,
      0,
      13,
      82,
      69,
      65,
      68,
      89,
      46,
      13,
      0,
      83,
      89,
      78,
      84,
      65,
      88,
      0,
      84,
      89,
      80,
      69,
      32,
      77,
      73,
      83,
      77,
      65,
      84,
      67,
      72,
      0,
      85,
      78,
      68,
      69,
      70,
      73,
      78,
      69,
      68,
      32,
      83,
      85,
      66,
      82,
      79,
      85,
      84,
      73,
      78,
      69,
      0,
      85,
      78,
      68,
      69,
      70,
      73,
      78,
      69,
      68,
      32,
      70,
      85,
      78,
      67,
      84,
      73,
      79,
      78,
      0,
      85,
      78,
      68,
      69,
      70,
      73,
      78,
      69,
      68,
      32,
      83,
      84,
      65,
      84,
      69,
      77,
      69,
      78,
      84,
      0,
      73,
      78,
      83,
      85,
      70,
      70,
      73,
      67,
      73,
      69,
      78,
      84,
      32,
      65,
      82,
      71,
      85,
      77,
      69,
      78,
      84,
      83,
      0,
      84,
      79,
      79,
      32,
      77,
      65,
      78,
      89,
      32,
      65,
      82,
      71,
      85,
      77,
      69,
      78,
      84,
      83,
      0,
      67,
      65,
      78,
      39,
      84,
      32,
      67,
      79,
      78,
      84,
      73,
      78,
      85,
      69,
      0,
      79,
      85,
      84,
      32,
      79,
      70,
      32,
      68,
      65,
      84,
      65,
      0,
      68,
      69,
      70,
      70,
      78,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      69,
      78,
      68,
      70,
      78,
      0,
      68,
      69,
      70,
      83,
      85,
      66,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      69,
      78,
      68,
      83,
      85,
      66,
      0,
      78,
      79,
      84,
      32,
      69,
      78,
      79,
      85,
      71,
      72,
      32,
      77,
      69,
      77,
      79,
      82,
      89,
      0,
      79,
      85,
      84,
      32,
      79,
      70,
      32,
      77,
      69,
      77,
      79,
      82,
      89,
      0,
      73,
      78,
      86,
      65,
      76,
      73,
      68,
      32,
      81,
      85,
      65,
      78,
      84,
      73,
      84,
      89,
      0,
      68,
      79,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      76,
      79,
      79,
      80,
      0,
      77,
      73,
      83,
      77,
      65,
      84,
      67,
      72,
      69,
      68,
      32,
      78,
      69,
      88,
      84,
      0,
      73,
      70,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      69,
      78,
      68,
      73,
      70,
      0,
      69,
      76,
      83,
      69,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      73,
      70,
      0,
      69,
      78,
      68,
      73,
      70,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      73,
      70,
      0,
      69,
      76,
      83,
      69,
      73,
      70,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      73,
      70,
      0,
      70,
      73,
      76,
      69,
      32,
      78,
      79,
      84,
      32,
      70,
      79,
      85,
      78,
      68,
      0,
      82,
      69,
      84,
      85,
      82,
      78,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      67,
      65,
      76,
      76,
      32,
      79,
      82,
      32,
      71,
      79,
      83,
      85,
      66,
      0,
      79,
      85,
      84,
      32,
      79,
      70,
      32,
      68,
      73,
      83,
      75,
      32,
      83,
      80,
      65,
      67,
      69,
      0,
      70,
      73,
      76,
      69,
      32,
      69,
      88,
      73,
      83,
      84,
      83,
      0,
      83,
      84,
      79,
      80,
      80,
      69,
      68,
      0,
      83,
      84,
      82,
      73,
      78,
      71,
      32,
      84,
      79,
      79,
      32,
      76,
      79,
      78,
      71,
      0,
      76,
      73,
      78,
      69,
      32,
      84,
      79,
      79,
      32,
      76,
      79,
      78,
      71,
      0,
      78,
      69,
      88,
      84,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      70,
      79,
      82,
      0,
      87,
      72,
      73,
      76,
      69,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      76,
      79,
      79,
      80,
      0,
      85,
      78,
      84,
      73,
      76,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      76,
      79,
      79,
      80,
      0,
      76,
      79,
      79,
      80,
      32,
      87,
      73,
      84,
      72,
      79,
      85,
      84,
      32,
      68,
      79,
      0,
      69,
      88,
      80,
      82,
      69,
      83,
      83,
      73,
      79,
      78,
      32,
      84,
      79,
      79,
      32,
      67,
      79,
      77,
      80,
      76,
      69,
      88,
      0,
      83,
      84,
      65,
      67,
      75,
      32,
      79,
      86,
      69,
      82,
      70,
      76,
      79,
      87,
      0,
      69,
      88,
      80,
      69,
      67,
      84,
      69,
      68,
      32,
      65,
      32,
      81,
      85,
      79,
      84,
      69,
      0,
      69,
      88,
      80,
      69,
      67,
      84,
      69,
      68,
      32,
      76,
      69,
      70,
      84,
      32,
      80,
      65,
      82,
      69,
      78,
      0,
      69,
      88,
      80,
      69,
      67,
      84,
      69,
      68,
      32,
      82,
      73,
      71,
      72,
      84,
      32,
      80,
      65,
      82,
      69,
      78,
      0,
      69,
      88,
      80,
      69,
      67,
      84,
      69,
      68,
      32,
      76,
      69,
      70,
      84,
      32,
      66,
      82,
      65,
      67,
      75,
      69,
      84,
      0,
      69,
      88,
      80,
      69,
      67,
      84,
      69,
      68,
      32,
      82,
      73,
      71,
      72,
      84,
      32,
      66,
      82,
      65,
      67,
      75,
      69,
      84,
      0,
      78,
      79,
      84,
      32,
      73,
      77,
      80,
      76,
      69,
      77,
      69,
      78,
      84,
      69,
      68,
      0,
      13,
      63,
      0,
      32,
      69,
      82,
      82,
      79,
      82,
      0,
      13,
      32,
      65,
      84,
      32,
      76,
      73,
      78,
      69,
      32,
      0,
      160,
      224,
      160,
      231,
      160,
      245,
      161,
      10,
      161,
      29,
      161,
      49,
      161,
      72,
      161,
      91,
      161,
      106,
      161,
      118,
      161,
      138,
      161,
      160,
      161,
      178,
      161,
      192,
      161,
      209,
      161,
      225,
      161,
      241,
      162,
      2,
      162,
      18,
      162,
      35,
      162,
      53,
      162,
      68,
      162,
      97,
      162,
      115,
      162,
      127,
      162,
      135,
      162,
      151,
      162,
      165,
      162,
      182,
      162,
      201,
      162,
      220,
      162,
      236,
      163,
      3,
      163,
      18,
      163,
      35,
      163,
      55,
      163,
      76,
      163,
      98,
      163,
      121,
      163,
      137,
      163,
      140,
      163,
      147,
      65,
      66,
      83,
      0,
      128,
      65,
      78,
      68,
      0,
      129,
      65,
      83,
      67,
      0,
      130,
      65,
      83,
      77,
      0,
      131,
      65,
      84,
      78,
      0,
      132,
      65,
      84,
      0,
      133,
      67,
      65,
      76,
      76,
      0,
      134,
      67,
      65,
      84,
      65,
      76,
      79,
      71,
      0,
      135,
      67,
      72,
      82,
      83,
      36,
      0,
      136,
      67,
      72,
      82,
      36,
      0,
      137,
      67,
      73,
      82,
      67,
      76,
      69,
      0,
      138,
      67,
      76,
      83,
      0,
      139,
      67,
      76,
      79,
      83,
      69,
      0,
      140,
      67,
      79,
      78,
      84,
      73,
      78,
      85,
      69,
      0,
      141,
      67,
      79,
      78,
      84,
      0,
      141,
      67,
      79,
      76,
      79,
      82,
      0,
      142,
      67,
      79,
      80,
      89,
      0,
      143,
      67,
      79,
      83,
      0,
      144,
      68,
      65,
      84,
      65,
      0,
      145,
      68,
      69,
      70,
      0,
      146,
      68,
      73,
      77,
      0,
      147,
      68,
      79,
      0,
      148,
      68,
      82,
      65,
      87,
      0,
      149,
      69,
      76,
      83,
      69,
      0,
      150,
      69,
      78,
      68,
      0,
      151,
      69,
      88,
      80,
      0,
      152,
      70,
      73,
      76,
      76,
      0,
      153,
      70,
      78,
      0,
      154,
      70,
      79,
      82,
      0,
      155,
      70,
      82,
      79,
      77,
      0,
      156,
      71,
      79,
      83,
      85,
      66,
      0,
      157,
      71,
      79,
      84,
      79,
      0,
      158,
      72,
      69,
      88,
      36,
      0,
      159,
      73,
      70,
      0,
      160,
      73,
      78,
      80,
      85,
      84,
      0,
      161,
      73,
      78,
      84,
      0,
      162,
      73,
      78,
      0,
      163,
      75,
      69,
      89,
      36,
      0,
      164,
      76,
      65,
      89,
      69,
      82,
      0,
      165,
      76,
      69,
      70,
      84,
      36,
      0,
      166,
      76,
      69,
      78,
      0,
      167,
      76,
      69,
      84,
      0,
      168,
      76,
      73,
      78,
      69,
      0,
      169,
      76,
      73,
      83,
      84,
      0,
      170,
      76,
      79,
      65,
      68,
      0,
      171,
      76,
      79,
      67,
      65,
      76,
      0,
      172,
      76,
      79,
      71,
      0,
      173,
      76,
      79,
      79,
      80,
      0,
      174,
      76,
      79,
      87,
      69,
      82,
      36,
      0,
      175,
      77,
      69,
      77,
      0,
      176,
      77,
      73,
      68,
      36,
      0,
      177,
      77,
      79,
      68,
      69,
      0,
      178,
      77,
      79,
      85,
      83,
      69,
      0,
      179,
      78,
      69,
      87,
      0,
      180,
      78,
      69,
      88,
      84,
      0,
      181,
      78,
      79,
      84,
      0,
      182,
      79,
      70,
      70,
      0,
      183,
      79,
      78,
      0,
      184,
      79,
      80,
      69,
      78,
      0,
      185,
      79,
      82,
      0,
      186,
      79,
      85,
      84,
      0,
      187,
      80,
      69,
      69,
      75,
      0,
      188,
      80,
      76,
      65,
      89,
      0,
      189,
      80,
      79,
      73,
      78,
      84,
      0,
      190,
      80,
      79,
      75,
      69,
      0,
      191,
      80,
      82,
      73,
      78,
      84,
      0,
      192,
      63,
      0,
      192,
      82,
      69,
      65,
      68,
      0,
      193,
      82,
      69,
      67,
      84,
      0,
      194,
      82,
      69,
      77,
      0,
      195,
      39,
      0,
      195,
      82,
      69,
      84,
      85,
      82,
      78,
      0,
      196,
      82,
      73,
      71,
      72,
      84,
      36,
      0,
      197,
      82,
      78,
      68,
      0,
      198,
      82,
      69,
      78,
      65,
      77,
      69,
      0,
      199,
      82,
      69,
      77,
      79,
      86,
      69,
      0,
      200,
      82,
      69,
      83,
      84,
      79,
      82,
      69,
      0,
      201,
      82,
      85,
      78,
      0,
      202,
      83,
      65,
      86,
      69,
      0,
      203,
      83,
      67,
      82,
      69,
      69,
      78,
      0,
      204,
      83,
      71,
      78,
      0,
      205,
      83,
      73,
      78,
      0,
      206,
      83,
      73,
      90,
      69,
      0,
      207,
      83,
      79,
      85,
      82,
      67,
      69,
      0,
      208,
      83,
      80,
      67,
      0,
      209,
      83,
      80,
      82,
      65,
      84,
      84,
      82,
      0,
      210,
      83,
      80,
      82,
      73,
      84,
      69,
      0,
      211,
      83,
      81,
      82,
      0,
      212,
      83,
      84,
      65,
      84,
      85,
      83,
      0,
      213,
      83,
      84,
      69,
      80,
      0,
      214,
      83,
      84,
      73,
      67,
      75,
      0,
      215,
      83,
      84,
      79,
      80,
      0,
      216,
      83,
      84,
      82,
      36,
      0,
      217,
      83,
      85,
      66,
      0,
      218,
      83,
      87,
      65,
      80,
      0,
      219,
      84,
      65,
      66,
      0,
      220,
      84,
      65,
      78,
      0,
      221,
      84,
      72,
      69,
      78,
      0,
      222,
      84,
      73,
      76,
      69,
      83,
      69,
      84,
      0,
      223,
      84,
      73,
      77,
      69,
      0,
      224,
      84,
      79,
      0,
      225,
      85,
      78,
      84,
      73,
      76,
      0,
      226,
      85,
      80,
      80,
      69,
      82,
      36,
      0,
      227,
      85,
      83,
      82,
      0,
      228,
      86,
      65,
      76,
      0,
      229,
      87,
      72,
      73,
      76,
      69,
      0,
      230,
      43,
      0,
      231,
      45,
      0,
      232,
      45,
      0,
      233,
      42,
      0,
      234,
      47,
      0,
      235,
      37,
      0,
      236,
      94,
      0,
      237,
      60,
      62,
      0,
      238,
      33,
      61,
      0,
      238,
      60,
      61,
      0,
      239,
      61,
      60,
      0,
      239,
      62,
      61,
      0,
      240,
      61,
      62,
      0,
      240,
      60,
      0,
      241,
      62,
      0,
      242,
      61,
      0,
      243,
      40,
      0,
      244,
      41,
      0,
      245,
      44,
      0,
      246,
      59,
      0,
      247,
      58,
      0,
      248,
      0,
      163,
      242,
      0,
      1,
      163,
      247,
      0,
      4,
      163,
      252,
      0,
      1,
      164,
      1,
      0,
      2,
      164,
      6,
      0,
      1,
      164,
      11,
      0,
      2,
      164,
      15,
      0,
      2,
      164,
      21,
      0,
      2,
      164,
      30,
      0,
      1,
      164,
      37,
      0,
      1,
      164,
      43,
      0,
      2,
      164,
      51,
      0,
      2,
      164,
      56,
      0,
      2,
      164,
      63,
      0,
      2,
      164,
      79,
      0,
      2,
      164,
      86,
      0,
      2,
      164,
      92,
      0,
      1,
      164,
      97,
      0,
      2,
      164,
      103,
      64,
      2,
      164,
      108,
      0,
      2,
      164,
      113,
      64,
      2,
      164,
      117,
      0,
      2,
      164,
      123,
      192,
      2,
      164,
      129,
      128,
      2,
      164,
      134,
      0,
      1,
      164,
      139,
      0,
      2,
      164,
      145,
      0,
      2,
      164,
      149,
      64,
      2,
      164,
      154,
      0,
      2,
      164,
      160,
      0,
      2,
      164,
      167,
      0,
      2,
      164,
      173,
      0,
      1,
      164,
      179,
      0,
      2,
      164,
      183,
      0,
      2,
      164,
      190,
      0,
      1,
      164,
      195,
      0,
      1,
      164,
      199,
      0,
      1,
      164,
      205,
      0,
      2,
      164,
      212,
      0,
      1,
      164,
      219,
      0,
      1,
      164,
      224,
      0,
      2,
      164,
      229,
      0,
      2,
      164,
      235,
      0,
      2,
      164,
      241,
      0,
      2,
      164,
      247,
      0,
      2,
      164,
      254,
      0,
      1,
      165,
      3,
      128,
      2,
      165,
      9,
      0,
      1,
      165,
      17,
      0,
      2,
      165,
      22,
      0,
      1,
      165,
      28,
      0,
      2,
      165,
      34,
      0,
      1,
      165,
      41,
      0,
      2,
      165,
      46,
      128,
      2,
      165,
      52,
      0,
      4,
      165,
      57,
      0,
      2,
      165,
      62,
      0,
      2,
      165,
      66,
      0,
      2,
      165,
      72,
      0,
      4,
      165,
      76,
      0,
      2,
      165,
      81,
      0,
      1,
      165,
      87,
      0,
      2,
      165,
      93,
      0,
      2,
      165,
      100,
      0,
      2,
      165,
      106,
      0,
      2,
      165,
      116,
      0,
      2,
      165,
      122,
      0,
      2,
      165,
      128,
      0,
      2,
      165,
      136,
      0,
      2,
      165,
      144,
      0,
      1,
      165,
      152,
      0,
      1,
      165,
      157,
      0,
      2,
      165,
      165,
      0,
      2,
      165,
      173,
      0,
      2,
      165,
      182,
      0,
      2,
      165,
      187,
      0,
      2,
      165,
      193,
      0,
      2,
      165,
      201,
      0,
      1,
      165,
      206,
      0,
      1,
      165,
      211,
      0,
      2,
      165,
      217,
      0,
      2,
      165,
      225,
      0,
      1,
      165,
      230,
      0,
      1,
      165,
      239,
      0,
      2,
      165,
      247,
      0,
      1,
      165,
      252,
      0,
      1,
      166,
      4,
      0,
      2,
      166,
      10,
      0,
      1,
      166,
      17,
      0,
      2,
      166,
      23,
      0,
      1,
      166,
      29,
      0,
      2,
      166,
      34,
      0,
      2,
      166,
      40,
      0,
      1,
      166,
      45,
      0,
      1,
      166,
      50,
      96,
      2,
      166,
      56,
      0,
      2,
      166,
      65,
      0,
      1,
      166,
      71,
      0,
      2,
      166,
      75,
      0,
      2,
      166,
      82,
      0,
      1,
      166,
      90,
      0,
      1,
      166,
      95,
      0,
      1,
      166,
      100,
      0,
      2,
      166,
      107,
      0,
      4,
      166,
      110,
      0,
      4,
      166,
      113,
      0,
      4,
      166,
      116,
      0,
      4,
      166,
      119,
      0,
      4,
      166,
      122,
      0,
      4,
      166,
      125,
      0,
      4,
      166,
      128,
      0,
      4,
      166,
      136,
      0,
      4,
      166,
      144,
      0,
      4,
      166,
      152,
      0,
      4,
      166,
      155,
      0,
      4,
      166,
      158,
      0,
      4,
      166,
      161,
      0,
      8,
      166,
      164,
      0,
      8,
      166,
      167,
      0,
      8,
      166,
      170,
      0,
      8,
      166,
      173,
      0,
      8,
      163,
      242,
      0,
      6,
      0,
      0,
      0,
      0,
      164,
      15,
      0,
      11,
      164,
      97,
      0,
      5,
      164,
      123,
      0,
      3,
      164,
      139,
      0,
      4,
      164,
      160,
      0,
      2,
      164,
      173,
      0,
      1,
      164,
      179,
      0,
      4,
      0,
      0,
      0,
      0,
      164,
      199,
      0,
      1,
      164,
      205,
      0,
      11,
      165,
      17,
      0,
      4,
      165,
      41,
      0,
      3,
      165,
      57,
      0,
      5,
      165,
      81,
      0,
      5,
      0,
      0,
      0,
      0,
      165,
      116,
      0,
      10,
      165,
      187,
      0,
      17,
      166,
      40,
      0,
      6,
      166,
      75,
      0,
      3,
      166,
      95,
      0,
      1,
      166,
      100,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      166,
      107,
      0,
      18
    ] },
    { addr: 507904, data: [
      26,
      0,
      0,
      22,
      22,
      0,
      224,
      0,
      24,
      0,
      128,
      0,
      17,
      216,
      0,
      0,
      22,
      0,
      0,
      0,
      24,
      0,
      17,
      0,
      33,
      216,
      0,
      0,
      218,
      154,
      0,
      255,
      227,
      17,
      0,
      29,
      49,
      16,
      16,
      17,
      0,
      9,
      49,
      16,
      17,
      17,
      0,
      128,
      49,
      16,
      43,
      17,
      0,
      128,
      49,
      16,
      44,
      17,
      0,
      0,
      49,
      16,
      45,
      17,
      0,
      0,
      49,
      16,
      18,
      49,
      16,
      23,
      49,
      16,
      24,
      49,
      16,
      25,
      49,
      16,
      26,
      49,
      16,
      27,
      17,
      0,
      132,
      49,
      16,
      19,
      17,
      0,
      60,
      49,
      16,
      20,
      17,
      64,
      17,
      18,
      49,
      16,
      21,
      17,
      64,
      17,
      17,
      49,
      16,
      22,
      17,
      0,
      0,
      33,
      64,
      17,
      24,
      17,
      0,
      0,
      33,
      64,
      17,
      23,
      17,
      64,
      17,
      12,
      33,
      64,
      16,
      0,
      17,
      0,
      255,
      33,
      64,
      16,
      64,
      17,
      0,
      0,
      33,
      64,
      16,
      128,
      17,
      0,
      15,
      49,
      16,
      28,
      17,
      0,
      224,
      49,
      16,
      29,
      17,
      0,
      16,
      49,
      16,
      30,
      17,
      0,
      92,
      49,
      16,
      31,
      17,
      0,
      17,
      49,
      16,
      32,
      17,
      64,
      17,
      11,
      49,
      16,
      33,
      17,
      64,
      17,
      10,
      49,
      16,
      34,
      144,
      7,
      24,
      144,
      7,
      72,
      167,
      224,
      17,
      0,
      1,
      33,
      64,
      17,
      13,
      240,
      167,
      224,
      17,
      0,
      0,
      33,
      64,
      17,
      13,
      240,
      167,
      232,
      224,
      230,
      22,
      64,
      17,
      19,
      24,
      64,
      17,
      3,
      17,
      0,
      0,
      33,
      208,
      0,
      0,
      17,
      64,
      17,
      17,
      33,
      208,
      16,
      0,
      17,
      64,
      17,
      18,
      33,
      208,
      32,
      0,
      216,
      154,
      0,
      255,
      228,
      22,
      0,
      0,
      0,
      144,
      6,
      0,
      176,
      246,
      240,
      248,
      167,
      224,
      16,
      0,
      193,
      23,
      32,
      64,
      1,
      16,
      240,
      167,
      182,
      144,
      7,
      5,
      144,
      7,
      113,
      190,
      167,
      224,
      226,
      228,
      230,
      162,
      48,
      16,
      28,
      225,
      17,
      0,
      15,
      49,
      16,
      28,
      48,
      16,
      29,
      19,
      64,
      17,
      13,
      21,
      64,
      17,
      14,
      4,
      53,
      10,
      55,
      97,
      17,
      5,
      19,
      49,
      16,
      29,
      17,
      64,
      17,
      11,
      49,
      16,
      33,
      17,
      64,
      17,
      10,
      49,
      16,
      34,
      16,
      0,
      0,
      0,
      17,
      64,
      17,
      8,
      23,
      64,
      17,
      21,
      168,
      7,
      72,
      0,
      48,
      49,
      16,
      38,
      9,
      32,
      49,
      16,
      37,
      23,
      64,
      17,
      7,
      16,
      0,
      0,
      0,
      17,
      64,
      17,
      9,
      11,
      7,
      72,
      0,
      64,
      49,
      16,
      36,
      9,
      32,
      49,
      16,
      35,
      241,
      49,
      16,
      28,
      163,
      246,
      244,
      242,
      240,
      167,
      224,
      226,
      162,
      17,
      64,
      17,
      16,
      209,
      146,
      0,
      0,
      4,
      144,
      4,
      0,
      17,
      17,
      64,
      17,
      14,
      19,
      0,
      1,
      7,
      19,
      33,
      64,
      17,
      14,
      17,
      64,
      17,
      15,
      33,
      64,
      17,
      16,
      163,
      242,
      240,
      167,
      39,
      64,
      17,
      9,
      9,
      38,
      39,
      64,
      17,
      8,
      9,
      38,
      224,
      17,
      0,
      1,
      33,
      64,
      17,
      14,
      17,
      64,
      17,
      15,
      33,
      64,
      17,
      16,
      240,
      167,
      23,
      64,
      17,
      8,
      9,
      38,
      23,
      64,
      17,
      9,
      167,
      224,
      162,
      144,
      6,
      255,
      239,
      9,
      38,
      15,
      135,
      17,
      64,
      17,
      0,
      11,
      129,
      9,
      38,
      5,
      135,
      22,
      64,
      17,
      19,
      163,
      240,
      167,
      224,
      15,
      104,
      17,
      64,
      17,
      0,
      11,
      97,
      9,
      38,
      17,
      64,
      17,
      2,
      209,
      4,
      129,
      15,
      121,
      240,
      167,
      144,
      6,
      255,
      203,
      23,
      208,
      0,
      0,
      167,
      224,
      144,
      6,
      255,
      193,
      216,
      17,
      208,
      0,
      0,
      89,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      144,
      4,
      0,
      5,
      216,
      155,
      0,
      255,
      233,
      200,
      240,
      167,
      224,
      144,
      6,
      255,
      161,
      17,
      208,
      0,
      0,
      89,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      144,
      4,
      0,
      5,
      200,
      155,
      0,
      255,
      233,
      216,
      240,
      167,
      224,
      232,
      230,
      226,
      234,
      162,
      48,
      112,
      56,
      119,
      1,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      24,
      228,
      48,
      112,
      3,
      21,
      0,
      25,
      1,
      117,
      21,
      0,
      100,
      170,
      117,
      48,
      80,
      3,
      3,
      117,
      152,
      0,
      255,
      247,
      244,
      22,
      64,
      17,
      19,
      7,
      170,
      27,
      64,
      17,
      2,
      24,
      0,
      0,
      0,
      18,
      64,
      17,
      5,
      2,
      42,
      186,
      17,
      216,
      0,
      0,
      33,
      208,
      0,
      0,
      17,
      216,
      16,
      0,
      33,
      208,
      16,
      0,
      17,
      216,
      32,
      0,
      33,
      208,
      32,
      0,
      200,
      15,
      8,
      3,
      2,
      152,
      0,
      255,
      223,
      163,
      250,
      242,
      246,
      248,
      240,
      167,
      230,
      228,
      224,
      162,
      144,
      6,
      255,
      12,
      9,
      38,
      215,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      1,
      199,
      9,
      38,
      144,
      6,
      254,
      220,
      163,
      240,
      244,
      246,
      167,
      230,
      228,
      224,
      162,
      144,
      6,
      254,
      237,
      215,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      26,
      23,
      64,
      17,
      2,
      215,
      9,
      38,
      215,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      199,
      9,
      38,
      23,
      0,
      0,
      9,
      38,
      9,
      38,
      144,
      6,
      254,
      168,
      163,
      240,
      244,
      246,
      167,
      230,
      228,
      224,
      162,
      144,
      6,
      254,
      185,
      9,
      38,
      15,
      87,
      9,
      38,
      199,
      17,
      64,
      17,
      2,
      3,
      113,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      23,
      0,
      0,
      197,
      17,
      64,
      17,
      1,
      3,
      81,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      5,
      213,
      144,
      6,
      255,
      17,
      9,
      38,
      15,
      117,
      9,
      38,
      144,
      6,
      254,
      101,
      163,
      240,
      244,
      246,
      167,
      230,
      228,
      224,
      162,
      144,
      6,
      254,
      118,
      9,
      38,
      199,
      17,
      64,
      17,
      1,
      3,
      113,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      5,
      215,
      144,
      6,
      254,
      228,
      9,
      38,
      144,
      6,
      254,
      60,
      163,
      240,
      244,
      246,
      167,
      230,
      228,
      224,
      162,
      144,
      6,
      254,
      77,
      9,
      38,
      15,
      87,
      9,
      38,
      23,
      0,
      0,
      197,
      17,
      64,
      17,
      1,
      3,
      81,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      5,
      213,
      144,
      6,
      254,
      180,
      9,
      38,
      15,
      117,
      9,
      38,
      144,
      6,
      254,
      8,
      163,
      240,
      244,
      246,
      167,
      230,
      234,
      224,
      162,
      144,
      6,
      255,
      36,
      144,
      6,
      254,
      32,
      15,
      168,
      144,
      6,
      254,
      116,
      3,
      138,
      147,
      0,
      0,
      31,
      17,
      200,
      0,
      1,
      33,
      200,
      0,
      0,
      17,
      200,
      16,
      1,
      33,
      200,
      16,
      0,
      17,
      200,
      32,
      1,
      33,
      200,
      32,
      0,
      202,
      3,
      138,
      155,
      0,
      255,
      225,
      163,
      240,
      250,
      246,
      167,
      167,
      162,
      224,
      17,
      0,
      4,
      33,
      64,
      17,
      23,
      17,
      0,
      0,
      33,
      64,
      17,
      24,
      240,
      163,
      167,
      162,
      224,
      17,
      0,
      0,
      33,
      64,
      17,
      23,
      240,
      163,
      167,
      39,
      64,
      17,
      10,
      39,
      64,
      17,
      17,
      167,
      23,
      64,
      17,
      17,
      167,
      162,
      224,
      17,
      64,
      17,
      24,
      33,
      64,
      17,
      10,
      33,
      64,
      17,
      17,
      240,
      163,
      167,
      39,
      64,
      17,
      18,
      167,
      23,
      64,
      17,
      18,
      167,
      162,
      224,
      17,
      64,
      17,
      24,
      33,
      64,
      17,
      18,
      240,
      163,
      167,
      162,
      230,
      144,
      6,
      254,
      200,
      144,
      6,
      253,
      133,
      103,
      7,
      152,
      0,
      255,
      242,
      246,
      163,
      167,
      195,
      241,
      195,
      241,
      195,
      241,
      195,
      241,
      195,
      241,
      195,
      241,
      195,
      241,
      195,
      241,
      195,
      181,
      196,
      71,
      195,
      88,
      195,
      241,
      192,
      217,
      195,
      129,
      195,
      241,
      195,
      241,
      195,
      21,
      194,
      225,
      196,
      31,
      196,
      58,
      195,
      241,
      195,
      241,
      195,
      241,
      195,
      241,
      192,
      217,
      195,
      241,
      196,
      5,
      195,
      242,
      195,
      241,
      195,
      241,
      194,
      194,
      195,
      88,
      224,
      226,
      232,
      230,
      234,
      162,
      15,
      23,
      19,
      64,
      17,
      23,
      91,
      128,
      144,
      1,
      60,
      91,
      2,
      144,
      1,
      55,
      91,
      4,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      39,
      89,
      32,
      146,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      255,
      61,
      144,
      4,
      0,
      31,
      19,
      64,
      17,
      24,
      25,
      0,
      10,
      168,
      57,
      81,
      48,
      1,
      49,
      35,
      64,
      17,
      24,
      144,
      4,
      0,
      58,
      89,
      32,
      146,
      0,
      0,
      4,
      144,
      4,
      0,
      20,
      22,
      0,
      248,
      139,
      24,
      0,
      0,
      2,
      15,
      161,
      10,
      161,
      144,
      222,
      0,
      0,
      144,
      4,
      0,
      28,
      144,
      6,
      252,
      222,
      33,
      208,
      0,
      0,
      17,
      64,
      17,
      17,
      33,
      208,
      16,
      0,
      17,
      64,
      17,
      18,
      33,
      208,
      32,
      0,
      144,
      6,
      253,
      250,
      163,
      250,
      246,
      248,
      242,
      240,
      167,
      162,
      48,
      112,
      48,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      10,
      62,
      48,
      112,
      48,
      95,
      0,
      144,
      0,
      255,
      246,
      163,
      167,
      162,
      232,
      224,
      17,
      208,
      0,
      0,
      89,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      19,
      14,
      6,
      144,
      6,
      255,
      71,
      14,
      6,
      200,
      17,
      208,
      0,
      0,
      89,
      0,
      144,
      4,
      255,
      229,
      240,
      248,
      163,
      167,
      162,
      224,
      17,
      0,
      128,
      33,
      64,
      17,
      23,
      144,
      6,
      255,
      203,
      17,
      0,
      0,
      33,
      64,
      17,
      23,
      240,
      163,
      167,
      162,
      224,
      226,
      234,
      56,
      0,
      232,
      230,
      144,
      6,
      251,
      62,
      144,
      6,
      255,
      151,
      95,
      13,
      144,
      0,
      0,
      46,
      144,
      6,
      255,
      5,
      95,
      34,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      28,
      17,
      64,
      17,
      23,
      89,
      2,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      17,
      0,
      0,
      144,
      4,
      0,
      3,
      17,
      0,
      2,
      33,
      64,
      17,
      23,
      144,
      4,
      255,
      200,
      144,
      6,
      251,
      12,
      17,
      0,
      0,
      33,
      64,
      17,
      23,
      144,
      6,
      252,
      109,
      15,
      40,
      144,
      6,
      252,
      71,
      2,
      40,
      194,
      232,
      230,
      90,
      0,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      20,
      0,
      0,
      0,
      37,
      167,
      255,
      252,
      144,
      4,
      0,
      50,
      3,
      66,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      255,
      255,
      144,
      4,
      0,
      32,
      15,
      66,
      228,
      26,
      0,
      0,
      0,
      21,
      175,
      255,
      248,
      37,
      175,
      255,
      252,
      202,
      210,
      90,
      0,
      0,
      152,
      0,
      255,
      239,
      21,
      0,
      0,
      37,
      175,
      255,
      252,
      244,
      57,
      8,
      250,
      242,
      240,
      163,
      167
    ] },
    { addr: 509481, data: [
      56,
      17,
      162,
      224,
      226,
      228,
      230,
      232,
      234,
      26,
      0,
      0,
      0,
      15,
      4,
      15,
      64,
      170,
      3,
      186,
      72,
      0,
      48,
      88,
      0,
      58,
      155,
      0,
      0,
      4,
      144,
      4,
      0,
      3,
      72,
      0,
      7,
      33,
      143,
      255,
      239,
      202,
      15,
      4,
      169,
      3,
      88,
      0,
      0,
      152,
      0,
      255,
      218,
      9,
      34,
      3,
      179,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      14,
      17,
      0,
      48,
      33,
      143,
      255,
      239,
      202,
      3,
      179,
      147,
      0,
      255,
      245,
      218,
      17,
      143,
      255,
      239,
      33,
      208,
      0,
      0,
      200,
      218,
      154,
      0,
      255,
      242,
      17,
      0,
      0,
      33,
      208,
      0,
      0,
      250,
      248,
      246,
      244,
      242,
      240,
      163,
      57,
      17,
      167,
      162,
      224,
      92,
      0,
      0,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      9,
      17,
      0,
      45,
      9,
      20,
      144,
      4,
      0,
      3,
      17,
      0,
      32,
      33,
      208,
      0,
      0,
      200,
      144,
      6,
      255,
      111,
      216,
      240,
      163,
      167,
      56,
      0,
      224,
      226,
      230,
      234,
      162,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      19,
      0,
      0,
      144,
      4,
      0,
      3,
      19,
      0,
      1,
      26,
      0,
      0,
      0,
      21,
      216,
      0,
      0,
      17,
      168,
      0,
      4,
      91,
      1,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      5,
      93,
      0,
      144,
      1,
      43,
      3,
      81,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      9,
      93,
      0,
      144,
      1,
      28,
      202,
      144,
      5,
      214,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      10,
      163,
      179,
      184,
      144,
      5,
      13,
      144,
      4,
      0,
      6,
      163,
      187,
      184,
      144,
      5,
      3,
      163,
      187,
      176,
      15,
      74,
      250,
      246,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      234,
      162,
      26,
      208,
      0,
      0,
      218,
      146,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      163,
      179,
      178,
      183,
      144,
      5,
      19,
      202,
      234,
      10,
      161,
      20,
      216,
      0,
      0,
      250,
      163,
      144,
      1,
      6,
      218,
      42,
      208,
      0,
      0,
      191,
      250,
      57,
      0,
      167,
      56,
      0,
      234,
      26,
      208,
      0,
      0,
      234,
      10,
      161,
      232,
      200,
      200,
      36,
      216,
      0,
      0,
      248,
      250,
      202,
      42,
      208,
      0,
      0,
      250,
      57,
      0,
      167,
      56,
      0,
      234,
      26,
      0,
      0,
      2,
      36,
      216,
      0,
      0,
      26,
      0,
      0,
      4,
      42,
      208,
      0,
      0,
      250,
      57,
      0,
      167,
      56,
      0,
      234,
      26,
      0,
      0,
      2,
      20,
      216,
      0,
      0,
      26,
      208,
      0,
      0,
      186,
      2,
      74,
      250,
      57,
      0,
      167,
      56,
      0,
      234,
      226,
      224,
      26,
      0,
      0,
      2,
      18,
      216,
      0,
      0,
      16,
      208,
      0,
      0,
      1,
      4,
      3,
      2,
      155,
      0,
      0,
      4,
      144,
      4,
      0,
      13,
      183,
      22,
      0,
      0,
      0,
      24,
      0,
      0,
      0,
      144,
      4,
      0,
      12,
      191,
      18,
      208,
      0,
      0,
      32,
      208,
      0,
      0,
      186,
      1,
      130,
      240,
      242,
      250,
      57,
      0,
      167
    ] },
    { addr: 512e3, data: [
      144,
      6,
      30,
      214,
      144,
      6,
      30,
      248,
      144,
      6,
      31,
      193,
      63,
      56,
      0,
      230,
      191,
      48,
      112,
      56,
      119,
      8,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      14,
      48,
      112,
      58,
      119,
      4,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      1,
      183,
      246,
      57,
      0,
      167,
      56,
      10,
      230,
      226,
      232,
      234,
      162,
      95,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      107,
      15,
      167,
      22,
      0,
      244,
      113,
      24,
      0,
      0,
      1,
      144,
      70,
      254,
      40,
      22,
      0,
      244,
      115,
      24,
      0,
      0,
      6,
      218,
      10,
      161,
      24,
      216,
      0,
      0,
      22,
      0,
      224,
      0,
      144,
      70,
      254,
      40,
      22,
      0,
      240,
      0,
      24,
      0,
      35,
      140,
      144,
      70,
      254,
      40,
      92,
      0,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      47,
      22,
      0,
      244,
      114,
      24,
      0,
      0,
      3,
      144,
      70,
      254,
      40,
      15,
      108,
      86,
      0,
      10,
      15,
      134,
      22,
      0,
      0,
      0,
      18,
      0,
      0,
      10,
      144,
      70,
      254,
      50,
      144,
      70,
      254,
      40,
      22,
      0,
      244,
      27,
      24,
      0,
      0,
      6,
      144,
      70,
      254,
      40,
      163,
      250,
      248,
      242,
      246,
      57,
      10,
      167,
      56,
      0,
      234,
      224,
      226,
      162,
      26,
      0,
      0,
      0,
      19,
      0,
      0,
      17,
      216,
      0,
      0,
      89,
      34,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      2,
      123,
      255,
      91,
      255,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      26,
      89,
      97,
      155,
      0,
      0,
      4,
      144,
      4,
      0,
      16,
      89,
      123,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      97,
      223,
      33,
      216,
      0,
      0,
      202,
      89,
      0,
      152,
      0,
      255,
      197,
      17,
      0,
      34,
      4,
      19,
      15,
      113,
      163,
      242,
      240,
      250,
      57,
      0,
      167,
      162,
      3,
      117,
      147,
      1,
      15,
      9,
      36,
      3,
      117,
      144,
      1,
      3,
      155,
      1,
      5,
      163,
      176,
      144,
      5,
      2,
      163,
      184,
      167,
      228,
      20,
      0,
      57,
      48,
      144,
      6,
      255,
      223,
      244,
      167,
      228,
      20,
      0,
      90,
      65,
      144,
      6,
      255,
      212,
      244,
      167,
      144,
      6,
      255,
      230,
      144,
      1,
      4,
      144,
      6,
      255,
      234,
      167,
      144,
      6,
      255,
      218,
      144,
      1,
      10,
      228,
      20,
      0,
      70,
      65,
      144,
      6,
      255,
      182,
      244,
      167,
      56,
      6,
      232,
      234,
      228,
      226,
      26,
      0,
      0,
      1,
      42,
      135,
      255,
      250,
      26,
      0,
      0,
      0,
      42,
      135,
      255,
      254,
      42,
      135,
      255,
      252,
      23,
      0,
      0,
      144,
      6,
      2,
      238,
      23,
      168,
      0,
      8,
      144,
      6,
      2,
      250,
      95,
      32,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      29,
      23,
      168,
      0,
      8,
      95,
      32,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      202,
      144,
      5,
      238,
      144,
      6,
      2,
      208,
      23,
      0,
      32,
      144,
      4,
      2,
      153,
      144,
      6,
      255,
      120,
      152,
      0,
      0,
      186,
      20,
      0,
      0,
      0,
      18,
      0,
      0,
      10,
      144,
      6,
      2,
      171,
      186,
      87,
      48,
      168,
      66,
      95,
      10,
      155,
      0,
      0,
      4,
      144,
      4,
      0,
      3,
      186,
      87,
      7,
      3,
      115,
      155,
      0,
      0,
      76,
      186,
      1,
      71,
      23,
      168,
      0,
      8,
      95,
      88,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      28,
      92,
      0,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      2,
      95,
      23,
      0,
      48,
      19,
      0,
      16,
      144,
      4,
      0,
      26,
      91,
      10,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      255,
      21,
      144,
      4,
      0,
      4,
      144,
      6,
      255,
      47,
      152,
      0,
      0,
      5,
      202,
      144,
      4,
      255,
      156,
      144,
      6,
      2,
      77,
      144,
      6,
      2,
      68,
      9,
      36,
      93,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      255,
      144,
      4,
      0,
      3,
      23,
      0,
      254,
      9,
      36,
      39,
      168,
      0,
      4,
      202,
      95,
      254,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      10,
      36,
      168,
      0,
      4,
      202,
      202,
      144,
      4,
      0,
      5,
      37,
      168,
      0,
      4,
      202,
      144,
      6,
      2,
      20,
      144,
      6,
      2,
      95,
      144,
      4,
      255,
      11,
      95,
      34,
      152,
      1,
      65,
      144,
      6,
      1,
      249,
      23,
      0,
      251,
      39,
      168,
      0,
      4,
      144,
      6,
      2,
      5,
      144,
      6,
      1,
      229,
      23,
      168,
      0,
      8,
      144,
      6,
      1,
      241,
      95,
      34,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      3,
      23,
      0,
      0,
      144,
      6,
      1,
      209,
      39,
      168,
      0,
      4,
      144,
      6,
      1,
      224,
      95,
      0,
      152,
      1,
      214,
      144,
      6,
      2,
      25,
      144,
      4,
      254,
      197,
      20,
      0,
      126,
      33,
      144,
      6,
      254,
      84,
      152,
      0,
      0,
      115,
      230,
      22,
      0,
      224,
      0,
      24,
      0,
      163,
      242,
      18,
      128,
      0,
      10,
      186,
      1,
      42,
      210,
      226,
      18,
      128,
      0,
      8,
      226,
      19,
      208,
      0,
      0,
      91,
      0,
      144,
      1,
      76,
      184,
      144,
      70,
      254,
      54,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      16,
      200,
      19,
      208,
      0,
      0,
      91,
      0,
      152,
      0,
      255,
      245,
      200,
      200,
      144,
      5,
      218,
      186,
      1,
      132,
      200,
      19,
      208,
      0,
      0,
      144,
      6,
      1,
      134,
      144,
      6,
      1,
      99,
      35,
      168,
      0,
      4,
      144,
      6,
      1,
      114,
      144,
      6,
      1,
      82,
      186,
      1,
      164,
      218,
      144,
      6,
      1,
      84,
      18,
      0,
      0,
      4,
      1,
      226,
      246,
      144,
      4,
      254,
      77,
      18,
      0,
      0,
      4,
      1,
      226,
      246,
      144,
      6,
      253,
      252,
      152,
      0,
      1,
      10,
      186,
      87,
      65,
      144,
      6,
      1,
      46,
      21,
      0,
      250,
      37,
      168,
      0,
      4,
      144,
      6,
      1,
      58,
      9,
      38,
      144,
      6,
      1,
      24,
      23,
      168,
      0,
      8,
      202,
      144,
      6,
      253,
      226,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      218,
      23,
      0,
      255,
      144,
      4,
      0,
      14,
      186,
      87,
      65,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      3,
      186,
      79,
      43,
      20,
      0,
      0,
      0,
      95,
      255,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      17,
      9,
      38,
      15,
      71,
      24,
      0,
      0,
      36,
      168,
      72,
      186,
      24,
      0,
      0,
      26,
      1,
      72,
      9,
      38,
      186,
      1,
      71,
      10,
      65,
      144,
      6,
      0,
      204,
      234,
      36,
      168,
      0,
      4,
      202,
      202,
      144,
      6,
      0,
      203,
      144,
      6,
      0,
      184,
      218,
      144,
      6,
      0,
      189,
      19,
      0,
      0,
      195,
      202,
      23,
      168,
      0,
      8,
      144,
      6,
      253,
      121,
      144,
      0,
      255,
      242,
      144,
      6,
      0,
      163,
      35,
      168,
      0,
      4,
      144,
      6,
      0,
      178,
      144,
      6,
      0,
      146,
      23,
      168,
      0,
      8,
      144,
      6,
      0,
      158,
      144,
      6,
      0,
      139,
      39,
      168,
      0,
      4,
      144,
      6,
      0,
      154,
      211,
      152,
      0,
      255,
      227,
      144,
      6,
      0,
      117,
      23,
      168,
      0,
      8,
      15,
      138,
      250,
      19,
      168,
      0,
      4,
      200,
      95,
      36,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      107,
      64,
      144,
      4,
      0,
      33,
      95,
      35,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      107,
      128,
      144,
      4,
      0,
      17,
      216,
      95,
      40,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      107,
      192,
      144,
      4,
      0,
      0,
      35,
      168,
      0,
      4,
      15,
      168,
      144,
      6,
      0,
      56,
      144,
      6,
      0,
      136,
      144,
      4,
      253,
      52,
      144,
      6,
      0,
      39,
      39,
      168,
      0,
      4,
      144,
      6,
      0,
      54,
      95,
      0,
      152,
      0,
      253,
      34,
      23,
      0,
      0,
      9,
      38,
      144,
      6,
      0,
      16,
      15,
      123,
      9,
      38,
      242,
      244,
      250,
      248,
      57,
      6,
      167,
      26,
      135,
      255,
      254,
      167,
      26,
      135,
      255,
      252,
      167,
      42,
      135,
      255,
      254,
      167,
      42,
      135,
      255,
      252,
      167,
      144,
      7,
      233,
      202,
      144,
      7,
      239,
      167,
      144,
      7,
      230,
      202,
      144,
      7,
      236,
      167,
      91,
      232,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      25,
      234,
      228,
      26,
      135,
      255,
      250,
      20,
      0,
      0,
      1,
      3,
      164,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      3,
      19,
      0,
      233,
      244,
      250,
      91,
      245,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      0,
      9,
      144,
      4,
      0,
      4,
      144,
      6,
      0,
      12,
      167,
      234,
      26,
      0,
      0,
      0,
      42,
      135,
      255,
      250,
      250,
      167,
      234,
      26,
      0,
      0,
      1,
      42,
      135,
      255,
      250,
      250,
      167,
      232,
      234,
      24,
      64,
      180,
      8,
      26,
      0,
      0,
      0,
      23,
      104,
      180,
      6,
      202,
      95,
      32,
      144,
      1,
      246,
      250,
      248,
      167,
      232,
      23,
      96,
      180,
      6,
      24,
      64,
      180,
      8,
      200,
      40,
      64,
      180,
      8,
      95,
      32,
      144,
      1,
      238,
      248,
      167,
      232,
      23,
      96,
      180,
      6,
      24,
      64,
      180,
      8,
      200,
      40,
      64,
      180,
      8,
      248,
      167,
      230,
      232,
      24,
      64,
      180,
      8,
      216,
      40,
      64,
      180,
      8,
      23,
      96,
      180,
      6,
      95,
      32,
      144,
      1,
      238,
      248,
      246,
      167,
      232,
      22,
      96,
      180,
      6,
      24,
      64,
      180,
      8,
      200,
      200,
      40,
      64,
      180,
      8,
      248,
      167,
      23,
      0,
      0,
      167,
      23,
      0,
      39,
      167,
      23,
      0,
      1,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      19,
      214,
      9,
      20,
      144,
      6,
      18,
      147,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      18,
      225,
      15,
      4,
      15,
      38,
      144,
      6,
      18,
      217,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      11,
      1,
      4,
      15,
      64,
      144,
      6,
      18,
      97,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      19,
      140,
      151,
      1,
      22,
      15,
      4,
      15,
      38,
      144,
      6,
      19,
      129,
      151,
      1,
      11,
      2,
      4,
      15,
      64,
      144,
      6,
      18,
      57,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      19,
      100,
      151,
      1,
      22,
      15,
      4,
      15,
      38,
      144,
      6,
      19,
      89,
      151,
      1,
      11,
      168,
      4,
      15,
      64,
      144,
      6,
      18,
      17,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      19,
      60,
      151,
      1,
      22,
      15,
      4,
      15,
      38,
      144,
      6,
      19,
      49,
      151,
      1,
      11,
      169,
      4,
      15,
      64,
      144,
      6,
      17,
      233,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      19,
      20,
      151,
      1,
      22,
      15,
      4,
      15,
      38,
      144,
      6,
      19,
      9,
      151,
      1,
      11,
      170,
      4,
      15,
      64,
      144,
      6,
      17,
      193,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      18,
      15,
      15,
      4,
      15,
      38,
      144,
      6,
      18,
      7,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      29,
      3,
      4,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      4,
      20,
      0,
      0,
      0,
      144,
      6,
      17,
      125,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      17,
      203,
      15,
      4,
      15,
      38,
      144,
      6,
      17,
      195,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      45,
      3,
      4,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      20,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      4,
      20,
      0,
      0,
      0,
      144,
      6,
      17,
      41,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      17,
      119,
      15,
      4,
      15,
      38,
      144,
      6,
      17,
      111,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      29,
      3,
      4,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      4,
      20,
      0,
      0,
      0,
      144,
      6,
      16,
      229,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      17,
      51,
      15,
      4,
      15,
      38,
      144,
      6,
      17,
      43,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      45,
      3,
      4,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      20,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      4,
      20,
      0,
      0,
      0,
      144,
      6,
      16,
      145,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      16,
      223,
      15,
      4,
      15,
      38,
      144,
      6,
      16,
      215,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      29,
      3,
      64,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      4,
      20,
      0,
      0,
      0,
      144,
      6,
      16,
      77,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      16,
      155,
      15,
      4,
      15,
      38,
      144,
      6,
      16,
      147,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      45,
      3,
      64,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      20,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      4,
      20,
      0,
      0,
      0,
      144,
      6,
      15,
      249,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      16,
      71,
      15,
      4,
      15,
      38,
      144,
      6,
      16,
      63,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      29,
      3,
      4,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      1,
      144,
      4,
      0,
      4,
      20,
      0,
      0,
      0,
      144,
      6,
      15,
      181,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      144,
      6,
      16,
      3,
      15,
      4,
      15,
      38,
      144,
      6,
      15,
      251,
      3,
      55,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      2,
      144,
      5,
      29,
      3,
      4,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      20,
      0,
      0,
      0,
      144,
      4,
      0,
      4,
      20,
      0,
      0,
      1,
      144,
      6,
      15,
      113,
      23,
      0,
      0,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      228,
      144,
      6,
      16,
      158,
      151,
      1,
      11,
      144,
      6,
      220,
      2,
      144,
      6,
      15,
      86,
      23,
      0,
      0,
      244,
      57,
      0,
      167,
      56,
      0,
      228,
      224,
      144,
      6,
      16,
      132,
      151,
      1,
      19,
      48,
      16,
      12,
      9,
      32,
      48,
      16,
      13,
      170,
      4,
      15,
      64,
      144,
      6,
      15,
      52,
      23,
      0,
      0,
      240,
      244,
      57,
      0,
      167,
      56,
      0,
      224,
      226,
      228,
      232,
      144,
      6,
      16,
      95,
      151,
      1,
      35,
      15,
      4,
      15,
      38,
      144,
      6,
      16,
      84,
      151,
      1,
      24,
      15,
      132,
      15,
      96,
      10,
      109,
      20,
      0,
      0,
      0,
      21,
      208,
      0,
      0,
      23,
      0,
      254,
      144,
      6,
      14,
      255,
      23,
      0,
      0,
      248,
      244,
      242,
      240,
      57,
      0,
      167,
      144,
      70,
      254,
      0,
      23,
      0,
      0,
      167,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      4,
      23,
      0,
      0,
      167,
      144,
      6,
      22,
      71,
      23,
      0,
      0,
      167,
      23,
      0,
      255,
      167,
      56,
      4,
      228,
      234,
      232,
      224,
      26,
      0,
      0,
      0,
      144,
      6,
      251,
      204,
      95,
      0,
      144,
      0,
      0,
      81,
      95,
      248,
      144,
      0,
      0,
      75,
      144,
      6,
      251,
      225,
      144,
      6,
      16,
      22,
      95,
      0,
      152,
      0,
      0,
      96,
      144,
      6,
      15,
      9,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      0,
      75,
      36,
      143,
      255,
      252,
      202,
      202,
      17,
      0,
      4,
      3,
      177,
      144,
      0,
      0,
      25,
      144,
      6,
      251,
      138,
      95,
      246,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      39,
      144,
      4,
      255,
      165,
      17,
      0,
      4,
      3,
      177,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      15,
      16,
      135,
      255,
      254,
      20,
      135,
      255,
      252,
      144,
      6,
      219,
      4,
      23,
      0,
      0,
      240,
      248,
      250,
      244,
      57,
      4,
      167,
      56,
      6,
      228,
      234,
      232,
      224,
      26,
      0,
      0,
      0,
      144,
      6,
      251,
      61,
      95,
      0,
      144,
      0,
      0,
      81,
      95,
      248,
      144,
      0,
      0,
      75,
      144,
      6,
      251,
      82,
      144,
      6,
      15,
      135,
      95,
      0,
      152,
      0,
      0,
      102,
      144,
      6,
      14,
      122,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      0,
      81,
      36,
      143,
      255,
      250,
      202,
      202,
      17,
      0,
      6,
      3,
      177,
      144,
      0,
      0,
      25,
      144,
      6,
      250,
      251,
      95,
      246,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      45,
      144,
      4,
      255,
      165,
      17,
      0,
      6,
      3,
      177,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      21,
      16,
      135,
      255,
      254,
      24,
      135,
      255,
      252,
      22,
      135,
      255,
      250,
      10,
      109,
      33,
      208,
      0,
      0,
      23,
      0,
      0,
      240,
      248,
      250,
      244,
      57,
      6,
      167,
      56,
      0,
      224,
      226,
      228,
      232,
      234,
      144,
      6,
      250,
      208,
      144,
      6,
      250,
      167,
      95,
      250,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      179,
      144,
      6,
      250,
      206,
      15,
      38,
      12,
      46,
      102,
      63,
      255,
      15,
      166,
      22,
      0,
      0,
      0,
      91,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      11,
      19,
      0,
      254,
      24,
      0,
      32,
      0,
      144,
      4,
      0,
      51,
      91,
      1,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      11,
      19,
      0,
      252,
      24,
      0,
      39,
      132,
      144,
      4,
      0,
      30,
      91,
      2,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      13,
      19,
      0,
      249,
      24,
      0,
      47,
      8,
      10,
      162,
      144,
      4,
      0,
      7,
      23,
      0,
      39,
      144,
      4,
      0,
      90,
      15,
      6,
      144,
      6,
      250,
      76,
      144,
      6,
      250,
      72,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      63,
      95,
      248,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      46,
      95,
      243,
      152,
      0,
      255,
      212,
      144,
      6,
      14,
      101,
      95,
      0,
      152,
      0,
      0,
      30,
      144,
      6,
      13,
      88,
      3,
      115,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      0,
      9,
      14,
      6,
      36,
      216,
      0,
      0,
      23,
      0,
      0,
      250,
      248,
      244,
      242,
      240,
      57,
      0,
      167,
      56,
      0,
      144,
      6,
      249,
      213,
      144,
      6,
      255,
      27,
      57,
      0,
      167,
      56,
      0,
      228,
      144,
      6,
      249,
      199,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      66,
      95,
      248,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      49,
      144,
      6,
      249,
      198,
      144,
      6,
      13,
      251,
      95,
      0,
      152,
      0,
      0,
      35,
      144,
      6,
      12,
      238,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      0,
      14,
      36,
      64,
      180,
      2,
      23,
      0,
      0,
      21,
      0,
      1,
      37,
      64,
      180,
      1,
      244,
      57,
      0,
      167,
      56,
      0,
      228,
      144,
      6,
      249,
      82,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      90,
      95,
      248,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      73,
      144,
      6,
      13,
      161,
      95,
      0,
      152,
      0,
      0,
      63,
      144,
      6,
      12,
      148,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      0,
      42,
      92,
      0,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      255,
      144,
      4,
      0,
      24,
      144,
      6,
      249,
      18,
      95,
      222,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      0,
      3,
      23,
      0,
      254,
      244,
      57,
      0,
      167,
      56,
      0,
      228,
      20,
      0,
      0,
      0,
      36,
      64,
      180,
      2,
      144,
      6,
      248,
      235,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      249,
      2,
      144,
      4,
      0,
      57,
      95,
      248,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      248,
      240,
      144,
      4,
      0,
      39,
      144,
      6,
      248,
      232,
      144,
      6,
      13,
      29,
      95,
      0,
      152,
      0,
      0,
      35,
      144,
      6,
      12,
      16,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      0,
      14,
      36,
      64,
      180,
      2,
      23,
      0,
      0,
      21,
      0,
      1,
      37,
      64,
      180,
      1,
      244,
      57,
      0,
      167,
      56,
      6,
      228,
      232,
      224,
      226,
      144,
      70,
      254,
      12,
      230,
      20,
      0,
      0,
      0,
      37,
      135,
      255,
      251,
      37,
      135,
      255,
      250,
      36,
      135,
      255,
      254,
      144,
      6,
      2,
      161,
      144,
      6,
      248,
      111,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      248,
      134,
      144,
      4,
      0,
      153,
      95,
      248,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      248,
      116,
      144,
      4,
      0,
      135,
      95,
      246,
      144,
      0,
      0,
      44,
      144,
      6,
      248,
      102,
      144,
      6,
      12,
      155,
      95,
      0,
      152,
      0,
      2,
      85,
      144,
      6,
      11,
      142,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      2,
      64,
      36,
      135,
      255,
      254,
      196,
      36,
      135,
      255,
      252,
      144,
      6,
      248,
      21,
      95,
      246,
      144,
      1,
      247,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      248,
      39,
      144,
      4,
      0,
      58,
      95,
      248,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      248,
      21,
      144,
      4,
      0,
      40,
      144,
      6,
      248,
      13,
      144,
      6,
      12,
      66,
      95,
      0,
      152,
      0,
      1,
      252,
      144,
      6,
      11,
      53,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      1,
      231,
      196,
      36,
      135,
      255,
      252,
      20,
      135,
      255,
      254,
      22,
      135,
      255,
      252,
      144,
      6,
      242,
      213,
      151,
      0,
      1,
      207,
      22,
      0,
      96,
      0,
      15,
      132,
      10,
      129,
      16,
      208,
      0,
      0,
      88,
      0,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      1,
      173,
      23,
      64,
      180,
      139,
      144,
      70,
      254,
      10,
      230,
      232,
      18,
      0,
      0,
      10,
      22,
      0,
      0,
      0,
      24,
      0,
      180,
      105,
      144,
      70,
      254,
      50,
      144,
      70,
      254,
      40,
      248,
      246,
      19,
      135,
      255,
      251,
      23,
      0,
      32,
      144,
      70,
      254,
      36,
      211,
      155,
      0,
      255,
      247,
      23,
      0,
      0,
      39,
      135,
      255,
      250,
      22,
      0,
      128,
      0,
      15,
      128,
      16,
      208,
      0,
      0,
      15,
      49,
      9,
      32,
      89,
      128,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      230,
      15,
      113,
      144,
      70,
      254,
      36,
      246,
      144,
      4,
      1,
      51,
      89,
      255,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      17,
      200,
      16,
      0,
      0,
      0,
      17,
      208,
      0,
      0,
      144,
      6,
      1,
      99,
      144,
      4,
      1,
      24,
      89,
      254,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      14,
      200,
      16,
      208,
      0,
      0,
      200,
      144,
      6,
      1,
      75,
      144,
      4,
      1,
      0,
      89,
      251,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      9,
      200,
      144,
      6,
      1,
      95,
      144,
      4,
      0,
      237,
      89,
      249,
      144,
      0,
      0,
      231,
      89,
      250,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      9,
      200,
      144,
      6,
      1,
      115,
      144,
      4,
      0,
      212,
      230,
      232,
      23,
      64,
      180,
      143,
      144,
      70,
      254,
      10,
      22,
      0,
      224,
      0,
      24,
      0,
      166,
      177,
      96,
      0,
      127,
      10,
      2,
      1,
      128,
      200,
      200,
      16,
      208,
      0,
      0,
      112,
      0,
      1,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      10,
      230,
      23,
      64,
      180,
      140,
      144,
      70,
      254,
      10,
      246,
      112,
      0,
      4,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      10,
      230,
      23,
      64,
      180,
      141,
      144,
      70,
      254,
      10,
      246,
      112,
      0,
      8,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      10,
      230,
      23,
      64,
      180,
      142,
      144,
      70,
      254,
      10,
      246,
      112,
      64,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      36,
      112,
      32,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      91,
      0,
      152,
      0,
      0,
      19,
      230,
      224,
      23,
      64,
      180,
      138,
      17,
      135,
      255,
      251,
      186,
      1,
      23,
      33,
      135,
      255,
      251,
      240,
      246,
      112,
      128,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      48,
      230,
      19,
      135,
      255,
      250,
      91,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      17,
      19,
      64,
      180,
      138,
      211,
      23,
      0,
      17,
      144,
      70,
      254,
      36,
      211,
      155,
      0,
      255,
      247,
      23,
      64,
      180,
      138,
      17,
      135,
      255,
      251,
      186,
      2,
      23,
      33,
      135,
      255,
      251,
      246,
      216,
      216,
      24,
      208,
      0,
      0,
      144,
      70,
      254,
      40,
      248,
      246,
      200,
      17,
      0,
      1,
      33,
      135,
      255,
      250,
      16,
      208,
      0,
      0,
      15,
      49,
      9,
      32,
      89,
      0,
      152,
      0,
      254,
      161,
      230,
      23,
      0,
      13,
      144,
      70,
      254,
      36,
      246,
      196,
      22,
      135,
      255,
      252,
      3,
      70,
      147,
      0,
      254,
      41,
      23,
      0,
      0,
      15,
      87,
      246,
      144,
      70,
      254,
      10,
      15,
      117,
      242,
      240,
      248,
      244,
      57,
      6,
      167,
      20,
      64,
      180,
      4,
      196,
      36,
      135,
      255,
      252,
      167,
      226,
      228,
      230,
      232,
      23,
      64,
      180,
      144,
      144,
      70,
      254,
      10,
      22,
      0,
      0,
      0,
      24,
      0,
      180,
      105,
      15,
      64,
      18,
      0,
      0,
      10,
      144,
      70,
      254,
      50,
      144,
      70,
      254,
      40,
      248,
      246,
      244,
      242,
      167,
      232,
      230,
      23,
      64,
      180,
      145,
      144,
      70,
      254,
      10,
      23,
      0,
      34,
      144,
      70,
      254,
      36,
      246,
      144,
      70,
      254,
      48,
      230,
      23,
      0,
      34,
      144,
      70,
      254,
      36,
      246,
      248,
      17,
      208,
      0,
      0,
      200,
      89,
      0,
      152,
      0,
      255,
      245,
      216,
      167,
      230,
      23,
      64,
      180,
      146,
      144,
      70,
      254,
      10,
      246,
      226,
      18,
      208,
      0,
      0,
      12,
      46,
      200,
      200,
      17,
      208,
      0,
      0,
      200,
      230,
      23,
      208,
      0,
      0,
      144,
      70,
      254,
      36,
      246,
      209,
      152,
      0,
      255,
      240,
      91,
      1,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      13,
      230,
      23,
      0,
      36,
      144,
      70,
      254,
      36,
      246,
      144,
      4,
      0,
      19,
      91,
      2,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      9,
      230,
      23,
      0,
      35,
      144,
      70,
      254,
      36,
      246,
      242,
      167,
      56,
      0,
      224,
      228,
      144,
      6,
      9,
      119,
      95,
      0,
      152,
      0,
      0,
      105,
      144,
      6,
      9,
      71,
      151,
      0,
      0,
      97,
      49,
      80,
      18,
      144,
      6,
      245,
      4,
      95,
      0,
      144,
      0,
      0,
      77,
      95,
      248,
      144,
      0,
      0,
      71,
      95,
      184,
      144,
      0,
      0,
      77,
      95,
      183,
      144,
      0,
      0,
      83,
      95,
      208,
      144,
      0,
      0,
      89,
      95,
      207,
      144,
      0,
      0,
      115,
      95,
      223,
      144,
      0,
      0,
      143,
      95,
      142,
      144,
      0,
      0,
      169,
      95,
      133,
      144,
      0,
      0,
      209,
      95,
      194,
      144,
      0,
      0,
      239,
      95,
      178,
      144,
      0,
      1,
      13,
      95,
      169,
      144,
      0,
      1,
      39,
      144,
      6,
      244,
      221,
      23,
      0,
      1,
      144,
      4,
      0,
      7,
      144,
      6,
      244,
      210,
      23,
      0,
      0,
      244,
      240,
      57,
      0,
      167,
      48,
      80,
      19,
      109,
      128,
      49,
      80,
      19,
      144,
      4,
      255,
      145,
      48,
      80,
      19,
      101,
      127,
      49,
      80,
      19,
      144,
      4,
      255,
      133,
      144,
      6,
      8,
      231,
      95,
      0,
      152,
      0,
      255,
      217,
      144,
      6,
      8,
      183,
      151,
      0,
      255,
      209,
      48,
      16,
      19,
      97,
      224,
      5,
      21,
      49,
      16,
      19,
      144,
      4,
      255,
      101,
      144,
      6,
      8,
      199,
      95,
      0,
      152,
      0,
      255,
      185,
      144,
      6,
      8,
      151,
      151,
      0,
      255,
      177,
      48,
      16,
      20,
      97,
      63,
      10,
      86,
      5,
      21,
      49,
      16,
      20,
      144,
      4,
      255,
      67,
      144,
      6,
      8,
      165,
      95,
      0,
      152,
      0,
      255,
      151,
      144,
      6,
      8,
      117,
      151,
      0,
      255,
      143,
      48,
      16,
      20,
      97,
      224,
      5,
      21,
      49,
      16,
      20,
      144,
      4,
      255,
      35,
      144,
      6,
      8,
      142,
      95,
      0,
      152,
      0,
      255,
      119,
      144,
      6,
      8,
      85,
      151,
      0,
      255,
      111,
      49,
      80,
      22,
      144,
      6,
      8,
      74,
      151,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      95,
      6,
      144,
      4,
      255,
      87,
      49,
      80,
      21,
      144,
      4,
      254,
      245,
      144,
      6,
      8,
      96,
      95,
      0,
      152,
      0,
      255,
      73,
      144,
      6,
      8,
      39,
      151,
      0,
      255,
      65,
      49,
      80,
      23,
      144,
      6,
      8,
      28,
      151,
      0,
      255,
      54,
      49,
      80,
      24,
      144,
      4,
      254,
      209,
      144,
      6,
      8,
      60,
      95,
      0,
      152,
      0,
      255,
      37,
      144,
      6,
      8,
      3,
      151,
      0,
      255,
      29,
      49,
      80,
      25,
      144,
      6,
      7,
      248,
      151,
      0,
      255,
      18,
      49,
      80,
      26,
      144,
      4,
      254,
      173,
      144,
      6,
      8,
      15,
      95,
      0,
      152,
      0,
      255,
      1,
      144,
      6,
      7,
      223,
      151,
      0,
      254,
      249,
      48,
      16,
      27,
      97,
      252,
      5,
      21,
      49,
      16,
      27,
      144,
      4,
      254,
      141,
      144,
      6,
      7,
      239,
      95,
      0,
      152,
      0,
      254,
      225,
      144,
      6,
      7,
      191,
      151,
      0,
      254,
      217,
      48,
      16,
      20,
      97,
      223,
      10,
      85,
      5,
      21,
      49,
      16,
      20,
      144,
      4,
      254,
      107,
      56,
      2,
      144,
      6,
      243,
      109,
      95,
      0,
      144,
      0,
      0,
      168,
      95,
      248,
      144,
      0,
      0,
      162,
      95,
      247,
      144,
      0,
      0,
      202,
      95,
      246,
      144,
      0,
      0,
      208,
      95,
      137,
      144,
      0,
      0,
      213,
      95,
      136,
      144,
      0,
      0,
      235,
      95,
      133,
      144,
      0,
      1,
      5,
      95,
      209,
      144,
      0,
      1,
      105,
      95,
      220,
      144,
      0,
      1,
      92,
      144,
      6,
      243,
      88,
      144,
      6,
      7,
      141,
      95,
      0,
      152,
      1,
      104,
      144,
      6,
      6,
      129,
      95,
      251,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      36,
      23,
      64,
      180,
      1,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      22,
      0,
      0,
      0,
      144,
      4,
      0,
      4,
      22,
      0,
      128,
      0,
      15,
      132,
      144,
      70,
      254,
      40,
      144,
      4,
      0,
      46,
      95,
      252,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      14,
      22,
      0,
      64,
      0,
      15,
      132,
      144,
      70,
      254,
      40,
      144,
      4,
      0,
      22,
      18,
      0,
      0,
      10,
      15,
      68,
      22,
      0,
      0,
      0,
      24,
      0,
      180,
      105,
      144,
      70,
      254,
      52,
      144,
      70,
      254,
      40,
      144,
      6,
      0,
      44,
      144,
      4,
      255,
      81,
      57,
      2,
      167,
      22,
      135,
      255,
      254,
      94,
      0,
      1,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      22,
      0,
      244,
      27,
      24,
      0,
      0,
      6,
      144,
      70,
      254,
      40,
      23,
      0,
      0,
      144,
      6,
      242,
      194,
      144,
      5,
      216,
      22,
      0,
      0,
      0,
      38,
      135,
      255,
      254,
      167,
      22,
      0,
      0,
      1,
      38,
      135,
      255,
      254,
      144,
      4,
      255,
      20,
      23,
      0,
      9,
      144,
      70,
      254,
      36,
      144,
      4,
      255,
      233,
      144,
      6,
      6,
      212,
      95,
      0,
      152,
      0,
      255,
      174,
      144,
      6,
      6,
      164,
      151,
      0,
      255,
      166,
      15,
      117,
      144,
      70,
      254,
      36,
      144,
      4,
      254,
      237,
      144,
      6,
      6,
      184,
      95,
      0,
      152,
      0,
      255,
      146,
      144,
      6,
      6,
      136,
      151,
      0,
      255,
      138,
      15,
      53,
      144,
      6,
      6,
      126,
      151,
      0,
      255,
      128,
      144,
      4,
      0,
      127,
      144,
      6,
      6,
      152,
      95,
      0,
      152,
      0,
      255,
      114,
      144,
      6,
      5,
      139,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      255,
      93,
      15,
      36,
      144,
      6,
      242,
      25,
      95,
      246,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      255,
      70,
      144,
      6,
      6,
      98,
      95,
      0,
      152,
      0,
      255,
      60,
      144,
      6,
      5,
      85,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      2,
      144,
      4,
      255,
      39,
      15,
      98,
      9,
      38,
      15,
      117,
      144,
      70,
      254,
      4,
      144,
      4,
      254,
      106,
      19,
      0,
      9,
      144,
      4,
      0,
      3,
      19,
      0,
      32,
      144,
      6,
      6,
      43,
      95,
      0,
      152,
      0,
      255,
      5,
      144,
      6,
      5,
      251,
      151,
      0,
      254,
      253,
      92,
      0,
      0,
      15,
      115,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      9,
      144,
      70,
      254,
      36,
      212,
      144,
      4,
      255,
      239,
      144,
      4,
      255,
      20,
      56,
      0,
      224,
      228,
      144,
      6,
      5,
      251,
      95,
      0,
      152,
      0,
      0,
      93,
      144,
      6,
      5,
      203,
      151,
      0,
      0,
      85,
      49,
      80,
      28,
      144,
      6,
      241,
      136,
      95,
      0,
      144,
      0,
      0,
      65,
      95,
      248,
      144,
      0,
      0,
      59,
      95,
      184,
      144,
      0,
      0,
      65,
      95,
      183,
      144,
      0,
      0,
      71,
      95,
      208,
      144,
      0,
      0,
      77,
      95,
      207,
      144,
      0,
      0,
      114,
      95,
      223,
      144,
      0,
      0,
      183,
      95,
      142,
      144,
      0,
      0,
      209,
      95,
      133,
      144,
      0,
      0,
      249,
      95,
      165,
      144,
      0,
      1,
      37,
      144,
      6,
      241,
      109,
      23,
      0,
      1,
      144,
      4,
      0,
      7,
      144,
      6,
      241,
      98,
      23,
      0,
      0,
      244,
      240,
      57,
      0,
      167,
      48,
      80,
      29,
      109,
      128,
      49,
      80,
      29,
      144,
      4,
      255,
      157,
      48,
      80,
      29,
      101,
      127,
      49,
      80,
      29,
      144,
      4,
      255,
      145,
      144,
      6,
      5,
      128,
      95,
      0,
      152,
      0,
      255,
      217,
      144,
      6,
      5,
      71,
      151,
      0,
      255,
      209,
      48,
      16,
      29,
      97,
      224,
      5,
      21,
      49,
      16,
      29,
      144,
      6,
      5,
      53,
      151,
      0,
      255,
      191,
      49,
      80,
      30,
      144,
      4,
      255,
      102,
      144,
      6,
      5,
      85,
      95,
      0,
      152,
      0,
      255,
      174,
      144,
      6,
      5,
      28,
      151,
      0,
      255,
      166,
      15,
      21,
      97,
      15,
      144,
      6,
      5,
      16,
      151,
      0,
      255,
      154,
      10,
      20,
      101,
      15,
      5,
      21,
      9,
      33,
      49,
      16,
      32,
      144,
      6,
      4,
      253,
      151,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      95,
      6,
      144,
      4,
      255,
      122,
      48,
      16,
      31,
      97,
      63,
      10,
      86,
      5,
      21,
      49,
      16,
      31,
      144,
      4,
      255,
      27,
      144,
      6,
      5,
      1,
      95,
      0,
      152,
      0,
      255,
      99,
      144,
      6,
      4,
      209,
      151,
      0,
      255,
      91,
      48,
      16,
      31,
      97,
      224,
      5,
      21,
      49,
      16,
      31,
      144,
      4,
      254,
      251,
      144,
      6,
      4,
      234,
      95,
      0,
      152,
      0,
      255,
      67,
      144,
      6,
      4,
      177,
      151,
      0,
      255,
      59,
      49,
      80,
      34,
      144,
      6,
      4,
      166,
      151,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      95,
      6,
      144,
      4,
      255,
      35,
      49,
      80,
      33,
      144,
      4,
      254,
      205,
      144,
      6,
      4,
      188,
      95,
      0,
      152,
      0,
      255,
      21,
      144,
      6,
      4,
      131,
      151,
      0,
      255,
      13,
      9,
      36,
      49,
      80,
      35,
      9,
      36,
      49,
      80,
      36,
      144,
      6,
      4,
      113,
      151,
      0,
      254,
      251,
      9,
      36,
      49,
      80,
      37,
      9,
      36,
      49,
      80,
      38,
      144,
      4,
      254,
      155,
      144,
      6,
      4,
      129,
      95,
      0,
      152,
      0,
      254,
      227,
      144,
      6,
      4,
      81,
      151,
      0,
      254,
      219,
      48,
      16,
      29,
      97,
      159,
      10,
      85,
      5,
      21,
      49,
      16,
      29,
      144,
      4,
      254,
      121,
      213,
      65,
      16,
      20,
      213,
      65,
      32,
      6,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      32,
      20,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      216,
      131,
      16,
      20,
      213,
      65,
      0,
      20,
      213,
      69,
      0,
      0,
      213,
      65,
      32,
      20,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      65,
      48,
      20,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      31,
      17,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      32,
      5,
      213,
      69,
      0,
      0,
      216,
      191,
      32,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      32,
      20,
      216,
      156,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      65,
      32,
      20,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      65,
      32,
      20,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      69,
      0,
      0,
      213,
      65,
      16,
      20,
      213,
      65,
      16,
      20,
      213,
      65,
      16,
      20,
      213,
      69,
      0,
      0,
      213,
      97,
      32,
      14,
      213,
      147,
      32,
      14,
      213,
      73,
      16,
      17,
      213,
      187,
      32,
      15,
      213,
      227,
      32,
      15,
      214,
      11,
      32,
      15,
      213,
      65,
      47,
      16,
      216,
      63,
      32,
      11,
      215,
      15,
      32,
      12,
      215,
      167,
      32,
      12,
      214,
      203,
      32,
      12,
      215,
      99,
      32,
      12,
      215,
      251,
      32,
      11,
      255,
      254,
      32,
      21,
      255,
      255,
      32,
      21,
      0,
      0,
      0,
      1,
      213,
      65,
      0,
      255,
      213,
      65,
      0,
      255,
      213,
      65,
      0,
      255,
      213,
      65,
      0,
      255,
      213,
      65,
      0,
      255,
      213,
      65,
      0,
      255,
      213,
      65,
      0,
      255,
      213,
      65,
      0,
      255,
      213,
      65,
      0,
      255,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      65,
      216,
      246,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      69,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      69,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      65,
      219,
      34,
      213,
      69,
      219,
      128,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      69,
      223,
      207,
      213,
      69,
      213,
      69,
      219,
      21,
      213,
      65,
      220,
      94,
      213,
      65,
      213,
      65,
      213,
      69,
      213,
      65,
      213,
      69,
      213,
      65,
      213,
      69,
      213,
      65,
      213,
      69,
      217,
      10,
      213,
      65,
      213,
      69,
      213,
      65,
      213,
      65,
      213,
      65,
      213,
      69,
      217,
      22,
      213,
      69,
      213,
      65,
      213,
      65,
      217,
      165,
      225,
      125,
      213,
      65,
      213,
      65,
      217,
      18,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      65,
      213,
      65,
      219,
      246,
      213,
      65,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      65,
      213,
      69,
      213,
      69,
      227,
      75,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      65,
      213,
      69,
      218,
      58,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      213,
      69,
      56,
      0,
      232,
      24,
      0,
      0,
      0,
      25,
      64,
      180,
      14,
      39,
      80,
      180,
      15,
      10,
      131,
      95,
      249,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      36,
      80,
      180,
      25,
      144,
      4,
      0,
      48,
      234,
      15,
      164,
      20,
      72,
      47,
      8,
      36,
      80,
      180,
      25,
      202,
      202,
      200,
      200,
      20,
      72,
      47,
      8,
      36,
      80,
      180,
      25,
      202,
      202,
      200,
      200,
      20,
      72,
      47,
      8,
      36,
      80,
      180,
      25,
      202,
      202,
      200,
      200,
      20,
      72,
      47,
      8,
      36,
      80,
      180,
      25,
      250,
      25,
      64,
      180,
      14,
      201,
      41,
      64,
      180,
      14,
      248,
      57,
      0,
      167,
      56,
      0,
      232,
      24,
      0,
      0,
      0,
      25,
      64,
      180,
      14,
      217,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      5,
      183,
      144,
      4,
      0,
      20,
      191,
      23,
      80,
      180,
      15,
      10,
      131,
      20,
      80,
      180,
      25,
      25,
      64,
      180,
      14,
      217,
      41,
      64,
      180,
      14,
      248,
      57,
      0,
      167,
      56,
      0,
      232,
      234,
      26,
      0,
      0,
      0,
      27,
      64,
      180,
      14,
      3,
      155,
      155,
      0,
      0,
      4,
      144,
      4,
      0,
      5,
      183,
      144,
      4,
      0,
      16,
      2,
      185,
      219,
      15,
      155,
      191,
      23,
      80,
      180,
      15,
      10,
      131,
      20,
      80,
      180,
      25,
      250,
      248,
      57,
      0,
      167,
      56,
      0,
      232,
      24,
      0,
      0,
      0,
      40,
      64,
      180,
      14,
      248,
      57,
      0,
      167,
      232,
      226,
      234,
      144,
      6,
      236,
      106,
      15,
      38,
      98,
      192,
      0,
      12,
      46,
      102,
      63,
      255,
      230,
      144,
      6,
      236,
      52,
      24,
      64,
      180,
      8,
      186,
      1,
      135,
      40,
      64,
      180,
      8,
      246,
      15,
      134,
      90,
      0,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      22,
      0,
      0,
      254,
      20,
      80,
      32,
      0,
      144,
      4,
      0,
      46,
      90,
      0,
      1,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      22,
      0,
      0,
      252,
      20,
      80,
      39,
      132,
      144,
      4,
      0,
      23,
      90,
      0,
      2,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      22,
      0,
      0,
      249,
      10,
      130,
      15,
      72,
      144,
      4,
      0,
      0,
      250,
      242,
      248,
      167,
      144,
      6,
      255,
      31,
      151,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      6,
      144,
      4,
      0,
      18,
      95,
      254,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      23,
      0,
      2,
      183,
      144,
      4,
      0,
      0,
      167,
      144,
      6,
      255,
      90,
      191,
      144,
      4,
      0,
      19,
      144,
      6,
      255,
      81,
      183,
      144,
      4,
      0,
      10,
      191,
      144,
      4,
      0,
      5,
      183,
      144,
      4,
      0,
      0,
      236,
      224,
      15,
      206,
      16,
      0,
      1,
      15,
      186,
      2,
      224,
      234,
      232,
      228,
      226,
      224,
      46,
      135,
      255,
      250,
      151,
      0,
      0,
      4,
      144,
      4,
      0,
      11,
      17,
      0,
      255,
      33,
      135,
      254,
      241,
      144,
      4,
      0,
      7,
      17,
      0,
      0,
      33,
      135,
      254,
      241,
      230,
      232,
      22,
      0,
      255,
      116,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      38,
      208,
      0,
      0,
      248,
      246,
      230,
      232,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      38,
      208,
      0,
      0,
      248,
      246,
      16,
      0,
      0,
      0,
      33,
      135,
      255,
      252,
      33,
      135,
      255,
      253,
      24,
      135,
      254,
      242,
      20,
      0,
      0,
      64,
      3,
      132,
      155,
      0,
      3,
      38,
      24,
      135,
      255,
      116,
      20,
      0,
      0,
      64,
      3,
      132,
      155,
      0,
      3,
      24,
      144,
      6,
      235,
      2,
      95,
      0,
      144,
      0,
      2,
      97,
      95,
      248,
      144,
      0,
      2,
      91,
      17,
      135,
      255,
      253,
      89,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      30,
      17,
      135,
      254,
      241,
      89,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      95,
      246,
      144,
      0,
      2,
      57,
      95,
      247,
      144,
      0,
      2,
      51,
      144,
      4,
      0,
      31,
      95,
      246,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      144,
      4,
      255,
      154,
      95,
      247,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      23,
      0,
      1,
      144,
      4,
      2,
      170,
      15,
      71,
      101,
      127,
      10,
      66,
      232,
      15,
      132,
      16,
      87,
      228,
      235,
      200,
      200,
      18,
      87,
      228,
      235,
      248,
      90,
      0,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      144,
      4,
      1,
      237,
      95,
      250,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      60,
      144,
      6,
      254,
      69,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      15,
      100,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      144,
      4,
      255,
      32,
      95,
      255,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      65,
      23,
      0,
      254,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      22,
      0,
      0,
      0,
      144,
      6,
      234,
      41,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      144,
      4,
      254,
      213,
      95,
      254,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      58,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      144,
      6,
      234,
      12,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      144,
      4,
      254,
      145,
      95,
      251,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      68,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      22,
      64,
      180,
      8,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      144,
      6,
      233,
      132,
      95,
      0,
      152,
      0,
      255,
      246,
      144,
      4,
      254,
      67,
      95,
      244,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      17,
      144,
      6,
      1,
      111,
      17,
      135,
      255,
      253,
      193,
      33,
      135,
      255,
      253,
      144,
      4,
      254,
      40,
      95,
      245,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      66,
      24,
      135,
      255,
      116,
      20,
      0,
      0,
      0,
      3,
      132,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      28,
      144,
      6,
      1,
      117,
      88,
      255,
      254,
      144,
      1,
      25,
      144,
      6,
      1,
      160,
      24,
      135,
      255,
      116,
      20,
      0,
      0,
      0,
      3,
      132,
      144,
      4,
      255,
      220,
      23,
      0,
      35,
      144,
      4,
      1,
      10,
      17,
      135,
      255,
      253,
      209,
      33,
      135,
      255,
      253,
      144,
      4,
      253,
      220,
      24,
      135,
      255,
      116,
      20,
      0,
      0,
      0,
      3,
      132,
      15,
      128,
      15,
      162,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      61,
      144,
      6,
      1,
      47,
      3,
      59,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      0,
      238,
      144,
      4,
      0,
      39,
      88,
      255,
      254,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      6,
      0,
      219,
      144,
      4,
      0,
      20,
      144,
      6,
      1,
      59,
      232,
      24,
      135,
      255,
      116,
      20,
      0,
      0,
      0,
      3,
      132,
      248,
      144,
      4,
      255,
      187,
      15,
      8,
      15,
      42,
      144,
      6,
      0,
      187,
      144,
      4,
      253,
      125,
      144,
      0,
      253,
      121,
      144,
      6,
      232,
      188,
      24,
      135,
      255,
      116,
      20,
      0,
      0,
      0,
      3,
      132,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      39,
      144,
      6,
      0,
      204,
      88,
      255,
      254,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      36,
      144,
      5,
      111,
      144,
      6,
      0,
      236,
      24,
      135,
      255,
      116,
      20,
      0,
      0,
      0,
      3,
      132,
      144,
      4,
      255,
      209,
      228,
      230,
      232,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      184,
      144,
      70,
      254,
      58,
      248,
      246,
      15,
      100,
      244,
      151,
      0,
      0,
      50,
      15,
      70,
      228,
      230,
      232,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      184,
      144,
      70,
      254,
      58,
      248,
      246,
      15,
      100,
      244,
      151,
      0,
      0,
      18,
      19,
      64,
      180,
      14,
      91,
      10,
      144,
      0,
      0,
      40,
      144,
      6,
      251,
      13,
      144,
      4,
      255,
      176,
      21,
      64,
      180,
      14,
      93,
      1,
      147,
      0,
      1,
      49,
      23,
      0,
      0,
      30,
      135,
      255,
      250,
      240,
      242,
      244,
      248,
      250,
      16,
      0,
      1,
      15,
      186,
      1,
      224,
      240,
      252,
      167,
      23,
      0,
      32,
      144,
      5,
      231,
      228,
      230,
      232,
      15,
      64,
      22,
      0,
      255,
      116,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      228,
      230,
      232,
      15,
      66,
      22,
      0,
      255,
      116,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      167,
      228,
      230,
      232,
      22,
      0,
      255,
      116,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      184,
      144,
      70,
      254,
      58,
      248,
      246,
      15,
      36,
      244,
      228,
      230,
      232,
      22,
      0,
      255,
      116,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      184,
      144,
      70,
      254,
      58,
      248,
      246,
      15,
      4,
      244,
      167,
      88,
      0,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      1,
      167,
      15,
      98,
      102,
      240,
      0,
      12,
      108,
      95,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      73,
      15,
      38,
      228,
      230,
      232,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      184,
      144,
      70,
      254,
      58,
      248,
      246,
      15,
      100,
      244,
      151,
      0,
      0,
      119,
      15,
      70,
      228,
      230,
      232,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      184,
      144,
      70,
      254,
      58,
      248,
      246,
      15,
      100,
      244,
      151,
      0,
      0,
      87,
      144,
      6,
      250,
      26,
      211,
      152,
      0,
      255,
      185,
      32,
      135,
      255,
      246,
      144,
      134,
      255,
      246,
      95,
      0,
      152,
      0,
      255,
      11,
      144,
      6,
      250,
      99,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      15,
      100,
      228,
      230,
      232,
      15,
      70,
      22,
      0,
      254,
      242,
      15,
      140,
      186,
      1,
      134,
      22,
      0,
      0,
      0,
      144,
      70,
      254,
      56,
      248,
      246,
      244,
      167,
      23,
      0,
      1,
      144,
      4,
      254,
      203,
      23,
      0,
      6,
      144,
      4,
      254,
      196,
      56,
      0,
      232,
      224,
      234,
      228,
      26,
      0,
      0,
      0,
      144,
      6,
      225,
      212,
      151,
      0,
      0,
      4,
      144,
      4,
      0,
      14,
      23,
      0,
      0,
      39,
      64,
      180,
      1,
      23,
      0,
      25,
      144,
      4,
      0,
      119,
      144,
      6,
      230,
      157,
      15,
      71,
      116,
      0,
      128,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      23,
      92,
      0,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      23,
      0,
      0,
      144,
      5,
      85,
      23,
      0,
      1,
      144,
      5,
      79,
      100,
      0,
      127,
      10,
      65,
      15,
      132,
      144,
      86,
      230,
      235,
      95,
      254,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      144,
      4,
      255,
      165,
      95,
      0,
      152,
      1,
      49,
      144,
      6,
      230,
      87,
      95,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      7,
      144,
      5,
      32,
      144,
      4,
      0,
      24,
      95,
      248,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      4,
      255,
      125,
      144,
      4,
      0,
      6,
      23,
      0,
      1,
      144,
      5,
      4,
      144,
      0,
      255,
      111,
      95,
      255,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      3,
      23,
      0,
      0,
      244,
      250,
      240,
      248,
      57,
      0,
      167,
      24,
      0,
      0,
      20,
      23,
      87,
      238,
      236,
      39,
      80,
      180,
      147,
      216,
      154,
      0,
      255,
      243,
      167,
      37,
      64,
      180,
      157,
      20,
      0,
      0,
      0,
      48,
      80,
      0,
      167,
      37,
      64,
      180,
      165,
      49,
      16,
      0,
      167,
      22,
      0,
      244,
      0,
      24,
      0,
      0,
      0,
      144,
      70,
      254,
      40,
      144,
      6,
      0,
      69,
      144,
      6,
      0,
      1,
      167,
      23,
      0,
      1,
      39,
      64,
      180,
      138,
      23,
      0,
      23,
      39,
      64,
      180,
      139,
      23,
      0,
      22,
      39,
      64,
      180,
      140,
      23,
      0,
      22,
      39,
      64,
      180,
      141,
      23,
      0,
      23,
      39,
      64,
      180,
      142,
      23,
      0,
      19,
      39,
      64,
      180,
      144,
      23,
      0,
      21,
      39,
      64,
      180,
      145,
      23,
      0,
      23,
      39,
      64,
      180,
      146,
      23,
      0,
      22,
      39,
      64,
      180,
      143,
      167,
      22,
      0,
      0,
      0,
      38,
      64,
      180,
      0,
      38,
      64,
      180,
      4,
      38,
      64,
      180,
      2,
      22,
      0,
      0,
      1,
      38,
      64,
      180,
      10,
      38,
      64,
      180,
      12,
      22,
      0,
      128,
      0,
      24,
      0,
      0,
      0,
      38,
      64,
      180,
      6,
      40,
      64,
      180,
      8,
      22,
      0,
      0,
      0,
      38,
      64,
      180,
      1,
      17,
      0,
      0,
      22,
      0,
      0,
      0,
      24,
      0,
      32,
      0,
      26,
      0,
      60,
      32,
      218,
      33,
      216,
      0,
      0,
      152,
      0,
      255,
      247,
      22,
      0,
      96,
      0,
      24,
      0,
      0,
      0,
      26,
      0,
      0,
      0,
      218,
      33,
      216,
      0,
      0,
      152,
      0,
      255,
      247,
      228,
      230,
      232,
      22,
      0,
      64,
      0,
      24,
      0,
      0,
      0,
      20,
      0,
      255,
      252,
      144,
      70,
      254,
      60,
      248,
      246,
      244,
      167,
      22,
      0,
      244,
      26,
      24,
      0,
      0,
      7,
      144,
      70,
      254,
      40,
      22,
      0,
      22,
      0,
      24,
      0,
      0,
      0,
      20,
      0,
      0,
      255,
      144,
      70,
      254,
      42,
      22,
      0,
      244,
      27,
      24,
      0,
      0,
      6,
      144,
      70,
      254,
      40,
      92,
      0,
      0,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      144,
      4,
      255,
      213,
      147,
      0,
      0,
      4,
      144,
      4,
      0,
      15,
      20,
      0,
      0,
      0,
      23,
      0,
      27,
      144,
      6,
      224,
      25,
      144,
      4,
      255,
      178,
      22,
      0,
      22,
      0,
      24,
      0,
      0,
      0,
      144,
      6,
      224,
      141,
      95,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      20,
      0,
      0,
      0,
      144,
      6,
      223,
      247,
      144,
      4,
      255,
      144,
      22,
      0,
      22,
      0,
      24,
      0,
      0,
      0,
      26,
      0,
      0,
      0,
      17,
      216,
      0,
      0,
      202,
      89,
      32,
      144,
      0,
      255,
      245,
      218,
      234,
      17,
      216,
      0,
      0,
      202,
      89,
      0,
      152,
      0,
      255,
      245,
      218,
      218,
      17,
      216,
      0,
      0,
      89,
      32,
      144,
      0,
      255,
      245,
      202,
      17,
      0,
      0,
      33,
      216,
      0,
      0,
      250,
      22,
      0,
      22,
      0,
      24,
      0,
      0,
      0,
      232,
      230,
      22,
      0,
      22,
      32,
      24,
      0,
      0,
      0,
      232,
      230,
      144,
      6,
      224,
      200,
      95,
      0,
      152,
      0,
      0,
      248,
      9,
      38,
      15,
      55,
      9,
      38,
      16,
      0,
      0,
      8,
      186,
      1,
      224,
      22,
      0,
      0,
      0,
      24,
      0,
      177,
      0,
      17,
      208,
      0,
      0,
      89,
      32,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      6,
      200,
      211,
      17,
      208,
      0,
      0,
      89,
      255,
      144,
      1,
      36,
      89,
      254,
      144,
      1,
      31,
      21,
      0,
      0,
      37,
      64,
      180,
      1,
      20,
      0,
      255,
      255,
      36,
      64,
      180,
      2,
      38,
      64,
      180,
      6,
      40,
      64,
      180,
      8,
      144,
      6,
      253,
      73,
      144,
      4,
      0,
      166,
      20,
      0,
      0,
      0,
      89,
      255,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      200,
      211,
      21,
      208,
      0,
      0,
      200,
      211,
      144,
      4,
      0,
      10,
      200,
      211,
      20,
      208,
      0,
      0,
      200,
      211,
      200,
      211,
      17,
      208,
      0,
      0,
      89,
      32,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      2,
      200,
      211,
      36,
      64,
      180,
      2,
      226,
      18,
      64,
      180,
      4,
      3,
      66,
      155,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      36,
      64,
      180,
      4,
      242,
      91,
      1,
      144,
      0,
      0,
      4,
      144,
      4,
      0,
      12,
      18,
      0,
      0,
      0,
      34,
      64,
      180,
      8,
      144,
      4,
      0,
      43,
      16,
      64,
      180,
      12,
      32,
      64,
      180,
      8,
      16,
      64,
      180,
      12,
      186,
      1,
      3,
      32,
      64,
      180,
      12,
      16,
      0,
      128,
      0,
      32,
      64,
      180,
      6,
      15,
      163,
      218,
      17,
      216,
      0,
      0,
      33,
      104,
      180,
      6,
      218,
      154,
      0,
      255,
      243,
      22,
      0,
      96,
      0,
      24,
      0,
      0,
      0,
      10,
      65,
      186,
      15,
      164,
      18,
      64,
      180,
      8,
      34,
      216,
      0,
      0,
      144,
      4,
      254,
      77,
      20,
      0,
      0,
      0,
      95,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      4,
      144,
      6,
      222,
      146,
      23,
      64,
      180,
      1,
      95,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      107,
      20,
      64,
      180,
      2,
      22,
      0,
      96,
      0,
      24,
      0,
      0,
      0,
      10,
      65,
      15,
      164,
      20,
      64,
      180,
      2,
      196,
      36,
      64,
      180,
      2,
      18,
      216,
      0,
      0,
      90,
      0,
      0,
      144,
      0,
      0,
      39,
      16,
      0,
      128,
      0,
      32,
      64,
      180,
      6,
      34,
      64,
      180,
      8,
      144,
      6,
      252,
      75,
      95,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      13,
      16,
      0,
      0,
      0,
      33,
      64,
      180,
      1,
      212,
      144,
      6,
      222,
      57,
      23,
      64,
      180,
      1,
      95,
      0,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      18,
      20,
      64,
      180,
      2,
      18,
      64,
      180,
      4,
      3,
      66,
      144,
      0,
      255,
      153,
      147,
      0,
      255,
      149,
      144,
      4,
      253,
      178,
      167
    ] },
    { addr: 523776, data: [
      192,
      217,
      194,
      90,
      193,
      184,
      193,
      214,
      193,
      225,
      196,
      17,
      196,
      26,
      196,
      48,
      196,
      53,
      193,
      252,
      194,
      18,
      194,
      27,
      194,
      59,
      194,
      194,
      194,
      225,
      195,
      21,
      195,
      88,
      195,
      129,
      196,
      154,
      197,
      34,
      197,
      60,
      197,
      123,
      192,
      197,
      192,
      207,
      197,
      100,
      198,
      41,
      198,
      152,
      198,
      190,
      199,
      88,
      199,
      41,
      199,
      116,
      199,
      139,
      199,
      161
    ] },
    { addr: 524032, data: [
      182,
      16,
      0,
      124,
      65,
      224,
      165,
      22,
      0,
      0,
      0,
      24,
      0,
      0,
      0,
      20,
      0,
      2,
      0,
      16,
      0,
      0,
      0,
      33,
      208,
      0,
      0,
      200,
      212,
      92,
      0,
      0,
      152,
      0,
      255,
      243,
      24,
      0,
      167,
      167,
      40,
      64,
      0,
      0,
      28,
      0,
      32,
      0,
      15,
      236,
      144,
      6,
      192,
      202,
      190,
      48,
      16,
      56,
      113,
      1,
      152,
      0,
      0,
      4,
      144,
      4,
      0,
      8,
      144,
      4,
      32,
      184,
      144,
      4,
      0,
      4,
      144,
      4,
      208,
      176
    ] }
  ];

  // src/www/worker/index.js
  var System = class {
    constructor(opts) {
      this.config = Object.assign({}, {
        options: {
          timingMethod: TIMING_METHODS.SENTINEL,
          sliceGranularity: 16384,
          sliceTime: 16,
          ticksBetweenRasterLines: "AUTO",
          accurateScreen: true,
          sentinel: void 0
        }
      }, opts);
      const computer = new Computer({
        performance,
        debug: true,
        timingMethod: this.config.options.timingMethod,
        sliceTime: this.config.options.sliceTime,
        sliceGranularity: this.config.options.sliceGranularity,
        sentinel: this.config.options.sentinel
      });
      computer.memory.loadFromJS(kernel_default, true);
      const diagnostics = new Diagnostics(computer);
      const timers = new Timers({
        device: 0,
        length: 16,
        controller: computer.controller,
        memory: computer.memory,
        clock: computer.clock,
        performance
      });
      const simpleConsole = new BrowserConsole({
        device: 8,
        length: 16,
        controller: computer.controller,
        memory: computer.memory,
        clock: computer.clock
      });
      const screen = new Screen({
        device: 1,
        length: 32,
        controller: computer.controller,
        memory: computer.memory,
        clock: computer.clock,
        performance
      });
      screen.adjustPerformance = this.config.options.ticksBetweenRasterLines === "AUTO";
      if (this.config.options.ticksBetweenRasterLines !== "AUTO") {
        screen.ticksBetweenRasterLines = Number(this.config.options.ticksBetweenRasterLines);
      }
      screen.mode = this.config.accurateScreen ? 2 : 1;
      const dma = new DMA({
        device: 13,
        length: 16,
        controller: computer.controller,
        memory: computer.memory,
        clock: computer.clock
      });
      const keyboard = new Keyboard({
        device: 3,
        length: 16,
        controller: computer.controller,
        memory: computer.memory,
        clock: computer.clock
      });
      this.computer = computer;
      this.diagnostics = diagnostics;
      this.devices = {
        console: simpleConsole,
        screen,
        dma,
        keyboard,
        timers
      };
      computer.reset();
    }
  };
  var system;
  onmessage = (evt) => {
    const { data } = evt;
    const { command, options } = data;
    switch (command) {
      case "sys-init":
        system = new System({ options });
        break;
      case "sys-config":
        break;
      case "cpu-reset":
        system.computer.reset();
        if (system.diagnostics.state === "running")
          return;
        system.computer.run();
        const text = `10 PRINT CHR$(RND(2)+238);:GOTO 10
RUN
`;
        Array.from(text).forEach((ch) => {
          system.devices.keyboard.keyPressed(ch === "\n" ? 13 : ch.charCodeAt(0));
        });
        break;
      case "cpu-start":
        system.computer.processor.jump(Number(options.startAddress || "0xFF00"));
        system.computer.processor.registers.SINGLE_STEP = 0;
        if (system.diagnostics.state === "running")
          return;
        system.computer.run();
        break;
      case "cpu-stop":
        system.computer.stop();
        break;
      case "cpu-continue":
        if (system.diagnostics.state === "running")
          return;
        system.computer.processor.registers.SINGLE_STEP = 0;
        system.computer.processor.registers.INTERRUPT_DISABLE = 0;
        system.computer.run();
        break;
      case "cpu-step":
        if (system.diagnostics.state === "running") {
          system.computer.processor.registers.INTERRUPT_DISABLE = 1;
          system.computer.processor.registers.SINGLE_STEP = 1;
        }
        ;
        system.computer.step();
        break;
      case "cpu-jump":
        system.computer.processor.jump(Number(options.startAddress || "0xFF00"));
        break;
      case "frame-dump":
        const frame = system.devices.screen.frame;
        if (system.devices.screen._wait)
          system.devices.screen.resetWait();
        postMessage({
          command: "frame",
          frame
        });
        break;
      case "frame-tick":
        break;
      case "dump-statistics":
        break;
      case "dump-registers":
        break;
      case "dump-flags":
        break;
      case "dump-fpu":
        break;
      case "key-get-gr":
        break;
      case "key-get-ctrl":
        break;
      case "key-get-shifted":
        break;
      case "key-down":
        break;
      case "key-up":
        break;
      case "key-pressed":
        break;
      case "key-set-raw":
        break;
      case "key-clear-raw":
        break;
      case "mem-peek":
        break;
      case "mem-poke":
        break;
      case "io-peek":
        break;
      case "io-poke":
        break;
      case "io-dump":
        break;
      case "mem-dump":
        break;
      default:
        console.log(`Received unsupported event: ${evt}`);
    }
  };
})();
//# sourceMappingURL=worker.js.map
