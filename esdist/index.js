(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err2) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty2.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = Function.call.bind(Object.prototype.hasOwnProperty);
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location3, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err2 = Error((componentName || "React class") + ": " + location3 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                  err2.name = "Invariant Violation";
                  throw err2;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location3, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location3 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location3 + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var checkPropTypes = require_checkPropTypes();
          var ReactVersion = "16.14.0";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            suspense: null
          };
          var ReactCurrentOwner = {
            current: null
          };
          var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
          function describeComponentFrame(name, source, ownerName) {
            var sourceInfo = "";
            if (source) {
              var path = source.fileName;
              var fileName = path.replace(BEFORE_SLASH_RE, "");
              {
                if (/^index\./.test(fileName)) {
                  var match = path.match(BEFORE_SLASH_RE);
                  if (match) {
                    var pathBeforeSlash = match[1];
                    if (pathBeforeSlash) {
                      var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                      fileName = folderName + "/" + fileName;
                    }
                  }
                }
              }
              sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
            } else if (ownerName) {
              sourceInfo = " (created by " + ownerName + ")";
            }
            return "\n    in " + (name || "Unknown") + sourceInfo;
          }
          var Resolved = 1;
          function refineResolvedLazyComponent(lazyComponent) {
            return lazyComponent._status === Resolved ? lazyComponent._result : null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getComponentName(type2) {
            if (type2 == null) {
              return null;
            }
            {
              if (typeof type2.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type2 === "function") {
              return type2.displayName || type2.name || null;
            }
            if (typeof type2 === "string") {
              return type2;
            }
            switch (type2) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  return "Context.Consumer";
                case REACT_PROVIDER_TYPE:
                  return "Context.Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type2, type2.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type2.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type2.render);
                case REACT_LAZY_TYPE: {
                  var thenable = type2;
                  var resolvedThenable = refineResolvedLazyComponent(thenable);
                  if (resolvedThenable) {
                    return getComponentName(resolvedThenable);
                  }
                  break;
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = {};
          var currentlyValidatingElement = null;
          function setCurrentlyValidatingElement(element) {
            {
              currentlyValidatingElement = element;
            }
          }
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentlyValidatingElement) {
                var name = getComponentName(currentlyValidatingElement.type);
                var owner = currentlyValidatingElement._owner;
                stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            _assign(ReactSharedInternals, {
              ReactDebugCurrentFrame,
              ReactComponentTreeHook: {}
            });
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
              if (!hasExistingStack) {
                var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame2.getStackAddendum();
                if (stack !== "") {
                  format += "%s";
                  args = args.concat([stack]);
                }
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
              try {
                var argIndex = 0;
                var message = "Warning: " + format.replace(/%s/g, function() {
                  return args[argIndex++];
                });
                throw new Error(message);
              } catch (x) {
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info4) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info4[0], info4[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent3(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent3.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent3;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config3) {
            {
              if (hasOwnProperty2.call(config3, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.ref !== void 0;
          }
          function hasValidKey(config3) {
            {
              if (hasOwnProperty2.call(config3, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config3) {
            {
              if (typeof config3.ref === "string" && ReactCurrentOwner.current && config3.__self && ReactCurrentOwner.current.stateNode !== config3.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config3.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type2, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type: type2,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement3(type2, config3, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config3 != null) {
              if (hasValidRef(config3)) {
                ref = config3.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config3);
                }
              }
              if (hasValidKey(config3)) {
                key = "" + config3.key;
              }
              self2 = config3.__self === void 0 ? null : config3.__self;
              source = config3.__source === void 0 ? null : config3.__source;
              for (propName in config3) {
                if (hasOwnProperty2.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config3[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type2 && type2.defaultProps) {
              var defaultProps = type2.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type2, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config3, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config3 != null) {
              if (hasValidRef(config3)) {
                ref = config3.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config3)) {
                key = "" + config3.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config3) {
                if (hasOwnProperty2.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config3[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config3[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = ("" + key).replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
          }
          var POOL_SIZE = 10;
          var traverseContextPool = [];
          function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
            if (traverseContextPool.length) {
              var traverseContext = traverseContextPool.pop();
              traverseContext.result = mapResult;
              traverseContext.keyPrefix = keyPrefix;
              traverseContext.func = mapFunction;
              traverseContext.context = mapContext;
              traverseContext.count = 0;
              return traverseContext;
            } else {
              return {
                result: mapResult,
                keyPrefix,
                func: mapFunction,
                context: mapContext,
                count: 0
              };
            }
          }
          function releaseTraverseContext(traverseContext) {
            traverseContext.result = null;
            traverseContext.keyPrefix = null;
            traverseContext.func = null;
            traverseContext.context = null;
            traverseContext.count = 0;
            if (traverseContextPool.length < POOL_SIZE) {
              traverseContextPool.push(traverseContext);
            }
          }
          function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
            var type2 = typeof children;
            if (type2 === "undefined" || type2 === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type2) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              callback(traverseContext, children, nameSoFar === "" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getComponentKey(child, i);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                {
                  if (iteratorFn === children.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is deprecated and will be removed in a future major release. Consider converting children to an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(children);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getComponentKey(child, ii++);
                  subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                }
              } else if (type2 === "object") {
                var addendum = "";
                {
                  addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
                }
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + ")." + addendum);
                  }
                }
              }
            }
            return subtreeCount;
          }
          function traverseAllChildren(children, callback, traverseContext) {
            if (children == null) {
              return 0;
            }
            return traverseAllChildrenImpl(children, "", callback, traverseContext);
          }
          function getComponentKey(component, index2) {
            if (typeof component === "object" && component !== null && component.key != null) {
              return escape(component.key);
            }
            return index2.toString(36);
          }
          function forEachSingleChild(bookKeeping, child, name) {
            var func = bookKeeping.func, context = bookKeeping.context;
            func.call(context, child, bookKeeping.count++);
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            if (children == null) {
              return children;
            }
            var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
            traverseAllChildren(children, forEachSingleChild, traverseContext);
            releaseTraverseContext(traverseContext);
          }
          function mapSingleChildIntoContext(bookKeeping, child, childKey) {
            var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
            var mappedChild = func.call(context, child, bookKeeping.count++);
            if (Array.isArray(mappedChild)) {
              mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + "/" : "") + childKey);
              }
              result.push(mappedChild);
            }
          }
          function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
            var escapedPrefix = "";
            if (prefix != null) {
              escapedPrefix = escapeUserProvidedKey(prefix) + "/";
            }
            var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
            traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
            releaseTraverseContext(traverseContext);
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            mapIntoWithKeyPrefixInternal(children, result, null, func, context);
            return result;
          }
          function countChildren(children) {
            return traverseAllChildren(children, function() {
              return null;
            }, null);
          }
          function toArray(children) {
            var result = [];
            mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
              return child;
            });
            return result;
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          function lazy(ctor) {
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _ctor: ctor,
              _status: -1,
              _result: null
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            return {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
          }
          function isValidElementType(type2) {
            return typeof type2 === "string" || typeof type2 === "function" || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_CONCURRENT_MODE_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || typeof type2 === "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_RESPONDER_TYPE || type2.$$typeof === REACT_SCOPE_TYPE || type2.$$typeof === REACT_BLOCK_TYPE);
          }
          function memo4(type2, compare) {
            {
              if (!isValidElementType(type2)) {
                error("memo: The first argument must be a component. Instead received: %s", type2 === null ? "null" : typeof type2);
              }
            }
            return {
              $$typeof: REACT_MEMO_TYPE,
              type: type2,
              compare: compare === void 0 ? null : compare
            };
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState4(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init2);
          }
          function useRef5(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect6(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create2, deps);
          }
          function useLayoutEffect(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create2, deps);
          }
          function useCallback3(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create2, deps);
          }
          function useImperativeHandle(ref, create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create2, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info4 = getDeclarationErrorAddendum();
            if (!info4) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info4 = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info4;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement(element);
            {
              error('Each child in a list should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
            }
            setCurrentlyValidatingElement(null);
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type2 = element.type;
              if (type2 === null || type2 === void 0 || typeof type2 === "string") {
                return;
              }
              var name = getComponentName(type2);
              var propTypes;
              if (typeof type2 === "function") {
                propTypes = type2.propTypes;
              } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type2.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                setCurrentlyValidatingElement(element);
                checkPropTypes(propTypes, element.props, "prop", name, ReactDebugCurrentFrame.getStackAddendum);
                setCurrentlyValidatingElement(null);
              } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", name || "Unknown");
              }
              if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              setCurrentlyValidatingElement(fragment);
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  break;
                }
              }
              if (fragment.ref !== null) {
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
              }
              setCurrentlyValidatingElement(null);
            }
          }
          function createElementWithValidation(type2, props, children) {
            var validType = isValidElementType(type2);
            if (!validType) {
              var info4 = "";
              if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                info4 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info4 += sourceInfo;
              } else {
                info4 += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type2 === null) {
                typeString = "null";
              } else if (Array.isArray(type2)) {
                typeString = "array";
              } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type2.type) || "Unknown") + " />";
                info4 = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type2;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info4);
              }
            }
            var element = createElement3.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type2);
              }
            }
            if (type2 === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type2) {
            var validatedFactory = createElementWithValidation.bind(null, type2);
            validatedFactory.type = type2;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type2
                  });
                  return type2;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              var testMap = new Map([[frozenObject, null]]);
              var testSet = new Set([frozenObject]);
              testMap.set(0, 0);
              testSet.add(0);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent3;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo4;
          exports.useCallback = useCallback3;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect6;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef5;
          exports.useState = useState4;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = true;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var shouldYieldToHost;
          var requestPaint;
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            var initialTime = Date.now();
            exports.unstable_now = function() {
              return Date.now() - initialTime;
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            shouldYieldToHost = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var performance2 = window.performance;
            var _Date = window.Date;
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
              }
            }
            if (typeof performance2 === "object" && typeof performance2.now === "function") {
              exports.unstable_now = function() {
                return performance2.now();
              };
            } else {
              var _initialTime = _Date.now();
              exports.unstable_now = function() {
                return _Date.now() - _initialTime;
              };
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              shouldYieldToHost = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push2(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop2(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index2 = i;
            while (true) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index2 = i;
            var length = heap.length;
            while (index2 < length) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b2) {
            var diff = a.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a.id - b2.id;
          }
          var NoPriority = 0;
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          var runIdCounter = 0;
          var mainThreadIdCounter = 0;
          var profilingStateSize = 4;
          var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
          var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
          var PRIORITY = 0;
          var CURRENT_TASK_ID = 1;
          var CURRENT_RUN_ID = 2;
          var QUEUE_SIZE = 3;
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[QUEUE_SIZE] = 0;
            profilingState[CURRENT_TASK_ID] = 0;
          }
          var INITIAL_EVENT_LOG_SIZE = 131072;
          var MAX_EVENT_LOG_SIZE = 524288;
          var eventLogSize = 0;
          var eventLogBuffer = null;
          var eventLog = null;
          var eventLogIndex = 0;
          var TaskStartEvent = 1;
          var TaskCompleteEvent = 2;
          var TaskErrorEvent = 3;
          var TaskCancelEvent = 4;
          var TaskRunEvent = 5;
          var TaskYieldEvent = 6;
          var SchedulerSuspendEvent = 7;
          var SchedulerResumeEvent = 8;
          function logEvent(entries) {
            if (eventLog !== null) {
              var offset = eventLogIndex;
              eventLogIndex += entries.length;
              if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                  console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                  stopLoggingProfilingEvents();
                  return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
              }
              eventLog.set(entries, offset);
            }
          }
          function startLoggingProfilingEvents() {
            eventLogSize = INITIAL_EVENT_LOG_SIZE;
            eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
            eventLog = new Int32Array(eventLogBuffer);
            eventLogIndex = 0;
          }
          function stopLoggingProfilingEvents() {
            var buffer2 = eventLogBuffer;
            eventLogSize = 0;
            eventLogBuffer = null;
            eventLog = null;
            eventLogIndex = 0;
            return buffer2;
          }
          function markTaskStart(task, ms) {
            {
              profilingState[QUEUE_SIZE]++;
              if (eventLog !== null) {
                logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
              }
            }
          }
          function markTaskCompleted(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskCanceled(task, ms) {
            {
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCancelEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskErrored(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskErrorEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskRun(task, ms) {
            {
              runIdCounter++;
              profilingState[PRIORITY] = task.priorityLevel;
              profilingState[CURRENT_TASK_ID] = task.id;
              profilingState[CURRENT_RUN_ID] = runIdCounter;
              if (eventLog !== null) {
                logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markTaskYield(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[CURRENT_RUN_ID] = 0;
              if (eventLog !== null) {
                logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markSchedulerSuspended(ms) {
            {
              mainThreadIdCounter++;
              if (eventLog !== null) {
                logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          function markSchedulerUnsuspended(ms) {
            {
              if (eventLog !== null) {
                logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop2(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop2(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
                {
                  markTaskStart(timer, currentTime);
                  timer.isQueued = true;
                }
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            {
              markSchedulerUnsuspended(initialTime2);
            }
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
              {
                var _currentTime = exports.unstable_now();
                markSchedulerSuspended(_currentTime);
              }
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (callback !== null) {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                  markTaskYield(currentTask, currentTime);
                } else {
                  {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  if (currentTask === peek(taskQueue)) {
                    pop2(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop2(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function timeoutForPriorityLevel(priorityLevel) {
            switch (priorityLevel) {
              case ImmediatePriority:
                return IMMEDIATE_PRIORITY_TIMEOUT;
              case UserBlockingPriority:
                return USER_BLOCKING_PRIORITY;
              case IdlePriority:
                return IDLE_PRIORITY;
              case LowPriority:
                return LOW_PRIORITY_TIMEOUT;
              case NormalPriority:
              default:
                return NORMAL_PRIORITY_TIMEOUT;
            }
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            var timeout;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
              timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
            } else {
              timeout = timeoutForPriorityLevel(priorityLevel);
              startTime = currentTime;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            {
              newTask.isQueued = false;
            }
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push2(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              {
                markTaskStart(newTask, currentTime);
                newTask.isQueued = true;
              }
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            {
              if (task.isQueued) {
                var currentTime = exports.unstable_now();
                markTaskCanceled(task, currentTime);
                task.isQueued = false;
              }
            }
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          function unstable_shouldYield() {
            var currentTime = exports.unstable_now();
            advanceTimers(currentTime);
            var firstTask = peek(taskQueue);
            return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = {
            startLoggingProfilingEvents,
            stopLoggingProfilingEvents,
            sharedProfilingBuffer
          };
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = unstable_shouldYield;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React21 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var checkPropTypes = require_checkPropTypes();
          var tracing = require_tracing();
          var ReactSharedInternals = React21.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
            ReactSharedInternals.ReactCurrentDispatcher = {
              current: null
            };
          }
          if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
            ReactSharedInternals.ReactCurrentBatchConfig = {
              suspense: null
            };
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
              if (!hasExistingStack) {
                var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame2.getStackAddendum();
                if (stack !== "") {
                  format += "%s";
                  args = args.concat([stack]);
                }
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
              try {
                var argIndex = 0;
                var message = "Warning: " + format.replace(/%s/g, function() {
                  return args[argIndex++];
                });
                throw new Error(message);
              } catch (x) {
              }
            }
          }
          if (!React21) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var invokeGuardedCallbackImpl = function(name, func, context, a, b2, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          };
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              var invokeGuardedCallbackDev = function(name, func, context, a, b2, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
              };
              invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b2, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b2, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var getFiberCurrentPropsFromNode = null;
          var getInstanceFromNode = null;
          var getNodeFromInstance = null;
          function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
            getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
            getInstanceFromNode = getInstanceFromNodeImpl;
            getNodeFromInstance = getNodeFromInstanceImpl;
            {
              if (!getNodeFromInstance || !getInstanceFromNode) {
                error("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
              }
            }
          }
          var validateEventDispatches;
          {
            validateEventDispatches = function(event) {
              var dispatchListeners = event._dispatchListeners;
              var dispatchInstances = event._dispatchInstances;
              var listenersIsArr = Array.isArray(dispatchListeners);
              var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
              var instancesIsArr = Array.isArray(dispatchInstances);
              var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
              if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
                error("EventPluginUtils: Invalid `event`.");
              }
            };
          }
          function executeDispatch(event, listener, inst) {
            var type2 = event.type || "unknown-event";
            event.currentTarget = getNodeFromInstance(inst);
            invokeGuardedCallbackAndCatchFirstError(type2, listener, void 0, event);
            event.currentTarget = null;
          }
          function executeDispatchesInOrder(event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            {
              validateEventDispatches(event);
            }
            if (Array.isArray(dispatchListeners)) {
              for (var i = 0; i < dispatchListeners.length; i++) {
                if (event.isPropagationStopped()) {
                  break;
                }
                executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
              }
            } else if (dispatchListeners) {
              executeDispatch(event, dispatchListeners, dispatchInstances);
            }
            event._dispatchListeners = null;
            event._dispatchInstances = null;
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var eventPluginOrder = null;
          var namesToPlugins = {};
          function recomputePluginOrdering() {
            if (!eventPluginOrder) {
              return;
            }
            for (var pluginName in namesToPlugins) {
              var pluginModule = namesToPlugins[pluginName];
              var pluginIndex = eventPluginOrder.indexOf(pluginName);
              if (!(pluginIndex > -1)) {
                {
                  throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
                }
              }
              if (plugins[pluginIndex]) {
                continue;
              }
              if (!pluginModule.extractEvents) {
                {
                  throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
                }
              }
              plugins[pluginIndex] = pluginModule;
              var publishedEvents = pluginModule.eventTypes;
              for (var eventName in publishedEvents) {
                if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                  {
                    throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
                  }
                }
              }
            }
          }
          function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
            if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
              {
                throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
              }
            }
            eventNameDispatchConfigs[eventName] = dispatchConfig;
            var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
            if (phasedRegistrationNames) {
              for (var phaseName in phasedRegistrationNames) {
                if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                  var phasedRegistrationName = phasedRegistrationNames[phaseName];
                  publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
                }
              }
              return true;
            } else if (dispatchConfig.registrationName) {
              publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
              return true;
            }
            return false;
          }
          function publishRegistrationName(registrationName, pluginModule, eventName) {
            if (!!registrationNameModules[registrationName]) {
              {
                throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
              }
            }
            registrationNameModules[registrationName] = pluginModule;
            registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
          }
          var plugins = [];
          var eventNameDispatchConfigs = {};
          var registrationNameModules = {};
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function injectEventPluginOrder(injectedEventPluginOrder) {
            if (!!eventPluginOrder) {
              {
                throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
              }
            }
            eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
            recomputePluginOrdering();
          }
          function injectEventPluginsByName(injectedNamesToPlugins) {
            var isOrderingDirty = false;
            for (var pluginName in injectedNamesToPlugins) {
              if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                continue;
              }
              var pluginModule = injectedNamesToPlugins[pluginName];
              if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                if (!!namesToPlugins[pluginName]) {
                  {
                    throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                  }
                }
                namesToPlugins[pluginName] = pluginModule;
                isOrderingDirty = true;
              }
            }
            if (isOrderingDirty) {
              recomputePluginOrdering();
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var PLUGIN_EVENT_SYSTEM = 1;
          var IS_REPLAYED = 1 << 5;
          var IS_FIRST_ANCESTOR = 1 << 6;
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var enableProfilerTimer = true;
          var enableDeprecatedFlareAPI = false;
          var enableFundamentalAPI = false;
          var warnAboutStringRefs = false;
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b2, c, d) {
            return fn(a, b2, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b2) {
            if (isBatchingEventUpdates) {
              return fn(a, b2);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b2);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b2, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b2, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
              flushDiscreteUpdatesImpl();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix = name.toLowerCase().slice(0, 5);
                  return prefix !== "data-" && prefix !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type2, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2) {
            this.acceptsBooleans = type2 === BOOLEANISH_STRING || type2 === BOOLEAN || type2 === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type2;
            this.sanitizeURL = sanitizeURL2;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
          });
          var ReactDebugCurrentFrame = null;
          {
            ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          }
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type2 = propertyInfo.type;
                node[propertyName] = type2 === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
          function describeComponentFrame(name, source, ownerName) {
            var sourceInfo = "";
            if (source) {
              var path = source.fileName;
              var fileName = path.replace(BEFORE_SLASH_RE, "");
              {
                if (/^index\./.test(fileName)) {
                  var match = path.match(BEFORE_SLASH_RE);
                  if (match) {
                    var pathBeforeSlash = match[1];
                    if (pathBeforeSlash) {
                      var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                      fileName = folderName + "/" + fileName;
                    }
                  }
                }
              }
              sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
            } else if (ownerName) {
              sourceInfo = " (created by " + ownerName + ")";
            }
            return "\n    in " + (name || "Unknown") + sourceInfo;
          }
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function refineResolvedLazyComponent(lazyComponent) {
            return lazyComponent._status === Resolved ? lazyComponent._result : null;
          }
          function initializeLazyComponentType(lazyComponent) {
            if (lazyComponent._status === Uninitialized) {
              lazyComponent._status = Pending;
              var ctor = lazyComponent._ctor;
              var thenable = ctor();
              lazyComponent._result = thenable;
              thenable.then(function(moduleObject) {
                if (lazyComponent._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  lazyComponent._status = Resolved;
                  lazyComponent._result = defaultExport;
                }
              }, function(error2) {
                if (lazyComponent._status === Pending) {
                  lazyComponent._status = Rejected;
                  lazyComponent._result = error2;
                }
              });
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getComponentName(type2) {
            if (type2 == null) {
              return null;
            }
            {
              if (typeof type2.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type2 === "function") {
              return type2.displayName || type2.name || null;
            }
            if (typeof type2 === "string") {
              return type2;
            }
            switch (type2) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  return "Context.Consumer";
                case REACT_PROVIDER_TYPE:
                  return "Context.Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type2, type2.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type2.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type2.render);
                case REACT_LAZY_TYPE: {
                  var thenable = type2;
                  var resolvedThenable = refineResolvedLazyComponent(thenable);
                  if (resolvedThenable) {
                    return getComponentName(resolvedThenable);
                  }
                  break;
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function describeFiber(fiber) {
            switch (fiber.tag) {
              case HostRoot:
              case HostPortal:
              case HostText:
              case Fragment:
              case ContextProvider:
              case ContextConsumer:
                return "";
              default:
                var owner = fiber._debugOwner;
                var source = fiber._debugSource;
                var name = getComponentName(fiber.type);
                var ownerName = null;
                if (owner) {
                  ownerName = getComponentName(owner.type);
                }
                return describeComponentFrame(name, source, ownerName);
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            var info4 = "";
            var node = workInProgress2;
            do {
              info4 += describeFiber(node);
              node = node.return;
            } while (node);
            return info4;
          }
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame$1.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var ReactDebugCurrentFrame$2 = null;
          var ReactControlledValuePropTypes = {
            checkPropTypes: null
          };
          {
            ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var hasReadOnlyValue = {
              button: true,
              checkbox: true,
              image: true,
              hidden: true,
              radio: true,
              reset: true,
              submit: true
            };
            var propTypes = {
              value: function(props, propName, componentName) {
                if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                  return null;
                }
                return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              },
              checked: function(props, propName, componentName) {
                if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                  return null;
                }
                return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            };
            ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
              checkPropTypes(propTypes, props, "prop", tagName, ReactDebugCurrentFrame$2.getStackAddendum);
            };
          }
          function isCheckable(elem) {
            var type2 = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type2 === "checkbox" || type2 === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              ReactControlledValuePropTypes.checkPropTypes("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type2 = props.type;
            if (value != null) {
              if (type2 === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString2(value);
                }
              } else if (node.value !== toString2(value)) {
                node.value = toString2(value);
              }
            } else if (type2 === "submit" || type2 === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type2 = props.type;
              var isButton = type2 === "submit" || type2 === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type2, value) {
            if (type2 !== "number" || node.ownerDocument.activeElement !== node) {
              if (value == null) {
                node.defaultValue = toString2(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString2(value)) {
                node.defaultValue = toString2(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React21.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps2(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React21.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              ReactControlledValuePropTypes.checkPropTypes("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
                if (options[_i].selected !== selected) {
                  options[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options.length; _i2++) {
                if (options[_i2].value === _selectedValue) {
                  options[_i2].selected = true;
                  if (setDefaultSelected) {
                    options[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options[_i2].disabled) {
                  defaultSelected = options[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              ReactControlledValuePropTypes.checkPropTypes("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString2(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type2) {
            switch (type2) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type2) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type2);
            }
            if (parentNamespace === SVG_NAMESPACE && type2 === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          function unsafeCastStringToDOMTopLevelType(topLevelType) {
            return topLevelType;
          }
          function unsafeCastDOMTopLevelTypeToString(topLevelType) {
            return topLevelType;
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var TOP_ABORT = unsafeCastStringToDOMTopLevelType("abort");
          var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationend"));
          var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationiteration"));
          var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationstart"));
          var TOP_BLUR = unsafeCastStringToDOMTopLevelType("blur");
          var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType("canplay");
          var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType("canplaythrough");
          var TOP_CANCEL = unsafeCastStringToDOMTopLevelType("cancel");
          var TOP_CHANGE = unsafeCastStringToDOMTopLevelType("change");
          var TOP_CLICK = unsafeCastStringToDOMTopLevelType("click");
          var TOP_CLOSE = unsafeCastStringToDOMTopLevelType("close");
          var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType("compositionend");
          var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType("compositionstart");
          var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType("compositionupdate");
          var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType("contextmenu");
          var TOP_COPY = unsafeCastStringToDOMTopLevelType("copy");
          var TOP_CUT = unsafeCastStringToDOMTopLevelType("cut");
          var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType("dblclick");
          var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType("auxclick");
          var TOP_DRAG = unsafeCastStringToDOMTopLevelType("drag");
          var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType("dragend");
          var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType("dragenter");
          var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType("dragexit");
          var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType("dragleave");
          var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType("dragover");
          var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType("dragstart");
          var TOP_DROP = unsafeCastStringToDOMTopLevelType("drop");
          var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType("durationchange");
          var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType("emptied");
          var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType("encrypted");
          var TOP_ENDED = unsafeCastStringToDOMTopLevelType("ended");
          var TOP_ERROR = unsafeCastStringToDOMTopLevelType("error");
          var TOP_FOCUS = unsafeCastStringToDOMTopLevelType("focus");
          var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("gotpointercapture");
          var TOP_INPUT = unsafeCastStringToDOMTopLevelType("input");
          var TOP_INVALID = unsafeCastStringToDOMTopLevelType("invalid");
          var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType("keydown");
          var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType("keypress");
          var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType("keyup");
          var TOP_LOAD = unsafeCastStringToDOMTopLevelType("load");
          var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType("loadstart");
          var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType("loadeddata");
          var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType("loadedmetadata");
          var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("lostpointercapture");
          var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType("mousedown");
          var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType("mousemove");
          var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType("mouseout");
          var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType("mouseover");
          var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType("mouseup");
          var TOP_PASTE = unsafeCastStringToDOMTopLevelType("paste");
          var TOP_PAUSE = unsafeCastStringToDOMTopLevelType("pause");
          var TOP_PLAY = unsafeCastStringToDOMTopLevelType("play");
          var TOP_PLAYING = unsafeCastStringToDOMTopLevelType("playing");
          var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType("pointercancel");
          var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType("pointerdown");
          var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType("pointermove");
          var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType("pointerout");
          var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType("pointerover");
          var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType("pointerup");
          var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType("progress");
          var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType("ratechange");
          var TOP_RESET = unsafeCastStringToDOMTopLevelType("reset");
          var TOP_SCROLL = unsafeCastStringToDOMTopLevelType("scroll");
          var TOP_SEEKED = unsafeCastStringToDOMTopLevelType("seeked");
          var TOP_SEEKING = unsafeCastStringToDOMTopLevelType("seeking");
          var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType("selectionchange");
          var TOP_STALLED = unsafeCastStringToDOMTopLevelType("stalled");
          var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType("submit");
          var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType("suspend");
          var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType("textInput");
          var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType("timeupdate");
          var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType("toggle");
          var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType("touchcancel");
          var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType("touchend");
          var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType("touchmove");
          var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType("touchstart");
          var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("transitionend"));
          var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType("volumechange");
          var TOP_WAITING = unsafeCastStringToDOMTopLevelType("waiting");
          var TOP_WHEEL = unsafeCastStringToDOMTopLevelType("wheel");
          var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
          function getRawEventName(topLevelType) {
            return unsafeCastDOMTopLevelTypeToString(topLevelType);
          }
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          var elementListenerMap = new PossiblyWeakMap();
          function getListenerMapForElement(element) {
            var listenerMap = elementListenerMap.get(element);
            if (listenerMap === void 0) {
              listenerMap = new Map();
              elementListenerMap.set(element, listenerMap);
            }
            return listenerMap;
          }
          function get(key) {
            return key._reactInternalFiber;
          }
          function has(key) {
            return key._reactInternalFiber !== void 0;
          }
          function set(key, value) {
            key._reactInternalFiber = value;
          }
          var NoEffect = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b2.return) {
                a = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b2)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function accumulateInto(current2, next2) {
            if (!(next2 != null)) {
              {
                throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
              }
            }
            if (current2 == null) {
              return next2;
            }
            if (Array.isArray(current2)) {
              if (Array.isArray(next2)) {
                current2.push.apply(current2, next2);
                return current2;
              }
              current2.push(next2);
              return current2;
            }
            if (Array.isArray(next2)) {
              return [current2].concat(next2);
            }
            return [current2, next2];
          }
          function forEachAccumulated(arr, cb, scope) {
            if (Array.isArray(arr)) {
              arr.forEach(cb, scope);
            } else if (arr) {
              cb.call(scope, arr);
            }
          }
          var eventQueue = null;
          var executeDispatchesAndRelease = function(event) {
            if (event) {
              executeDispatchesInOrder(event);
              if (!event.isPersistent()) {
                event.constructor.release(event);
              }
            }
          };
          var executeDispatchesAndReleaseTopLevel = function(e) {
            return executeDispatchesAndRelease(e);
          };
          function runEventsInBatch(events) {
            if (events !== null) {
              eventQueue = accumulateInto(eventQueue, events);
            }
            var processingEventQueue = eventQueue;
            eventQueue = null;
            if (!processingEventQueue) {
              return;
            }
            forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
            if (!!eventQueue) {
              {
                throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
              }
            }
            rethrowCaughtError();
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
          var callbackBookkeepingPool = [];
          function releaseTopLevelCallbackBookKeeping(instance) {
            instance.topLevelType = null;
            instance.nativeEvent = null;
            instance.targetInst = null;
            instance.ancestors.length = 0;
            if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
              callbackBookkeepingPool.push(instance);
            }
          }
          function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
            if (callbackBookkeepingPool.length) {
              var instance = callbackBookkeepingPool.pop();
              instance.topLevelType = topLevelType;
              instance.eventSystemFlags = eventSystemFlags;
              instance.nativeEvent = nativeEvent;
              instance.targetInst = targetInst;
              return instance;
            }
            return {
              topLevelType,
              eventSystemFlags,
              nativeEvent,
              targetInst,
              ancestors: []
            };
          }
          function findRootContainerNode(inst) {
            if (inst.tag === HostRoot) {
              return inst.stateNode.containerInfo;
            }
            while (inst.return) {
              inst = inst.return;
            }
            if (inst.tag !== HostRoot) {
              return null;
            }
            return inst.stateNode.containerInfo;
          }
          function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var events = null;
            for (var i = 0; i < plugins.length; i++) {
              var possiblePlugin = plugins[i];
              if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                if (extractedEvents) {
                  events = accumulateInto(events, extractedEvents);
                }
              }
            }
            return events;
          }
          function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            runEventsInBatch(events);
          }
          function handleTopLevel(bookKeeping) {
            var targetInst = bookKeeping.targetInst;
            var ancestor = targetInst;
            do {
              if (!ancestor) {
                var ancestors = bookKeeping.ancestors;
                ancestors.push(ancestor);
                break;
              }
              var root2 = findRootContainerNode(ancestor);
              if (!root2) {
                break;
              }
              var tag = ancestor.tag;
              if (tag === HostComponent || tag === HostText) {
                bookKeeping.ancestors.push(ancestor);
              }
              ancestor = getClosestInstanceFromNode(root2);
            } while (ancestor);
            for (var i = 0; i < bookKeeping.ancestors.length; i++) {
              targetInst = bookKeeping.ancestors[i];
              var eventTarget = getEventTarget(bookKeeping.nativeEvent);
              var topLevelType = bookKeeping.topLevelType;
              var nativeEvent = bookKeeping.nativeEvent;
              var eventSystemFlags = bookKeeping.eventSystemFlags;
              if (i === 0) {
                eventSystemFlags |= IS_FIRST_ANCESTOR;
              }
              runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
            }
          }
          function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
            var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
            try {
              batchedEventUpdates(handleTopLevel, bookKeeping);
            } finally {
              releaseTopLevelCallbackBookKeeping(bookKeeping);
            }
          }
          function legacyListenToEvent(registrationName, mountAt) {
            var listenerMap = getListenerMapForElement(mountAt);
            var dependencies = registrationNameDependencies[registrationName];
            for (var i = 0; i < dependencies.length; i++) {
              var dependency = dependencies[i];
              legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
            }
          }
          function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
            if (!listenerMap.has(topLevelType)) {
              switch (topLevelType) {
                case TOP_SCROLL:
                  trapCapturedEvent(TOP_SCROLL, mountAt);
                  break;
                case TOP_FOCUS:
                case TOP_BLUR:
                  trapCapturedEvent(TOP_FOCUS, mountAt);
                  trapCapturedEvent(TOP_BLUR, mountAt);
                  listenerMap.set(TOP_BLUR, null);
                  listenerMap.set(TOP_FOCUS, null);
                  break;
                case TOP_CANCEL:
                case TOP_CLOSE:
                  if (isEventSupported(getRawEventName(topLevelType))) {
                    trapCapturedEvent(topLevelType, mountAt);
                  }
                  break;
                case TOP_INVALID:
                case TOP_SUBMIT:
                case TOP_RESET:
                  break;
                default:
                  var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                  if (!isMediaEvent) {
                    trapBubbledEvent(topLevelType, mountAt);
                  }
                  break;
              }
              listenerMap.set(topLevelType, null);
            }
          }
          function isListeningToAllDependencies(registrationName, mountAt) {
            var listenerMap = getListenerMapForElement(mountAt);
            var dependencies = registrationNameDependencies[registrationName];
            for (var i = 0; i < dependencies.length; i++) {
              var dependency = dependencies[i];
              if (!listenerMap.has(dependency)) {
                return false;
              }
            }
            return true;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
          var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function trapReplayableEventForDocument(topLevelType, document2, listenerMap) {
            legacyListenToTopLevelEvent(topLevelType, document2, listenerMap);
          }
          function eagerlyTrapReplayableEvents(container, document2) {
            var listenerMapForDoc = getListenerMapForElement(document2);
            discreteReplayableEvents.forEach(function(topLevelType) {
              trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
            });
            continuousReplayableEvents.forEach(function(topLevelType) {
              trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
            });
          }
          function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
            return {
              blockedOn,
              topLevelType,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              container
            };
          }
          function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(topLevelType, nativeEvent) {
            switch (topLevelType) {
              case TOP_FOCUS:
              case TOP_BLUR:
                queuedFocus = null;
                break;
              case TOP_DRAG_ENTER:
              case TOP_DRAG_LEAVE:
                queuedDrag = null;
                break;
              case TOP_MOUSE_OVER:
              case TOP_MOUSE_OUT:
                queuedMouse = null;
                break;
              case TOP_POINTER_OVER:
              case TOP_POINTER_OUT: {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case TOP_GOT_POINTER_CAPTURE:
              case TOP_LOST_POINTER_CAPTURE: {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode$1(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
            switch (topLevelType) {
              case TOP_FOCUS: {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
                return true;
              }
              case TOP_DRAG_ENTER: {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
                return true;
              }
              case TOP_MOUSE_OVER: {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
                return true;
              }
              case TOP_POINTER_OVER: {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
                return true;
              }
              case TOP_GOT_POINTER_CAPTURE: {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                nextDiscreteEvent.blockedOn = nextBlockedOn;
              } else {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          function addEventBubbleListener(element, eventType, listener) {
            element.addEventListener(eventType, listener, false);
          }
          function addEventCaptureListener(element, eventType, listener) {
            element.addEventListener(eventType, listener, true);
          }
          var simpleEventPluginEventTypes = {};
          var topLevelEventsToDispatchConfig = new Map();
          var eventPriorities = new Map();
          var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, "blur", TOP_CANCEL, "cancel", TOP_CLICK, "click", TOP_CLOSE, "close", TOP_CONTEXT_MENU, "contextMenu", TOP_COPY, "copy", TOP_CUT, "cut", TOP_AUX_CLICK, "auxClick", TOP_DOUBLE_CLICK, "doubleClick", TOP_DRAG_END, "dragEnd", TOP_DRAG_START, "dragStart", TOP_DROP, "drop", TOP_FOCUS, "focus", TOP_INPUT, "input", TOP_INVALID, "invalid", TOP_KEY_DOWN, "keyDown", TOP_KEY_PRESS, "keyPress", TOP_KEY_UP, "keyUp", TOP_MOUSE_DOWN, "mouseDown", TOP_MOUSE_UP, "mouseUp", TOP_PASTE, "paste", TOP_PAUSE, "pause", TOP_PLAY, "play", TOP_POINTER_CANCEL, "pointerCancel", TOP_POINTER_DOWN, "pointerDown", TOP_POINTER_UP, "pointerUp", TOP_RATE_CHANGE, "rateChange", TOP_RESET, "reset", TOP_SEEKED, "seeked", TOP_SUBMIT, "submit", TOP_TOUCH_CANCEL, "touchCancel", TOP_TOUCH_END, "touchEnd", TOP_TOUCH_START, "touchStart", TOP_VOLUME_CHANGE, "volumeChange"];
          var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
          var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, "drag", TOP_DRAG_ENTER, "dragEnter", TOP_DRAG_EXIT, "dragExit", TOP_DRAG_LEAVE, "dragLeave", TOP_DRAG_OVER, "dragOver", TOP_MOUSE_MOVE, "mouseMove", TOP_MOUSE_OUT, "mouseOut", TOP_MOUSE_OVER, "mouseOver", TOP_POINTER_MOVE, "pointerMove", TOP_POINTER_OUT, "pointerOut", TOP_POINTER_OVER, "pointerOver", TOP_SCROLL, "scroll", TOP_TOGGLE, "toggle", TOP_TOUCH_MOVE, "touchMove", TOP_WHEEL, "wheel"];
          var continuousPairsForSimpleEventPlugin = [TOP_ABORT, "abort", TOP_ANIMATION_END, "animationEnd", TOP_ANIMATION_ITERATION, "animationIteration", TOP_ANIMATION_START, "animationStart", TOP_CAN_PLAY, "canPlay", TOP_CAN_PLAY_THROUGH, "canPlayThrough", TOP_DURATION_CHANGE, "durationChange", TOP_EMPTIED, "emptied", TOP_ENCRYPTED, "encrypted", TOP_ENDED, "ended", TOP_ERROR, "error", TOP_GOT_POINTER_CAPTURE, "gotPointerCapture", TOP_LOAD, "load", TOP_LOADED_DATA, "loadedData", TOP_LOADED_METADATA, "loadedMetadata", TOP_LOAD_START, "loadStart", TOP_LOST_POINTER_CAPTURE, "lostPointerCapture", TOP_PLAYING, "playing", TOP_PROGRESS, "progress", TOP_SEEKING, "seeking", TOP_STALLED, "stalled", TOP_SUSPEND, "suspend", TOP_TIME_UPDATE, "timeUpdate", TOP_TRANSITION_END, "transitionEnd", TOP_WAITING, "waiting"];
          function processSimpleEventPluginPairsByPriority(eventTypes2, priority) {
            for (var i = 0; i < eventTypes2.length; i += 2) {
              var topEvent = eventTypes2[i];
              var event = eventTypes2[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var onEvent = "on" + capitalizedEvent;
              var config3 = {
                phasedRegistrationNames: {
                  bubbled: onEvent,
                  captured: onEvent + "Capture"
                },
                dependencies: [topEvent],
                eventPriority: priority
              };
              eventPriorities.set(topEvent, priority);
              topLevelEventsToDispatchConfig.set(topEvent, config3);
              simpleEventPluginEventTypes[event] = config3;
            }
          }
          function processTopEventPairsByPriority(eventTypes2, priority) {
            for (var i = 0; i < eventTypes2.length; i++) {
              eventPriorities.set(eventTypes2[i], priority);
            }
          }
          processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
          function getEventPriorityForPluginSystem(topLevelType) {
            var priority = eventPriorities.get(topLevelType);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function trapBubbledEvent(topLevelType, element) {
            trapEventForPluginEventSystem(element, topLevelType, false);
          }
          function trapCapturedEvent(topLevelType, element) {
            trapEventForPluginEventSystem(element, topLevelType, true);
          }
          function trapEventForPluginEventSystem(container, topLevelType, capture) {
            var listener;
            switch (getEventPriorityForPluginSystem(topLevelType)) {
              case DiscreteEvent:
                listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
              case UserBlockingEvent:
                listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
              case ContinuousEvent:
              default:
                listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
            }
            var rawEventName = getRawEventName(topLevelType);
            if (capture) {
              addEventCaptureListener(container, rawEventName, listener);
            } else {
              addEventBubbleListener(container, rawEventName, listener);
            }
          }
          function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
            runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
          }
          function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
            if (!_enabled) {
              return;
            }
            if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
              queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
            if (blockedOn === null) {
              clearIfContinuousEvent(topLevelType, nativeEvent);
              return;
            }
            if (isReplayableDiscreteEvent(topLevelType)) {
              queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
              return;
            }
            clearIfContinuousEvent(topLevelType, nativeEvent);
            {
              dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
            }
          }
          function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            {
              dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
            }
            return null;
          }
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix, key) {
            return prefix + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix) {
              isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty2 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles2[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles2) {
            var style2 = node.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          var ReactDebugCurrentFrame$3 = null;
          {
            ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
          }
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type2, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type2, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type2);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type2);
              }
            }
          }
          function validateProperties(type2, props) {
            if (isCustomComponent(type2, props)) {
              return;
            }
            warnInvalidARIAProps(type2, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type2, props) {
            {
              if (type2 !== "input" && type2 !== "textarea" && type2 !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type2 === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type2);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type2);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, canUseEventSystem) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (canUseEventSystem) {
                if (registrationNameModules.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type2, props, canUseEventSystem) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type2, key, props[key], canUseEventSystem);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type2);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type2);
              }
            }
          };
          function validateProperties$2(type2, props, canUseEventSystem) {
            if (isCustomComponent(type2, props)) {
              return;
            }
            warnUnknownProperties(type2, props, canUseEventSystem);
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              time: true,
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type2, props) {
              validateProperties(type2, props);
              validateProperties$1(type2, props);
              validateProperties$2(type2, props, true);
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function ensureListeningTo(rootContainerElement, registrationName) {
            var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
            var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
            legacyListenToEvent(registrationName, doc);
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  ensureListeningTo(rootContainerElement, propKey);
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement3(type2, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type2);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type2, props);
                if (!isCustomComponentTag && type2 !== type2.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type2);
                }
              }
              if (type2 === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type2, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type2);
                if (type2 === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type2);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type2)) {
                  warnedUnknownTags[type2] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type2);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "iframe":
              case "object":
              case "embed":
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  trapBubbledEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                trapBubbledEvent(TOP_ERROR, domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
              case "form":
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                props = rawProps;
                break;
              case "details":
                trapBubbledEvent(TOP_TOGGLE, domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "option":
                validateProps2(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (lastProp !== nextProp && (typeof nextProp === "string" || typeof nextProp === "number")) {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  ensureListeningTo(rootContainerElement, propKey);
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "iframe":
              case "object":
              case "embed":
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  trapBubbledEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                trapBubbledEvent(TOP_ERROR, domElement);
                break;
              case "img":
              case "image":
              case "link":
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
              case "form":
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                break;
              case "details":
                trapBubbledEvent(TOP_TOGGLE, domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "option":
                validateProps2(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  ensureListeningTo(rootContainerElement, propKey);
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : "");
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next2 = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next2;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next2 = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next2;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err2) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              activeElementDetached: null,
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info4 = ancestors[i];
                info4.element.scrollLeft = info4.left;
                info4.element.scrollTop = info4.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start, end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info4 = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info4;
              if (tag === "form") {
                ancestorInfo.formTag = info4;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info4;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info4;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info4;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info4;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info4;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info4;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var addendum = getCurrentFiberStackInDev();
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag + "|" + addendum;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info4 = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info4 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info4);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type2, props) {
            switch (type2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type2;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type2 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type2 = container.tagName;
                namespace = getChildNamespace(ownNamespace, type2);
                break;
              }
            }
            {
              var validatedTag = type2.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type2, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type2);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type2);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            setEnabled(false);
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type2, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type2, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement3(type2, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type2, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type2, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type2, props);
          }
          function prepareUpdate(domElement, type2, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type2, oldProps, newProps, rootContainerInstance);
          }
          function shouldSetTextContent(type2, props) {
            return type2 === "textarea" || type2 === "option" || type2 === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function shouldDeprioritizeSubtree(type2, props) {
            return !!props.hidden;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout2 = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type2, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type2, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type2, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type2, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function canHydrateInstance(instance, type2, props) {
            if (instance.nodeType !== ELEMENT_NODE || type2.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type2, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type2, props, parentNamespace, rootContainerInstance);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth2 = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth2 === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth2--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth2++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth2 = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth2 === 0) {
                    return node;
                  } else {
                    depth2--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth2++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type2, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type2);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type2, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type2);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactInternalInstance$" + randomKey;
          var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;
          var internalContainerInstanceKey = "__reactContainere$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode$1(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance$1(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode$1(node) {
            return node[internalEventHandlersKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalEventHandlersKey] = props;
          }
          function getParent(inst) {
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var depthA = 0;
            for (var tempA = instA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = instB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              instA = getParent(instA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              instB = getParent(instB);
              depthB--;
            }
            var depth2 = depthA;
            while (depth2--) {
              if (instA === instB || instA === instB.alternate) {
                return instA;
              }
              instA = getParent(instA);
              instB = getParent(instB);
            }
            return null;
          }
          function traverseTwoPhase(inst, fn, arg) {
            var path = [];
            while (inst) {
              path.push(inst);
              inst = getParent(inst);
            }
            var i;
            for (i = path.length; i-- > 0; ) {
              fn(path[i], "captured", arg);
            }
            for (i = 0; i < path.length; i++) {
              fn(path[i], "bubbled", arg);
            }
          }
          function traverseEnterLeave(from, to, fn, argFrom, argTo) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            var pathFrom = [];
            while (true) {
              if (!from) {
                break;
              }
              if (from === common) {
                break;
              }
              var alternate = from.alternate;
              if (alternate !== null && alternate === common) {
                break;
              }
              pathFrom.push(from);
              from = getParent(from);
            }
            var pathTo = [];
            while (true) {
              if (!to) {
                break;
              }
              if (to === common) {
                break;
              }
              var _alternate = to.alternate;
              if (_alternate !== null && _alternate === common) {
                break;
              }
              pathTo.push(to);
              to = getParent(to);
            }
            for (var i = 0; i < pathFrom.length; i++) {
              fn(pathFrom[i], "bubbled", argFrom);
            }
            for (var _i = pathTo.length; _i-- > 0; ) {
              fn(pathTo[_i], "captured", argTo);
            }
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type2, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type2));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var listener;
            var stateNode = inst.stateNode;
            if (!stateNode) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (!props) {
              return null;
            }
            listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          function listenerAtPhase(inst, event, propagationPhase) {
            var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
            return getListener(inst, registrationName);
          }
          function accumulateDirectionalDispatches(inst, phase, event) {
            {
              if (!inst) {
                error("Dispatching inst must not be null");
              }
            }
            var listener = listenerAtPhase(inst, event, phase);
            if (listener) {
              event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
              event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
          }
          function accumulateTwoPhaseDispatchesSingle(event) {
            if (event && event.dispatchConfig.phasedRegistrationNames) {
              traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
            }
          }
          function accumulateDispatches(inst, ignoredDirection, event) {
            if (inst && event && event.dispatchConfig.registrationName) {
              var registrationName = event.dispatchConfig.registrationName;
              var listener = getListener(inst, registrationName);
              if (listener) {
                event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
              }
            }
          }
          function accumulateDirectDispatchesSingle(event) {
            if (event && event.dispatchConfig.registrationName) {
              accumulateDispatches(event._targetInst, null, event);
            }
          }
          function accumulateTwoPhaseDispatches(events) {
            forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
          }
          function accumulateEnterLeaveDispatches(leave, enter, from, to) {
            traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
          }
          function accumulateDirectDispatches(events) {
            forEachAccumulated(events, accumulateDirectDispatchesSingle);
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          var EVENT_POOL_SIZE = 10;
          var EventInterface = {
            type: null,
            target: null,
            currentTarget: function() {
              return null;
            },
            eventPhase: null,
            bubbles: null,
            cancelable: null,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: null,
            isTrusted: null
          };
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
            {
              delete this.nativeEvent;
              delete this.preventDefault;
              delete this.stopPropagation;
              delete this.isDefaultPrevented;
              delete this.isPropagationStopped;
            }
            this.dispatchConfig = dispatchConfig;
            this._targetInst = targetInst;
            this.nativeEvent = nativeEvent;
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
              if (!Interface.hasOwnProperty(propName)) {
                continue;
              }
              {
                delete this[propName];
              }
              var normalize = Interface[propName];
              if (normalize) {
                this[propName] = normalize(nativeEvent);
              } else {
                if (propName === "target") {
                  this.target = nativeEventTarget;
                } else {
                  this[propName] = nativeEvent[propName];
                }
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          _assign(SyntheticEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
              this.isPersistent = functionThatReturnsTrue;
            },
            isPersistent: functionThatReturnsFalse,
            destructor: function() {
              var Interface = this.constructor.Interface;
              for (var propName in Interface) {
                {
                  Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
                }
              }
              this.dispatchConfig = null;
              this._targetInst = null;
              this.nativeEvent = null;
              this.isDefaultPrevented = functionThatReturnsFalse;
              this.isPropagationStopped = functionThatReturnsFalse;
              this._dispatchListeners = null;
              this._dispatchInstances = null;
              {
                Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
                Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
                Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
                Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function() {
                }));
                Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function() {
                }));
              }
            }
          });
          SyntheticEvent.Interface = EventInterface;
          SyntheticEvent.extend = function(Interface) {
            var Super = this;
            var E = function() {
            };
            E.prototype = Super.prototype;
            var prototype = new E();
            function Class() {
              return Super.apply(this, arguments);
            }
            _assign(prototype, Class.prototype);
            Class.prototype = prototype;
            Class.prototype.constructor = Class;
            Class.Interface = _assign({}, Super.Interface, Interface);
            Class.extend = Super.extend;
            addEventPoolingTo(Class);
            return Class;
          };
          addEventPoolingTo(SyntheticEvent);
          function getPooledWarningPropertyDefinition(propName, getVal) {
            var isFunction2 = typeof getVal === "function";
            return {
              configurable: true,
              set: set2,
              get: get2
            };
            function set2(val) {
              var action = isFunction2 ? "setting the method" : "setting the property";
              warn2(action, "This is effectively a no-op");
              return val;
            }
            function get2() {
              var action = isFunction2 ? "accessing the method" : "accessing the property";
              var result = isFunction2 ? "This is a no-op function" : "This is set to null";
              warn2(action, result);
              return getVal;
            }
            function warn2(action, result) {
              {
                error("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
              }
            }
          }
          function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
            var EventConstructor = this;
            if (EventConstructor.eventPool.length) {
              var instance = EventConstructor.eventPool.pop();
              EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
              return instance;
            }
            return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
          }
          function releasePooledEvent(event) {
            var EventConstructor = this;
            if (!(event instanceof EventConstructor)) {
              {
                throw Error("Trying to release an event instance into a pool of a different type.");
              }
            }
            event.destructor();
            if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
              EventConstructor.eventPool.push(event);
            }
          }
          function addEventPoolingTo(EventConstructor) {
            EventConstructor.eventPool = [];
            EventConstructor.getPooled = getPooledEvent;
            EventConstructor.release = releasePooledEvent;
          }
          var SyntheticCompositionEvent = SyntheticEvent.extend({
            data: null
          });
          var SyntheticInputEvent = SyntheticEvent.extend({
            data: null
          });
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          var eventTypes = {
            beforeInput: {
              phasedRegistrationNames: {
                bubbled: "onBeforeInput",
                captured: "onBeforeInputCapture"
              },
              dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
            },
            compositionEnd: {
              phasedRegistrationNames: {
                bubbled: "onCompositionEnd",
                captured: "onCompositionEndCapture"
              },
              dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
            },
            compositionStart: {
              phasedRegistrationNames: {
                bubbled: "onCompositionStart",
                captured: "onCompositionStartCapture"
              },
              dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
            },
            compositionUpdate: {
              phasedRegistrationNames: {
                bubbled: "onCompositionUpdate",
                captured: "onCompositionUpdateCapture"
              },
              dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
            }
          };
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(topLevelType) {
            switch (topLevelType) {
              case TOP_COMPOSITION_START:
                return eventTypes.compositionStart;
              case TOP_COMPOSITION_END:
                return eventTypes.compositionEnd;
              case TOP_COMPOSITION_UPDATE:
                return eventTypes.compositionUpdate;
            }
          }
          function isFallbackCompositionStart(topLevelType, nativeEvent) {
            return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(topLevelType, nativeEvent) {
            switch (topLevelType) {
              case TOP_KEY_UP:
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case TOP_KEY_DOWN:
                return nativeEvent.keyCode !== START_KEYCODE;
              case TOP_KEY_PRESS:
              case TOP_MOUSE_DOWN:
              case TOP_BLUR:
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(topLevelType);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                eventType = eventTypes.compositionStart;
              }
            } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionEnd;
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === eventTypes.compositionStart) {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === eventTypes.compositionEnd) {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
            accumulateTwoPhaseDispatches(event);
            return event;
          }
          function getNativeBeforeInputChars(topLevelType, nativeEvent) {
            switch (topLevelType) {
              case TOP_COMPOSITION_END:
                return getDataFromCustomEvent(nativeEvent);
              case TOP_KEY_PRESS:
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case TOP_TEXT_INPUT:
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
            if (isComposing) {
              if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (topLevelType) {
              case TOP_PASTE:
                return null;
              case TOP_KEY_PRESS:
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case TOP_COMPOSITION_END:
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
            event.data = chars;
            accumulateTwoPhaseDispatches(event);
            return event;
          }
          var BeforeInputEventPlugin = {
            eventTypes,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
              var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
              var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
              if (composition === null) {
                return beforeInput;
              }
              if (beforeInput === null) {
                return composition;
              }
              return [composition, beforeInput];
            }
          };
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          var eventTypes$1 = {
            change: {
              phasedRegistrationNames: {
                bubbled: "onChange",
                captured: "onChangeCapture"
              },
              dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
            }
          };
          function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
            var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
            event.type = "change";
            enqueueStateRestore(target);
            accumulateTwoPhaseDispatches(event);
            return event;
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, event);
          }
          function runEventInBatch(event) {
            runEventsInBatch(event);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance$1(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(topLevelType, targetInst) {
            if (topLevelType === TOP_CHANGE) {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
            if (topLevelType === TOP_FOCUS) {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (topLevelType === TOP_BLUR) {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
            if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(topLevelType, targetInst) {
            if (topLevelType === TOP_CLICK) {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
            if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          var ChangeEventPlugin = {
            eventTypes: eventTypes$1,
            _isInputEventSupported: isInputEventSupported,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
              var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
              var getTargetInstFunc, handleEventFunc;
              if (shouldUseChangeEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForChangeEvent;
              } else if (isTextInputElement(targetNode)) {
                if (isInputEventSupported) {
                  getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                } else {
                  getTargetInstFunc = getTargetInstForInputEventPolyfill;
                  handleEventFunc = handleEventsForInputEventPolyfill;
                }
              } else if (shouldUseClickEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForClickEvent;
              }
              if (getTargetInstFunc) {
                var inst = getTargetInstFunc(topLevelType, targetInst);
                if (inst) {
                  var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                  return event;
                }
              }
              if (handleEventFunc) {
                handleEventFunc(topLevelType, targetNode, targetInst);
              }
              if (topLevelType === TOP_BLUR) {
                handleControlledInputBlur(targetNode);
              }
            }
          };
          var SyntheticUIEvent = SyntheticEvent.extend({
            view: null,
            detail: null
          });
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var previousScreenX = 0;
          var previousScreenY = 0;
          var isMovementXSet = false;
          var isMovementYSet = false;
          var SyntheticMouseEvent = SyntheticUIEvent.extend({
            screenX: null,
            screenY: null,
            clientX: null,
            clientY: null,
            pageX: null,
            pageY: null,
            ctrlKey: null,
            shiftKey: null,
            altKey: null,
            metaKey: null,
            getModifierState: getEventModifierState,
            button: null,
            buttons: null,
            relatedTarget: function(event) {
              return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              var screenX = previousScreenX;
              previousScreenX = event.screenX;
              if (!isMovementXSet) {
                isMovementXSet = true;
                return 0;
              }
              return event.type === "mousemove" ? event.screenX - screenX : 0;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              var screenY = previousScreenY;
              previousScreenY = event.screenY;
              if (!isMovementYSet) {
                isMovementYSet = true;
                return 0;
              }
              return event.type === "mousemove" ? event.screenY - screenY : 0;
            }
          });
          var SyntheticPointerEvent = SyntheticMouseEvent.extend({
            pointerId: null,
            width: null,
            height: null,
            pressure: null,
            tangentialPressure: null,
            tiltX: null,
            tiltY: null,
            twist: null,
            pointerType: null,
            isPrimary: null
          });
          var eventTypes$2 = {
            mouseEnter: {
              registrationName: "onMouseEnter",
              dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
            },
            mouseLeave: {
              registrationName: "onMouseLeave",
              dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
            },
            pointerEnter: {
              registrationName: "onPointerEnter",
              dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
            },
            pointerLeave: {
              registrationName: "onPointerLeave",
              dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
            }
          };
          var EnterLeaveEventPlugin = {
            eventTypes: eventTypes$2,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
              var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
              var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
              if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
                return null;
              }
              if (!isOutEvent && !isOverEvent) {
                return null;
              }
              var win;
              if (nativeEventTarget.window === nativeEventTarget) {
                win = nativeEventTarget;
              } else {
                var doc = nativeEventTarget.ownerDocument;
                if (doc) {
                  win = doc.defaultView || doc.parentWindow;
                } else {
                  win = window;
                }
              }
              var from;
              var to;
              if (isOutEvent) {
                from = targetInst;
                var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                to = related ? getClosestInstanceFromNode(related) : null;
                if (to !== null) {
                  var nearestMounted = getNearestMountedFiber(to);
                  if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                    to = null;
                  }
                }
              } else {
                from = null;
                to = targetInst;
              }
              if (from === to) {
                return null;
              }
              var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
              if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
                eventInterface = SyntheticMouseEvent;
                leaveEventType = eventTypes$2.mouseLeave;
                enterEventType = eventTypes$2.mouseEnter;
                eventTypePrefix = "mouse";
              } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
                eventInterface = SyntheticPointerEvent;
                leaveEventType = eventTypes$2.pointerLeave;
                enterEventType = eventTypes$2.pointerEnter;
                eventTypePrefix = "pointer";
              }
              var fromNode = from == null ? win : getNodeFromInstance$1(from);
              var toNode = to == null ? win : getNodeFromInstance$1(to);
              var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
              leave.type = eventTypePrefix + "leave";
              leave.target = fromNode;
              leave.relatedTarget = toNode;
              var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
              enter.type = eventTypePrefix + "enter";
              enter.target = toNode;
              enter.relatedTarget = fromNode;
              accumulateEnterLeaveDispatches(leave, enter, from, to);
              if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
                return [leave];
              }
              return [leave, enter];
            }
          };
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          var eventTypes$3 = {
            select: {
              phasedRegistrationNames: {
                bubbled: "onSelect",
                captured: "onSelectCapture"
              },
              dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
            }
          };
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return null;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
              syntheticEvent.type = "select";
              syntheticEvent.target = activeElement$1;
              accumulateTwoPhaseDispatches(syntheticEvent);
              return syntheticEvent;
            }
            return null;
          }
          var SelectEventPlugin = {
            eventTypes: eventTypes$3,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
              var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
              if (!containerOrDoc || !isListeningToAllDependencies("onSelect", containerOrDoc)) {
                return null;
              }
              var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
              switch (topLevelType) {
                case TOP_FOCUS:
                  if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                  }
                  break;
                case TOP_BLUR:
                  activeElement$1 = null;
                  activeElementInst$1 = null;
                  lastSelection = null;
                  break;
                case TOP_MOUSE_DOWN:
                  mouseDown = true;
                  break;
                case TOP_CONTEXT_MENU:
                case TOP_MOUSE_UP:
                case TOP_DRAG_END:
                  mouseDown = false;
                  return constructSelectEvent(nativeEvent, nativeEventTarget);
                case TOP_SELECTION_CHANGE:
                  if (skipSelectionChangeEvent) {
                    break;
                  }
                case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                  return constructSelectEvent(nativeEvent, nativeEventTarget);
              }
              return null;
            }
          };
          var SyntheticAnimationEvent = SyntheticEvent.extend({
            animationName: null,
            elapsedTime: null,
            pseudoElement: null
          });
          var SyntheticClipboardEvent = SyntheticEvent.extend({
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticFocusEvent = SyntheticUIEvent.extend({
            relatedTarget: null
          });
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
            key: getEventKey,
            location: null,
            ctrlKey: null,
            shiftKey: null,
            altKey: null,
            metaKey: null,
            repeat: null,
            locale: null,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticDragEvent = SyntheticMouseEvent.extend({
            dataTransfer: null
          });
          var SyntheticTouchEvent = SyntheticUIEvent.extend({
            touches: null,
            targetTouches: null,
            changedTouches: null,
            altKey: null,
            metaKey: null,
            ctrlKey: null,
            shiftKey: null,
            getModifierState: getEventModifierState
          });
          var SyntheticTransitionEvent = SyntheticEvent.extend({
            propertyName: null,
            elapsedTime: null,
            pseudoElement: null
          });
          var SyntheticWheelEvent = SyntheticMouseEvent.extend({
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: null,
            deltaMode: null
          });
          var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
          var SimpleEventPlugin = {
            eventTypes: simpleEventPluginEventTypes,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
              var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
              if (!dispatchConfig) {
                return null;
              }
              var EventConstructor;
              switch (topLevelType) {
                case TOP_KEY_PRESS:
                  if (getEventCharCode(nativeEvent) === 0) {
                    return null;
                  }
                case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                  EventConstructor = SyntheticKeyboardEvent;
                  break;
                case TOP_BLUR:
                case TOP_FOCUS:
                  EventConstructor = SyntheticFocusEvent;
                  break;
                case TOP_CLICK:
                  if (nativeEvent.button === 2) {
                    return null;
                  }
                case TOP_AUX_CLICK:
                case TOP_DOUBLE_CLICK:
                case TOP_MOUSE_DOWN:
                case TOP_MOUSE_MOVE:
                case TOP_MOUSE_UP:
                case TOP_MOUSE_OUT:
                case TOP_MOUSE_OVER:
                case TOP_CONTEXT_MENU:
                  EventConstructor = SyntheticMouseEvent;
                  break;
                case TOP_DRAG:
                case TOP_DRAG_END:
                case TOP_DRAG_ENTER:
                case TOP_DRAG_EXIT:
                case TOP_DRAG_LEAVE:
                case TOP_DRAG_OVER:
                case TOP_DRAG_START:
                case TOP_DROP:
                  EventConstructor = SyntheticDragEvent;
                  break;
                case TOP_TOUCH_CANCEL:
                case TOP_TOUCH_END:
                case TOP_TOUCH_MOVE:
                case TOP_TOUCH_START:
                  EventConstructor = SyntheticTouchEvent;
                  break;
                case TOP_ANIMATION_END:
                case TOP_ANIMATION_ITERATION:
                case TOP_ANIMATION_START:
                  EventConstructor = SyntheticAnimationEvent;
                  break;
                case TOP_TRANSITION_END:
                  EventConstructor = SyntheticTransitionEvent;
                  break;
                case TOP_SCROLL:
                  EventConstructor = SyntheticUIEvent;
                  break;
                case TOP_WHEEL:
                  EventConstructor = SyntheticWheelEvent;
                  break;
                case TOP_COPY:
                case TOP_CUT:
                case TOP_PASTE:
                  EventConstructor = SyntheticClipboardEvent;
                  break;
                case TOP_GOT_POINTER_CAPTURE:
                case TOP_LOST_POINTER_CAPTURE:
                case TOP_POINTER_CANCEL:
                case TOP_POINTER_DOWN:
                case TOP_POINTER_MOVE:
                case TOP_POINTER_OUT:
                case TOP_POINTER_OVER:
                case TOP_POINTER_UP:
                  EventConstructor = SyntheticPointerEvent;
                  break;
                default:
                  {
                    if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                      error("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                    }
                  }
                  EventConstructor = SyntheticEvent;
                  break;
              }
              var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
              accumulateTwoPhaseDispatches(event);
              return event;
            }
          };
          var DOMEventPluginOrder = ["ResponderEventPlugin", "SimpleEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
          injectEventPluginOrder(DOMEventPluginOrder);
          setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
          injectEventPluginsByName({
            SimpleEventPlugin,
            EnterLeaveEventPlugin,
            ChangeEventPlugin,
            SelectEventPlugin,
            BeforeInputEventPlugin
          });
          var reactEmoji = "\u269B";
          var warningEmoji = "\u26D4";
          var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
          var currentFiber = null;
          var currentPhase = null;
          var currentPhaseFiber = null;
          var isCommitting = false;
          var hasScheduledUpdateInCurrentCommit = false;
          var hasScheduledUpdateInCurrentPhase = false;
          var commitCountInCurrentWorkLoop = 0;
          var effectCountInCurrentCommit = 0;
          var labelsInCurrentCommit = new Set();
          var formatMarkName = function(markName) {
            return reactEmoji + " " + markName;
          };
          var formatLabel = function(label, warning) {
            var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
            var suffix = warning ? " Warning: " + warning : "";
            return "" + prefix + label + suffix;
          };
          var beginMark = function(markName) {
            performance.mark(formatMarkName(markName));
          };
          var clearMark = function(markName) {
            performance.clearMarks(formatMarkName(markName));
          };
          var endMark = function(label, markName, warning) {
            var formattedMarkName = formatMarkName(markName);
            var formattedLabel = formatLabel(label, warning);
            try {
              performance.measure(formattedLabel, formattedMarkName);
            } catch (err2) {
            }
            performance.clearMarks(formattedMarkName);
            performance.clearMeasures(formattedLabel);
          };
          var getFiberMarkName = function(label, debugID) {
            return label + " (#" + debugID + ")";
          };
          var getFiberLabel = function(componentName, isMounted2, phase) {
            if (phase === null) {
              return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
            } else {
              return componentName + "." + phase;
            }
          };
          var beginFiberMark = function(fiber, phase) {
            var componentName = getComponentName(fiber.type) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            if (isCommitting && labelsInCurrentCommit.has(label)) {
              return false;
            }
            labelsInCurrentCommit.add(label);
            var markName = getFiberMarkName(label, debugID);
            beginMark(markName);
            return true;
          };
          var clearFiberMark = function(fiber, phase) {
            var componentName = getComponentName(fiber.type) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            var markName = getFiberMarkName(label, debugID);
            clearMark(markName);
          };
          var endFiberMark = function(fiber, phase, warning) {
            var componentName = getComponentName(fiber.type) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            var markName = getFiberMarkName(label, debugID);
            endMark(label, markName, warning);
          };
          var shouldIgnoreFiber = function(fiber) {
            switch (fiber.tag) {
              case HostRoot:
              case HostComponent:
              case HostText:
              case HostPortal:
              case Fragment:
              case ContextProvider:
              case ContextConsumer:
              case Mode:
                return true;
              default:
                return false;
            }
          };
          var clearPendingPhaseMeasurement = function() {
            if (currentPhase !== null && currentPhaseFiber !== null) {
              clearFiberMark(currentPhaseFiber, currentPhase);
            }
            currentPhaseFiber = null;
            currentPhase = null;
            hasScheduledUpdateInCurrentPhase = false;
          };
          var pauseTimers = function() {
            var fiber = currentFiber;
            while (fiber) {
              if (fiber._debugIsCurrentlyTiming) {
                endFiberMark(fiber, null, null);
              }
              fiber = fiber.return;
            }
          };
          var resumeTimersRecursively = function(fiber) {
            if (fiber.return !== null) {
              resumeTimersRecursively(fiber.return);
            }
            if (fiber._debugIsCurrentlyTiming) {
              beginFiberMark(fiber, null);
            }
          };
          var resumeTimers = function() {
            if (currentFiber !== null) {
              resumeTimersRecursively(currentFiber);
            }
          };
          function recordEffect() {
            {
              effectCountInCurrentCommit++;
            }
          }
          function recordScheduleUpdate() {
            {
              if (isCommitting) {
                hasScheduledUpdateInCurrentCommit = true;
              }
              if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
                hasScheduledUpdateInCurrentPhase = true;
              }
            }
          }
          function startWorkTimer(fiber) {
            {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber;
              if (!beginFiberMark(fiber, null)) {
                return;
              }
              fiber._debugIsCurrentlyTiming = true;
            }
          }
          function cancelWorkTimer(fiber) {
            {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              clearFiberMark(fiber, null);
            }
          }
          function stopWorkTimer(fiber) {
            {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber.return;
              if (!fiber._debugIsCurrentlyTiming) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              endFiberMark(fiber, null, null);
            }
          }
          function stopFailedWorkTimer(fiber) {
            {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber.return;
              if (!fiber._debugIsCurrentlyTiming) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              var warning = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
              endFiberMark(fiber, null, warning);
            }
          }
          function startPhaseTimer(fiber, phase) {
            {
              if (!supportsUserTiming) {
                return;
              }
              clearPendingPhaseMeasurement();
              if (!beginFiberMark(fiber, phase)) {
                return;
              }
              currentPhaseFiber = fiber;
              currentPhase = phase;
            }
          }
          function stopPhaseTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              if (currentPhase !== null && currentPhaseFiber !== null) {
                var warning = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
                endFiberMark(currentPhaseFiber, currentPhase, warning);
              }
              currentPhase = null;
              currentPhaseFiber = null;
            }
          }
          function startWorkLoopTimer(nextUnitOfWork) {
            {
              currentFiber = nextUnitOfWork;
              if (!supportsUserTiming) {
                return;
              }
              commitCountInCurrentWorkLoop = 0;
              beginMark("(React Tree Reconciliation)");
              resumeTimers();
            }
          }
          function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
            {
              if (!supportsUserTiming) {
                return;
              }
              var warning = null;
              if (interruptedBy2 !== null) {
                if (interruptedBy2.tag === HostRoot) {
                  warning = "A top-level update interrupted the previous render";
                } else {
                  var componentName = getComponentName(interruptedBy2.type) || "Unknown";
                  warning = "An update to " + componentName + " interrupted the previous render";
                }
              } else if (commitCountInCurrentWorkLoop > 1) {
                warning = "There were cascading updates";
              }
              commitCountInCurrentWorkLoop = 0;
              var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
              pauseTimers();
              endMark(label, "(React Tree Reconciliation)", warning);
            }
          }
          function startCommitTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              isCommitting = true;
              hasScheduledUpdateInCurrentCommit = false;
              labelsInCurrentCommit.clear();
              beginMark("(Committing Changes)");
            }
          }
          function stopCommitTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              var warning = null;
              if (hasScheduledUpdateInCurrentCommit) {
                warning = "Lifecycle hook scheduled a cascading update";
              } else if (commitCountInCurrentWorkLoop > 0) {
                warning = "Caused by a cascading update in earlier commit";
              }
              hasScheduledUpdateInCurrentCommit = false;
              commitCountInCurrentWorkLoop++;
              isCommitting = false;
              labelsInCurrentCommit.clear();
              endMark("(Committing Changes)", "(Committing Changes)", warning);
            }
          }
          function startCommitSnapshotEffectsTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              effectCountInCurrentCommit = 0;
              beginMark("(Committing Snapshot Effects)");
            }
          }
          function stopCommitSnapshotEffectsTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              var count = effectCountInCurrentCommit;
              effectCountInCurrentCommit = 0;
              endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
            }
          }
          function startCommitHostEffectsTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              effectCountInCurrentCommit = 0;
              beginMark("(Committing Host Effects)");
            }
          }
          function stopCommitHostEffectsTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              var count = effectCountInCurrentCommit;
              effectCountInCurrentCommit = 0;
              endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
            }
          }
          function startCommitLifeCyclesTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              effectCountInCurrentCommit = 0;
              beginMark("(Calling Lifecycle Methods)");
            }
          }
          function stopCommitLifeCyclesTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              var count = effectCountInCurrentCommit;
              effectCountInCurrentCommit = 0;
              endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop2(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push2(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type2 = workInProgress2.type;
              var contextTypes = type2.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name, getCurrentFiberStackInDev);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type2) {
            {
              var childContextTypes = type2.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type2, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type2.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type2) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext;
              startPhaseTimer(fiber, "getChildContext");
              childContext = instance.getChildContext();
              stopPhaseTimer();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type2) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type2) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name, getCurrentFiberStackInDev);
              }
              return _assign({}, parentContext, {}, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type2, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type2, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop2(didPerformWorkStackCursor, workInProgress2);
                pop2(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop2(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority = 99;
          var UserBlockingPriority$1 = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs = Scheduler_now();
          var now2 = initialTimeMs < 1e4 ? Scheduler_now : function() {
            return Scheduler_now() - initialTimeMs;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$1;
              case Scheduler_NormalPriority:
                return NormalPriority;
              case Scheduler_LowPriority:
                return LowPriority;
              case Scheduler_IdlePriority:
                return IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$1:
                return Scheduler_UserBlockingPriority;
              case NormalPriority:
                return Scheduler_NormalPriority;
              case LowPriority:
                return Scheduler_LowPriority;
              case IdlePriority:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              try {
                var _isSync = true;
                var queue = syncQueue;
                runWithPriority$1(ImmediatePriority, function() {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(_isSync);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error2;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var NoWork = 0;
          var Never = 1;
          var Idle = 2;
          var ContinuousHydration = 3;
          var Sync = MAX_SIGNED_31_BIT_INT;
          var Batched = Sync - 1;
          var UNIT_SIZE = 10;
          var MAGIC_NUMBER_OFFSET = Batched - 1;
          function msToExpirationTime(ms) {
            return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
          }
          function expirationTimeToMs(expirationTime) {
            return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
          }
          function ceiling(num, precision) {
            return ((num / precision | 0) + 1) * precision;
          }
          function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
            return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
          }
          var LOW_PRIORITY_EXPIRATION = 5e3;
          var LOW_PRIORITY_BATCH_SIZE = 250;
          function computeAsyncExpiration(currentTime) {
            return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
          }
          function computeSuspenseExpiration(currentTime, timeoutMs) {
            return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
          }
          var HIGH_PRIORITY_EXPIRATION = 500;
          var HIGH_PRIORITY_BATCH_SIZE = 100;
          function computeInteractiveExpiration(currentTime) {
            return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
          }
          function inferPriorityFromExpirationTime(currentTime, expirationTime) {
            if (expirationTime === Sync) {
              return ImmediatePriority;
            }
            if (expirationTime === Never || expirationTime === Idle) {
              return IdlePriority;
            }
            var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
            if (msUntil <= 0) {
              return ImmediatePriority;
            }
            if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
              return UserBlockingPriority$1;
            }
            if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
              return NormalPriority;
            }
            return IdlePriority;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, firstComponentStack);
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = new Map();
            };
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type2) {
            {
              if (resolveFamily === null) {
                return type2;
              }
              var family = resolveFamily(type2);
              if (family === void 0) {
                return type2;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type2) {
            return resolveFunctionForHotReloading(type2);
          }
          function resolveForwardRefForHotReloading(type2) {
            {
              if (resolveFamily === null) {
                return type2;
              }
              var family = resolveFamily(type2);
              if (family === void 0) {
                if (type2 !== null && type2 !== void 0 && typeof type2.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type2.render);
                  if (type2.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type2.displayName !== void 0) {
                      syntheticType.displayName = type2.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type2;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              syncUpdates(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type2;
                  break;
                case ForwardRef:
                  candidateType = type2.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleWork(fiber, Sync);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type2;
                  break;
                case ForwardRef:
                  candidateType = type2.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          function readLazyComponentType(lazyComponent) {
            initializeLazyComponentType(lazyComponent);
            if (lazyComponent._status !== Resolved) {
              throw lazyComponent._result;
            }
            return lazyComponent._result;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop2(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderExpirationTime2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (node.childExpirationTime < renderExpirationTime2) {
                node.childExpirationTime = renderExpirationTime2;
                if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                  alternate.childExpirationTime = renderExpirationTime2;
                }
              } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                alternate.childExpirationTime = renderExpirationTime2;
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(renderExpirationTime2, null);
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    if (fiber.expirationTime < renderExpirationTime2) {
                      fiber.expirationTime = renderExpirationTime2;
                    }
                    var alternate = fiber.alternate;
                    if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                      alternate.expirationTime = renderExpirationTime2;
                    }
                    scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                    if (list.expirationTime < renderExpirationTime2) {
                      list.expirationTime = renderExpirationTime2;
                    }
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderExpirationTime2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (dependencies.expirationTime >= renderExpirationTime2) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  expirationTime: NoWork,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              baseQueue: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                baseQueue: currentQueue.baseQueue,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(expirationTime, suspenseConfig) {
            var update = {
              expirationTime,
              suspenseConfig,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            update.next = update;
            {
              update.priority = getCurrentPriorityLevel();
            }
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, update) {
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              cloneUpdateQueue(current2, workInProgress2);
            }
            var queue = workInProgress2.updateQueue;
            var last = queue.baseQueue;
            if (last === null) {
              queue.baseQueue = update.next = update;
              update.next = update;
            } else {
              update.next = last.next;
              last.next = update;
            }
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                    if (workInProgress2.mode & StrictMode) {
                      payload.call(instance, prevState, nextProps);
                    }
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                    if (workInProgress2.mode & StrictMode) {
                      _payload.call(instance, prevState, nextProps);
                    }
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderExpirationTime2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var baseQueue = queue.baseQueue;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              baseQueue = pendingQueue;
              queue.shared.pending = null;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                if (currentQueue !== null) {
                  currentQueue.baseQueue = pendingQueue;
                }
              }
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = queue.baseState;
              var newExpirationTime = NoWork;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              if (first !== null) {
                var update = first;
                do {
                  var updateExpirationTime = update.expirationTime;
                  if (updateExpirationTime < renderExpirationTime2) {
                    var clone = {
                      expirationTime: update.expirationTime,
                      suspenseConfig: update.suspenseConfig,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newBaseQueueLast === null) {
                      newBaseQueueFirst = newBaseQueueLast = clone;
                      newBaseState = newState;
                    } else {
                      newBaseQueueLast = newBaseQueueLast.next = clone;
                    }
                    if (updateExpirationTime > newExpirationTime) {
                      newExpirationTime = updateExpirationTime;
                    }
                  } else {
                    if (newBaseQueueLast !== null) {
                      var _clone = {
                        expirationTime: Sync,
                        suspenseConfig: update.suspenseConfig,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                      };
                      newBaseQueueLast = newBaseQueueLast.next = _clone;
                    }
                    markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                    newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                      workInProgress2.effectTag |= Callback;
                      var effects = queue.effects;
                      if (effects === null) {
                        queue.effects = [update];
                      } else {
                        effects.push(update);
                      }
                    }
                  }
                  update = update.next;
                  if (update === null || update === first) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) {
                      break;
                    } else {
                      update = baseQueue.next = pendingQueue.next;
                      pendingQueue.next = first;
                      queue.baseQueue = baseQueue = pendingQueue;
                      queue.shared.pending = null;
                    }
                  }
                } while (true);
              }
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              queue.baseState = newBaseState;
              queue.baseQueue = newBaseQueueLast;
              markUnprocessedUpdateTime(newExpirationTime);
              workInProgress2.expirationTime = newExpirationTime;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          function requestCurrentSuspenseConfig() {
            return ReactCurrentBatchConfig.suspense;
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React21.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type2, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type2) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                getDerivedStateFromProps(nextProps, prevState);
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.expirationTime === NoWork) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var currentTime = requestCurrentTimeForUpdate();
              var suspenseConfig = requestCurrentSuspenseConfig();
              var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
              var update = createUpdate(expirationTime, suspenseConfig);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var currentTime = requestCurrentTimeForUpdate();
              var suspenseConfig = requestCurrentSuspenseConfig();
              var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
              var update = createUpdate(expirationTime, suspenseConfig);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var currentTime = requestCurrentTimeForUpdate();
              var suspenseConfig = requestCurrentSuspenseConfig();
              var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
              var update = createUpdate(expirationTime, suspenseConfig);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                }
              }
              startPhaseTimer(workInProgress2, "shouldComponentUpdate");
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              stopPhaseTimer();
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                new ctor(props, context);
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            startPhaseTimer(workInProgress2, "componentWillMount");
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            stopPhaseTimer();
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            startPhaseTimer(workInProgress2, "componentWillReceiveProps");
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            stopPhaseTimer();
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.effectTag |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                startPhaseTimer(workInProgress2, "componentWillMount");
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
                stopPhaseTimer();
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.effectTag |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.effectTag |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var oldProps = workInProgress2.memoizedProps;
            instance.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.effectTag |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.effectTag |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                startPhaseTimer(workInProgress2, "componentWillUpdate");
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
                stopPhaseTimer();
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.effectTag |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.effectTag |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.effectTag |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.effectTag |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              error('Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              var addendum = "";
              {
                addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
              }
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
                }
              }
            }
          }
          function warnOnFunctionType() {
            {
              var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
              if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.effectTag = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.effectTag = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.effectTag = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, expirationTime) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, expirationTime) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, expirationTime) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, expirationTime, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, expirationTime) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType();
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType();
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType();
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject3 = typeof newChild === "object" && newChild !== null;
              if (isObject3) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
              }
              if (isObject3) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType();
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case FunctionComponent: {
                    var Component = returnFiber.type;
                    {
                      {
                        throw Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, renderExpirationTime2) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, renderExpirationTime2);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop2(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
            pop2(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop2(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function createDeprecatedResponderListener(responder, props) {
            var eventResponderListener = {
              responder,
              props
            };
            {
              Object.freeze(eventResponderListener);
            }
            return eventResponderListener;
          }
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          {
            didWarnAboutMismatchedHooksForComponent = new Set();
          }
          var renderExpirationTime = NoWork;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderExpirationTime) {
            renderExpirationTime = nextRenderExpirationTime;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.expirationTime = NoWork;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (workInProgress2.expirationTime === renderExpirationTime) {
              var numberOfReRenders = 0;
              do {
                workInProgress2.expirationTime = NoWork;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (workInProgress2.expirationTime === renderExpirationTime);
            }
            ReactCurrentDispatcher.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderExpirationTime = NoWork;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, expirationTime) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.effectTag &= ~(Passive | Update);
            if (current2.expirationTime <= expirationTime) {
              current2.expirationTime = NoWork;
            }
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
            }
            renderExpirationTime = NoWork;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init2) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init2 !== void 0) {
              initialState = init2(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateExpirationTime = update.expirationTime;
                if (updateExpirationTime < renderExpirationTime) {
                  var clone = {
                    expirationTime: update.expirationTime,
                    suspenseConfig: update.suspenseConfig,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                    currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                    markUnprocessedUpdateTime(updateExpirationTime);
                  }
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      expirationTime: Sync,
                      suspenseConfig: update.suspenseConfig,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState2(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create2, destroy, deps) {
            var effect = {
              tag,
              create: create2,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberEffectTag, hookEffectTag, create2, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
            hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create2, void 0, nextDeps);
          }
          function updateEffectImpl(fiberEffectTag, hookEffectTag, create2, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookEffectTag, create2, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
            hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create2, destroy, nextDeps);
          }
          function mountEffect(create2, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create2, deps);
          }
          function updateEffect(create2, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create2, deps);
          }
          function mountLayoutEffect(create2, deps) {
            return mountEffectImpl(Update, Layout, create2, deps);
          }
          function updateLayoutEffect(create2, deps) {
            return updateEffectImpl(Update, Layout, create2, deps);
          }
          function imperativeHandleEffect(create2, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create2();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create2();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value, config3) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config3 === void 0 ? null : config3;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            }, [value, config3]);
            return prevValue;
          }
          function updateDeferredValue(value, config3) {
            var _updateState = updateState2(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config3 === void 0 ? null : config3;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            }, [value, config3]);
            return prevValue;
          }
          function rerenderDeferredValue(value, config3) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config3 === void 0 ? null : config3;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            }, [value, config3]);
            return prevValue;
          }
          function startTransition(setPending, config3, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config3 === void 0 ? null : config3;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            });
          }
          function mountTransition(config3) {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = mountCallback(startTransition.bind(null, setPending, config3), [setPending, config3]);
            return [start, isPending];
          }
          function updateTransition(config3) {
            var _updateState2 = updateState2(), isPending = _updateState2[0], setPending = _updateState2[1];
            var start = updateCallback(startTransition.bind(null, setPending, config3), [setPending, config3]);
            return [start, isPending];
          }
          function rerenderTransition(config3) {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
            var start = updateCallback(startTransition.bind(null, setPending, config3), [setPending, config3]);
            return [start, isPending];
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = {
              expirationTime,
              suspenseConfig,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            {
              update.priority = getCurrentPriorityLevel();
            }
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdate = true;
              update.expirationTime = renderExpirationTime;
              currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
            } else {
              if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher.current;
                    ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleWork(fiber, expirationTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useResponder: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                mountHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config3) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value, config3);
              },
              useTransition: function(config3) {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition(config3);
              }
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config3) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value, config3);
              },
              useTransition: function(config3) {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition(config3);
              }
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState2(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config3) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value, config3);
              },
              useTransition: function(config3) {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition(config3);
              }
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config3) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value, config3);
              },
              useTransition: function(config3) {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition(config3);
              }
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config3) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value, config3);
              },
              useTransition: function(config3) {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition(config3);
              }
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState2(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config3) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value, config3);
              },
              useTransition: function(config3) {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition(config3);
              }
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config3) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value, config3);
              },
              useTransition: function(config3) {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition(config3);
              }
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.effectTag = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type2 = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type2);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type2 = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type2);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type2 = fiber.type;
            if (fiber.tag !== HostComponent || type2 !== "head" && type2 !== "body" && !shouldSetTextContent(type2, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderExpirationTime2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderExpirationTime2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderExpirationTime2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
            workInProgress2.effectTag |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
            if (current2 === null) {
              var type2 = Component.type;
              if (isSimpleFunctionComponent(type2) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type2;
                {
                  resolvedType = resolveFunctionForHotReloading(type2);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type2);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
              }
              {
                var innerPropTypes = type2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type2), getCurrentFiberStackInDev);
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
              }
            }
            var currentChild = current2.child;
            if (updateExpirationTime < renderExpirationTime2) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            }
            workInProgress2.effectTag |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  outerMemoType = refineResolvedLazyComponent(outerMemoType);
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (updateExpirationTime < renderExpirationTime2) {
                  workInProgress2.expirationTime = current2.expirationTime;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2);
          }
          function updateFragment(current2, workInProgress2, renderExpirationTime2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderExpirationTime2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderExpirationTime2) {
            {
              workInProgress2.effectTag |= Update;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.effectTag |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderExpirationTime2);
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderExpirationTime2);
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderExpirationTime2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
            workInProgress2.effectTag |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.effectTag |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderExpirationTime2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2);
            {
              var inst = workInProgress2.stateNode;
              if (inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  instance.render();
                }
                setIsRendering(false);
              }
            }
            workInProgress2.effectTag |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderExpirationTime2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderExpirationTime2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.effectTag = node.effectTag & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderExpirationTime2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type2 = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type2, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type2, prevProps)) {
              workInProgress2.effectTag |= ContentReset;
            }
            markRef(current2, workInProgress2);
            if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type2, nextProps)) {
              {
                markSpawnedWork(Never);
              }
              workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
              return null;
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            var props = workInProgress2.pendingProps;
            cancelWorkTimer(workInProgress2);
            var Component = readLazyComponentType(elementType);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            startWorkTimer(workInProgress2);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderExpirationTime2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderExpirationTime2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
              setIsRendering(false);
            }
            workInProgress2.effectTag |= PerformedWork;
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderExpirationTime2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  if (workInProgress2.memoizedState !== null) {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderExpirationTime2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info4 = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info4 += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info4);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support contextType.", _componentName3);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryTime: NoWork
          };
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2) {
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current2 === null || current2.memoizedState !== null);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2) {
            var mode = workInProgress2.mode;
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.effectTag |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var nextDidTimeout = false;
            var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              nextDidTimeout = true;
              workInProgress2.effectTag &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              if (nextDidTimeout) {
                var nextFallbackChildren = nextProps.fallback;
                var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                primaryChildFragment.return = workInProgress2;
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var progressedState = workInProgress2.memoizedState;
                  var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                  primaryChildFragment.child = progressedPrimaryChild;
                  var progressedChild = progressedPrimaryChild;
                  while (progressedChild !== null) {
                    progressedChild.return = primaryChildFragment;
                    progressedChild = progressedChild.sibling;
                  }
                }
                var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
                fallbackChildFragment.return = workInProgress2;
                primaryChildFragment.sibling = fallbackChildFragment;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = primaryChildFragment;
                return fallbackChildFragment;
              } else {
                var nextPrimaryChildren = nextProps.children;
                workInProgress2.memoizedState = null;
                return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var currentPrimaryChildFragment = current2.child;
                var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                if (nextDidTimeout) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                  _primaryChildFragment2.return = workInProgress2;
                  if ((workInProgress2.mode & BlockingMode) === NoMode) {
                    var _progressedState = workInProgress2.memoizedState;
                    var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                    if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                      _primaryChildFragment2.child = _progressedPrimaryChild;
                      var _progressedChild2 = _progressedPrimaryChild;
                      while (_progressedChild2 !== null) {
                        _progressedChild2.return = _primaryChildFragment2;
                        _progressedChild2 = _progressedChild2.sibling;
                      }
                    }
                  }
                  if (workInProgress2.mode & ProfileMode) {
                    var _treeBaseDuration = 0;
                    var _hiddenChild = _primaryChildFragment2.child;
                    while (_hiddenChild !== null) {
                      _treeBaseDuration += _hiddenChild.treeBaseDuration;
                      _hiddenChild = _hiddenChild.sibling;
                    }
                    _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                  }
                  var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                  _fallbackChildFragment2.return = workInProgress2;
                  _primaryChildFragment2.sibling = _fallbackChildFragment2;
                  _primaryChildFragment2.childExpirationTime = NoWork;
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  workInProgress2.child = _primaryChildFragment2;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren = nextProps.children;
                  var currentPrimaryChild = currentPrimaryChildFragment.child;
                  var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
                  workInProgress2.memoizedState = null;
                  return workInProgress2.child = primaryChild;
                }
              } else {
                var _currentPrimaryChild = current2.child;
                if (nextDidTimeout) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
                  _primaryChildFragment3.return = workInProgress2;
                  _primaryChildFragment3.child = _currentPrimaryChild;
                  if (_currentPrimaryChild !== null) {
                    _currentPrimaryChild.return = _primaryChildFragment3;
                  }
                  if ((workInProgress2.mode & BlockingMode) === NoMode) {
                    var _progressedState2 = workInProgress2.memoizedState;
                    var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                    _primaryChildFragment3.child = _progressedPrimaryChild2;
                    var _progressedChild3 = _progressedPrimaryChild2;
                    while (_progressedChild3 !== null) {
                      _progressedChild3.return = _primaryChildFragment3;
                      _progressedChild3 = _progressedChild3.sibling;
                    }
                  }
                  if (workInProgress2.mode & ProfileMode) {
                    var _treeBaseDuration2 = 0;
                    var _hiddenChild2 = _primaryChildFragment3.child;
                    while (_hiddenChild2 !== null) {
                      _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                      _hiddenChild2 = _hiddenChild2.sibling;
                    }
                    _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                  }
                  var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
                  _fallbackChildFragment3.return = workInProgress2;
                  _primaryChildFragment3.sibling = _fallbackChildFragment3;
                  _fallbackChildFragment3.effectTag |= Placement;
                  _primaryChildFragment3.childExpirationTime = NoWork;
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  workInProgress2.child = _primaryChildFragment3;
                  return _fallbackChildFragment3;
                } else {
                  workInProgress2.memoizedState = null;
                  var _nextPrimaryChildren2 = nextProps.children;
                  return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
                }
              }
            }
          }
          function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
            if (fiber.expirationTime < renderExpirationTime2) {
              fiber.expirationTime = renderExpirationTime2;
            }
            var alternate = fiber.alternate;
            if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
              alternate.expirationTime = renderExpirationTime2;
            }
            scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderExpirationTime2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderExpirationTime2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type2 = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type2, index3, type2);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailExpiration: 0,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailExpiration = 0;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.effectTag |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.effectTag & DidCapture) !== NoEffect;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderExpirationTime2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            }
            return workInProgress2.child;
          }
          function updateContextProvider(current2, workInProgress2, renderExpirationTime2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderExpirationTime2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.effectTag |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2) {
            cancelWorkTimer(workInProgress2);
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            var updateExpirationTime = workInProgress2.expirationTime;
            if (updateExpirationTime !== NoWork) {
              markUnprocessedUpdateTime(updateExpirationTime);
            }
            var childExpirationTime = workInProgress2.childExpirationTime;
            if (childExpirationTime < renderExpirationTime2) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.effectTag = Deletion;
              newWorkInProgress.effectTag |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderExpirationTime2) {
            var updateExpirationTime = workInProgress2.expirationTime;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (updateExpirationTime < renderExpirationTime2) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                      {
                        markSpawnedWork(Never);
                      }
                      workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                      return null;
                    }
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                      if (hasChildWork) {
                        workInProgress2.effectTag |= Update;
                      }
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                      if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                        return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.effectTag & DidCapture) !== NoEffect;
                    var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
                      }
                      workInProgress2.effectTag |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              } else {
                didReceiveUpdate = false;
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.expirationTime = NoWork;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderExpirationTime2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderExpirationTime2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderExpirationTime2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderExpirationTime2);
              case ForwardRef: {
                var type2 = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type2 ? _unresolvedProps2 : resolveDefaultProps(type2, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type2, _resolvedProps2, renderExpirationTime2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderExpirationTime2);
              case Mode:
                return updateMode(current2, workInProgress2, renderExpirationTime2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderExpirationTime2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderExpirationTime2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderExpirationTime2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.effectTag |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.effectTag |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderExpirationTime2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type2 = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type2, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type2, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type2, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
                  workInProgress2.expirationTime = renderExpirationTime2;
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                  if (!nextDidTimeout && prevState !== null) {
                    var currentFallbackChild = current2.child.sibling;
                    if (currentFallbackChild !== null) {
                      var first = workInProgress2.firstEffect;
                      if (first !== null) {
                        workInProgress2.firstEffect = currentFallbackChild;
                        currentFallbackChild.nextEffect = first;
                      } else {
                        workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                        currentFallbackChild.nextEffect = null;
                      }
                      currentFallbackChild.effectTag = Deletion;
                    }
                  }
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.effectTag |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.effectTag |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.effectTag |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderExpirationTime2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.effectTag |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.effectTag |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now2() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime2 > Never) {
                      workInProgress2.effectTag |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      var nextPriority = renderExpirationTime2 - 1;
                      workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                      {
                        markSpawnedWork(nextPriority);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  if (renderState.tailExpiration === 0) {
                    var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                    renderState.tailExpiration = now2() + TAIL_EXPIRATION_TIMEOUT_MS;
                  }
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now2();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderExpirationTime2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var effectTag = workInProgress2.effectTag;
                if (effectTag & ShouldCapture) {
                  workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                var _effectTag = workInProgress2.effectTag;
                if (!((_effectTag & DidCapture) === NoEffect)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _effectTag2 = workInProgress2.effectTag;
                if (_effectTag2 & ShouldCapture) {
                  workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function logCapturedError(capturedError) {
            var error2 = capturedError.error;
            {
              var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
              if (error2 != null && error2._suppressLogging) {
                if (errorBoundaryFound && willRetry) {
                  return;
                }
                console["error"](error2);
              }
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (errorBoundaryFound && errorBoundaryName) {
                if (willRetry) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
                }
              } else {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
              }
              var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          function logError(boundary, errorInfo) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            if (stack === null && source !== null) {
              stack = getStackByFiberInDevAndProd(source);
            }
            var capturedError = {
              componentName: source !== null ? getComponentName(source.type) : null,
              componentStack: stack !== null ? stack : "",
              error: errorInfo.value,
              errorBoundary: null,
              errorBoundaryName: null,
              errorBoundaryFound: false,
              willRetry: false
            };
            if (boundary !== null && boundary.tag === ClassComponent) {
              capturedError.errorBoundary = boundary.stateNode;
              capturedError.errorBoundaryName = getComponentName(boundary.type);
              capturedError.errorBoundaryFound = true;
              capturedError.willRetry = true;
            }
            try {
              logCapturedError(capturedError);
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            startPhaseTimer(current2, "componentWillUnmount");
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            instance.componentWillUnmount();
            stopPhaseTimer();
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.effectTag & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    stopPhaseTimer();
                  }
                }
                return;
              }
              case HostRoot:
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create2 = effect.create;
                  effect.destroy = create2();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveHookEffects(finishedWork) {
            if ((finishedWork.effectTag & Passive) !== NoEffect) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                case Block: {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  break;
                }
              }
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedExpirationTime) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update) {
                  if (current2 === null) {
                    startPhaseTimer(finishedWork, "componentDidMount");
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    instance.componentDidMount();
                    stopPhaseTimer();
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    startPhaseTimer(finishedWork, "componentDidUpdate");
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    stopPhaseTimer();
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.effectTag & Update) {
                  var type2 = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type2, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var onRender = finishedWork.memoizedProps.onRender;
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                  var fallbackChildFragment = node.child.sibling;
                  fallbackChildFragment.return = node;
                  node = fallbackChildFragment;
                  continue;
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    {
                      var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                      runWithPriority$1(priorityLevel, function() {
                        var effect = firstEffect;
                        do {
                          var _destroy = effect.destroy;
                          if (_destroy !== void 0) {
                            safelyCallDestroy(current2, _destroy);
                          }
                          effect = effect.next;
                        } while (effect !== firstEffect);
                      });
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node, renderPriorityLevel);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiber(current2) {
            var alternate = current2.alternate;
            current2.return = null;
            current2.child = null;
            current2.memoizedState = null;
            current2.updateQueue = null;
            current2.dependencies = null;
            current2.alternate = null;
            current2.firstEffect = null;
            current2.lastEffect = null;
            current2.pendingProps = null;
            current2.memoizedProps = null;
            current2.stateNode = null;
            if (alternate !== null) {
              detachFiber(alternate);
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.effectTag & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.effectTag & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.effectTag & ContentReset) {
              resetTextContent(parent);
              parentFiber.effectTag &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node, renderPriorityLevel);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
            }
            detachFiber(current2);
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type2 = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type2, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            var newDidTimeout;
            var primaryChildParent = finishedWork;
            if (newState === null) {
              newDidTimeout = false;
            } else {
              newDidTimeout = true;
              primaryChildParent = finishedWork.child;
              markCommitTimeOfFallback();
            }
            if (primaryChildParent !== null) {
              hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var thenables = finishedWork.updateQueue;
            if (thenables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              thenables.forEach(function(thenable) {
                var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
                if (!retryCache.has(thenable)) {
                  {
                    if (thenable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(thenable);
                  thenable.then(retry, retry);
                }
              });
            }
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
            var update = createUpdate(expirationTime, null);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
            var update = createUpdate(expirationTime, null);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (fiber.expirationTime !== Sync) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, renderExpirationTime2, thenable) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(thenable, threadIDs);
            } else {
              threadIDs = pingCache.get(thenable);
              if (threadIDs === void 0) {
                threadIDs = new Set();
                pingCache.set(thenable, threadIDs);
              }
            }
            if (!threadIDs.has(renderExpirationTime2)) {
              threadIDs.add(renderExpirationTime2);
              var ping = pingSuspendedRoot.bind(null, root2, thenable, renderExpirationTime2);
              thenable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, renderExpirationTime2) {
            sourceFiber.effectTag |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var thenable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.expirationTime = currentSource.expirationTime;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var thenables = _workInProgress.updateQueue;
                  if (thenables === null) {
                    var updateQueue = new Set();
                    updateQueue.add(thenable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    thenables.add(thenable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.effectTag |= DidCapture;
                    sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(Sync, null);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.expirationTime = Sync;
                    return;
                  }
                  attachPingListener(root2, renderExpirationTime2, thenable);
                  _workInProgress.effectTag |= ShouldCapture;
                  _workInProgress.expirationTime = renderExpirationTime2;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.effectTag |= ShouldCapture;
                  workInProgress2.expirationTime = renderExpirationTime2;
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.effectTag |= ShouldCapture;
                    workInProgress2.expirationTime = renderExpirationTime2;
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var renderExpirationTime$1 = NoWork;
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootLatestProcessedExpirationTime = Sync;
          var workInProgressRootLatestSuspenseTimeout = Sync;
          var workInProgressRootCanSuspendUsingConfig = null;
          var workInProgressRootNextUnprocessedUpdateTime = NoWork;
          var workInProgressRootHasPendingPing = false;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority;
          var pendingPassiveEffectsExpirationTime = NoWork;
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var interruptedBy = null;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoWork;
          function requestCurrentTimeForUpdate() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return msToExpirationTime(now2());
            }
            if (currentEventTime !== NoWork) {
              return currentEventTime;
            }
            currentEventTime = msToExpirationTime(now2());
            return currentEventTime;
          }
          function getCurrentTime() {
            return msToExpirationTime(now2());
          }
          function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return Sync;
            }
            var priorityLevel = getCurrentPriorityLevel();
            if ((mode & ConcurrentMode) === NoMode) {
              return priorityLevel === ImmediatePriority ? Sync : Batched;
            }
            if ((executionContext & RenderContext) !== NoContext) {
              return renderExpirationTime$1;
            }
            var expirationTime;
            if (suspenseConfig !== null) {
              expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
            } else {
              switch (priorityLevel) {
                case ImmediatePriority:
                  expirationTime = Sync;
                  break;
                case UserBlockingPriority$1:
                  expirationTime = computeInteractiveExpiration(currentTime);
                  break;
                case NormalPriority:
                case LowPriority:
                  expirationTime = computeAsyncExpiration(currentTime);
                  break;
                case IdlePriority:
                  expirationTime = Idle;
                  break;
                default: {
                  {
                    throw Error("Expected a valid priority level");
                  }
                }
              }
            }
            if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
              expirationTime -= 1;
            }
            return expirationTime;
          }
          function scheduleUpdateOnFiber(fiber, expirationTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return;
            }
            checkForInterruption(fiber, expirationTime);
            recordScheduleUpdate();
            var priorityLevel = getCurrentPriorityLevel();
            if (expirationTime === Sync) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, expirationTime);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2);
                schedulePendingInteractions(root2, expirationTime);
                if (executionContext === NoContext) {
                  flushSyncCallbackQueue();
                }
              }
            } else {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, expirationTime);
            }
            if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = new Map([[root2, expirationTime]]);
              } else {
                var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root2);
                if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
                  rootsWithPendingDiscreteUpdates.set(root2, expirationTime);
                }
              }
            }
          }
          var scheduleWork = scheduleUpdateOnFiber;
          function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
            if (fiber.expirationTime < expirationTime) {
              fiber.expirationTime = expirationTime;
            }
            var alternate = fiber.alternate;
            if (alternate !== null && alternate.expirationTime < expirationTime) {
              alternate.expirationTime = expirationTime;
            }
            var node = fiber.return;
            var root2 = null;
            if (node === null && fiber.tag === HostRoot) {
              root2 = fiber.stateNode;
            } else {
              while (node !== null) {
                alternate = node.alternate;
                if (node.childExpirationTime < expirationTime) {
                  node.childExpirationTime = expirationTime;
                  if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                    alternate.childExpirationTime = expirationTime;
                  }
                } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                  alternate.childExpirationTime = expirationTime;
                }
                if (node.return === null && node.tag === HostRoot) {
                  root2 = node.stateNode;
                  break;
                }
                node = node.return;
              }
            }
            if (root2 !== null) {
              if (workInProgressRoot === root2) {
                markUnprocessedUpdateTime(expirationTime);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspendedAtTime(root2, renderExpirationTime$1);
                }
              }
              markRootUpdatedAtTime(root2, expirationTime);
            }
            return root2;
          }
          function getNextRootExpirationTimeToWorkOn(root2) {
            var lastExpiredTime = root2.lastExpiredTime;
            if (lastExpiredTime !== NoWork) {
              return lastExpiredTime;
            }
            var firstPendingTime = root2.firstPendingTime;
            if (!isRootSuspendedAtTime(root2, firstPendingTime)) {
              return firstPendingTime;
            }
            var lastPingedTime = root2.lastPingedTime;
            var nextKnownPendingLevel = root2.nextKnownPendingLevel;
            var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
            if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
              return NoWork;
            }
            return nextLevel;
          }
          function ensureRootIsScheduled(root2) {
            var lastExpiredTime = root2.lastExpiredTime;
            if (lastExpiredTime !== NoWork) {
              root2.callbackExpirationTime = Sync;
              root2.callbackPriority = ImmediatePriority;
              root2.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              return;
            }
            var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
            var existingCallbackNode = root2.callbackNode;
            if (expirationTime === NoWork) {
              if (existingCallbackNode !== null) {
                root2.callbackNode = null;
                root2.callbackExpirationTime = NoWork;
                root2.callbackPriority = NoPriority;
              }
              return;
            }
            var currentTime = requestCurrentTimeForUpdate();
            var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              var existingCallbackExpirationTime = root2.callbackExpirationTime;
              if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            root2.callbackExpirationTime = expirationTime;
            root2.callbackPriority = priorityLevel;
            var callbackNode;
            if (expirationTime === Sync) {
              callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root2), {
                timeout: expirationTimeToMs(expirationTime) - now2()
              });
            }
            root2.callbackNode = callbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            currentEventTime = NoWork;
            if (didTimeout) {
              var currentTime = requestCurrentTimeForUpdate();
              markRootExpiredAtTime(root2, currentTime);
              ensureRootIsScheduled(root2);
              return null;
            }
            var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
            if (expirationTime !== NoWork) {
              var originalCallbackNode = root2.callbackNode;
              if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                  throw Error("Should not already be working.");
                }
              }
              flushPassiveEffects();
              if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
                prepareFreshStack(root2, expirationTime);
                startWorkOnPendingInteractions(root2, expirationTime);
              }
              if (workInProgress !== null) {
                var prevExecutionContext = executionContext;
                executionContext |= RenderContext;
                var prevDispatcher = pushDispatcher();
                var prevInteractions = pushInteractions(root2);
                startWorkLoopTimer(workInProgress);
                do {
                  try {
                    workLoopConcurrent();
                    break;
                  } catch (thrownValue) {
                    handleError(root2, thrownValue);
                  }
                } while (true);
                resetContextDependencies();
                executionContext = prevExecutionContext;
                popDispatcher(prevDispatcher);
                {
                  popInteractions(prevInteractions);
                }
                if (workInProgressRootExitStatus === RootFatalErrored) {
                  var fatalError = workInProgressRootFatalError;
                  stopInterruptedWorkLoopTimer();
                  prepareFreshStack(root2, expirationTime);
                  markRootSuspendedAtTime(root2, expirationTime);
                  ensureRootIsScheduled(root2);
                  throw fatalError;
                }
                if (workInProgress !== null) {
                  stopInterruptedWorkLoopTimer();
                } else {
                  stopFinishedWorkLoopTimer();
                  var finishedWork = root2.finishedWork = root2.current.alternate;
                  root2.finishedExpirationTime = expirationTime;
                  finishConcurrentRender(root2, finishedWork, workInProgressRootExitStatus, expirationTime);
                }
                ensureRootIsScheduled(root2);
                if (root2.callbackNode === originalCallbackNode) {
                  return performConcurrentWorkOnRoot.bind(null, root2);
                }
              }
            }
            return null;
          }
          function finishConcurrentRender(root2, finishedWork, exitStatus, expirationTime) {
            workInProgressRoot = null;
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                markRootExpiredAtTime(root2, expirationTime > Idle ? Idle : expirationTime);
                break;
              }
              case RootSuspended: {
                markRootSuspendedAtTime(root2, expirationTime);
                var lastSuspendedTime = root2.lastSuspendedTime;
                if (expirationTime === lastSuspendedTime) {
                  root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
                }
                var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
                if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    if (workInProgressRootHasPendingPing) {
                      var lastPingedTime = root2.lastPingedTime;
                      if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                        root2.lastPingedTime = expirationTime;
                        prepareFreshStack(root2, expirationTime);
                        break;
                      }
                    }
                    var nextTime = getNextRootExpirationTimeToWorkOn(root2);
                    if (nextTime !== NoWork && nextTime !== expirationTime) {
                      break;
                    }
                    if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                      root2.lastPingedTime = lastSuspendedTime;
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspendedAtTime(root2, expirationTime);
                var _lastSuspendedTime = root2.lastSuspendedTime;
                if (expirationTime === _lastSuspendedTime) {
                  root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
                }
                if (!IsThisRendererActing.current) {
                  if (workInProgressRootHasPendingPing) {
                    var _lastPingedTime = root2.lastPingedTime;
                    if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                      root2.lastPingedTime = expirationTime;
                      prepareFreshStack(root2, expirationTime);
                      break;
                    }
                  }
                  var _nextTime = getNextRootExpirationTimeToWorkOn(root2);
                  if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                    break;
                  }
                  if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                    root2.lastPingedTime = _lastSuspendedTime;
                    break;
                  }
                  var _msUntilTimeout;
                  if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                    _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now2();
                  } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                    _msUntilTimeout = 0;
                  } else {
                    var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                    var currentTimeMs = now2();
                    var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                    var timeElapsed = currentTimeMs - eventTimeMs;
                    if (timeElapsed < 0) {
                      timeElapsed = 0;
                    }
                    _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                    if (timeUntilExpirationMs < _msUntilTimeout) {
                      _msUntilTimeout = timeUntilExpirationMs;
                    }
                  }
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                  var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                  if (_msUntilTimeout2 > 10) {
                    markRootSuspendedAtTime(root2, expirationTime);
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout2);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function performSyncWorkOnRoot(root2) {
            var lastExpiredTime = root2.lastExpiredTime;
            var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
              prepareFreshStack(root2, expirationTime);
              startWorkOnPendingInteractions(root2, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher();
              var prevInteractions = pushInteractions(root2);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopSync();
                  break;
                } catch (thrownValue) {
                  handleError(root2, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root2, expirationTime);
                markRootSuspendedAtTime(root2, expirationTime);
                ensureRootIsScheduled(root2);
                throw fatalError;
              }
              if (workInProgress !== null) {
                {
                  {
                    throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
              } else {
                stopFinishedWorkLoopTimer();
                root2.finishedWork = root2.current.alternate;
                root2.finishedExpirationTime = expirationTime;
                finishSyncRender(root2);
              }
              ensureRootIsScheduled(root2);
            }
            return null;
          }
          function finishSyncRender(root2) {
            workInProgressRoot = null;
            commitRoot(root2);
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function syncUpdates(fn, a, b2, c) {
            return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b2, c));
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(expirationTime, root2) {
                markRootExpiredAtTime(root2, expirationTime);
                ensureRootIsScheduled(root2);
              });
              flushSyncCallbackQueue();
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b2, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            try {
              return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b2, c, d));
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                {
                  throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
                }
              }
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
            } finally {
              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();
            }
          }
          function prepareFreshStack(root2, expirationTime) {
            root2.finishedWork = null;
            root2.finishedExpirationTime = NoWork;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout2(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            renderExpirationTime$1 = expirationTime;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootLatestProcessedExpirationTime = Sync;
            workInProgressRootLatestSuspenseTimeout = Sync;
            workInProgressRootCanSuspendUsingConfig = null;
            workInProgressRootNextUnprocessedUpdateTime = NoWork;
            workInProgressRootHasPendingPing = false;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                if (workInProgress === null || workInProgress.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return null;
                }
                if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
                }
                throwException(root2, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
                workInProgress = completeUnitOfWork(workInProgress);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher(root2) {
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
            if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
              workInProgressRootLatestProcessedExpirationTime = expirationTime;
            }
            if (suspenseConfig !== null) {
              if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
                workInProgressRootLatestSuspenseTimeout = expirationTime;
                workInProgressRootCanSuspendUsingConfig = suspenseConfig;
              }
            }
          }
          function markUnprocessedUpdateTime(expirationTime) {
            if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
              workInProgressRootNextUnprocessedUpdateTime = expirationTime;
            }
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
              markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
              markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function inferTimeFromExpirationTime(expirationTime) {
            var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
            return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
          }
          function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
            var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
            return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              workInProgress = performUnitOfWork(workInProgress);
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              workInProgress = performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            startWorkTimer(unitOfWork);
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              next2 = completeUnitOfWork(unitOfWork);
            }
            ReactCurrentOwner$2.current = null;
            return next2;
          }
          function completeUnitOfWork(unitOfWork) {
            workInProgress = unitOfWork;
            do {
              var current2 = workInProgress.alternate;
              var returnFiber = workInProgress.return;
              if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                setCurrentFiber(workInProgress);
                var next2 = void 0;
                if ((workInProgress.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, workInProgress, renderExpirationTime$1);
                } else {
                  startProfilerTimer(workInProgress);
                  next2 = completeWork(current2, workInProgress, renderExpirationTime$1);
                  stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                }
                stopWorkTimer(workInProgress);
                resetCurrentFiber();
                resetChildExpirationTime(workInProgress);
                if (next2 !== null) {
                  return next2;
                }
                if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = workInProgress.firstEffect;
                  }
                  if (workInProgress.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                    }
                    returnFiber.lastEffect = workInProgress.lastEffect;
                  }
                  var effectTag = workInProgress.effectTag;
                  if (effectTag > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = workInProgress;
                    } else {
                      returnFiber.firstEffect = workInProgress;
                    }
                    returnFiber.lastEffect = workInProgress;
                  }
                }
              } else {
                var _next = unwindWork(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                  var actualDuration = workInProgress.actualDuration;
                  var child = workInProgress.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  workInProgress.actualDuration = actualDuration;
                }
                if (_next !== null) {
                  stopFailedWorkTimer(workInProgress);
                  _next.effectTag &= HostEffectMask;
                  return _next;
                }
                stopWorkTimer(workInProgress);
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.effectTag |= Incomplete;
                }
              }
              var siblingFiber = workInProgress.sibling;
              if (siblingFiber !== null) {
                return siblingFiber;
              }
              workInProgress = returnFiber;
            } while (workInProgress !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
            return null;
          }
          function getRemainingExpirationTime(fiber) {
            var updateExpirationTime = fiber.expirationTime;
            var childExpirationTime = fiber.childExpirationTime;
            return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
          }
          function resetChildExpirationTime(completedWork) {
            if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
              return;
            }
            var newChildExpirationTime = NoWork;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                var childUpdateExpirationTime = child.expirationTime;
                var childChildExpirationTime = child.childExpirationTime;
                if (childUpdateExpirationTime > newChildExpirationTime) {
                  newChildExpirationTime = childUpdateExpirationTime;
                }
                if (childChildExpirationTime > newChildExpirationTime) {
                  newChildExpirationTime = childChildExpirationTime;
                }
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                var _childUpdateExpirationTime = _child.expirationTime;
                var _childChildExpirationTime = _child.childExpirationTime;
                if (_childUpdateExpirationTime > newChildExpirationTime) {
                  newChildExpirationTime = _childUpdateExpirationTime;
                }
                if (_childChildExpirationTime > newChildExpirationTime) {
                  newChildExpirationTime = _childChildExpirationTime;
                }
                _child = _child.sibling;
              }
            }
            completedWork.childExpirationTime = newChildExpirationTime;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var expirationTime = root2.finishedExpirationTime;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedExpirationTime = NoWork;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            root2.callbackExpirationTime = NoWork;
            root2.callbackPriority = NoPriority;
            root2.nextKnownPendingLevel = NoWork;
            startCommitTimer();
            var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
            markRootFinishedAtTime(root2, expirationTime, remainingExpirationTimeBeforeCommit);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              renderExpirationTime$1 = NoWork;
            }
            var firstEffect;
            if (finishedWork.effectTag > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              startCommitSnapshotEffectsTimer();
              prepareForCommit(root2.containerInfo);
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              stopCommitSnapshotEffectsTimer();
              {
                recordCommitTime();
              }
              startCommitHostEffectsTimer();
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              stopCommitHostEffectsTimer();
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              startCommitLifeCyclesTimer();
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, expirationTime);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              stopCommitLifeCyclesTimer();
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              startCommitSnapshotEffectsTimer();
              stopCommitSnapshotEffectsTimer();
              {
                recordCommitTime();
              }
              startCommitHostEffectsTimer();
              stopCommitHostEffectsTimer();
              startCommitLifeCyclesTimer();
              stopCommitLifeCyclesTimer();
            }
            stopCommitTimer();
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsExpirationTime = expirationTime;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                nextEffect = nextNextEffect;
              }
            }
            var remainingExpirationTime = root2.firstPendingTime;
            if (remainingExpirationTime !== NoWork) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingExpirationTime);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, expirationTime);
              }
            }
            if (remainingExpirationTime === Sync) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, expirationTime);
            ensureRootIsScheduled(root2);
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var effectTag = nextEffect.effectTag;
              if ((effectTag & Snapshot) !== NoEffect) {
                setCurrentFiber(nextEffect);
                recordEffect();
                var current2 = nextEffect.alternate;
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((effectTag & Passive) !== NoEffect) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var effectTag = nextEffect.effectTag;
              if (effectTag & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (effectTag & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
              switch (primaryEffectTag) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.effectTag &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.effectTag &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect, renderPriorityLevel);
                  break;
                }
              }
              recordEffect();
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedExpirationTime) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var effectTag = nextEffect.effectTag;
              if (effectTag & (Update | Callback)) {
                recordEffect();
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              if (effectTag & Ref) {
                recordEffect();
                commitAttachRef(nextEffect);
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority;
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var expirationTime = pendingPassiveEffectsExpirationTime;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsExpirationTime = NoWork;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            {
              var _effect2 = root2.current.firstEffect;
              while (_effect2 !== null) {
                {
                  setCurrentFiber(_effect2);
                  invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
                  if (hasCaughtError()) {
                    if (!(_effect2 !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error5 = clearCaughtError();
                    captureCommitPhaseError(_effect2, _error5);
                  }
                  resetCurrentFiber();
                }
                var nextNextEffect = _effect2.nextEffect;
                _effect2.nextEffect = null;
                _effect2 = nextNextEffect;
              }
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, expirationTime);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
            enqueueUpdate(rootFiber, update);
            var root2 = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
            if (root2 !== null) {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, Sync);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, Sync);
                  enqueueUpdate(fiber, update);
                  var root2 = markUpdateTimeFromFiberToRoot(fiber, Sync);
                  if (root2 !== null) {
                    ensureRootIsScheduled(root2);
                    schedulePendingInteractions(root2, Sync);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, thenable, suspendedTime) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(thenable);
            }
            if (workInProgressRoot === root2 && renderExpirationTime$1 === suspendedTime) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, renderExpirationTime$1);
              } else {
                workInProgressRootHasPendingPing = true;
              }
              return;
            }
            if (!isRootSuspendedAtTime(root2, suspendedTime)) {
              return;
            }
            var lastPingedTime = root2.lastPingedTime;
            if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
              return;
            }
            root2.lastPingedTime = suspendedTime;
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, suspendedTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryTime) {
            if (retryTime === NoWork) {
              var suspenseConfig = null;
              var currentTime = requestCurrentTimeForUpdate();
              retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
            }
            var root2 = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
            if (root2 !== null) {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, retryTime);
            }
          }
          function resolveRetryThenable(boundaryFiber, thenable) {
            var retryTime = NoWork;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(thenable);
            }
            retryTimedOutBoundary(boundaryFiber, retryTime);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
            var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
            if (busyMinDurationMs <= 0) {
              return 0;
            }
            var busyDelayMs = suspenseConfig.busyDelayMs | 0;
            var currentTimeMs = now2();
            var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
            var timeElapsed = currentTimeMs - eventTimeMs;
            if (timeElapsed <= busyDelayMs) {
              return 0;
            }
            var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
            return msUntilTimeout;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function stopFinishedWorkLoopTimer() {
            var didCompleteRoot = true;
            stopWorkLoopTimer(interruptedBy, didCompleteRoot);
            interruptedBy = null;
          }
          function stopInterruptedWorkLoopTimer() {
            var didCompleteRoot = false;
            stopWorkLoopTimer(interruptedBy, didCompleteRoot);
            interruptedBy = null;
          }
          function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
            if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
              interruptedBy = fiberThatReceivedUpdate;
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
              }
              error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, expirationTime) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, expirationTime);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, expirationTime);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://fb.me/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, expirationTime) {
            return expirationTime * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(expirationTime) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [expirationTime];
            } else {
              spawnedWorkDuringRender.push(expirationTime);
            }
          }
          function scheduleInteractions(root2, expirationTime, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(expirationTime);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(expirationTime, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, expirationTime);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, expirationTime) {
            scheduleInteractions(root2, expirationTime, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, expirationTime) {
            var interactions = new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
              if (scheduledExpirationTime >= expirationTime) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, expirationTime);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedExpirationTime) {
            var earliestRemainingTimeAfterCommit = root2.firstPendingTime;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedExpirationTime);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
                if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                  pendingInteractionMap.delete(scheduledExpirationTime);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          var onScheduleFiberRoot = null;
          var onCommitFiberRoot = null;
          var onCommitFiberUnmount = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
              }
              return true;
            }
            try {
              var rendererID = hook.inject(internals);
              if (true) {
                if (typeof hook.onScheduleFiberRoot === "function") {
                  onScheduleFiberRoot = function(root2, children) {
                    try {
                      hook.onScheduleFiberRoot(rendererID, root2, children);
                    } catch (err2) {
                      if (!hasLoggedError) {
                        hasLoggedError = true;
                        error("React instrumentation encountered an error: %s", err2);
                      }
                    }
                  };
                }
              }
              onCommitFiberRoot = function(root2, expirationTime) {
                try {
                  var didError = (root2.current.effectTag & DidCapture) === DidCapture;
                  if (enableProfilerTimer) {
                    var currentTime = getCurrentTime();
                    var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                    hook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                  } else {
                    hook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                  }
                } catch (err2) {
                  if (true) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err2);
                    }
                  }
                }
              };
              onCommitFiberUnmount = function(fiber) {
                try {
                  hook.onCommitFiberUnmount(rendererID, fiber);
                } catch (err2) {
                  if (true) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err2);
                    }
                  }
                }
              };
            } catch (err2) {
              {
                error("React instrumentation encountered an error: %s.", err2);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            if (typeof onScheduleFiberRoot === "function") {
              onScheduleFiberRoot(root2, children);
            }
          }
          function onCommitRoot(root2, expirationTime) {
            if (typeof onCommitFiberRoot === "function") {
              onCommitFiberRoot(root2, expirationTime);
            }
          }
          function onCommitUnmount(fiber) {
            if (typeof onCommitFiberUnmount === "function") {
              onCommitFiberUnmount(fiber);
            }
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              var testMap = new Map([[nonExtensibleObject, null]]);
              var testSet = new Set([nonExtensibleObject]);
              testMap.set(0, 0);
              testSet.add(0);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.effectTag = NoEffect;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.expirationTime = NoWork;
            this.childExpirationTime = NoWork;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugIsCurrentlyTiming = false;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type2) {
            return typeof type2 === "function" && !shouldConstruct(type2) && type2.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                {
                  workInProgress2._debugID = current2._debugID;
                }
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.effectTag = NoEffect;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childExpirationTime = current2.childExpirationTime;
            workInProgress2.expirationTime = current2.expirationTime;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              expirationTime: currentDependencies.expirationTime,
              firstContext: currentDependencies.firstContext,
              responders: currentDependencies.responders
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
            workInProgress2.effectTag &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childExpirationTime = NoWork;
              workInProgress2.expirationTime = renderExpirationTime2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childExpirationTime = current2.childExpirationTime;
              workInProgress2.expirationTime = current2.expirationTime;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                expirationTime: currentDependencies.expirationTime,
                firstContext: currentDependencies.firstContext,
                responders: currentDependencies.responders
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode, expirationTime) {
            var fiber;
            var fiberTag = IndeterminateComponent;
            var resolvedType = type2;
            if (typeof type2 === "function") {
              if (shouldConstruct(type2)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type2 === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type2) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
                  case REACT_CONCURRENT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= ConcurrentMode | BlockingMode | StrictMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
                  default: {
                    if (typeof type2 === "object" && type2 !== null) {
                      switch (type2.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info4 = "";
                    {
                      if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                        info4 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info4 += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type2 == null ? type2 : typeof type2) + "." + info4);
                      }
                    }
                  }
                }
            }
            fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type2;
            fiber.type = resolvedType;
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromElement(element, mode, expirationTime) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type2 = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode, expirationTime);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, expirationTime, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
            {
              if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
                error('Profiler must specify an "id" string and "onRender" function as props');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromText(content, mode, expirationTime) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, expirationTime) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.expirationTime = expirationTime;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.effectTag = source.effectTag;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.expirationTime = source.expirationTime;
            target.childExpirationTime = source.childExpirationTime;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            {
              target._debugID = source._debugID;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.current = null;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.pingCache = null;
            this.finishedExpirationTime = NoWork;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoPriority;
            this.firstPendingTime = NoWork;
            this.firstSuspendedTime = NoWork;
            this.lastSuspendedTime = NoWork;
            this.nextKnownPendingLevel = NoWork;
            this.lastPingedTime = NoWork;
            this.lastExpiredTime = NoWork;
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = new Set();
              this.pendingInteractionMap = new Map();
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function isRootSuspendedAtTime(root2, expirationTime) {
            var firstSuspendedTime = root2.firstSuspendedTime;
            var lastSuspendedTime = root2.lastSuspendedTime;
            return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
          }
          function markRootSuspendedAtTime(root2, expirationTime) {
            var firstSuspendedTime = root2.firstSuspendedTime;
            var lastSuspendedTime = root2.lastSuspendedTime;
            if (firstSuspendedTime < expirationTime) {
              root2.firstSuspendedTime = expirationTime;
            }
            if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
              root2.lastSuspendedTime = expirationTime;
            }
            if (expirationTime <= root2.lastPingedTime) {
              root2.lastPingedTime = NoWork;
            }
            if (expirationTime <= root2.lastExpiredTime) {
              root2.lastExpiredTime = NoWork;
            }
          }
          function markRootUpdatedAtTime(root2, expirationTime) {
            var firstPendingTime = root2.firstPendingTime;
            if (expirationTime > firstPendingTime) {
              root2.firstPendingTime = expirationTime;
            }
            var firstSuspendedTime = root2.firstSuspendedTime;
            if (firstSuspendedTime !== NoWork) {
              if (expirationTime >= firstSuspendedTime) {
                root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
              } else if (expirationTime >= root2.lastSuspendedTime) {
                root2.lastSuspendedTime = expirationTime + 1;
              }
              if (expirationTime > root2.nextKnownPendingLevel) {
                root2.nextKnownPendingLevel = expirationTime;
              }
            }
          }
          function markRootFinishedAtTime(root2, finishedExpirationTime, remainingExpirationTime) {
            root2.firstPendingTime = remainingExpirationTime;
            if (finishedExpirationTime <= root2.lastSuspendedTime) {
              root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
            } else if (finishedExpirationTime <= root2.firstSuspendedTime) {
              root2.firstSuspendedTime = finishedExpirationTime - 1;
            }
            if (finishedExpirationTime <= root2.lastPingedTime) {
              root2.lastPingedTime = NoWork;
            }
            if (finishedExpirationTime <= root2.lastExpiredTime) {
              root2.lastExpiredTime = NoWork;
            }
          }
          function markRootExpiredAtTime(root2, expirationTime) {
            var lastExpiredTime = root2.lastExpiredTime;
            if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
              root2.lastExpiredTime = expirationTime;
            }
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  if (fiber.mode & StrictMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var currentTime = requestCurrentTimeForUpdate();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(expirationTime, suspenseConfig);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleWork(current$1, expirationTime);
            return expirationTime;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryTimeImpl(fiber, retryTime) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (suspenseState.retryTime < retryTime) {
                suspenseState.retryTime = retryTime;
              }
            }
          }
          function markRetryTimeIfNotHydrated(fiber, retryTime) {
            markRetryTimeImpl(fiber, retryTime);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryTimeImpl(alternate, retryTime);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
            scheduleWork(fiber, expTime);
            markRetryTimeIfNotHydrated(fiber, expTime);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            scheduleWork(fiber, ContinuousHydration);
            markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var currentTime = requestCurrentTimeForUpdate();
            var expTime = computeExpirationForFiber(currentTime, fiber, null);
            scheduleWork(fiber, expTime);
            markRetryTimeIfNotHydrated(fiber, expTime);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideProps = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithSetImpl = function(obj, path, idx, value) {
              if (idx >= path.length) {
                return value;
              }
              var key = path[idx];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            overrideHookState = function(fiber, id, path, value) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              if (currentHook2 !== null) {
                var newState = copyWithSet(currentHook2.memoizedState, path, value);
                currentHook2.memoizedState = newState;
                currentHook2.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleWork(fiber, Sync);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleWork(fiber, Sync);
            };
            scheduleUpdate = function(fiber) {
              scheduleWork(fiber, Sync);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals(_assign({}, devToolsConfig, {
              overrideHookState,
              overrideProps,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber: function(fiber) {
                var hostFiber = findCurrentHostFiber(fiber);
                if (hostFiber === null) {
                  return null;
                }
                return hostFiber.stateNode;
              },
              findFiberByHostInstance: function(instance) {
                if (!findFiberByHostInstance) {
                  return null;
                }
                return findFiberByHostInstance(instance);
              },
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: function() {
                return current;
              }
            }));
          }
          var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
          function ReactDOMRoot(container, options) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
          }
          function ReactDOMBlockingRoot(container, tag, options) {
            this._internalRoot = createRootImpl(container, tag, options);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options) {
            var hydrate2 = options != null && options.hydrate === true;
            var hydrationCallbacks = options != null && options.hydrationOptions || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            if (hydrate2 && tag !== LegacyRoot) {
              var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
              eagerlyTrapReplayableEvents(container, doc);
            }
            return root2;
          }
          function createLegacyRoot(container, options) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var ReactVersion = "16.14.0";
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/stats.js/build/stats.min.js
  var require_stats_min = __commonJS({
    "node_modules/stats.js/build/stats.min.js"(exports, module) {
      (function(f, e) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = e() : typeof define === "function" && define.amd ? define(e) : f.Stats = e();
      })(exports, function() {
        var f = function() {
          function e(a2) {
            c.appendChild(a2.dom);
            return a2;
          }
          function u(a2) {
            for (var d = 0; d < c.children.length; d++)
              c.children[d].style.display = d === a2 ? "block" : "none";
            l = a2;
          }
          var l = 0, c = document.createElement("div");
          c.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
          c.addEventListener("click", function(a2) {
            a2.preventDefault();
            u(++l % c.children.length);
          }, false);
          var k = (performance || Date).now(), g = k, a = 0, r = e(new f.Panel("FPS", "#0ff", "#002")), h = e(new f.Panel("MS", "#0f0", "#020"));
          if (self.performance && self.performance.memory)
            var t = e(new f.Panel("MB", "#f08", "#201"));
          u(0);
          return { REVISION: 16, dom: c, addPanel: e, showPanel: u, begin: function() {
            k = (performance || Date).now();
          }, end: function() {
            a++;
            var c2 = (performance || Date).now();
            h.update(c2 - k, 200);
            if (c2 > g + 1e3 && (r.update(1e3 * a / (c2 - g), 100), g = c2, a = 0, t)) {
              var d = performance.memory;
              t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);
            }
            return c2;
          }, update: function() {
            k = this.end();
          }, domElement: c, setMode: u };
        };
        f.Panel = function(e, f2, l) {
          var c = Infinity, k = 0, g = Math.round, a = g(window.devicePixelRatio || 1), r = 80 * a, h = 48 * a, t = 3 * a, v = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement("canvas");
          q.width = r;
          q.height = h;
          q.style.cssText = "width:80px;height:48px";
          var b2 = q.getContext("2d");
          b2.font = "bold " + 9 * a + "px Helvetica,Arial,sans-serif";
          b2.textBaseline = "top";
          b2.fillStyle = l;
          b2.fillRect(0, 0, r, h);
          b2.fillStyle = f2;
          b2.fillText(e, t, v);
          b2.fillRect(d, m, n, p);
          b2.fillStyle = l;
          b2.globalAlpha = 0.9;
          b2.fillRect(d, m, n, p);
          return { dom: q, update: function(h2, w) {
            c = Math.min(c, h2);
            k = Math.max(k, h2);
            b2.fillStyle = l;
            b2.globalAlpha = 1;
            b2.fillRect(0, 0, r, m);
            b2.fillStyle = f2;
            b2.fillText(g(h2) + " " + e + " (" + g(c) + "-" + g(k) + ")", t, v);
            b2.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);
            b2.fillRect(d + n - a, m, a, p);
            b2.fillStyle = l;
            b2.globalAlpha = 0.9;
            b2.fillRect(d + n - a, m, a, g((1 - h2 / w) * p));
          } };
        };
        return f;
      });
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type2) {
            return typeof type2 === "string" || typeof type2 === "function" || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_CONCURRENT_MODE_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || typeof type2 === "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_RESPONDER_TYPE || type2.$$typeof === REACT_SCOPE_TYPE || type2.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type2 = object.type;
                  switch (type2) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type2;
                    default:
                      var $$typeofType = type2 && type2.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var checkPropTypes = require_checkPropTypes();
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message) {
          this.message = message;
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location3, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err2 = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err2.name = "Invariant Violation";
                throw err2;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location3 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location3 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location3, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location3, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location3, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location3, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location3, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location3, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location3, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location3, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type2 = getPreciseType(value);
              if (type2 === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location3, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location3, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location3, propFullName) {
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              if (checker2(props, propName, componentName, location3, propFullName, ReactPropTypesSecret) == null) {
                return null;
              }
            }
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location3, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location3, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (!checker) {
                continue;
              }
              var error = checker(propValue, key, componentName, location3, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location3, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (!checker) {
                return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key, componentName, location3, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type2 = getPreciseType(value);
          switch (type2) {
            case "array":
            case "object":
              return "an " + type2;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type2;
            default:
              return type2;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/upper-case/upper-case.js
  var require_upper_case = __commonJS({
    "node_modules/upper-case/upper-case.js"(exports, module) {
      var LANGUAGES = {
        tr: {
          regexp: /[\u0069]/g,
          map: {
            "i": "\u0130"
          }
        },
        az: {
          regexp: /[\u0069]/g,
          map: {
            "i": "\u0130"
          }
        },
        lt: {
          regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
          map: {
            "i\u0307": "I",
            "j\u0307": "J",
            "\u012F\u0307": "\u012E",
            "i\u0307\u0300": "\xCC",
            "i\u0307\u0301": "\xCD",
            "i\u0307\u0303": "\u0128"
          }
        }
      };
      module.exports = function(str, locale) {
        var lang = LANGUAGES[locale];
        str = str == null ? "" : String(str);
        if (lang) {
          str = str.replace(lang.regexp, function(m) {
            return lang.map[m];
          });
        }
        return str.toUpperCase();
      };
    }
  });

  // node_modules/lower-case/lower-case.js
  var require_lower_case = __commonJS({
    "node_modules/lower-case/lower-case.js"(exports, module) {
      var LANGUAGES = {
        tr: {
          regexp: /\u0130|\u0049|\u0049\u0307/g,
          map: {
            "\u0130": "i",
            "I": "\u0131",
            "I\u0307": "i"
          }
        },
        az: {
          regexp: /[\u0130]/g,
          map: {
            "\u0130": "i",
            "I": "\u0131",
            "I\u0307": "i"
          }
        },
        lt: {
          regexp: /[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,
          map: {
            "I": "i\u0307",
            "J": "j\u0307",
            "\u012E": "\u012F\u0307",
            "\xCC": "i\u0307\u0300",
            "\xCD": "i\u0307\u0301",
            "\u0128": "i\u0307\u0303"
          }
        }
      };
      module.exports = function(str, locale) {
        var lang = LANGUAGES[locale];
        str = str == null ? "" : String(str);
        if (lang) {
          str = str.replace(lang.regexp, function(m) {
            return lang.map[m];
          });
        }
        return str.toLowerCase();
      };
    }
  });

  // node_modules/no-case/vendor/non-word-regexp.js
  var require_non_word_regexp = __commonJS({
    "node_modules/no-case/vendor/non-word-regexp.js"(exports, module) {
      module.exports = /[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g;
    }
  });

  // node_modules/no-case/vendor/camel-case-regexp.js
  var require_camel_case_regexp = __commonJS({
    "node_modules/no-case/vendor/camel-case-regexp.js"(exports, module) {
      module.exports = /([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g;
    }
  });

  // node_modules/no-case/vendor/camel-case-upper-regexp.js
  var require_camel_case_upper_regexp = __commonJS({
    "node_modules/no-case/vendor/camel-case-upper-regexp.js"(exports, module) {
      module.exports = /([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g;
    }
  });

  // node_modules/no-case/no-case.js
  var require_no_case = __commonJS({
    "node_modules/no-case/no-case.js"(exports, module) {
      var lowerCase = require_lower_case();
      var NON_WORD_REGEXP = require_non_word_regexp();
      var CAMEL_CASE_REGEXP = require_camel_case_regexp();
      var CAMEL_CASE_UPPER_REGEXP = require_camel_case_upper_regexp();
      module.exports = function(str, locale, replacement) {
        if (str == null) {
          return "";
        }
        replacement = typeof replacement !== "string" ? " " : replacement;
        function replace(match, index2, value) {
          if (index2 === 0 || index2 === value.length - match.length) {
            return "";
          }
          return replacement;
        }
        str = String(str).replace(CAMEL_CASE_REGEXP, "$1 $2").replace(CAMEL_CASE_UPPER_REGEXP, "$1 $2").replace(NON_WORD_REGEXP, replace);
        return lowerCase(str, locale);
      };
    }
  });

  // node_modules/camel-case/camel-case.js
  var require_camel_case = __commonJS({
    "node_modules/camel-case/camel-case.js"(exports, module) {
      var upperCase = require_upper_case();
      var noCase = require_no_case();
      module.exports = function(value, locale, mergeNumbers) {
        var result = noCase(value, locale);
        if (!mergeNumbers) {
          result = result.replace(/ (?=\d)/g, "_");
        }
        return result.replace(/ (.)/g, function(m, $1) {
          return upperCase($1, locale);
        });
      };
    }
  });

  // node_modules/react-icons-kit/SvgIcon.js
  var require_SvgIcon = __commonJS({
    "node_modules/react-icons-kit/SvgIcon.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.SvgIcon = void 0;
      var _react = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _camelCase = _interopRequireDefault(require_camel_case());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                if (desc.get || desc.set) {
                  Object.defineProperty(newObj, key, desc);
                } else {
                  newObj[key] = obj[key];
                }
              }
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _extends4() {
        _extends4 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends4.apply(this, arguments);
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          var ownKeys3 = Object.keys(source);
          if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys3 = ownKeys3.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
              return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
          }
          ownKeys3.forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        }
        return target;
      }
      function _defineProperty3(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var walkChildren = function walkChildren2(children) {
        return children.map(function(child, idx) {
          var name = child.name, attribsMap = child.attribs, _child$children = child.children, gchildren = _child$children === void 0 ? null : _child$children;
          var attribs = Object.keys(attribsMap).filter(function(key) {
            return key !== "fill" && key !== "stroke" && attribsMap[key] !== "none";
          }).reduce(function(partial, key) {
            partial[(0, _camelCase.default)(key)] = attribsMap[key];
            return partial;
          }, {});
          var merge2 = {};
          if (attribsMap.fill === "none" && attribsMap.stroke) {
            merge2 = {
              fill: "none",
              stroke: "currentColor"
            };
          }
          return (0, _react.createElement)(name, _objectSpread({
            key: idx
          }, attribs, merge2), gchildren === null ? gchildren : walkChildren2(gchildren));
        });
      };
      var SvgIcon = function SvgIcon2(props) {
        var size2 = props.size;
        var _props$icon = props.icon, children = _props$icon.children, viewBox = _props$icon.viewBox, _props$icon$attribs = _props$icon.attribs, svgAttribs = _props$icon$attribs === void 0 ? {} : _props$icon$attribs;
        var camelCasedAttribs = Object.keys(svgAttribs).reduce(function(partial, key) {
          partial[(0, _camelCase.default)(key)] = svgAttribs[key];
          return partial;
        }, {});
        return _react.default.createElement("svg", _extends4({
          fill: "currentColor",
          style: {
            display: "inline-block",
            verticalAlign: "middle"
          },
          height: size2,
          width: size2,
          viewBox
        }, camelCasedAttribs), props.title ? _react.default.createElement("title", null, props.title) : null, walkChildren(children));
      };
      exports.SvgIcon = SvgIcon;
      SvgIcon.defaultProps = {
        size: 16
      };
      SvgIcon.propTypes = {
        icon: _propTypes.default.object.isRequired,
        size: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        title: _propTypes.default.string
      };
      var _default = SvgIcon;
      exports.default = _default;
    }
  });

  // node_modules/react-icons-kit/Icon.js
  var require_Icon = __commonJS({
    "node_modules/react-icons-kit/Icon.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.withBaseIcon = exports.Icon = void 0;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _SvgIcon = _interopRequireDefault(require_SvgIcon());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _extends4() {
        _extends4 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends4.apply(this, arguments);
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          var ownKeys3 = Object.keys(source);
          if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys3 = ownKeys3.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
              return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
          }
          ownKeys3.forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        }
        return target;
      }
      function _defineProperty3(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var Icon5 = function Icon6(props) {
        var style = props.style, className = props.className, icon = props.icon, size2 = props.size, tag = props.tag, others = _objectWithoutProperties(props, ["style", "className", "icon", "size", "tag"]);
        var Tag = tag;
        return _react.default.createElement(Tag, _extends4({}, others, {
          style: _objectSpread({
            display: "inline-block"
          }, style),
          className
        }), _react.default.createElement(_SvgIcon.default, {
          size: props.size,
          icon: props.icon,
          title: props.title
        }));
      };
      exports.Icon = Icon5;
      var withBaseIcon = function withBaseIcon2(defaultProps) {
        return function(props) {
          var propsToUse = _objectSpread({}, defaultProps);
          return _react.default.createElement(Icon5, _extends4({}, propsToUse, props));
        };
      };
      exports.withBaseIcon = withBaseIcon;
      Icon5.defaultProps = {
        size: 16,
        fill: "currentColor",
        tag: "i"
      };
      Icon5.propTypes = {
        icon: _propTypes.default.object.isRequired,
        size: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        style: _propTypes.default.object,
        tag: _propTypes.default.oneOf(["i", "span", "div"]),
        className: _propTypes.default.string
      };
      var _default = Icon5;
      exports.default = _default;
    }
  });

  // node_modules/react-icons-kit/horizontalCenter.js
  var require_horizontalCenter = __commonJS({
    "node_modules/react-icons-kit/horizontalCenter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.horizontalCenter = void 0;
      var _react = _interopRequireWildcard(require_react());
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                if (desc.get || desc.set) {
                  Object.defineProperty(newObj, key, desc);
                } else {
                  newObj[key] = obj[key];
                }
              }
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _defineProperty3(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var horizontalCenter = function horizontalCenter2(Component) {
        var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$rAlign = _ref.rAlign, rAlign = _ref$rAlign === void 0 ? false : _ref$rAlign, _ref$space = _ref.space, space = _ref$space === void 0 ? 4 : _ref$space;
        return function(props) {
          return _react.default.createElement(Component, props, _react.default.createElement("div", {
            style: {
              display: "inline-flex",
              justifyContent: "center",
              "alignItems": "center"
            }
          }, _react.Children.toArray(props.children).map(function(child, idx) {
            var spacerField = rAlign ? "paddingLeft" : "paddingRight";
            return _react.default.createElement("div", {
              key: idx,
              style: _defineProperty3({
                display: "inline-block"
              }, spacerField, space)
            }, child);
          })));
        };
      };
      exports.horizontalCenter = horizontalCenter;
      var _default = horizontalCenter;
      exports.default = _default;
    }
  });

  // node_modules/react-icons-kit/index.js
  var require_react_icons_kit = __commonJS({
    "node_modules/react-icons-kit/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "Icon", {
        enumerable: true,
        get: function get() {
          return _Icon.Icon;
        }
      });
      Object.defineProperty(exports, "withBaseIcon", {
        enumerable: true,
        get: function get() {
          return _Icon.withBaseIcon;
        }
      });
      Object.defineProperty(exports, "horizontalCenter", {
        enumerable: true,
        get: function get() {
          return _horizontalCenter.horizontalCenter;
        }
      });
      exports.default = void 0;
      var _Icon = require_Icon();
      var _horizontalCenter = require_horizontalCenter();
      var _default = _Icon.Icon;
      exports.default = _default;
    }
  });

  // node_modules/react-icons-kit/icomoon/pencil.js
  var require_pencil = __commonJS({
    "node_modules/react-icons-kit/icomoon/pencil.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.pencil = void 0;
      var pencil2 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M13.5 0c1.381 0 2.5 1.119 2.5 2.5 0 0.563-0.186 1.082-0.5 1.5l-1 1-3.5-3.5 1-1c0.418-0.314 0.937-0.5 1.5-0.5zM1 11.5l-1 4.5 4.5-1 9.25-9.25-3.5-3.5-9.25 9.25zM11.181 5.681l-7 7-0.862-0.862 7-7 0.862 0.862z"
          }
        }]
      };
      exports.pencil = pencil2;
    }
  });

  // node_modules/react-icons-kit/icomoon/floppyDisk.js
  var require_floppyDisk = __commonJS({
    "node_modules/react-icons-kit/icomoon/floppyDisk.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.floppyDisk = void 0;
      var floppyDisk2 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M14 0h-14v16h16v-14l-2-2zM8 2h2v4h-2v-4zM14 14h-12v-12h1v5h9v-5h1.172l0.828 0.828v11.172z"
          }
        }]
      };
      exports.floppyDisk = floppyDisk2;
    }
  });

  // node_modules/react-icons-kit/icomoon/eye.js
  var require_eye = __commonJS({
    "node_modules/react-icons-kit/icomoon/eye.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.eye = void 0;
      var eye2 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M8 3c-3.489 0-6.514 2.032-8 5 1.486 2.968 4.511 5 8 5s6.514-2.032 8-5c-1.486-2.968-4.511-5-8-5zM11.945 5.652c0.94 0.6 1.737 1.403 2.335 2.348-0.598 0.946-1.395 1.749-2.335 2.348-1.181 0.753-2.545 1.152-3.944 1.152s-2.763-0.398-3.945-1.152c-0.94-0.6-1.737-1.403-2.335-2.348 0.598-0.946 1.395-1.749 2.335-2.348 0.061-0.039 0.123-0.077 0.185-0.114-0.156 0.427-0.241 0.888-0.241 1.369 0 2.209 1.791 4 4 4s4-1.791 4-4c0-0.481-0.085-0.942-0.241-1.369 0.062 0.037 0.124 0.075 0.185 0.114v0zM8 6.5c0 0.828-0.672 1.5-1.5 1.5s-1.5-0.672-1.5-1.5 0.672-1.5 1.5-1.5 1.5 0.672 1.5 1.5z"
          }
        }]
      };
      exports.eye = eye2;
    }
  });

  // node_modules/react-icons-kit/icomoon/copy.js
  var require_copy = __commonJS({
    "node_modules/react-icons-kit/icomoon/copy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.copy = void 0;
      var copy2 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M10 4v-4h-7l-3 3v9h6v4h10v-12h-6zM3 1.414v1.586h-1.586l1.586-1.586zM1 11v-7h3v-3h5v3l-3 3v4h-5zM9 5.414v1.586h-1.586l1.586-1.586zM15 15h-8v-7h3v-3h5v10z"
          }
        }]
      };
      exports.copy = copy2;
    }
  });

  // node_modules/react-icons-kit/icomoon/magicWand.js
  var require_magicWand = __commonJS({
    "node_modules/react-icons-kit/icomoon/magicWand.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.magicWand = void 0;
      var magicWand2 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M4 3l-2-2h-1v1l2 2zM5 0h1v2h-1zM9 5h2v1h-2zM10 2v-1h-1l-2 2 1 1zM0 5h2v1h-2zM5 9h1v2h-1zM1 9v1h1l2-2-1-1zM15.781 13.781l-9.939-9.939c-0.292-0.292-0.769-0.292-1.061 0l-0.939 0.939c-0.292 0.292-0.292 0.769 0 1.061l9.939 9.939c0.292 0.292 0.769 0.292 1.061 0l0.939-0.939c0.292-0.292 0.292-0.769 0-1.061zM7.5 8.5l-3-3 1-1 3 3-1 1z"
          }
        }]
      };
      exports.magicWand = magicWand2;
    }
  });

  // node_modules/react-icons-kit/icomoon/play2.js
  var require_play2 = __commonJS({
    "node_modules/react-icons-kit/icomoon/play2.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.play2 = void 0;
      var play23 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5zM6 4.5l6 3.5-6 3.5z"
          }
        }]
      };
      exports.play2 = play23;
    }
  });

  // node_modules/react-icons-kit/icomoon/stop.js
  var require_stop = __commonJS({
    "node_modules/react-icons-kit/icomoon/stop.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.stop = void 0;
      var stop3 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5zM5 5h6v6h-6z"
          }
        }]
      };
      exports.stop = stop3;
    }
  });

  // node_modules/react-icons-kit/icomoon/info.js
  var require_info = __commonJS({
    "node_modules/react-icons-kit/icomoon/info.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.info = void 0;
      var info4 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M7 4.75c0-0.412 0.338-0.75 0.75-0.75h0.5c0.412 0 0.75 0.338 0.75 0.75v0.5c0 0.412-0.338 0.75-0.75 0.75h-0.5c-0.412 0-0.75-0.338-0.75-0.75v-0.5z"
          }
        }, {
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M10 12h-4v-1h1v-3h-1v-1h3v4h1z"
          }
        }, {
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5z"
          }
        }]
      };
      exports.info = info4;
    }
  });

  // node_modules/react-icons-kit/icomoon/forward2.js
  var require_forward2 = __commonJS({
    "node_modules/react-icons-kit/icomoon/forward2.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.forward2 = void 0;
      var forward22 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5zM5 5.5l3.5 2.5-3.5 2.5zM9 5.5l3.5 2.5-3.5 2.5z"
          }
        }]
      };
      exports.forward2 = forward22;
    }
  });

  // node_modules/react-icons-kit/icomoon/next.js
  var require_next = __commonJS({
    "node_modules/react-icons-kit/icomoon/next.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.next = void 0;
      var next2 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M8 0c4.418 0 8 3.582 8 8s-3.582 8-8 8-8-3.582-8-8 3.582-8 8-8zM8 14.5c3.59 0 6.5-2.91 6.5-6.5s-2.91-6.5-6.5-6.5-6.5 2.91-6.5 6.5 2.91 6.5 6.5 6.5z"
          }
        }, {
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M9 8l-4-3v6z"
          }
        }, {
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M11 5h-2v6h2v-6z"
          }
        }]
      };
      exports.next = next2;
    }
  });

  // node_modules/react-icons-kit/icomoon/previous.js
  var require_previous = __commonJS({
    "node_modules/react-icons-kit/icomoon/previous.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.previous = void 0;
      var previous2 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5z"
          }
        }, {
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M7 8l4-3v6z"
          }
        }, {
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M5 5h2v6h-2v-6z"
          }
        }]
      };
      exports.previous = previous2;
    }
  });

  // node_modules/react-icons-kit/icomoon/location2.js
  var require_location2 = __commonJS({
    "node_modules/react-icons-kit/icomoon/location2.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.location2 = void 0;
      var location22 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M8 0c-2.761 0-5 2.239-5 5 0 5 5 11 5 11s5-6 5-11c0-2.761-2.239-5-5-5zM8 8.063c-1.691 0-3.063-1.371-3.063-3.063s1.371-3.063 3.063-3.063 3.063 1.371 3.063 3.063-1.371 3.063-3.063 3.063zM6.063 5c0-1.070 0.867-1.938 1.938-1.938s1.938 0.867 1.938 1.938c0 1.070-0.867 1.938-1.938 1.938s-1.938-0.867-1.938-1.938z"
          }
        }]
      };
      exports.location2 = location22;
    }
  });

  // node_modules/react-icons-kit/icomoon/shuffle.js
  var require_shuffle = __commonJS({
    "node_modules/react-icons-kit/icomoon/shuffle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.shuffle = void 0;
      var shuffle2 = {
        "viewBox": "0 0 16 16",
        "children": [{
          "name": "path",
          "attribs": {
            "fill": "#000000",
            "d": "M12 11h-1.586l-2.5-2.5 2.5-2.5h1.586v2.5l3.5-3.5-3.5-3.5v2.5h-2c-0.265 0-0.52 0.105-0.707 0.293l-2.793 2.793-2.793-2.793c-0.188-0.188-0.442-0.293-0.707-0.293h-3v2h2.586l2.5 2.5-2.5 2.5h-2.586v2h3c0.265 0 0.52-0.105 0.707-0.293l2.793-2.793 2.793 2.793c0.188 0.188 0.442 0.293 0.707 0.293h2v2.5l3.5-3.5-3.5-3.5v2.5z"
          }
        }]
      };
      exports.shuffle = shuffle2;
    }
  });

  // node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS({
    "node_modules/jquery/dist/jquery.js"(exports, module) {
      (function(global2, factory) {
        "use strict";
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = global2.document ? factory(global2, true) : function(w) {
            if (!w.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
          };
        } else {
          factory(global2);
        }
      })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
        "use strict";
        var arr = [];
        var getProto = Object.getPrototypeOf;
        var slice = arr.slice;
        var flat = arr.flat ? function(array) {
          return arr.flat.call(array);
        } : function(array) {
          return arr.concat.apply([], array);
        };
        var push2 = arr.push;
        var indexOf = arr.indexOf;
        var class2type = {};
        var toString2 = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var fnToString = hasOwn.toString;
        var ObjectFunctionString = fnToString.call(Object);
        var support = {};
        var isFunction2 = function isFunction3(obj) {
          return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
        };
        var isWindow = function isWindow2(obj) {
          return obj != null && obj === obj.window;
        };
        var document2 = window2.document;
        var preservedScriptAttributes = {
          type: true,
          src: true,
          nonce: true,
          noModule: true
        };
        function DOMEval(code, node, doc) {
          doc = doc || document2;
          var i, val, script = doc.createElement("script");
          script.text = code;
          if (node) {
            for (i in preservedScriptAttributes) {
              val = node[i] || node.getAttribute && node.getAttribute(i);
              if (val) {
                script.setAttribute(i, val);
              }
            }
          }
          doc.head.appendChild(script).parentNode.removeChild(script);
        }
        function toType(obj) {
          if (obj == null) {
            return obj + "";
          }
          return typeof obj === "object" || typeof obj === "function" ? class2type[toString2.call(obj)] || "object" : typeof obj;
        }
        var version = "3.6.0", jQuery = function(selector, context) {
          return new jQuery.fn.init(selector, context);
        };
        jQuery.fn = jQuery.prototype = {
          jquery: version,
          constructor: jQuery,
          length: 0,
          toArray: function() {
            return slice.call(this);
          },
          get: function(num) {
            if (num == null) {
              return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
          },
          pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
          },
          each: function(callback) {
            return jQuery.each(this, callback);
          },
          map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
              return callback.call(elem, i, elem);
            }));
          },
          slice: function() {
            return this.pushStack(slice.apply(this, arguments));
          },
          first: function() {
            return this.eq(0);
          },
          last: function() {
            return this.eq(-1);
          },
          even: function() {
            return this.pushStack(jQuery.grep(this, function(_elem, i) {
              return (i + 1) % 2;
            }));
          },
          odd: function() {
            return this.pushStack(jQuery.grep(this, function(_elem, i) {
              return i % 2;
            }));
          },
          eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
          },
          end: function() {
            return this.prevObject || this.constructor();
          },
          push: push2,
          sort: arr.sort,
          splice: arr.splice
        };
        jQuery.extend = jQuery.fn.extend = function() {
          var options, name, src, copy2, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
          }
          if (typeof target !== "object" && !isFunction2(target)) {
            target = {};
          }
          if (i === length) {
            target = this;
            i--;
          }
          for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
              for (name in options) {
                copy2 = options[name];
                if (name === "__proto__" || target === copy2) {
                  continue;
                }
                if (deep && copy2 && (jQuery.isPlainObject(copy2) || (copyIsArray = Array.isArray(copy2)))) {
                  src = target[name];
                  if (copyIsArray && !Array.isArray(src)) {
                    clone = [];
                  } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                    clone = {};
                  } else {
                    clone = src;
                  }
                  copyIsArray = false;
                  target[name] = jQuery.extend(deep, clone, copy2);
                } else if (copy2 !== void 0) {
                  target[name] = copy2;
                }
              }
            }
          }
          return target;
        };
        jQuery.extend({
          expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
          isReady: true,
          error: function(msg) {
            throw new Error(msg);
          },
          noop: function() {
          },
          isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString2.call(obj) !== "[object Object]") {
              return false;
            }
            proto = getProto(obj);
            if (!proto) {
              return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
          },
          isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          globalEval: function(code, options, doc) {
            DOMEval(code, { nonce: options && options.nonce }, doc);
          },
          each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
              length = obj.length;
              for (; i < length; i++) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            }
            return obj;
          },
          makeArray: function(arr2, results) {
            var ret = results || [];
            if (arr2 != null) {
              if (isArrayLike(Object(arr2))) {
                jQuery.merge(ret, typeof arr2 === "string" ? [arr2] : arr2);
              } else {
                push2.call(ret, arr2);
              }
            }
            return ret;
          },
          inArray: function(elem, arr2, i) {
            return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
          },
          merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
              first[i++] = second[j];
            }
            first.length = i;
            return first;
          },
          grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
              callbackInverse = !callback(elems[i], i);
              if (callbackInverse !== callbackExpect) {
                matches.push(elems[i]);
              }
            }
            return matches;
          },
          map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
              length = elems.length;
              for (; i < length; i++) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            } else {
              for (i in elems) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            }
            return flat(ret);
          },
          guid: 1,
          support
        });
        if (typeof Symbol === "function") {
          jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
        }
        jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(_i, name) {
          class2type["[object " + name + "]"] = name.toLowerCase();
        });
        function isArrayLike(obj) {
          var length = !!obj && "length" in obj && obj.length, type2 = toType(obj);
          if (isFunction2(obj) || isWindow(obj)) {
            return false;
          }
          return type2 === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
        }
        var Sizzle = function(window3) {
          var i, support2, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document3, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window3.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b2) {
            if (a === b2) {
              hasDuplicate = true;
            }
            return 0;
          }, hasOwn2 = {}.hasOwnProperty, arr2 = [], pop2 = arr2.pop, pushNative = arr2.push, push3 = arr2.push, slice2 = arr2.slice, indexOf2 = function(list, elem) {
            var i2 = 0, len = list.length;
            for (; i2 < len; i2++) {
              if (list[i2] === elem) {
                return i2;
              }
            }
            return -1;
          }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim2 = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            "ID": new RegExp("^#(" + identifier + ")"),
            "CLASS": new RegExp("^\\.(" + identifier + ")"),
            "TAG": new RegExp("^(" + identifier + "|[*])"),
            "ATTR": new RegExp("^" + attributes),
            "PSEUDO": new RegExp("^" + pseudos),
            "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            "bool": new RegExp("^(?:" + booleans + ")$", "i"),
            "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
          }, rhtml2 = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
            var high = "0x" + escape.slice(1) - 65536;
            return nonHex ? nonHex : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
          }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
            if (asCodePoint) {
              if (ch === "\0") {
                return "\uFFFD";
              }
              return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
            }
            return "\\" + ch;
          }, unloadHandler = function() {
            setDocument();
          }, inDisabledFieldset = addCombinator(function(elem) {
            return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
          }, { dir: "parentNode", next: "legend" });
          try {
            push3.apply(arr2 = slice2.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr2[preferredDoc.childNodes.length].nodeType;
          } catch (e) {
            push3 = {
              apply: arr2.length ? function(target, els) {
                pushNative.apply(target, slice2.call(els));
              } : function(target, els) {
                var j = target.length, i2 = 0;
                while (target[j++] = els[i2++]) {
                }
                target.length = j - 1;
              }
            };
          }
          function Sizzle2(selector, context, results, seed) {
            var m, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
              return results;
            }
            if (!seed) {
              setDocument(context);
              context = context || document3;
              if (documentIsHTML) {
                if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                  if (m = match[1]) {
                    if (nodeType === 9) {
                      if (elem = context.getElementById(m)) {
                        if (elem.id === m) {
                          results.push(elem);
                          return results;
                        }
                      } else {
                        return results;
                      }
                    } else {
                      if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                        results.push(elem);
                        return results;
                      }
                    }
                  } else if (match[2]) {
                    push3.apply(results, context.getElementsByTagName(selector));
                    return results;
                  } else if ((m = match[3]) && support2.getElementsByClassName && context.getElementsByClassName) {
                    push3.apply(results, context.getElementsByClassName(m));
                    return results;
                  }
                }
                if (support2.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                  newSelector = selector;
                  newContext = context;
                  if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                    newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                    if (newContext !== context || !support2.scope) {
                      if (nid = context.getAttribute("id")) {
                        nid = nid.replace(rcssescape, fcssescape);
                      } else {
                        context.setAttribute("id", nid = expando);
                      }
                    }
                    groups = tokenize(selector);
                    i2 = groups.length;
                    while (i2--) {
                      groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                    }
                    newSelector = groups.join(",");
                  }
                  try {
                    push3.apply(results, newContext.querySelectorAll(newSelector));
                    return results;
                  } catch (qsaError) {
                    nonnativeSelectorCache(selector, true);
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute("id");
                    }
                  }
                }
              }
            }
            return select(selector.replace(rtrim2, "$1"), context, results, seed);
          }
          function createCache() {
            var keys = [];
            function cache(key, value) {
              if (keys.push(key + " ") > Expr.cacheLength) {
                delete cache[keys.shift()];
              }
              return cache[key + " "] = value;
            }
            return cache;
          }
          function markFunction(fn) {
            fn[expando] = true;
            return fn;
          }
          function assert(fn) {
            var el = document3.createElement("fieldset");
            try {
              return !!fn(el);
            } catch (e) {
              return false;
            } finally {
              if (el.parentNode) {
                el.parentNode.removeChild(el);
              }
              el = null;
            }
          }
          function addHandle(attrs, handler) {
            var arr3 = attrs.split("|"), i2 = arr3.length;
            while (i2--) {
              Expr.attrHandle[arr3[i2]] = handler;
            }
          }
          function siblingCheck(a, b2) {
            var cur = b2 && a, diff = cur && a.nodeType === 1 && b2.nodeType === 1 && a.sourceIndex - b2.sourceIndex;
            if (diff) {
              return diff;
            }
            if (cur) {
              while (cur = cur.nextSibling) {
                if (cur === b2) {
                  return -1;
                }
              }
            }
            return a ? 1 : -1;
          }
          function createInputPseudo(type2) {
            return function(elem) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === type2;
            };
          }
          function createButtonPseudo(type2) {
            return function(elem) {
              var name = elem.nodeName.toLowerCase();
              return (name === "input" || name === "button") && elem.type === type2;
            };
          }
          function createDisabledPseudo(disabled) {
            return function(elem) {
              if ("form" in elem) {
                if (elem.parentNode && elem.disabled === false) {
                  if ("label" in elem) {
                    if ("label" in elem.parentNode) {
                      return elem.parentNode.disabled === disabled;
                    } else {
                      return elem.disabled === disabled;
                    }
                  }
                  return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                }
                return elem.disabled === disabled;
              } else if ("label" in elem) {
                return elem.disabled === disabled;
              }
              return false;
            };
          }
          function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
              argument = +argument;
              return markFunction(function(seed, matches2) {
                var j, matchIndexes = fn([], seed.length, argument), i2 = matchIndexes.length;
                while (i2--) {
                  if (seed[j = matchIndexes[i2]]) {
                    seed[j] = !(matches2[j] = seed[j]);
                  }
                }
              });
            });
          }
          function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
          }
          support2 = Sizzle2.support = {};
          isXML = Sizzle2.isXML = function(elem) {
            var namespace = elem && elem.namespaceURI, docElem2 = elem && (elem.ownerDocument || elem).documentElement;
            return !rhtml2.test(namespace || docElem2 && docElem2.nodeName || "HTML");
          };
          setDocument = Sizzle2.setDocument = function(node) {
            var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
              return document3;
            }
            document3 = doc;
            docElem = document3.documentElement;
            documentIsHTML = !isXML(document3);
            if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
              if (subWindow.addEventListener) {
                subWindow.addEventListener("unload", unloadHandler, false);
              } else if (subWindow.attachEvent) {
                subWindow.attachEvent("onunload", unloadHandler);
              }
            }
            support2.scope = assert(function(el) {
              docElem.appendChild(el).appendChild(document3.createElement("div"));
              return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
            });
            support2.attributes = assert(function(el) {
              el.className = "i";
              return !el.getAttribute("className");
            });
            support2.getElementsByTagName = assert(function(el) {
              el.appendChild(document3.createComment(""));
              return !el.getElementsByTagName("*").length;
            });
            support2.getElementsByClassName = rnative.test(document3.getElementsByClassName);
            support2.getById = assert(function(el) {
              docElem.appendChild(el).id = expando;
              return !document3.getElementsByName || !document3.getElementsByName(expando).length;
            });
            if (support2.getById) {
              Expr.filter["ID"] = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  return elem.getAttribute("id") === attrId;
                };
              };
              Expr.find["ID"] = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var elem = context.getElementById(id);
                  return elem ? [elem] : [];
                }
              };
            } else {
              Expr.filter["ID"] = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                  return node2 && node2.value === attrId;
                };
              };
              Expr.find["ID"] = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var node2, i2, elems, elem = context.getElementById(id);
                  if (elem) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                    elems = context.getElementsByName(id);
                    i2 = 0;
                    while (elem = elems[i2++]) {
                      node2 = elem.getAttributeNode("id");
                      if (node2 && node2.value === id) {
                        return [elem];
                      }
                    }
                  }
                  return [];
                }
              };
            }
            Expr.find["TAG"] = support2.getElementsByTagName ? function(tag, context) {
              if (typeof context.getElementsByTagName !== "undefined") {
                return context.getElementsByTagName(tag);
              } else if (support2.qsa) {
                return context.querySelectorAll(tag);
              }
            } : function(tag, context) {
              var elem, tmp = [], i2 = 0, results = context.getElementsByTagName(tag);
              if (tag === "*") {
                while (elem = results[i2++]) {
                  if (elem.nodeType === 1) {
                    tmp.push(elem);
                  }
                }
                return tmp;
              }
              return results;
            };
            Expr.find["CLASS"] = support2.getElementsByClassName && function(className, context) {
              if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                return context.getElementsByClassName(className);
              }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support2.qsa = rnative.test(document3.querySelectorAll)) {
              assert(function(el) {
                var input;
                docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
                if (el.querySelectorAll("[msallowcapture^='']").length) {
                  rbuggyQSA.push("[*^$]=" + whitespace + `*(?:''|"")`);
                }
                if (!el.querySelectorAll("[selected]").length) {
                  rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                }
                if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                  rbuggyQSA.push("~=");
                }
                input = document3.createElement("input");
                input.setAttribute("name", "");
                el.appendChild(input);
                if (!el.querySelectorAll("[name='']").length) {
                  rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`);
                }
                if (!el.querySelectorAll(":checked").length) {
                  rbuggyQSA.push(":checked");
                }
                if (!el.querySelectorAll("a#" + expando + "+*").length) {
                  rbuggyQSA.push(".#.+[+~]");
                }
                el.querySelectorAll("\\\f");
                rbuggyQSA.push("[\\r\\n\\f]");
              });
              assert(function(el) {
                el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                var input = document3.createElement("input");
                input.setAttribute("type", "hidden");
                el.appendChild(input).setAttribute("name", "D");
                if (el.querySelectorAll("[name=d]").length) {
                  rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                }
                if (el.querySelectorAll(":enabled").length !== 2) {
                  rbuggyQSA.push(":enabled", ":disabled");
                }
                docElem.appendChild(el).disabled = true;
                if (el.querySelectorAll(":disabled").length !== 2) {
                  rbuggyQSA.push(":enabled", ":disabled");
                }
                el.querySelectorAll("*,:x");
                rbuggyQSA.push(",.*:");
              });
            }
            if (support2.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
              assert(function(el) {
                support2.disconnectedMatch = matches.call(el, "*");
                matches.call(el, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
              });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b2) {
              var adown = a.nodeType === 9 ? a.documentElement : a, bup = b2 && b2.parentNode;
              return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b2) {
              if (b2) {
                while (b2 = b2.parentNode) {
                  if (b2 === a) {
                    return true;
                  }
                }
              }
              return false;
            };
            sortOrder = hasCompare ? function(a, b2) {
              if (a === b2) {
                hasDuplicate = true;
                return 0;
              }
              var compare = !a.compareDocumentPosition - !b2.compareDocumentPosition;
              if (compare) {
                return compare;
              }
              compare = (a.ownerDocument || a) == (b2.ownerDocument || b2) ? a.compareDocumentPosition(b2) : 1;
              if (compare & 1 || !support2.sortDetached && b2.compareDocumentPosition(a) === compare) {
                if (a == document3 || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
                  return -1;
                }
                if (b2 == document3 || b2.ownerDocument == preferredDoc && contains(preferredDoc, b2)) {
                  return 1;
                }
                return sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b2) : 0;
              }
              return compare & 4 ? -1 : 1;
            } : function(a, b2) {
              if (a === b2) {
                hasDuplicate = true;
                return 0;
              }
              var cur, i2 = 0, aup = a.parentNode, bup = b2.parentNode, ap = [a], bp = [b2];
              if (!aup || !bup) {
                return a == document3 ? -1 : b2 == document3 ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b2) : 0;
              } else if (aup === bup) {
                return siblingCheck(a, b2);
              }
              cur = a;
              while (cur = cur.parentNode) {
                ap.unshift(cur);
              }
              cur = b2;
              while (cur = cur.parentNode) {
                bp.unshift(cur);
              }
              while (ap[i2] === bp[i2]) {
                i2++;
              }
              return i2 ? siblingCheck(ap[i2], bp[i2]) : ap[i2] == preferredDoc ? -1 : bp[i2] == preferredDoc ? 1 : 0;
            };
            return document3;
          };
          Sizzle2.matches = function(expr, elements) {
            return Sizzle2(expr, null, null, elements);
          };
          Sizzle2.matchesSelector = function(elem, expr) {
            setDocument(elem);
            if (support2.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
              try {
                var ret = matches.call(elem, expr);
                if (ret || support2.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                  return ret;
                }
              } catch (e) {
                nonnativeSelectorCache(expr, true);
              }
            }
            return Sizzle2(expr, document3, null, [elem]).length > 0;
          };
          Sizzle2.contains = function(context, elem) {
            if ((context.ownerDocument || context) != document3) {
              setDocument(context);
            }
            return contains(context, elem);
          };
          Sizzle2.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) != document3) {
              setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn2.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
            return val !== void 0 ? val : support2.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
          };
          Sizzle2.escape = function(sel) {
            return (sel + "").replace(rcssescape, fcssescape);
          };
          Sizzle2.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
          };
          Sizzle2.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i2 = 0;
            hasDuplicate = !support2.detectDuplicates;
            sortInput = !support2.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
              while (elem = results[i2++]) {
                if (elem === results[i2]) {
                  j = duplicates.push(i2);
                }
              }
              while (j--) {
                results.splice(duplicates[j], 1);
              }
            }
            sortInput = null;
            return results;
          };
          getText = Sizzle2.getText = function(elem) {
            var node, ret = "", i2 = 0, nodeType = elem.nodeType;
            if (!nodeType) {
              while (node = elem[i2++]) {
                ret += getText(node);
              }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
              if (typeof elem.textContent === "string") {
                return elem.textContent;
              } else {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  ret += getText(elem);
                }
              }
            } else if (nodeType === 3 || nodeType === 4) {
              return elem.nodeValue;
            }
            return ret;
          };
          Expr = Sizzle2.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
              ">": { dir: "parentNode", first: true },
              " ": { dir: "parentNode" },
              "+": { dir: "previousSibling", first: true },
              "~": { dir: "previousSibling" }
            },
            preFilter: {
              "ATTR": function(match) {
                match[1] = match[1].replace(runescape, funescape);
                match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                if (match[2] === "~=") {
                  match[3] = " " + match[3] + " ";
                }
                return match.slice(0, 4);
              },
              "CHILD": function(match) {
                match[1] = match[1].toLowerCase();
                if (match[1].slice(0, 3) === "nth") {
                  if (!match[3]) {
                    Sizzle2.error(match[0]);
                  }
                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                  match[5] = +(match[7] + match[8] || match[3] === "odd");
                } else if (match[3]) {
                  Sizzle2.error(match[0]);
                }
                return match;
              },
              "PSEUDO": function(match) {
                var excess, unquoted = !match[6] && match[2];
                if (matchExpr["CHILD"].test(match[0])) {
                  return null;
                }
                if (match[3]) {
                  match[2] = match[4] || match[5] || "";
                } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                  match[0] = match[0].slice(0, excess);
                  match[2] = unquoted.slice(0, excess);
                }
                return match.slice(0, 3);
              }
            },
            filter: {
              "TAG": function(nodeNameSelector) {
                var nodeName2 = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === "*" ? function() {
                  return true;
                } : function(elem) {
                  return elem.nodeName && elem.nodeName.toLowerCase() === nodeName2;
                };
              },
              "CLASS": function(className) {
                var pattern = classCache[className + " "];
                return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                  return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                });
              },
              "ATTR": function(name, operator, check) {
                return function(elem) {
                  var result = Sizzle2.attr(elem, name);
                  if (result == null) {
                    return operator === "!=";
                  }
                  if (!operator) {
                    return true;
                  }
                  result += "";
                  return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                };
              },
              "CHILD": function(type2, what, _argument, first, last) {
                var simple = type2.slice(0, 3) !== "nth", forward = type2.slice(-4) !== "last", ofType = what === "of-type";
                return first === 1 && last === 0 ? function(elem) {
                  return !!elem.parentNode;
                } : function(elem, _context, xml) {
                  var cache, uniqueCache, outerCache, node, nodeIndex, start, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                  if (parent) {
                    if (simple) {
                      while (dir2) {
                        node = elem;
                        while (node = node[dir2]) {
                          if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                            return false;
                          }
                        }
                        start = dir2 = type2 === "only" && !start && "nextSibling";
                      }
                      return true;
                    }
                    start = [forward ? parent.firstChild : parent.lastChild];
                    if (forward && useCache) {
                      node = parent;
                      outerCache = node[expando] || (node[expando] = {});
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type2] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];
                      while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          uniqueCache[type2] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      if (useCache) {
                        node = elem;
                        outerCache = node[expando] || (node[expando] = {});
                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        cache = uniqueCache[type2] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }
                      if (diff === false) {
                        while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                          if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                            if (useCache) {
                              outerCache = node[expando] || (node[expando] = {});
                              uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                              uniqueCache[type2] = [dirruns, diff];
                            }
                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    diff -= last;
                    return diff === first || diff % first === 0 && diff / first >= 0;
                  }
                };
              },
              "PSEUDO": function(pseudo, argument) {
                var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle2.error("unsupported pseudo: " + pseudo);
                if (fn[expando]) {
                  return fn(argument);
                }
                if (fn.length > 1) {
                  args = [pseudo, pseudo, "", argument];
                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                    var idx, matched = fn(seed, argument), i2 = matched.length;
                    while (i2--) {
                      idx = indexOf2(seed, matched[i2]);
                      seed[idx] = !(matches2[idx] = matched[i2]);
                    }
                  }) : function(elem) {
                    return fn(elem, 0, args);
                  };
                }
                return fn;
              }
            },
            pseudos: {
              "not": markFunction(function(selector) {
                var input = [], results = [], matcher = compile(selector.replace(rtrim2, "$1"));
                return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                  var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                  while (i2--) {
                    if (elem = unmatched[i2]) {
                      seed[i2] = !(matches2[i2] = elem);
                    }
                  }
                }) : function(elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);
                  input[0] = null;
                  return !results.pop();
                };
              }),
              "has": markFunction(function(selector) {
                return function(elem) {
                  return Sizzle2(selector, elem).length > 0;
                };
              }),
              "contains": markFunction(function(text) {
                text = text.replace(runescape, funescape);
                return function(elem) {
                  return (elem.textContent || getText(elem)).indexOf(text) > -1;
                };
              }),
              "lang": markFunction(function(lang) {
                if (!ridentifier.test(lang || "")) {
                  Sizzle2.error("unsupported lang: " + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function(elem) {
                  var elemLang;
                  do {
                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                      elemLang = elemLang.toLowerCase();
                      return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                    }
                  } while ((elem = elem.parentNode) && elem.nodeType === 1);
                  return false;
                };
              }),
              "target": function(elem) {
                var hash = window3.location && window3.location.hash;
                return hash && hash.slice(1) === elem.id;
              },
              "root": function(elem) {
                return elem === docElem;
              },
              "focus": function(elem) {
                return elem === document3.activeElement && (!document3.hasFocus || document3.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
              },
              "enabled": createDisabledPseudo(false),
              "disabled": createDisabledPseudo(true),
              "checked": function(elem) {
                var nodeName2 = elem.nodeName.toLowerCase();
                return nodeName2 === "input" && !!elem.checked || nodeName2 === "option" && !!elem.selected;
              },
              "selected": function(elem) {
                if (elem.parentNode) {
                  elem.parentNode.selectedIndex;
                }
                return elem.selected === true;
              },
              "empty": function(elem) {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  if (elem.nodeType < 6) {
                    return false;
                  }
                }
                return true;
              },
              "parent": function(elem) {
                return !Expr.pseudos["empty"](elem);
              },
              "header": function(elem) {
                return rheader.test(elem.nodeName);
              },
              "input": function(elem) {
                return rinputs.test(elem.nodeName);
              },
              "button": function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === "button" || name === "button";
              },
              "text": function(elem) {
                var attr;
                return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
              },
              "first": createPositionalPseudo(function() {
                return [0];
              }),
              "last": createPositionalPseudo(function(_matchIndexes, length) {
                return [length - 1];
              }),
              "eq": createPositionalPseudo(function(_matchIndexes, length, argument) {
                return [argument < 0 ? argument + length : argument];
              }),
              "even": createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 0;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              "odd": createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 1;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2 = argument < 0 ? argument + length : argument > length ? length : argument;
                for (; --i2 >= 0; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2 = argument < 0 ? argument + length : argument;
                for (; ++i2 < length; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              })
            }
          };
          Expr.pseudos["nth"] = Expr.pseudos["eq"];
          for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
            Expr.pseudos[i] = createInputPseudo(i);
          }
          for (i in { submit: true, reset: true }) {
            Expr.pseudos[i] = createButtonPseudo(i);
          }
          function setFilters() {
          }
          setFilters.prototype = Expr.filters = Expr.pseudos;
          Expr.setFilters = new setFilters();
          tokenize = Sizzle2.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type2, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
              return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
              if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                  soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push(tokens = []);
              }
              matched = false;
              if (match = rcombinators.exec(soFar)) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: match[0].replace(rtrim2, " ")
                });
                soFar = soFar.slice(matched.length);
              }
              for (type2 in Expr.filter) {
                if ((match = matchExpr[type2].exec(soFar)) && (!preFilters[type2] || (match = preFilters[type2](match)))) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type: type2,
                    matches: match
                  });
                  soFar = soFar.slice(matched.length);
                }
              }
              if (!matched) {
                break;
              }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle2.error(selector) : tokenCache(selector, groups).slice(0);
          };
          function toSelector(tokens) {
            var i2 = 0, len = tokens.length, selector = "";
            for (; i2 < len; i2++) {
              selector += tokens[i2].value;
            }
            return selector;
          }
          function addCombinator(matcher, combinator, base) {
            var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? function(elem, context, xml) {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
              return false;
            } : function(elem, context, xml) {
              var oldCache, uniqueCache, outerCache, newCache = [dirruns, doneName];
              if (xml) {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                    if (skip && skip === elem.nodeName.toLowerCase()) {
                      elem = elem[dir2] || elem;
                    } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                      return newCache[2] = oldCache[2];
                    } else {
                      uniqueCache[key] = newCache;
                      if (newCache[2] = matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            };
          }
          function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
              var i2 = matchers.length;
              while (i2--) {
                if (!matchers[i2](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            } : matchers[0];
          }
          function multipleContexts(selector, contexts, results) {
            var i2 = 0, len = contexts.length;
            for (; i2 < len; i2++) {
              Sizzle2(selector, contexts[i2], results);
            }
            return results;
          }
          function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
            for (; i2 < len; i2++) {
              if (elem = unmatched[i2]) {
                if (!filter || filter(elem, context, xml)) {
                  newUnmatched.push(elem);
                  if (mapped) {
                    map.push(i2);
                  }
                }
              }
            }
            return newUnmatched;
          }
          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
              postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
              postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
              var temp, i2, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
              if (matcher) {
                matcher(matcherIn, matcherOut, context, xml);
              }
              if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context, xml);
                i2 = temp.length;
                while (i2--) {
                  if (elem = temp[i2]) {
                    matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                  }
                }
              }
              if (seed) {
                if (postFinder || preFilter) {
                  if (postFinder) {
                    temp = [];
                    i2 = matcherOut.length;
                    while (i2--) {
                      if (elem = matcherOut[i2]) {
                        temp.push(matcherIn[i2] = elem);
                      }
                    }
                    postFinder(null, matcherOut = [], temp, xml);
                  }
                  i2 = matcherOut.length;
                  while (i2--) {
                    if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf2(seed, elem) : preMap[i2]) > -1) {
                      seed[temp] = !(results[temp] = elem);
                    }
                  }
                }
              } else {
                matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                if (postFinder) {
                  postFinder(null, results, matcherOut, xml);
                } else {
                  push3.apply(results, matcherOut);
                }
              }
            });
          }
          function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
              return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
              return indexOf2(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [function(elem, context, xml) {
              var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
              checkContext = null;
              return ret;
            }];
            for (; i2 < len; i2++) {
              if (matcher = Expr.relative[tokens[i2].type]) {
                matchers = [addCombinator(elementMatcher(matchers), matcher)];
              } else {
                matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
                if (matcher[expando]) {
                  j = ++i2;
                  for (; j < len; j++) {
                    if (Expr.relative[tokens[j].type]) {
                      break;
                    }
                  }
                  return setMatcher(i2 > 1 && elementMatcher(matchers), i2 > 1 && toSelector(tokens.slice(0, i2 - 1).concat({ value: tokens[i2 - 2].type === " " ? "*" : "" })).replace(rtrim2, "$1"), matcher, i2 < j && matcherFromTokens(tokens.slice(i2, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
              }
            }
            return elementMatcher(matchers);
          }
          function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
              var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
              if (outermost) {
                outermostContext = context == document3 || context || outermost;
              }
              for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
                if (byElement && elem) {
                  j = 0;
                  if (!context && elem.ownerDocument != document3) {
                    setDocument(elem);
                    xml = !documentIsHTML;
                  }
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context || document3, xml)) {
                      results.push(elem);
                      break;
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique;
                  }
                }
                if (bySet) {
                  if (elem = !matcher && elem) {
                    matchedCount--;
                  }
                  if (seed) {
                    unmatched.push(elem);
                  }
                }
              }
              matchedCount += i2;
              if (bySet && i2 !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context, xml);
                }
                if (seed) {
                  if (matchedCount > 0) {
                    while (i2--) {
                      if (!(unmatched[i2] || setMatched[i2])) {
                        setMatched[i2] = pop2.call(results);
                      }
                    }
                  }
                  setMatched = condense(setMatched);
                }
                push3.apply(results, setMatched);
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  Sizzle2.uniqueSort(results);
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
              }
              return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
          }
          compile = Sizzle2.compile = function(selector, match) {
            var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
              if (!match) {
                match = tokenize(selector);
              }
              i2 = match.length;
              while (i2--) {
                cached = matcherFromTokens(match[i2]);
                if (cached[expando]) {
                  setMatchers.push(cached);
                } else {
                  elementMatchers.push(cached);
                }
              }
              cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
              cached.selector = selector;
            }
            return cached;
          };
          select = Sizzle2.select = function(selector, context, results, seed) {
            var i2, tokens, token, type2, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                if (!context) {
                  return results;
                } else if (compiled) {
                  context = context.parentNode;
                }
                selector = selector.slice(tokens.shift().value.length);
              }
              i2 = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
              while (i2--) {
                token = tokens[i2];
                if (Expr.relative[type2 = token.type]) {
                  break;
                }
                if (find = Expr.find[type2]) {
                  if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                    tokens.splice(i2, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push3.apply(results, seed);
                      return results;
                    }
                    break;
                  }
                }
              }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
          };
          support2.sortStable = expando.split("").sort(sortOrder).join("") === expando;
          support2.detectDuplicates = !!hasDuplicate;
          setDocument();
          support2.sortDetached = assert(function(el) {
            return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
          });
          if (!assert(function(el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute("href") === "#";
          })) {
            addHandle("type|href|height|width", function(elem, name, isXML2) {
              if (!isXML2) {
                return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
              }
            });
          }
          if (!support2.attributes || !assert(function(el) {
            el.innerHTML = "<input/>";
            el.firstChild.setAttribute("value", "");
            return el.firstChild.getAttribute("value") === "";
          })) {
            addHandle("value", function(elem, _name, isXML2) {
              if (!isXML2 && elem.nodeName.toLowerCase() === "input") {
                return elem.defaultValue;
              }
            });
          }
          if (!assert(function(el) {
            return el.getAttribute("disabled") == null;
          })) {
            addHandle(booleans, function(elem, name, isXML2) {
              var val;
              if (!isXML2) {
                return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
              }
            });
          }
          return Sizzle2;
        }(window2);
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
        jQuery.escapeSelector = Sizzle.escape;
        var dir = function(elem, dir2, until) {
          var matched = [], truncate = until !== void 0;
          while ((elem = elem[dir2]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        };
        var siblings = function(n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        };
        var rneedsContext = jQuery.expr.match.needsContext;
        function nodeName(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        }
        var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        function winnow(elements, qualifier, not) {
          if (isFunction2(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
              return !!qualifier.call(elem, i, elem) !== not;
            });
          }
          if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
              return elem === qualifier !== not;
            });
          }
          if (typeof qualifier !== "string") {
            return jQuery.grep(elements, function(elem) {
              return indexOf.call(qualifier, elem) > -1 !== not;
            });
          }
          return jQuery.filter(qualifier, elements, not);
        }
        jQuery.filter = function(expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ":not(" + expr + ")";
          }
          if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
          }
          return jQuery.find.matches(expr, jQuery.grep(elems, function(elem2) {
            return elem2.nodeType === 1;
          }));
        };
        jQuery.fn.extend({
          find: function(selector) {
            var i, ret, len = this.length, self2 = this;
            if (typeof selector !== "string") {
              return this.pushStack(jQuery(selector).filter(function() {
                for (i = 0; i < len; i++) {
                  if (jQuery.contains(self2[i], this)) {
                    return true;
                  }
                }
              }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
              jQuery.find(selector, self2[i], ret);
            }
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
          },
          filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function(selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
          }
        });
        var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init2 = jQuery.fn.init = function(selector, context, root) {
          var match, elem;
          if (!selector) {
            return this;
          }
          root = root || rootjQuery;
          if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
              match = [null, selector, null];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document2, true));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                  for (match in context) {
                    if (isFunction2(this[match])) {
                      this[match](context[match]);
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document2.getElementById(match[2]);
                if (elem) {
                  this[0] = elem;
                  this.length = 1;
                }
                return this;
              }
            } else if (!context || context.jquery) {
              return (context || root).find(selector);
            } else {
              return this.constructor(context).find(selector);
            }
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
          } else if (isFunction2(selector)) {
            return root.ready !== void 0 ? root.ready(selector) : selector(jQuery);
          }
          return jQuery.makeArray(selector, this);
        };
        init2.prototype = jQuery.fn;
        rootjQuery = jQuery(document2);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
        jQuery.fn.extend({
          has: function(target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function() {
              var i = 0;
              for (; i < l; i++) {
                if (jQuery.contains(this, targets[i])) {
                  return true;
                }
              }
            });
          },
          closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
            if (!rneedsContext.test(selectors)) {
              for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                    matched.push(cur);
                    break;
                  }
                }
              }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
          },
          index: function(elem) {
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
              return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
          },
          add: function(selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
          },
          addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
          }
        });
        function sibling(cur, dir2) {
          while ((cur = cur[dir2]) && cur.nodeType !== 1) {
          }
          return cur;
        }
        jQuery.each({
          parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function(elem) {
            return dir(elem, "parentNode");
          },
          parentsUntil: function(elem, _i, until) {
            return dir(elem, "parentNode", until);
          },
          next: function(elem) {
            return sibling(elem, "nextSibling");
          },
          prev: function(elem) {
            return sibling(elem, "previousSibling");
          },
          nextAll: function(elem) {
            return dir(elem, "nextSibling");
          },
          prevAll: function(elem) {
            return dir(elem, "previousSibling");
          },
          nextUntil: function(elem, _i, until) {
            return dir(elem, "nextSibling", until);
          },
          prevUntil: function(elem, _i, until) {
            return dir(elem, "previousSibling", until);
          },
          siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
          },
          children: function(elem) {
            return siblings(elem.firstChild);
          },
          contents: function(elem) {
            if (elem.contentDocument != null && getProto(elem.contentDocument)) {
              return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
              elem = elem.content || elem;
            }
            return jQuery.merge([], elem.childNodes);
          }
        }, function(name, fn) {
          jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
              selector = until;
            }
            if (selector && typeof selector === "string") {
              matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery.uniqueSort(matched);
              }
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
        function createOptions(options) {
          var object = {};
          jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
          });
          return object;
        }
        jQuery.Callbacks = function(options) {
          options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
          var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
            locked = locked || options.once;
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  firingIndex = list.length;
                  memory = false;
                }
              }
            }
            if (!options.memory) {
              memory = false;
            }
            firing = false;
            if (locked) {
              if (memory) {
                list = [];
              } else {
                list = "";
              }
            }
          }, self2 = {
            add: function() {
              if (list) {
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory);
                }
                (function add(args) {
                  jQuery.each(args, function(_, arg) {
                    if (isFunction2(arg)) {
                      if (!options.unique || !self2.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && toType(arg) !== "string") {
                      add(arg);
                    }
                  });
                })(arguments);
                if (memory && !firing) {
                  fire();
                }
              }
              return this;
            },
            remove: function() {
              jQuery.each(arguments, function(_, arg) {
                var index2;
                while ((index2 = jQuery.inArray(arg, list, index2)) > -1) {
                  list.splice(index2, 1);
                  if (index2 <= firingIndex) {
                    firingIndex--;
                  }
                }
              });
              return this;
            },
            has: function(fn) {
              return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
            },
            empty: function() {
              if (list) {
                list = [];
              }
              return this;
            },
            disable: function() {
              locked = queue = [];
              list = memory = "";
              return this;
            },
            disabled: function() {
              return !list;
            },
            lock: function() {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = "";
              }
              return this;
            },
            locked: function() {
              return !!locked;
            },
            fireWith: function(context, args) {
              if (!locked) {
                args = args || [];
                args = [context, args.slice ? args.slice() : args];
                queue.push(args);
                if (!firing) {
                  fire();
                }
              }
              return this;
            },
            fire: function() {
              self2.fireWith(this, arguments);
              return this;
            },
            fired: function() {
              return !!fired;
            }
          };
          return self2;
        };
        function Identity(v) {
          return v;
        }
        function Thrower(ex) {
          throw ex;
        }
        function adoptValue(value, resolve, reject, noValue) {
          var method;
          try {
            if (value && isFunction2(method = value.promise)) {
              method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction2(method = value.then)) {
              method.call(value, resolve, reject);
            } else {
              resolve.apply(void 0, [value].slice(noValue));
            }
          } catch (value2) {
            reject.apply(void 0, [value2]);
          }
        }
        jQuery.extend({
          Deferred: function(func) {
            var tuples = [
              [
                "notify",
                "progress",
                jQuery.Callbacks("memory"),
                jQuery.Callbacks("memory"),
                2
              ],
              [
                "resolve",
                "done",
                jQuery.Callbacks("once memory"),
                jQuery.Callbacks("once memory"),
                0,
                "resolved"
              ],
              [
                "reject",
                "fail",
                jQuery.Callbacks("once memory"),
                jQuery.Callbacks("once memory"),
                1,
                "rejected"
              ]
            ], state = "pending", promise = {
              state: function() {
                return state;
              },
              always: function() {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              "catch": function(fn) {
                return promise.then(null, fn);
              },
              pipe: function() {
                var fns = arguments;
                return jQuery.Deferred(function(newDefer) {
                  jQuery.each(tuples, function(_i, tuple) {
                    var fn = isFunction2(fns[tuple[4]]) && fns[tuple[4]];
                    deferred[tuple[1]](function() {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && isFunction2(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                      } else {
                        newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              then: function(onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth2, deferred2, handler, special) {
                  return function() {
                    var that = this, args = arguments, mightThrow = function() {
                      var returned, then;
                      if (depth2 < maxDepth) {
                        return;
                      }
                      returned = handler.apply(that, args);
                      if (returned === deferred2.promise()) {
                        throw new TypeError("Thenable self-resolution");
                      }
                      then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                      if (isFunction2(then)) {
                        if (special) {
                          then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special));
                        } else {
                          maxDepth++;
                          then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special), resolve(maxDepth, deferred2, Identity, deferred2.notifyWith));
                        }
                      } else {
                        if (handler !== Identity) {
                          that = void 0;
                          args = [returned];
                        }
                        (special || deferred2.resolveWith)(that, args);
                      }
                    }, process2 = special ? mightThrow : function() {
                      try {
                        mightThrow();
                      } catch (e) {
                        if (jQuery.Deferred.exceptionHook) {
                          jQuery.Deferred.exceptionHook(e, process2.stackTrace);
                        }
                        if (depth2 + 1 >= maxDepth) {
                          if (handler !== Thrower) {
                            that = void 0;
                            args = [e];
                          }
                          deferred2.rejectWith(that, args);
                        }
                      }
                    };
                    if (depth2) {
                      process2();
                    } else {
                      if (jQuery.Deferred.getStackHook) {
                        process2.stackTrace = jQuery.Deferred.getStackHook();
                      }
                      window2.setTimeout(process2);
                    }
                  };
                }
                return jQuery.Deferred(function(newDefer) {
                  tuples[0][3].add(resolve(0, newDefer, isFunction2(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                  tuples[1][3].add(resolve(0, newDefer, isFunction2(onFulfilled) ? onFulfilled : Identity));
                  tuples[2][3].add(resolve(0, newDefer, isFunction2(onRejected) ? onRejected : Thrower));
                }).promise();
              },
              promise: function(obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise;
              }
            }, deferred = {};
            jQuery.each(tuples, function(i, tuple) {
              var list = tuple[2], stateString = tuple[5];
              promise[tuple[1]] = list.add;
              if (stateString) {
                list.add(function() {
                  state = stateString;
                }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
              }
              list.add(tuple[3].fire);
              deferred[tuple[0]] = function() {
                deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
                return this;
              };
              deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
              func.call(deferred, deferred);
            }
            return deferred;
          },
          when: function(singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery.Deferred(), updateFunc = function(i2) {
              return function(value) {
                resolveContexts[i2] = this;
                resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
                if (!--remaining) {
                  primary.resolveWith(resolveContexts, resolveValues);
                }
              };
            };
            if (remaining <= 1) {
              adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);
              if (primary.state() === "pending" || isFunction2(resolveValues[i] && resolveValues[i].then)) {
                return primary.then();
              }
            }
            while (i--) {
              adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            }
            return primary.promise();
          }
        });
        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
        jQuery.Deferred.exceptionHook = function(error, stack) {
          if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
            window2.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
          }
        };
        jQuery.readyException = function(error) {
          window2.setTimeout(function() {
            throw error;
          });
        };
        var readyList = jQuery.Deferred();
        jQuery.fn.ready = function(fn) {
          readyList.then(fn).catch(function(error) {
            jQuery.readyException(error);
          });
          return this;
        };
        jQuery.extend({
          isReady: false,
          readyWait: 1,
          ready: function(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
              return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
              return;
            }
            readyList.resolveWith(document2, [jQuery]);
          }
        });
        jQuery.ready.then = readyList.then;
        function completed() {
          document2.removeEventListener("DOMContentLoaded", completed);
          window2.removeEventListener("load", completed);
          jQuery.ready();
        }
        if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
          window2.setTimeout(jQuery.ready);
        } else {
          document2.addEventListener("DOMContentLoaded", completed);
          window2.addEventListener("load", completed);
        }
        var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
          var i = 0, len = elems.length, bulk = key == null;
          if (toType(key) === "object") {
            chainable = true;
            for (i in key) {
              access(elems, fn, i, key[i], true, emptyGet, raw);
            }
          } else if (value !== void 0) {
            chainable = true;
            if (!isFunction2(value)) {
              raw = true;
            }
            if (bulk) {
              if (raw) {
                fn.call(elems, value);
                fn = null;
              } else {
                bulk = fn;
                fn = function(elem, _key, value2) {
                  return bulk.call(jQuery(elem), value2);
                };
              }
            }
            if (fn) {
              for (; i < len; i++) {
                fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
              }
            }
          }
          if (chainable) {
            return elems;
          }
          if (bulk) {
            return fn.call(elems);
          }
          return len ? fn(elems[0], key) : emptyGet;
        };
        var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
        function fcamelCase(_all, letter) {
          return letter.toUpperCase();
        }
        function camelCase(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        }
        var acceptData = function(owner) {
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data() {
          this.expando = jQuery.expando + Data.uid++;
        }
        Data.uid = 1;
        Data.prototype = {
          cache: function(owner) {
            var value = owner[this.expando];
            if (!value) {
              value = {};
              if (acceptData(owner)) {
                if (owner.nodeType) {
                  owner[this.expando] = value;
                } else {
                  Object.defineProperty(owner, this.expando, {
                    value,
                    configurable: true
                  });
                }
              }
            }
            return value;
          },
          set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === "string") {
              cache[camelCase(data)] = value;
            } else {
              for (prop in data) {
                cache[camelCase(prop)] = data[prop];
              }
            }
            return cache;
          },
          get: function(owner, key) {
            return key === void 0 ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
          },
          access: function(owner, key, value) {
            if (key === void 0 || key && typeof key === "string" && value === void 0) {
              return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== void 0 ? value : key;
          },
          remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === void 0) {
              return;
            }
            if (key !== void 0) {
              if (Array.isArray(key)) {
                key = key.map(camelCase);
              } else {
                key = camelCase(key);
                key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
              }
              i = key.length;
              while (i--) {
                delete cache[key[i]];
              }
            }
            if (key === void 0 || jQuery.isEmptyObject(cache)) {
              if (owner.nodeType) {
                owner[this.expando] = void 0;
              } else {
                delete owner[this.expando];
              }
            }
          },
          hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== void 0 && !jQuery.isEmptyObject(cache);
          }
        };
        var dataPriv = new Data();
        var dataUser = new Data();
        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
        function getData(data) {
          if (data === "true") {
            return true;
          }
          if (data === "false") {
            return false;
          }
          if (data === "null") {
            return null;
          }
          if (data === +data + "") {
            return +data;
          }
          if (rbrace.test(data)) {
            return JSON.parse(data);
          }
          return data;
        }
        function dataAttr(elem, key, data) {
          var name;
          if (data === void 0 && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
              try {
                data = getData(data);
              } catch (e) {
              }
              dataUser.set(elem, key, data);
            } else {
              data = void 0;
            }
          }
          return data;
        }
        jQuery.extend({
          hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
          },
          data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
          },
          removeData: function(elem, name) {
            dataUser.remove(elem, name);
          },
          _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
          },
          _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
          }
        });
        jQuery.fn.extend({
          data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === void 0) {
              if (this.length) {
                data = dataUser.get(elem);
                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                  i = attrs.length;
                  while (i--) {
                    if (attrs[i]) {
                      name = attrs[i].name;
                      if (name.indexOf("data-") === 0) {
                        name = camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  dataPriv.set(elem, "hasDataAttrs", true);
                }
              }
              return data;
            }
            if (typeof key === "object") {
              return this.each(function() {
                dataUser.set(this, key);
              });
            }
            return access(this, function(value2) {
              var data2;
              if (elem && value2 === void 0) {
                data2 = dataUser.get(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                data2 = dataAttr(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                return;
              }
              this.each(function() {
                dataUser.set(this, key, value2);
              });
            }, null, value, arguments.length > 1, null, true);
          },
          removeData: function(key) {
            return this.each(function() {
              dataUser.remove(this, key);
            });
          }
        });
        jQuery.extend({
          queue: function(elem, type2, data) {
            var queue;
            if (elem) {
              type2 = (type2 || "fx") + "queue";
              queue = dataPriv.get(elem, type2);
              if (data) {
                if (!queue || Array.isArray(data)) {
                  queue = dataPriv.access(elem, type2, jQuery.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function(elem, type2) {
            type2 = type2 || "fx";
            var queue = jQuery.queue(elem, type2), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type2), next2 = function() {
              jQuery.dequeue(elem, type2);
            };
            if (fn === "inprogress") {
              fn = queue.shift();
              startLength--;
            }
            if (fn) {
              if (type2 === "fx") {
                queue.unshift("inprogress");
              }
              delete hooks.stop;
              fn.call(elem, next2, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          _queueHooks: function(elem, type2) {
            var key = type2 + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
              empty: jQuery.Callbacks("once memory").add(function() {
                dataPriv.remove(elem, [type2 + "queue", key]);
              })
            });
          }
        });
        jQuery.fn.extend({
          queue: function(type2, data) {
            var setter = 2;
            if (typeof type2 !== "string") {
              data = type2;
              type2 = "fx";
              setter--;
            }
            if (arguments.length < setter) {
              return jQuery.queue(this[0], type2);
            }
            return data === void 0 ? this : this.each(function() {
              var queue = jQuery.queue(this, type2, data);
              jQuery._queueHooks(this, type2);
              if (type2 === "fx" && queue[0] !== "inprogress") {
                jQuery.dequeue(this, type2);
              }
            });
          },
          dequeue: function(type2) {
            return this.each(function() {
              jQuery.dequeue(this, type2);
            });
          },
          clearQueue: function(type2) {
            return this.queue(type2 || "fx", []);
          },
          promise: function(type2, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
              if (!--count) {
                defer.resolveWith(elements, [elements]);
              }
            };
            if (typeof type2 !== "string") {
              obj = type2;
              type2 = void 0;
            }
            type2 = type2 || "fx";
            while (i--) {
              tmp = dataPriv.get(elements[i], type2 + "queueHooks");
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
        var cssExpand = ["Top", "Right", "Bottom", "Left"];
        var documentElement = document2.documentElement;
        var isAttached = function(elem) {
          return jQuery.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
        if (documentElement.getRootNode) {
          isAttached = function(elem) {
            return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
          };
        }
        var isHiddenWithinTree = function(elem, el) {
          elem = el || elem;
          return elem.style.display === "none" || elem.style.display === "" && isAttached(elem) && jQuery.css(elem, "display") === "none";
        };
        function adjustCSS(elem, prop, valueParts, tween) {
          var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
          } : function() {
            return jQuery.css(elem, prop, "");
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
          if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
              jQuery.style(elem, prop, initialInUnit + unit);
              if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                maxIterations = 0;
              }
              initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
          }
          if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
              tween.unit = unit;
              tween.start = initialInUnit;
              tween.end = adjusted;
            }
          }
          return adjusted;
        }
        var defaultDisplayMap = {};
        function getDefaultDisplay(elem) {
          var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
          if (display) {
            return display;
          }
          temp = doc.body.appendChild(doc.createElement(nodeName2));
          display = jQuery.css(temp, "display");
          temp.parentNode.removeChild(temp);
          if (display === "none") {
            display = "block";
          }
          defaultDisplayMap[nodeName2] = display;
          return display;
        }
        function showHide(elements, show) {
          var display, elem, values = [], index2 = 0, length = elements.length;
          for (; index2 < length; index2++) {
            elem = elements[index2];
            if (!elem.style) {
              continue;
            }
            display = elem.style.display;
            if (show) {
              if (display === "none") {
                values[index2] = dataPriv.get(elem, "display") || null;
                if (!values[index2]) {
                  elem.style.display = "";
                }
              }
              if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                values[index2] = getDefaultDisplay(elem);
              }
            } else {
              if (display !== "none") {
                values[index2] = "none";
                dataPriv.set(elem, "display", display);
              }
            }
          }
          for (index2 = 0; index2 < length; index2++) {
            if (values[index2] != null) {
              elements[index2].style.display = values[index2];
            }
          }
          return elements;
        }
        jQuery.fn.extend({
          show: function() {
            return showHide(this, true);
          },
          hide: function() {
            return showHide(this);
          },
          toggle: function(state) {
            if (typeof state === "boolean") {
              return state ? this.show() : this.hide();
            }
            return this.each(function() {
              if (isHiddenWithinTree(this)) {
                jQuery(this).show();
              } else {
                jQuery(this).hide();
              }
            });
          }
        });
        var rcheckableType = /^(?:checkbox|radio)$/i;
        var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
        var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
        (function() {
          var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
          input.setAttribute("type", "radio");
          input.setAttribute("checked", "checked");
          input.setAttribute("name", "t");
          div.appendChild(input);
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
          div.innerHTML = "<textarea>x</textarea>";
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
          div.innerHTML = "<option></option>";
          support.option = !!div.lastChild;
        })();
        var wrapMap = {
          thead: [1, "<table>", "</table>"],
          col: [2, "<table><colgroup>", "</colgroup></table>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
          _default: [0, "", ""]
        };
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        if (!support.option) {
          wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
        }
        function getAll(context, tag) {
          var ret;
          if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
          } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
          } else {
            ret = [];
          }
          if (tag === void 0 || tag && nodeName(context, tag)) {
            return jQuery.merge([context], ret);
          }
          return ret;
        }
        function setGlobalEval(elems, refElements) {
          var i = 0, l = elems.length;
          for (; i < l; i++) {
            dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
          }
        }
        var rhtml = /<|&#?\w+;/;
        function buildFragment(elems, context, scripts, selection, ignored) {
          var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (toType(elem) === "object") {
                jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement("div"));
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = "";
              }
            }
          }
          fragment.textContent = "";
          i = 0;
          while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
              if (ignored) {
                ignored.push(elem);
              }
              continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (attached) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        }
        var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function expectSync(elem, type2) {
          return elem === safeActiveElement() === (type2 === "focus");
        }
        function safeActiveElement() {
          try {
            return document2.activeElement;
          } catch (err2) {
          }
        }
        function on(elem, types, selector, data, fn, one) {
          var origFn, type2;
          if (typeof types === "object") {
            if (typeof selector !== "string") {
              data = data || selector;
              selector = void 0;
            }
            for (type2 in types) {
              on(elem, type2, selector, data, types[type2], one);
            }
            return elem;
          }
          if (data == null && fn == null) {
            fn = selector;
            data = selector = void 0;
          } else if (fn == null) {
            if (typeof selector === "string") {
              fn = data;
              data = void 0;
            } else {
              fn = data;
              data = selector;
              selector = void 0;
            }
          }
          if (fn === false) {
            fn = returnFalse;
          } else if (!fn) {
            return elem;
          }
          if (one === 1) {
            origFn = fn;
            fn = function(event) {
              jQuery().off(event);
              return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
          }
          return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
          });
        }
        jQuery.event = {
          global: {},
          add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type2, namespaces, origType, elemData = dataPriv.get(elem);
            if (!acceptData(elem)) {
              return;
            }
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (selector) {
              jQuery.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
              handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
              events = elemData.events = Object.create(null);
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function(e) {
                return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
              };
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type2 = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type2) {
                continue;
              }
              special = jQuery.event.special[type2] || {};
              type2 = (selector ? special.delegateType : special.bindType) || type2;
              special = jQuery.event.special[type2] || {};
              handleObj = jQuery.extend({
                type: type2,
                origType,
                data,
                handler,
                guid: handler.guid,
                selector,
                needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                namespace: namespaces.join(".")
              }, handleObjIn);
              if (!(handlers = events[type2])) {
                handlers = events[type2] = [];
                handlers.delegateCount = 0;
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type2, eventHandle);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }
              jQuery.event.global[type2] = true;
            }
          },
          remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type2, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
              return;
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type2 = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type2) {
                for (type2 in events) {
                  jQuery.event.remove(elem, type2 + types[t], handler, selector, true);
                }
                continue;
              }
              special = jQuery.event.special[type2] || {};
              type2 = (selector ? special.delegateType : special.bindType) || type2;
              handlers = events[type2] || [];
              tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
              origCount = j = handlers.length;
              while (j--) {
                handleObj = handlers[j];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                  handlers.splice(j, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  jQuery.removeEvent(elem, type2, elemData.handle);
                }
                delete events[type2];
              }
            }
            if (jQuery.isEmptyObject(events)) {
              dataPriv.remove(elem, "handle events");
            }
          },
          dispatch: function(nativeEvent) {
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
              args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j = 0;
              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== void 0) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
              for (; cur !== this; cur = cur.parentNode || this) {
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                  matchedHandlers = [];
                  matchedSelectors = {};
                  for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    if (matchedSelectors[sel] === void 0) {
                      matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                    }
                    if (matchedSelectors[sel]) {
                      matchedHandlers.push(handleObj);
                    }
                  }
                  if (matchedHandlers.length) {
                    handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                  }
                }
              }
            }
            cur = this;
            if (delegateCount < handlers.length) {
              handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
          },
          addProp: function(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
              enumerable: true,
              configurable: true,
              get: isFunction2(hook) ? function() {
                if (this.originalEvent) {
                  return hook(this.originalEvent);
                }
              } : function() {
                if (this.originalEvent) {
                  return this.originalEvent[name];
                }
              },
              set: function(value) {
                Object.defineProperty(this, name, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value
                });
              }
            });
          },
          fix: function(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
          },
          special: {
            load: {
              noBubble: true
            },
            click: {
              setup: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click", returnTrue);
                }
                return false;
              },
              trigger: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click");
                }
                return true;
              },
              _default: function(event) {
                var target = event.target;
                return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
              }
            },
            beforeunload: {
              postDispatch: function(event) {
                if (event.result !== void 0 && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          }
        };
        function leverageNative(el, type2, expectSync2) {
          if (!expectSync2) {
            if (dataPriv.get(el, type2) === void 0) {
              jQuery.event.add(el, type2, returnTrue);
            }
            return;
          }
          dataPriv.set(el, type2, false);
          jQuery.event.add(el, type2, {
            namespace: false,
            handler: function(event) {
              var notAsync, result, saved = dataPriv.get(this, type2);
              if (event.isTrigger & 1 && this[type2]) {
                if (!saved.length) {
                  saved = slice.call(arguments);
                  dataPriv.set(this, type2, saved);
                  notAsync = expectSync2(this, type2);
                  this[type2]();
                  result = dataPriv.get(this, type2);
                  if (saved !== result || notAsync) {
                    dataPriv.set(this, type2, false);
                  } else {
                    result = {};
                  }
                  if (saved !== result) {
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    return result && result.value;
                  }
                } else if ((jQuery.event.special[type2] || {}).delegateType) {
                  event.stopPropagation();
                }
              } else if (saved.length) {
                dataPriv.set(this, type2, {
                  value: jQuery.event.trigger(jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
                });
                event.stopImmediatePropagation();
              }
            }
          });
        }
        jQuery.removeEvent = function(elem, type2, handle) {
          if (elem.removeEventListener) {
            elem.removeEventListener(type2, handle);
          }
        };
        jQuery.Event = function(src, props) {
          if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
          }
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
          } else {
            this.type = src;
          }
          if (props) {
            jQuery.extend(this, props);
          }
          this.timeStamp = src && src.timeStamp || Date.now();
          this[jQuery.expando] = true;
        };
        jQuery.Event.prototype = {
          constructor: jQuery.Event,
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          isSimulated: false,
          preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
              e.preventDefault();
            }
          },
          stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopPropagation();
            }
          },
          stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };
        jQuery.each({
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          "char": true,
          code: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: true
        }, jQuery.event.addProp);
        jQuery.each({ focus: "focusin", blur: "focusout" }, function(type2, delegateType) {
          jQuery.event.special[type2] = {
            setup: function() {
              leverageNative(this, type2, expectSync);
              return false;
            },
            trigger: function() {
              leverageNative(this, type2);
              return true;
            },
            _default: function() {
              return true;
            },
            delegateType
          };
        });
        jQuery.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, function(orig, fix) {
          jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
              var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
              if (!related || related !== target && !jQuery.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        jQuery.fn.extend({
          on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
          },
          one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
          },
          off: function(types, selector, fn) {
            var handleObj, type2;
            if (types && types.preventDefault && types.handleObj) {
              handleObj = types.handleObj;
              jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
              return this;
            }
            if (typeof types === "object") {
              for (type2 in types) {
                this.off(type2, selector, types[type2]);
              }
              return this;
            }
            if (selector === false || typeof selector === "function") {
              fn = selector;
              selector = void 0;
            }
            if (fn === false) {
              fn = returnFalse;
            }
            return this.each(function() {
              jQuery.event.remove(this, types, fn, selector);
            });
          }
        });
        var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
        function manipulationTarget(elem, content) {
          if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery(elem).children("tbody")[0] || elem;
          }
          return elem;
        }
        function disableScript(elem) {
          elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
          } else {
            elem.removeAttribute("type");
          }
          return elem;
        }
        function cloneCopyEvent(src, dest) {
          var i, l, type2, pdataOld, udataOld, udataCur, events;
          if (dest.nodeType !== 1) {
            return;
          }
          if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
              dataPriv.remove(dest, "handle events");
              for (type2 in events) {
                for (i = 0, l = events[type2].length; i < l; i++) {
                  jQuery.event.add(dest, type2, events[type2][i]);
                }
              }
            }
          }
          if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
          }
        }
        function fixInput(src, dest) {
          var nodeName2 = dest.nodeName.toLowerCase();
          if (nodeName2 === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
          } else if (nodeName2 === "input" || nodeName2 === "textarea") {
            dest.defaultValue = src.defaultValue;
          }
        }
        function domManip(collection, args, callback, ignored) {
          args = flat(args);
          var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction2(value);
          if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function(index2) {
              var self2 = collection.eq(index2);
              if (valueIsFunction) {
                args[0] = value.call(this, index2, self2.html());
              }
              domManip(self2, args, callback, ignored);
            });
          }
          if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first || ignored) {
              scripts = jQuery.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery.clone(node, true, true);
                  if (hasScripts) {
                    jQuery.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(collection[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                    if (node.src && (node.type || "").toLowerCase() !== "module") {
                      if (jQuery._evalUrl && !node.noModule) {
                        jQuery._evalUrl(node.src, {
                          nonce: node.nonce || node.getAttribute("nonce")
                        }, doc);
                      }
                    } else {
                      DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                    }
                  }
                }
              }
            }
          }
          return collection;
        }
        function remove(elem, selector, keepData) {
          var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
          for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
              jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
              if (keepData && isAttached(node)) {
                setGlobalEval(getAll(node, "script"));
              }
              node.parentNode.removeChild(node);
            }
          }
          return elem;
        }
        jQuery.extend({
          htmlPrefilter: function(html) {
            return html;
          },
          clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i = 0, l = srcElements.length; i < l; i++) {
                fixInput(srcElements[i], destElements[i]);
              }
            }
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0, l = srcElements.length; i < l; i++) {
                  cloneCopyEvent(srcElements[i], destElements[i]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
          },
          cleanData: function(elems) {
            var data, elem, type2, special = jQuery.event.special, i = 0;
            for (; (elem = elems[i]) !== void 0; i++) {
              if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                  if (data.events) {
                    for (type2 in data.events) {
                      if (special[type2]) {
                        jQuery.event.remove(elem, type2);
                      } else {
                        jQuery.removeEvent(elem, type2, data.handle);
                      }
                    }
                  }
                  elem[dataPriv.expando] = void 0;
                }
                if (elem[dataUser.expando]) {
                  elem[dataUser.expando] = void 0;
                }
              }
            }
          }
        });
        jQuery.fn.extend({
          detach: function(selector) {
            return remove(this, selector, true);
          },
          remove: function(selector) {
            return remove(this, selector);
          },
          text: function(value) {
            return access(this, function(value2) {
              return value2 === void 0 ? jQuery.text(this) : this.empty().each(function() {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value2;
                }
              });
            }, null, value, arguments.length);
          },
          append: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          empty: function() {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.textContent = "";
              }
            }
            return this;
          },
          clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
              return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function(value) {
            return access(this, function(value2) {
              var elem = this[0] || {}, i = 0, l = this.length;
              if (value2 === void 0 && elem.nodeType === 1) {
                return elem.innerHTML;
              }
              if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
                value2 = jQuery.htmlPrefilter(value2);
                try {
                  for (; i < l; i++) {
                    elem = this[i] || {};
                    if (elem.nodeType === 1) {
                      jQuery.cleanData(getAll(elem, false));
                      elem.innerHTML = value2;
                    }
                  }
                  elem = 0;
                } catch (e) {
                }
              }
              if (elem) {
                this.empty().append(value2);
              }
            }, null, value, arguments.length);
          },
          replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
              var parent = this.parentNode;
              if (jQuery.inArray(this, ignored) < 0) {
                jQuery.cleanData(getAll(this));
                if (parent) {
                  parent.replaceChild(elem, this);
                }
              }
            }, ignored);
          }
        });
        jQuery.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, function(name, original) {
          jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
              elems = i === last ? this : this.clone(true);
              jQuery(insert[i])[original](elems);
              push2.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
        var getStyles = function(elem) {
          var view = elem.ownerDocument.defaultView;
          if (!view || !view.opener) {
            view = window2;
          }
          return view.getComputedStyle(elem);
        };
        var swap = function(elem, options, callback) {
          var ret, name, old = {};
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.call(elem);
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rboxStyle = new RegExp(cssExpand.join("|"), "i");
        (function() {
          function computeStyleTests() {
            if (!div) {
              return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window2.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
          }
          function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
          }
          var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
          if (!div.style) {
            return;
          }
          div.style.backgroundClip = "content-box";
          div.cloneNode(true).style.backgroundClip = "";
          support.clearCloneStyle = div.style.backgroundClip === "content-box";
          jQuery.extend(support, {
            boxSizingReliable: function() {
              computeStyleTests();
              return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
              computeStyleTests();
              return pixelBoxStylesVal;
            },
            pixelPosition: function() {
              computeStyleTests();
              return pixelPositionVal;
            },
            reliableMarginLeft: function() {
              computeStyleTests();
              return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
              computeStyleTests();
              return scrollboxSizeVal;
            },
            reliableTrDimensions: function() {
              var table, tr, trChild, trStyle;
              if (reliableTrDimensionsVal == null) {
                table = document2.createElement("table");
                tr = document2.createElement("tr");
                trChild = document2.createElement("div");
                table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                tr.style.cssText = "border:1px solid";
                tr.style.height = "1px";
                trChild.style.height = "9px";
                trChild.style.display = "block";
                documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                trStyle = window2.getComputedStyle(tr);
                reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                documentElement.removeChild(table);
              }
              return reliableTrDimensionsVal;
            }
          });
        })();
        function curCSS(elem, name, computed) {
          var width, minWidth, maxWidth, ret, style = elem.style;
          computed = computed || getStyles(elem);
          if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === "" && !isAttached(elem)) {
              ret = jQuery.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== void 0 ? ret + "" : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          return {
            get: function() {
              if (conditionFn()) {
                delete this.get;
                return;
              }
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
        function vendorPropName(name) {
          var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
          while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
              return name;
            }
          }
        }
        function finalPropName(name) {
          var final = jQuery.cssProps[name] || vendorProps[name];
          if (final) {
            return final;
          }
          if (name in emptyStyle) {
            return name;
          }
          return vendorProps[name] = vendorPropName(name) || name;
        }
        var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
          letterSpacing: "0",
          fontWeight: "400"
        };
        function setPositiveNumber(_elem, value, subtract) {
          var matches = rcssNum.exec(value);
          return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
        }
        function boxModelAdjustment(elem, dimension, box, isBorderBox, styles2, computedVal) {
          var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
          if (box === (isBorderBox ? "border" : "content")) {
            return 0;
          }
          for (; i < 4; i += 2) {
            if (box === "margin") {
              delta += jQuery.css(elem, box + cssExpand[i], true, styles2);
            }
            if (!isBorderBox) {
              delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles2);
              if (box !== "padding") {
                delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles2);
              } else {
                extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles2);
              }
            } else {
              if (box === "content") {
                delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles2);
              }
              if (box !== "margin") {
                delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles2);
              }
            }
          }
          if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
          }
          return delta;
        }
        function getWidthOrHeight(elem, dimension, extra) {
          var styles2 = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles2) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles2), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
          if (rnumnonpx.test(val)) {
            if (!extra) {
              return val;
            }
            val = "auto";
          }
          if ((!support.boxSizingReliable() && isBorderBox || !support.reliableTrDimensions() && nodeName(elem, "tr") || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles2) === "inline") && elem.getClientRects().length) {
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles2) === "border-box";
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
              val = elem[offsetProp];
            }
          }
          val = parseFloat(val) || 0;
          return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles2, val) + "px";
        }
        jQuery.extend({
          cssHooks: {
            opacity: {
              get: function(elem, computed) {
                if (computed) {
                  var ret = curCSS(elem, "opacity");
                  return ret === "" ? "1" : ret;
                }
              }
            }
          },
          cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "gridArea": true,
            "gridColumn": true,
            "gridColumnEnd": true,
            "gridColumnStart": true,
            "gridRow": true,
            "gridRowEnd": true,
            "gridRowStart": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
          },
          cssProps: {},
          style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }
            var ret, type2, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== void 0) {
              type2 = typeof value;
              if (type2 === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                value = adjustCSS(elem, name, ret);
                type2 = "number";
              }
              if (value == null || value !== value) {
                return;
              }
              if (type2 === "number" && !isCustomProp) {
                value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
              }
              if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                style[name] = "inherit";
              }
              if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
                if (isCustomProp) {
                  style.setProperty(name, value);
                } else {
                  style[name] = value;
                }
              }
            } else {
              if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
                return ret;
              }
              return style[name];
            }
          },
          css: function(elem, name, extra, styles2) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
              val = hooks.get(elem, true, extra);
            }
            if (val === void 0) {
              val = curCSS(elem, name, styles2);
            }
            if (val === "normal" && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
              num = parseFloat(val);
              return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
          }
        });
        jQuery.each(["height", "width"], function(_i, dimension) {
          jQuery.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
              if (computed) {
                return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                  return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
              }
            },
            set: function(elem, value, extra) {
              var matches, styles2 = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles2.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles2) === "border-box", subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles2) : 0;
              if (isBorderBox && scrollboxSizeBuggy) {
                subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles2[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles2) - 0.5);
              }
              if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                elem.style[dimension] = value;
                value = jQuery.css(elem, dimension);
              }
              return setPositiveNumber(elem, value, subtract);
            }
          };
        });
        jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, computed) {
          if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
              return elem.getBoundingClientRect().left;
            })) + "px";
          }
        });
        jQuery.each({
          margin: "",
          padding: "",
          border: "Width"
        }, function(prefix, suffix) {
          jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
              var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
              for (; i < 4; i++) {
                expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (prefix !== "margin") {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
          }
        });
        jQuery.fn.extend({
          css: function(name, value) {
            return access(this, function(elem, name2, value2) {
              var styles2, len, map = {}, i = 0;
              if (Array.isArray(name2)) {
                styles2 = getStyles(elem);
                len = name2.length;
                for (; i < len; i++) {
                  map[name2[i]] = jQuery.css(elem, name2[i], false, styles2);
                }
                return map;
              }
              return value2 !== void 0 ? jQuery.style(elem, name2, value2) : jQuery.css(elem, name2);
            }, name, value, arguments.length > 1);
          }
        });
        function Tween(elem, options, prop, end, easing) {
          return new Tween.prototype.init(elem, options, prop, end, easing);
        }
        jQuery.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
          },
          cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function(tween) {
              var result;
              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                return tween.elem[tween.prop];
              }
              result = jQuery.css(tween.elem, tween.prop, "");
              return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
              if (jQuery.fx.step[tween.prop]) {
                jQuery.fx.step[tween.prop](tween);
              } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        jQuery.easing = {
          linear: function(p) {
            return p;
          },
          swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          },
          _default: "swing"
        };
        jQuery.fx = Tween.prototype.init;
        jQuery.fx.step = {};
        var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
        function schedule() {
          if (inProgress) {
            if (document2.hidden === false && window2.requestAnimationFrame) {
              window2.requestAnimationFrame(schedule);
            } else {
              window2.setTimeout(schedule, jQuery.fx.interval);
            }
            jQuery.fx.tick();
          }
        }
        function createFxNow() {
          window2.setTimeout(function() {
            fxNow = void 0;
          });
          return fxNow = Date.now();
        }
        function genFx(type2, includeWidth) {
          var which, i = 0, attrs = { height: type2 };
          includeWidth = includeWidth ? 1 : 0;
          for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type2;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type2;
          }
          return attrs;
        }
        function createTween(value, prop, animation) {
          var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index2 = 0, length = collection.length;
          for (; index2 < length; index2++) {
            if (tween = collection[index2].call(animation, prop, value)) {
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
          if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function() {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function() {
              anim.always(function() {
                hooks.unqueued--;
                if (!jQuery.queue(elem, "fx").length) {
                  hooks.empty.fire();
                }
              });
            });
          }
          for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
              delete props[prop];
              toggle = toggle || value === "toggle";
              if (value === (hidden ? "hide" : "show")) {
                if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                  hidden = true;
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
          }
          propTween = !jQuery.isEmptyObject(props);
          if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
          }
          if (isBox && elem.nodeType === 1) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery.css(elem, "display");
            if (display === "none") {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = jQuery.css(elem, "display");
                showHide([elem]);
              }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
              if (jQuery.css(elem, "float") === "none") {
                if (!propTween) {
                  anim.done(function() {
                    style.display = restoreDisplay;
                  });
                  if (restoreDisplay == null) {
                    display = style.display;
                    restoreDisplay = display === "none" ? "" : display;
                  }
                }
                style.display = "inline-block";
              }
            }
          }
          if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          propTween = false;
          for (prop in orig) {
            if (!propTween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
              }
              if (toggle) {
                dataShow.hidden = !hidden;
              }
              if (hidden) {
                showHide([elem], true);
              }
              anim.done(function() {
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  jQuery.style(elem, prop, orig[prop]);
                }
              });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = propTween.start;
              if (hidden) {
                propTween.end = propTween.start;
                propTween.start = 0;
              }
            }
          }
        }
        function propFilter(props, specialEasing) {
          var index2, name, easing, value, hooks;
          for (index2 in props) {
            name = camelCase(index2);
            easing = specialEasing[name];
            value = props[index2];
            if (Array.isArray(value)) {
              easing = value[1];
              value = props[index2] = value[0];
            }
            if (index2 !== name) {
              props[name] = value;
              delete props[index2];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
              value = hooks.expand(value);
              delete props[name];
              for (index2 in value) {
                if (!(index2 in props)) {
                  props[index2] = value[index2];
                  specialEasing[index2] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options) {
          var result, stopped, index2 = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
          }), tick = function() {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index3 = 0, length2 = animation.tweens.length;
            for (; index3 < length2; index3++) {
              animation.tweens[index3].run(percent);
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length2) {
              return remaining;
            }
            if (!length2) {
              deferred.notifyWith(elem, [animation, 1, 0]);
            }
            deferred.resolveWith(elem, [animation]);
            return false;
          }, animation = deferred.promise({
            elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
              specialEasing: {},
              easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
              var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
              animation.tweens.push(tween);
              return tween;
            },
            stop: function(gotoEnd) {
              var index3 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index3 < length2; index3++) {
                animation.tweens[index3].run(1);
              }
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0]);
                deferred.resolveWith(elem, [animation, gotoEnd]);
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd]);
              }
              return this;
            }
          }), props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index2 < length; index2++) {
            result = Animation.prefilters[index2].call(animation, elem, props, animation.opts);
            if (result) {
              if (isFunction2(result.stop)) {
                jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
              }
              return result;
            }
          }
          jQuery.map(props, createTween, animation);
          if (isFunction2(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }
          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
          jQuery.fx.timer(jQuery.extend(tick, {
            elem,
            anim: animation,
            queue: animation.opts.queue
          }));
          return animation;
        }
        jQuery.Animation = jQuery.extend(Animation, {
          tweeners: {
            "*": [function(prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween;
            }]
          },
          tweener: function(props, callback) {
            if (isFunction2(props)) {
              callback = props;
              props = ["*"];
            } else {
              props = props.match(rnothtmlwhite);
            }
            var prop, index2 = 0, length = props.length;
            for (; index2 < length; index2++) {
              prop = props[index2];
              Animation.tweeners[prop] = Animation.tweeners[prop] || [];
              Animation.tweeners[prop].unshift(callback);
            }
          },
          prefilters: [defaultPrefilter],
          prefilter: function(callback, prepend) {
            if (prepend) {
              Animation.prefilters.unshift(callback);
            } else {
              Animation.prefilters.push(callback);
            }
          }
        });
        jQuery.speed = function(speed, easing, fn) {
          var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction2(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction2(easing) && easing
          };
          if (jQuery.fx.off) {
            opt.duration = 0;
          } else {
            if (typeof opt.duration !== "number") {
              if (opt.duration in jQuery.fx.speeds) {
                opt.duration = jQuery.fx.speeds[opt.duration];
              } else {
                opt.duration = jQuery.fx.speeds._default;
              }
            }
          }
          if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
          }
          opt.old = opt.complete;
          opt.complete = function() {
            if (isFunction2(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              jQuery.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        jQuery.fn.extend({
          fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
          },
          animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
              var anim = Animation(this, jQuery.extend({}, prop), optall);
              if (empty || dataPriv.get(this, "finish")) {
                anim.stop(true);
              }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function(type2, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
              var stop3 = hooks.stop;
              delete hooks.stop;
              stop3(gotoEnd);
            };
            if (typeof type2 !== "string") {
              gotoEnd = clearQueue;
              clearQueue = type2;
              type2 = void 0;
            }
            if (clearQueue) {
              this.queue(type2 || "fx", []);
            }
            return this.each(function() {
              var dequeue = true, index2 = type2 != null && type2 + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
              if (index2) {
                if (data[index2] && data[index2].stop) {
                  stopQueue(data[index2]);
                }
              } else {
                for (index2 in data) {
                  if (data[index2] && data[index2].stop && rrun.test(index2)) {
                    stopQueue(data[index2]);
                  }
                }
              }
              for (index2 = timers.length; index2--; ) {
                if (timers[index2].elem === this && (type2 == null || timers[index2].queue === type2)) {
                  timers[index2].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index2, 1);
                }
              }
              if (dequeue || !gotoEnd) {
                jQuery.dequeue(this, type2);
              }
            });
          },
          finish: function(type2) {
            if (type2 !== false) {
              type2 = type2 || "fx";
            }
            return this.each(function() {
              var index2, data = dataPriv.get(this), queue = data[type2 + "queue"], hooks = data[type2 + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
              data.finish = true;
              jQuery.queue(this, type2, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }
              for (index2 = timers.length; index2--; ) {
                if (timers[index2].elem === this && timers[index2].queue === type2) {
                  timers[index2].anim.stop(true);
                  timers.splice(index2, 1);
                }
              }
              for (index2 = 0; index2 < length; index2++) {
                if (queue[index2] && queue[index2].finish) {
                  queue[index2].finish.call(this);
                }
              }
              delete data.finish;
            });
          }
        });
        jQuery.each(["toggle", "show", "hide"], function(_i, name) {
          var cssFn = jQuery.fn[name];
          jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });
        jQuery.each({
          slideDown: genFx("show"),
          slideUp: genFx("hide"),
          slideToggle: genFx("toggle"),
          fadeIn: { opacity: "show" },
          fadeOut: { opacity: "hide" },
          fadeToggle: { opacity: "toggle" }
        }, function(name, props) {
          jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        jQuery.timers = [];
        jQuery.fx.tick = function() {
          var timer, i = 0, timers = jQuery.timers;
          fxNow = Date.now();
          for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
              timers.splice(i--, 1);
            }
          }
          if (!timers.length) {
            jQuery.fx.stop();
          }
          fxNow = void 0;
        };
        jQuery.fx.timer = function(timer) {
          jQuery.timers.push(timer);
          jQuery.fx.start();
        };
        jQuery.fx.interval = 13;
        jQuery.fx.start = function() {
          if (inProgress) {
            return;
          }
          inProgress = true;
          schedule();
        };
        jQuery.fx.stop = function() {
          inProgress = null;
        };
        jQuery.fx.speeds = {
          slow: 600,
          fast: 200,
          _default: 400
        };
        jQuery.fn.delay = function(time, type2) {
          time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
          type2 = type2 || "fx";
          return this.queue(type2, function(next2, hooks) {
            var timeout = window2.setTimeout(next2, time);
            hooks.stop = function() {
              window2.clearTimeout(timeout);
            };
          });
        };
        (function() {
          var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
          input.type = "checkbox";
          support.checkOn = input.value !== "";
          support.optSelected = opt.selected;
          input = document2.createElement("input");
          input.value = "t";
          input.type = "radio";
          support.radioValue = input.value === "t";
        })();
        var boolHook, attrHandle = jQuery.expr.attrHandle;
        jQuery.fn.extend({
          attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
          },
          removeAttr: function(name) {
            return this.each(function() {
              jQuery.removeAttr(this, name);
            });
          }
        });
        jQuery.extend({
          attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (typeof elem.getAttribute === "undefined") {
              return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
              hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : void 0);
            }
            if (value !== void 0) {
              if (value === null) {
                jQuery.removeAttr(elem, name);
                return;
              }
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              elem.setAttribute(name, value + "");
              return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? void 0 : ret;
          },
          attrHooks: {
            type: {
              set: function(elem, value) {
                if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                  var val = elem.value;
                  elem.setAttribute("type", value);
                  if (val) {
                    elem.value = val;
                  }
                  return value;
                }
              }
            }
          },
          removeAttr: function(elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i++]) {
                elem.removeAttribute(name);
              }
            }
          }
        });
        boolHook = {
          set: function(elem, value, name) {
            if (value === false) {
              jQuery.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name) {
          var getter = attrHandle[name] || jQuery.find.attr;
          attrHandle[name] = function(elem, name2, isXML) {
            var ret, handle, lowercaseName = name2.toLowerCase();
            if (!isXML) {
              handle = attrHandle[lowercaseName];
              attrHandle[lowercaseName] = ret;
              ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
              attrHandle[lowercaseName] = handle;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
        jQuery.fn.extend({
          prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
          },
          removeProp: function(name) {
            return this.each(function() {
              delete this[jQuery.propFix[name] || name];
            });
          }
        });
        jQuery.extend({
          prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
              name = jQuery.propFix[name] || name;
              hooks = jQuery.propHooks[name];
            }
            if (value !== void 0) {
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            return elem[name];
          },
          propHooks: {
            tabIndex: {
              get: function(elem) {
                var tabindex = jQuery.find.attr(elem, "tabindex");
                if (tabindex) {
                  return parseInt(tabindex, 10);
                }
                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                  return 0;
                }
                return -1;
              }
            }
          },
          propFix: {
            "for": "htmlFor",
            "class": "className"
          }
        });
        if (!support.optSelected) {
          jQuery.propHooks.selected = {
            get: function(elem) {
              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            },
            set: function(elem) {
              var parent = elem.parentNode;
              if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
              }
            }
          };
        }
        jQuery.each([
          "tabIndex",
          "readOnly",
          "maxLength",
          "cellSpacing",
          "cellPadding",
          "rowSpan",
          "colSpan",
          "useMap",
          "frameBorder",
          "contentEditable"
        ], function() {
          jQuery.propFix[this.toLowerCase()] = this;
        });
        function stripAndCollapse(value) {
          var tokens = value.match(rnothtmlwhite) || [];
          return tokens.join(" ");
        }
        function getClass(elem) {
          return elem.getAttribute && elem.getAttribute("class") || "";
        }
        function classesToArray(value) {
          if (Array.isArray(value)) {
            return value;
          }
          if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
          }
          return [];
        }
        jQuery.fn.extend({
          addClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction2(value)) {
              return this.each(function(j2) {
                jQuery(this).addClass(value.call(this, j2, getClass(this)));
              });
            }
            classes = classesToArray(value);
            if (classes.length) {
              while (elem = this[i++]) {
                curValue = getClass(elem);
                cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  j = 0;
                  while (clazz = classes[j++]) {
                    if (cur.indexOf(" " + clazz + " ") < 0) {
                      cur += clazz + " ";
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    elem.setAttribute("class", finalValue);
                  }
                }
              }
            }
            return this;
          },
          removeClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction2(value)) {
              return this.each(function(j2) {
                jQuery(this).removeClass(value.call(this, j2, getClass(this)));
              });
            }
            if (!arguments.length) {
              return this.attr("class", "");
            }
            classes = classesToArray(value);
            if (classes.length) {
              while (elem = this[i++]) {
                curValue = getClass(elem);
                cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  j = 0;
                  while (clazz = classes[j++]) {
                    while (cur.indexOf(" " + clazz + " ") > -1) {
                      cur = cur.replace(" " + clazz + " ", " ");
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    elem.setAttribute("class", finalValue);
                  }
                }
              }
            }
            return this;
          },
          toggleClass: function(value, stateVal) {
            var type2 = typeof value, isValidValue = type2 === "string" || Array.isArray(value);
            if (typeof stateVal === "boolean" && isValidValue) {
              return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (isFunction2(value)) {
              return this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
              });
            }
            return this.each(function() {
              var className, i, self2, classNames;
              if (isValidValue) {
                i = 0;
                self2 = jQuery(this);
                classNames = classesToArray(value);
                while (className = classNames[i++]) {
                  if (self2.hasClass(className)) {
                    self2.removeClass(className);
                  } else {
                    self2.addClass(className);
                  }
                }
              } else if (value === void 0 || type2 === "boolean") {
                className = getClass(this);
                if (className) {
                  dataPriv.set(this, "__className__", className);
                }
                if (this.setAttribute) {
                  this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
                }
              }
            });
          },
          hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
              if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        jQuery.fn.extend({
          val: function(value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                  return ret;
                }
                ret = elem.value;
                if (typeof ret === "string") {
                  return ret.replace(rreturn, "");
                }
                return ret == null ? "" : ret;
              }
              return;
            }
            valueIsFunction = isFunction2(value);
            return this.each(function(i) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (valueIsFunction) {
                val = value.call(this, i, jQuery(this).val());
              } else {
                val = value;
              }
              if (val == null) {
                val = "";
              } else if (typeof val === "number") {
                val += "";
              } else if (Array.isArray(val)) {
                val = jQuery.map(val, function(value2) {
                  return value2 == null ? "" : value2 + "";
                });
              }
              hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
              if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
                this.value = val;
              }
            });
          }
        });
        jQuery.extend({
          valHooks: {
            option: {
              get: function(elem) {
                var val = jQuery.find.attr(elem, "value");
                return val != null ? val : stripAndCollapse(jQuery.text(elem));
              }
            },
            select: {
              get: function(elem) {
                var value, option, i, options = elem.options, index2 = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index2 + 1 : options.length;
                if (index2 < 0) {
                  i = max;
                } else {
                  i = one ? index2 : 0;
                }
                for (; i < max; i++) {
                  option = options[i];
                  if ((option.selected || i === index2) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                    value = jQuery(option).val();
                    if (one) {
                      return value;
                    }
                    values.push(value);
                  }
                }
                return values;
              },
              set: function(elem, value) {
                var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                while (i--) {
                  option = options[i];
                  if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                    optionSet = true;
                  }
                }
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });
        jQuery.each(["radio", "checkbox"], function() {
          jQuery.valHooks[this] = {
            set: function(elem, value) {
              if (Array.isArray(value)) {
                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
              }
            }
          };
          if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
              return elem.getAttribute("value") === null ? "on" : elem.value;
            };
          }
        });
        support.focusin = "onfocusin" in window2;
        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
          e.stopPropagation();
        };
        jQuery.extend(jQuery.event, {
          trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type2 = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document2;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }
            if (rfocusMorph.test(type2 + jQuery.event.triggered)) {
              return;
            }
            if (type2.indexOf(".") > -1) {
              namespaces = type2.split(".");
              type2 = namespaces.shift();
              namespaces.sort();
            }
            ontype = type2.indexOf(":") < 0 && "on" + type2;
            event = event[jQuery.expando] ? event : new jQuery.Event(type2, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = void 0;
            if (!event.target) {
              event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type2] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
              bubbleType = special.delegateType || type2;
              if (!rfocusMorph.test(bubbleType + type2)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document2)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
              }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
              lastElement = cur;
              event.type = i > 1 ? bubbleType : special.bindType || type2;
              handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
              if (handle) {
                handle.apply(cur, data);
              }
              handle = ontype && cur[ontype];
              if (handle && handle.apply && acceptData(cur)) {
                event.result = handle.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type2;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                if (ontype && isFunction2(elem[type2]) && !isWindow(elem)) {
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }
                  jQuery.event.triggered = type2;
                  if (event.isPropagationStopped()) {
                    lastElement.addEventListener(type2, stopPropagationCallback);
                  }
                  elem[type2]();
                  if (event.isPropagationStopped()) {
                    lastElement.removeEventListener(type2, stopPropagationCallback);
                  }
                  jQuery.event.triggered = void 0;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          simulate: function(type2, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
              type: type2,
              isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
          }
        });
        jQuery.fn.extend({
          trigger: function(type2, data) {
            return this.each(function() {
              jQuery.event.trigger(type2, data, this);
            });
          },
          triggerHandler: function(type2, data) {
            var elem = this[0];
            if (elem) {
              return jQuery.event.trigger(type2, data, elem, true);
            }
          }
        });
        if (!support.focusin) {
          jQuery.each({ focus: "focusin", blur: "focusout" }, function(orig, fix) {
            var handler = function(event) {
              jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
              setup: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix);
                if (!attaches) {
                  doc.addEventListener(orig, handler, true);
                }
                dataPriv.access(doc, fix, (attaches || 0) + 1);
              },
              teardown: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix) - 1;
                if (!attaches) {
                  doc.removeEventListener(orig, handler, true);
                  dataPriv.remove(doc, fix);
                } else {
                  dataPriv.access(doc, fix, attaches);
                }
              }
            };
          });
        }
        var location3 = window2.location;
        var nonce = { guid: Date.now() };
        var rquery = /\?/;
        jQuery.parseXML = function(data) {
          var xml, parserErrorElem;
          if (!data || typeof data !== "string") {
            return null;
          }
          try {
            xml = new window2.DOMParser().parseFromString(data, "text/xml");
          } catch (e) {
          }
          parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
          if (!xml || parserErrorElem) {
            jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function(el) {
              return el.textContent;
            }).join("\n") : data));
          }
          return xml;
        };
        var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix, obj, traditional, add) {
          var name;
          if (Array.isArray(obj)) {
            jQuery.each(obj, function(i, v) {
              if (traditional || rbracket.test(prefix)) {
                add(prefix, v);
              } else {
                buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
              }
            });
          } else if (!traditional && toType(obj) === "object") {
            for (name in obj) {
              buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
          } else {
            add(prefix, obj);
          }
        }
        jQuery.param = function(a, traditional) {
          var prefix, s = [], add = function(key, valueOrFunction) {
            var value = isFunction2(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
          };
          if (a == null) {
            return "";
          }
          if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function() {
              add(this.name, this.value);
            });
          } else {
            for (prefix in a) {
              buildParams(prefix, a[prefix], traditional, add);
            }
          }
          return s.join("&");
        };
        jQuery.fn.extend({
          serialize: function() {
            return jQuery.param(this.serializeArray());
          },
          serializeArray: function() {
            return this.map(function() {
              var elements = jQuery.prop(this, "elements");
              return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
              var type2 = this.type;
              return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type2) && (this.checked || !rcheckableType.test(type2));
            }).map(function(_i, elem) {
              var val = jQuery(this).val();
              if (val == null) {
                return null;
              }
              if (Array.isArray(val)) {
                return jQuery.map(val, function(val2) {
                  return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
                });
              }
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
          }
        });
        var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
        originAnchor.href = location3.href;
        function addToPrefiltersOrTransports(structure) {
          return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
              func = dataTypeExpression;
              dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction2(func)) {
              while (dataType = dataTypes[i++]) {
                if (dataType[0] === "+") {
                  dataType = dataType.slice(1) || "*";
                  (structure[dataType] = structure[dataType] || []).unshift(func);
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
          var inspected = {}, seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
        }
        function ajaxExtend(target, src) {
          var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== void 0) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            jQuery.extend(true, target, deep);
          }
          return target;
        }
        function ajaxHandleResponses(s, jqXHR, responses) {
          var ct, type2, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
          while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === void 0) {
              ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
          }
          if (ct) {
            for (type2 in contents) {
              if (contents[type2] && contents[type2].test(ct)) {
                dataTypes.unshift(type2);
                break;
              }
            }
          }
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            for (type2 in responses) {
              if (!dataTypes[0] || s.converters[type2 + " " + dataTypes[0]]) {
                finalDataType = type2;
                break;
              }
              if (!firstDataType) {
                firstDataType = type2;
              }
            }
            finalDataType = finalDataType || firstDataType;
          }
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }
        function ajaxConvert(s, response, jqXHR, isSuccess) {
          var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
          if (dataTypes[1]) {
            for (conv in s.converters) {
              converters[conv.toLowerCase()] = s.converters[conv];
            }
          }
          current = dataTypes.shift();
          while (current) {
            if (s.responseFields[current]) {
              jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
              response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              if (current === "*") {
                current = prev;
              } else if (prev !== "*" && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) {
                  for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                      conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                      if (conv) {
                        if (conv === true) {
                          conv = converters[conv2];
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }
                if (conv !== true) {
                  if (conv && s.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
          return { state: "success", data: response };
        }
        jQuery.extend({
          active: 0,
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: location3.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location3.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
              "*": allTypes,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            converters: {
              "* text": String,
              "text html": true,
              "text json": JSON.parse,
              "text xml": jQuery.parseXML
            },
            flatOptions: {
              url: true,
              context: true
            }
          },
          ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          ajax: function(url, options) {
            if (typeof url === "object") {
              options = url;
              url = void 0;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
              readyState: 0,
              getResponseHeader: function(key) {
                var match;
                if (completed2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                    }
                  }
                  match = responseHeaders[key.toLowerCase() + " "];
                }
                return match == null ? null : match.join(", ");
              },
              getAllResponseHeaders: function() {
                return completed2 ? responseHeadersString : null;
              },
              setRequestHeader: function(name, value) {
                if (completed2 == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },
              overrideMimeType: function(type2) {
                if (completed2 == null) {
                  s.mimeType = type2;
                }
                return this;
              },
              statusCode: function(map) {
                var code;
                if (map) {
                  if (completed2) {
                    jqXHR.always(map[jqXHR.status]);
                  } else {
                    for (code in map) {
                      statusCode[code] = [statusCode[code], map[code]];
                    }
                  }
                }
                return this;
              },
              abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location3.href) + "").replace(rprotocol, location3.protocol + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
            if (s.crossDomain == null) {
              urlAnchor = document2.createElement("a");
              try {
                urlAnchor.href = s.url;
                urlAnchor.href = urlAnchor.href;
                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
              } catch (e) {
                s.crossDomain = true;
              }
            }
            if (s.data && s.processData && typeof s.data !== "string") {
              s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed2) {
              return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
              jQuery.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, "");
            if (!s.hasContent) {
              uncached = s.url.slice(cacheURL.length);
              if (s.data && (s.processData || typeof s.data === "string")) {
                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                delete s.data;
              }
              if (s.cache === false) {
                cacheURL = cacheURL.replace(rantiCache, "$1");
                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
              }
              s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
              s.data = s.data.replace(r20, "+");
            }
            if (s.ifModified) {
              if (jQuery.lastModified[cacheURL]) {
                jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
              }
              if (jQuery.etag[cacheURL]) {
                jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
              }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
              jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
              jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
              return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
              done(-1, "No Transport");
            } else {
              jqXHR.readyState = 1;
              if (fireGlobals) {
                globalEventContext.trigger("ajaxSend", [jqXHR, s]);
              }
              if (completed2) {
                return jqXHR;
              }
              if (s.async && s.timeout > 0) {
                timeoutTimer = window2.setTimeout(function() {
                  jqXHR.abort("timeout");
                }, s.timeout);
              }
              try {
                completed2 = false;
                transport.send(requestHeaders, done);
              } catch (e) {
                if (completed2) {
                  throw e;
                }
                done(-1, e);
              }
            }
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess, success, error, response, modified, statusText = nativeStatusText;
              if (completed2) {
                return;
              }
              completed2 = true;
              if (timeoutTimer) {
                window2.clearTimeout(timeoutTimer);
              }
              transport = void 0;
              responseHeadersString = headers || "";
              jqXHR.readyState = status > 0 ? 4 : 0;
              isSuccess = status >= 200 && status < 300 || status === 304;
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }
              if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
                s.converters["text script"] = function() {
                };
              }
              response = ajaxConvert(s, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    jQuery.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader("etag");
                  if (modified) {
                    jQuery.etag[cacheURL] = modified;
                  }
                }
                if (status === 204 || s.type === "HEAD") {
                  statusText = "nocontent";
                } else if (status === 304) {
                  statusText = "notmodified";
                } else {
                  statusText = response.state;
                  success = response.data;
                  error = response.error;
                  isSuccess = !error;
                }
              } else {
                error = statusText;
                if (status || !statusText) {
                  statusText = "error";
                  if (status < 0) {
                    status = 0;
                  }
                }
              }
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + "";
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = void 0;
              if (fireGlobals) {
                globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
              }
              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
              if (fireGlobals) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                if (!--jQuery.active) {
                  jQuery.event.trigger("ajaxStop");
                }
              }
            }
            return jqXHR;
          },
          getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
          },
          getScript: function(url, callback) {
            return jQuery.get(url, void 0, callback, "script");
          }
        });
        jQuery.each(["get", "post"], function(_i, method) {
          jQuery[method] = function(url, data, callback, type2) {
            if (isFunction2(data)) {
              type2 = type2 || callback;
              callback = data;
              data = void 0;
            }
            return jQuery.ajax(jQuery.extend({
              url,
              type: method,
              dataType: type2,
              data,
              success: callback
            }, jQuery.isPlainObject(url) && url));
          };
        });
        jQuery.ajaxPrefilter(function(s) {
          var i;
          for (i in s.headers) {
            if (i.toLowerCase() === "content-type") {
              s.contentType = s.headers[i] || "";
            }
          }
        });
        jQuery._evalUrl = function(url, options, doc) {
          return jQuery.ajax({
            url,
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            converters: {
              "text script": function() {
              }
            },
            dataFilter: function(response) {
              jQuery.globalEval(response, options, doc);
            }
          });
        };
        jQuery.fn.extend({
          wrapAll: function(html) {
            var wrap;
            if (this[0]) {
              if (isFunction2(html)) {
                html = html.call(this[0]);
              }
              wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap.insertBefore(this[0]);
              }
              wrap.map(function() {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function(html) {
            if (isFunction2(html)) {
              return this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
              });
            }
            return this.each(function() {
              var self2 = jQuery(this), contents = self2.contents();
              if (contents.length) {
                contents.wrapAll(html);
              } else {
                self2.append(html);
              }
            });
          },
          wrap: function(html) {
            var htmlIsFunction = isFunction2(html);
            return this.each(function(i) {
              jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
          },
          unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
              jQuery(this).replaceWith(this.childNodes);
            });
            return this;
          }
        });
        jQuery.expr.pseudos.hidden = function(elem) {
          return !jQuery.expr.pseudos.visible(elem);
        };
        jQuery.expr.pseudos.visible = function(elem) {
          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
        };
        jQuery.ajaxSettings.xhr = function() {
          try {
            return new window2.XMLHttpRequest();
          } catch (e) {
          }
        };
        var xhrSuccessStatus = {
          0: 200,
          1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
        support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        jQuery.ajaxTransport(function(options) {
          var callback, errorCallback;
          if (support.cors || xhrSupported && !options.crossDomain) {
            return {
              send: function(headers, complete) {
                var i, xhr = options.xhr();
                xhr.open(options.type, options.url, options.async, options.username, options.password);
                if (options.xhrFields) {
                  for (i in options.xhrFields) {
                    xhr[i] = options.xhrFields[i];
                  }
                }
                if (options.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options.mimeType);
                }
                if (!options.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }
                for (i in headers) {
                  xhr.setRequestHeader(i, headers[i]);
                }
                callback = function(type2) {
                  return function() {
                    if (callback) {
                      callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                      if (type2 === "abort") {
                        xhr.abort();
                      } else if (type2 === "error") {
                        if (typeof xhr.status !== "number") {
                          complete(0, "error");
                        } else {
                          complete(xhr.status, xhr.statusText);
                        }
                      } else {
                        complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
                      }
                    }
                  };
                };
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                if (xhr.onabort !== void 0) {
                  xhr.onabort = errorCallback;
                } else {
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      window2.setTimeout(function() {
                        if (callback) {
                          errorCallback();
                        }
                      });
                    }
                  };
                }
                callback = callback("abort");
                try {
                  xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                  if (callback) {
                    throw e;
                  }
                }
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        jQuery.ajaxPrefilter(function(s) {
          if (s.crossDomain) {
            s.contents.script = false;
          }
        });
        jQuery.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function(text) {
              jQuery.globalEval(text);
              return text;
            }
          }
        });
        jQuery.ajaxPrefilter("script", function(s) {
          if (s.cache === void 0) {
            s.cache = false;
          }
          if (s.crossDomain) {
            s.type = "GET";
          }
        });
        jQuery.ajaxTransport("script", function(s) {
          if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
              send: function(_, complete) {
                script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", callback = function(evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                });
                document2.head.appendChild(script[0]);
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery.ajaxSetup({
          jsonp: "callback",
          jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
          }
        });
        jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
          var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
          if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = isFunction2(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
              s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
              s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
              if (!responseContainer) {
                jQuery.error(callbackName + " was not called");
              }
              return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window2[callbackName];
            window2[callbackName] = function() {
              responseContainer = arguments;
            };
            jqXHR.always(function() {
              if (overwritten === void 0) {
                jQuery(window2).removeProp(callbackName);
              } else {
                window2[callbackName] = overwritten;
              }
              if (s[callbackName]) {
                s.jsonpCallback = originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
              }
              if (responseContainer && isFunction2(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = void 0;
            });
            return "script";
          }
        });
        support.createHTMLDocument = function() {
          var body = document2.implementation.createHTMLDocument("").body;
          body.innerHTML = "<form></form><form></form>";
          return body.childNodes.length === 2;
        }();
        jQuery.parseHTML = function(data, context, keepScripts) {
          if (typeof data !== "string") {
            return [];
          }
          if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
          }
          var base, parsed, scripts;
          if (!context) {
            if (support.createHTMLDocument) {
              context = document2.implementation.createHTMLDocument("");
              base = context.createElement("base");
              base.href = document2.location.href;
              context.head.appendChild(base);
            } else {
              context = document2;
            }
          }
          parsed = rsingleTag.exec(data);
          scripts = !keepScripts && [];
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = buildFragment([data], context, scripts);
          if (scripts && scripts.length) {
            jQuery(scripts).remove();
          }
          return jQuery.merge([], parsed.childNodes);
        };
        jQuery.fn.load = function(url, params, callback) {
          var selector, type2, response, self2 = this, off = url.indexOf(" ");
          if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
          }
          if (isFunction2(params)) {
            callback = params;
            params = void 0;
          } else if (params && typeof params === "object") {
            type2 = "POST";
          }
          if (self2.length > 0) {
            jQuery.ajax({
              url,
              type: type2 || "GET",
              dataType: "html",
              data: params
            }).done(function(responseText) {
              response = arguments;
              self2.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function(jqXHR, status) {
              self2.each(function() {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            });
          }
          return this;
        };
        jQuery.expr.pseudos.animated = function(elem) {
          return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
          }).length;
        };
        jQuery.offset = {
          setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if (position === "static") {
              elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction2(options)) {
              options = options.call(elem, i, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
              props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
              props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
              options.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        jQuery.fn.extend({
          offset: function(options) {
            if (arguments.length) {
              return options === void 0 ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
              });
            }
            var rect, win, elem = this[0];
            if (!elem) {
              return;
            }
            if (!elem.getClientRects().length) {
              return { top: 0, left: 0 };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
              top: rect.top + win.pageYOffset,
              left: rect.left + win.pageXOffset
            };
          },
          position: function() {
            if (!this[0]) {
              return;
            }
            var offsetParent, offset, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
            if (jQuery.css(elem, "position") === "fixed") {
              offset = elem.getBoundingClientRect();
            } else {
              offset = this.offset();
              doc = elem.ownerDocument;
              offsetParent = elem.offsetParent || doc.documentElement;
              while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.parentNode;
              }
              if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                parentOffset = jQuery(offsetParent).offset();
                parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
              }
            }
            return {
              top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
              left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
          },
          offsetParent: function() {
            return this.map(function() {
              var offsetParent = this.offsetParent;
              while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || documentElement;
            });
          }
        });
        jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
          var top = prop === "pageYOffset";
          jQuery.fn[method] = function(val) {
            return access(this, function(elem, method2, val2) {
              var win;
              if (isWindow(elem)) {
                win = elem;
              } else if (elem.nodeType === 9) {
                win = elem.defaultView;
              }
              if (val2 === void 0) {
                return win ? win[prop] : elem[method2];
              }
              if (win) {
                win.scrollTo(!top ? val2 : win.pageXOffset, top ? val2 : win.pageYOffset);
              } else {
                elem[method2] = val2;
              }
            }, method, val, arguments.length);
          };
        });
        jQuery.each(["top", "left"], function(_i, prop) {
          jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
              computed = curCSS(elem, prop);
              return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
          });
        });
        jQuery.each({ Height: "height", Width: "width" }, function(name, type2) {
          jQuery.each({
            padding: "inner" + name,
            content: type2,
            "": "outer" + name
          }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
              return access(this, function(elem, type3, value2) {
                var doc;
                if (isWindow(elem)) {
                  return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                }
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;
                  return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                }
                return value2 === void 0 ? jQuery.css(elem, type3, extra) : jQuery.style(elem, type3, value2, extra);
              }, type2, chainable ? margin : void 0, chainable);
            };
          });
        });
        jQuery.each([
          "ajaxStart",
          "ajaxStop",
          "ajaxComplete",
          "ajaxError",
          "ajaxSuccess",
          "ajaxSend"
        ], function(_i, type2) {
          jQuery.fn[type2] = function(fn) {
            return this.on(type2, fn);
          };
        });
        jQuery.fn.extend({
          bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
          },
          unbind: function(types, fn) {
            return this.off(types, null, fn);
          },
          delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
          },
          undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
          },
          hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
          }
        });
        jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(_i, name) {
          jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
          };
        });
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        jQuery.proxy = function(fn, context) {
          var tmp, args, proxy;
          if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }
          if (!isFunction2(fn)) {
            return void 0;
          }
          args = slice.call(arguments, 2);
          proxy = function() {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
          };
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;
          return proxy;
        };
        jQuery.holdReady = function(hold) {
          if (hold) {
            jQuery.readyWait++;
          } else {
            jQuery.ready(true);
          }
        };
        jQuery.isArray = Array.isArray;
        jQuery.parseJSON = JSON.parse;
        jQuery.nodeName = nodeName;
        jQuery.isFunction = isFunction2;
        jQuery.isWindow = isWindow;
        jQuery.camelCase = camelCase;
        jQuery.type = toType;
        jQuery.now = Date.now;
        jQuery.isNumeric = function(obj) {
          var type2 = jQuery.type(obj);
          return (type2 === "number" || type2 === "string") && !isNaN(obj - parseFloat(obj));
        };
        jQuery.trim = function(text) {
          return text == null ? "" : (text + "").replace(rtrim, "");
        };
        if (typeof define === "function" && define.amd) {
          define("jquery", [], function() {
            return jQuery;
          });
        }
        var _jQuery = window2.jQuery, _$ = window2.$;
        jQuery.noConflict = function(deep) {
          if (window2.$ === jQuery) {
            window2.$ = _$;
          }
          if (deep && window2.jQuery === jQuery) {
            window2.jQuery = _jQuery;
          }
          return jQuery;
        };
        if (typeof noGlobal === "undefined") {
          window2.jQuery = window2.$ = jQuery;
        }
        return jQuery;
      });
    }
  });

  // node_modules/golden-layout/dist/goldenlayout.js
  var require_goldenlayout = __commonJS({
    "node_modules/golden-layout/dist/goldenlayout.js"(exports, module) {
      (function($2) {
        var lm = { "config": {}, "container": {}, "controls": {}, "errors": {}, "items": {}, "utils": {} };
        lm.utils.F = function() {
        };
        lm.utils.extend = function(subClass, superClass) {
          subClass.prototype = lm.utils.createObject(superClass.prototype);
          subClass.prototype.contructor = subClass;
        };
        lm.utils.createObject = function(prototype) {
          if (typeof Object.create === "function") {
            return Object.create(prototype);
          } else {
            lm.utils.F.prototype = prototype;
            return new lm.utils.F();
          }
        };
        lm.utils.objectKeys = function(object) {
          var keys, key;
          if (typeof Object.keys === "function") {
            return Object.keys(object);
          } else {
            keys = [];
            for (key in object) {
              keys.push(key);
            }
            return keys;
          }
        };
        lm.utils.getHashValue = function(key) {
          var matches = location.hash.match(new RegExp(key + "=([^&]*)"));
          return matches ? matches[1] : null;
        };
        lm.utils.getQueryStringParam = function(param) {
          if (window.location.hash) {
            return lm.utils.getHashValue(param);
          } else if (!window.location.search) {
            return null;
          }
          var keyValuePairs = window.location.search.substr(1).split("&"), params = {}, pair, i;
          for (i = 0; i < keyValuePairs.length; i++) {
            pair = keyValuePairs[i].split("=");
            params[pair[0]] = pair[1];
          }
          return params[param] || null;
        };
        lm.utils.copy = function(target, source) {
          for (var key in source) {
            target[key] = source[key];
          }
          return target;
        };
        lm.utils.animFrame = function(fn) {
          return (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
            window.setTimeout(callback, 1e3 / 60);
          })(function() {
            fn();
          });
        };
        lm.utils.indexOf = function(needle, haystack) {
          if (!(haystack instanceof Array)) {
            throw new Error("Haystack is not an Array");
          }
          if (haystack.indexOf) {
            return haystack.indexOf(needle);
          } else {
            for (var i = 0; i < haystack.length; i++) {
              if (haystack[i] === needle) {
                return i;
              }
            }
            return -1;
          }
        };
        if (typeof /./ != "function" && typeof Int8Array != "object") {
          lm.utils.isFunction = function(obj) {
            return typeof obj == "function" || false;
          };
        } else {
          lm.utils.isFunction = function(obj) {
            return toString.call(obj) === "[object Function]";
          };
        }
        lm.utils.fnBind = function(fn, context, boundArgs) {
          if (Function.prototype.bind !== void 0) {
            return Function.prototype.bind.apply(fn, [context].concat(boundArgs || []));
          }
          var bound = function() {
            var args = (boundArgs || []).concat(Array.prototype.slice.call(arguments, 0));
            if (!(this instanceof bound)) {
              return fn.apply(context, args);
            }
            fn.apply(this, args);
          };
          bound.prototype = fn.prototype;
          return bound;
        };
        lm.utils.removeFromArray = function(item, array) {
          var index2 = lm.utils.indexOf(item, array);
          if (index2 === -1) {
            throw new Error("Can't remove item from array. Item is not in the array");
          }
          array.splice(index2, 1);
        };
        lm.utils.now = function() {
          if (typeof Date.now === "function") {
            return Date.now();
          } else {
            return new Date().getTime();
          }
        };
        lm.utils.getUniqueId = function() {
          return (Math.random() * 1e15).toString(36).replace(".", "");
        };
        lm.utils.filterXss = function(input, keepTags) {
          var output = input.replace(/javascript/gi, "j&#97;vascript").replace(/expression/gi, "expr&#101;ssion").replace(/onload/gi, "onlo&#97;d").replace(/script/gi, "&#115;cript").replace(/onerror/gi, "on&#101;rror");
          if (keepTags === true) {
            return output;
          } else {
            return output.replace(/>/g, "&gt;").replace(/</g, "&lt;");
          }
        };
        lm.utils.stripTags = function(input) {
          return $2.trim(input.replace(/(<([^>]+)>)/ig, ""));
        };
        lm.utils.EventEmitter = function() {
          this._mSubscriptions = {};
          this._mSubscriptions[lm.utils.EventEmitter.ALL_EVENT] = [];
          this.on = function(sEvent, fCallback, oContext) {
            if (!lm.utils.isFunction(fCallback)) {
              throw new Error("Tried to listen to event " + sEvent + " with non-function callback " + fCallback);
            }
            if (!this._mSubscriptions[sEvent]) {
              this._mSubscriptions[sEvent] = [];
            }
            this._mSubscriptions[sEvent].push({ fn: fCallback, ctx: oContext });
          };
          this.emit = function(sEvent) {
            var i, ctx, args;
            args = Array.prototype.slice.call(arguments, 1);
            var subs = this._mSubscriptions[sEvent];
            if (subs) {
              subs = subs.slice();
              for (i = 0; i < subs.length; i++) {
                ctx = subs[i].ctx || {};
                subs[i].fn.apply(ctx, args);
              }
            }
            args.unshift(sEvent);
            var allEventSubs = this._mSubscriptions[lm.utils.EventEmitter.ALL_EVENT].slice();
            for (i = 0; i < allEventSubs.length; i++) {
              ctx = allEventSubs[i].ctx || {};
              allEventSubs[i].fn.apply(ctx, args);
            }
          };
          this.unbind = function(sEvent, fCallback, oContext) {
            if (!this._mSubscriptions[sEvent]) {
              throw new Error("No subscribtions to unsubscribe for event " + sEvent);
            }
            var i, bUnbound = false;
            for (i = 0; i < this._mSubscriptions[sEvent].length; i++) {
              if ((!fCallback || this._mSubscriptions[sEvent][i].fn === fCallback) && (!oContext || oContext === this._mSubscriptions[sEvent][i].ctx)) {
                this._mSubscriptions[sEvent].splice(i, 1);
                bUnbound = true;
              }
            }
            if (bUnbound === false) {
              throw new Error("Nothing to unbind for " + sEvent);
            }
          };
          this.off = this.unbind;
          this.trigger = this.emit;
        };
        lm.utils.EventEmitter.ALL_EVENT = "__all";
        lm.utils.DragListener = function(eElement, nButtonCode) {
          lm.utils.EventEmitter.call(this);
          this._eElement = $2(eElement);
          this._oDocument = $2(document);
          this._eBody = $2(document.body);
          this._nButtonCode = nButtonCode || 0;
          this._nDelay = 200;
          this._nDistance = 10;
          this._nX = 0;
          this._nY = 0;
          this._nOriginalX = 0;
          this._nOriginalY = 0;
          this._bDragging = false;
          this._fMove = lm.utils.fnBind(this.onMouseMove, this);
          this._fUp = lm.utils.fnBind(this.onMouseUp, this);
          this._fDown = lm.utils.fnBind(this.onMouseDown, this);
          this._eElement.on("mousedown touchstart", this._fDown);
        };
        lm.utils.DragListener.timeout = null;
        lm.utils.copy(lm.utils.DragListener.prototype, {
          destroy: function() {
            this._eElement.unbind("mousedown touchstart", this._fDown);
            this._oDocument.unbind("mouseup touchend", this._fUp);
            this._eElement = null;
            this._oDocument = null;
            this._eBody = null;
          },
          onMouseDown: function(oEvent) {
            oEvent.preventDefault();
            if (oEvent.button == 0 || oEvent.type === "touchstart") {
              var coordinates = this._getCoordinates(oEvent);
              this._nOriginalX = coordinates.x;
              this._nOriginalY = coordinates.y;
              this._oDocument.on("mousemove touchmove", this._fMove);
              this._oDocument.one("mouseup touchend", this._fUp);
              this._timeout = setTimeout(lm.utils.fnBind(this._startDrag, this), this._nDelay);
            }
          },
          onMouseMove: function(oEvent) {
            if (this._timeout != null) {
              oEvent.preventDefault();
              var coordinates = this._getCoordinates(oEvent);
              this._nX = coordinates.x - this._nOriginalX;
              this._nY = coordinates.y - this._nOriginalY;
              if (this._bDragging === false) {
                if (Math.abs(this._nX) > this._nDistance || Math.abs(this._nY) > this._nDistance) {
                  clearTimeout(this._timeout);
                  this._startDrag();
                }
              }
              if (this._bDragging) {
                this.emit("drag", this._nX, this._nY, oEvent);
              }
            }
          },
          onMouseUp: function(oEvent) {
            if (this._timeout != null) {
              clearTimeout(this._timeout);
              this._eBody.removeClass("lm_dragging");
              this._eElement.removeClass("lm_dragging");
              this._oDocument.find("iframe").css("pointer-events", "");
              this._oDocument.unbind("mousemove touchmove", this._fMove);
              this._oDocument.unbind("mouseup touchend", this._fUp);
              if (this._bDragging === true) {
                this._bDragging = false;
                this.emit("dragStop", oEvent, this._nOriginalX + this._nX);
              }
            }
          },
          _startDrag: function() {
            this._bDragging = true;
            this._eBody.addClass("lm_dragging");
            this._eElement.addClass("lm_dragging");
            this._oDocument.find("iframe").css("pointer-events", "none");
            this.emit("dragStart", this._nOriginalX, this._nOriginalY);
          },
          _getCoordinates: function(event) {
            event = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0] : event;
            return {
              x: event.pageX,
              y: event.pageY
            };
          }
        });
        lm.LayoutManager = function(config3, container) {
          if (!$2 || typeof $2.noConflict !== "function") {
            var errorMsg = "jQuery is missing as dependency for GoldenLayout. ";
            errorMsg += `Please either expose $ on GoldenLayout's scope (e.g. window) or add "jquery" to `;
            errorMsg += "your paths when using RequireJS/AMD";
            throw new Error(errorMsg);
          }
          lm.utils.EventEmitter.call(this);
          this.isInitialised = false;
          this._isFullPage = false;
          this._resizeTimeoutId = null;
          this._components = { "lm-react-component": lm.utils.ReactComponentHandler };
          this._itemAreas = [];
          this._resizeFunction = lm.utils.fnBind(this._onResize, this);
          this._unloadFunction = lm.utils.fnBind(this._onUnload, this);
          this._maximisedItem = null;
          this._maximisePlaceholder = $2('<div class="lm_maximise_place"></div>');
          this._creationTimeoutPassed = false;
          this._subWindowsCreated = false;
          this._dragSources = [];
          this._updatingColumnsResponsive = false;
          this._firstLoad = true;
          this.width = null;
          this.height = null;
          this.root = null;
          this.openPopouts = [];
          this.selectedItem = null;
          this.isSubWindow = false;
          this.eventHub = new lm.utils.EventHub(this);
          this.config = this._createConfig(config3);
          this.container = container;
          this.dropTargetIndicator = null;
          this.transitionIndicator = null;
          this.tabDropPlaceholder = $2('<div class="lm_drop_tab_placeholder"></div>');
          if (this.isSubWindow === true) {
            $2("body").css("visibility", "hidden");
          }
          this._typeToItem = {
            "column": lm.utils.fnBind(lm.items.RowOrColumn, this, [true]),
            "row": lm.utils.fnBind(lm.items.RowOrColumn, this, [false]),
            "stack": lm.items.Stack,
            "component": lm.items.Component
          };
        };
        lm.LayoutManager.__lm = lm;
        lm.LayoutManager.minifyConfig = function(config3) {
          return new lm.utils.ConfigMinifier().minifyConfig(config3);
        };
        lm.LayoutManager.unminifyConfig = function(config3) {
          return new lm.utils.ConfigMinifier().unminifyConfig(config3);
        };
        lm.utils.copy(lm.LayoutManager.prototype, {
          registerComponent: function(name, constructor) {
            if (typeof constructor !== "function") {
              throw new Error("Please register a constructor function");
            }
            if (this._components[name] !== void 0) {
              throw new Error("Component " + name + " is already registered");
            }
            this._components[name] = constructor;
          },
          toConfig: function(root) {
            var config3, next2, i;
            if (this.isInitialised === false) {
              throw new Error("Can't create config, layout not yet initialised");
            }
            if (root && !(root instanceof lm.items.AbstractContentItem)) {
              throw new Error("Root must be a ContentItem");
            }
            config3 = {
              settings: lm.utils.copy({}, this.config.settings),
              dimensions: lm.utils.copy({}, this.config.dimensions),
              labels: lm.utils.copy({}, this.config.labels)
            };
            config3.content = [];
            next2 = function(configNode, item) {
              var key, i2;
              for (key in item.config) {
                if (key !== "content") {
                  configNode[key] = item.config[key];
                }
              }
              if (item.contentItems.length) {
                configNode.content = [];
                for (i2 = 0; i2 < item.contentItems.length; i2++) {
                  configNode.content[i2] = {};
                  next2(configNode.content[i2], item.contentItems[i2]);
                }
              }
            };
            if (root) {
              next2(config3, { contentItems: [root] });
            } else {
              next2(config3, this.root);
            }
            this._$reconcilePopoutWindows();
            config3.openPopouts = [];
            for (i = 0; i < this.openPopouts.length; i++) {
              config3.openPopouts.push(this.openPopouts[i].toConfig());
            }
            config3.maximisedItemId = this._maximisedItem ? "__glMaximised" : null;
            return config3;
          },
          getComponent: function(name) {
            if (this._components[name] === void 0) {
              throw new lm.errors.ConfigurationError('Unknown component "' + name + '"');
            }
            return this._components[name];
          },
          init: function() {
            if (this._subWindowsCreated === false) {
              this._createSubWindows();
              this._subWindowsCreated = true;
            }
            if (document.readyState === "loading" || document.body === null) {
              $2(document).ready(lm.utils.fnBind(this.init, this));
              return;
            }
            if (this.isSubWindow === true && this._creationTimeoutPassed === false) {
              setTimeout(lm.utils.fnBind(this.init, this), 7);
              this._creationTimeoutPassed = true;
              return;
            }
            if (this.isSubWindow === true) {
              this._adjustToWindowMode();
            }
            this._setContainer();
            this.dropTargetIndicator = new lm.controls.DropTargetIndicator(this.container);
            this.transitionIndicator = new lm.controls.TransitionIndicator();
            this.updateSize();
            this._create(this.config);
            this._bindEvents();
            this.isInitialised = true;
            this._adjustColumnsResponsive();
            this.emit("initialised");
          },
          updateSize: function(width, height) {
            if (arguments.length === 2) {
              this.width = width;
              this.height = height;
            } else {
              this.width = this.container.width();
              this.height = this.container.height();
            }
            if (this.isInitialised === true) {
              this.root.callDownwards("setSize", [this.width, this.height]);
              if (this._maximisedItem) {
                this._maximisedItem.element.width(this.container.width());
                this._maximisedItem.element.height(this.container.height());
                this._maximisedItem.callDownwards("setSize");
              }
              this._adjustColumnsResponsive();
            }
          },
          destroy: function() {
            if (this.isInitialised === false) {
              return;
            }
            this._onUnload();
            $2(window).off("resize", this._resizeFunction);
            $2(window).off("unload beforeunload", this._unloadFunction);
            this.root.callDownwards("_$destroy", [], true);
            this.root.contentItems = [];
            this.tabDropPlaceholder.remove();
            this.dropTargetIndicator.destroy();
            this.transitionIndicator.destroy();
            this.eventHub.destroy();
            this._dragSources.forEach(function(dragSource) {
              dragSource._dragListener.destroy();
              dragSource._element = null;
              dragSource._itemConfig = null;
              dragSource._dragListener = null;
            });
            this._dragSources = [];
          },
          createContentItem: function(config3, parent) {
            var typeErrorMsg, contentItem;
            if (typeof config3.type !== "string") {
              throw new lm.errors.ConfigurationError("Missing parameter 'type'", config3);
            }
            if (config3.type === "react-component") {
              config3.type = "component";
              config3.componentName = "lm-react-component";
            }
            if (!this._typeToItem[config3.type]) {
              typeErrorMsg = "Unknown type '" + config3.type + "'. Valid types are " + lm.utils.objectKeys(this._typeToItem).join(",");
              throw new lm.errors.ConfigurationError(typeErrorMsg);
            }
            if (config3.type === "component" && !(parent instanceof lm.items.Stack) && !!parent && !(this.isSubWindow === true && parent instanceof lm.items.Root)) {
              config3 = {
                type: "stack",
                width: config3.width,
                height: config3.height,
                content: [config3]
              };
            }
            contentItem = new this._typeToItem[config3.type](this, config3, parent);
            return contentItem;
          },
          createPopout: function(configOrContentItem, dimensions, parentId, indexInParent) {
            var config3 = configOrContentItem, isItem = configOrContentItem instanceof lm.items.AbstractContentItem, self2 = this, windowLeft, windowTop, offset, parent, child, browserPopout;
            parentId = parentId || null;
            if (isItem) {
              config3 = this.toConfig(configOrContentItem).content;
              parentId = lm.utils.getUniqueId();
              parent = configOrContentItem.parent;
              child = configOrContentItem;
              while (parent.contentItems.length === 1 && !parent.isRoot) {
                parent = parent.parent;
                child = child.parent;
              }
              parent.addId(parentId);
              if (isNaN(indexInParent)) {
                indexInParent = lm.utils.indexOf(child, parent.contentItems);
              }
            } else {
              if (!(config3 instanceof Array)) {
                config3 = [config3];
              }
            }
            if (!dimensions && isItem) {
              windowLeft = window.screenX || window.screenLeft;
              windowTop = window.screenY || window.screenTop;
              offset = configOrContentItem.element.offset();
              dimensions = {
                left: windowLeft + offset.left,
                top: windowTop + offset.top,
                width: configOrContentItem.element.width(),
                height: configOrContentItem.element.height()
              };
            }
            if (!dimensions && !isItem) {
              dimensions = {
                left: window.screenX || window.screenLeft + 20,
                top: window.screenY || window.screenTop + 20,
                width: 500,
                height: 309
              };
            }
            if (isItem) {
              configOrContentItem.remove();
            }
            browserPopout = new lm.controls.BrowserPopout(config3, dimensions, parentId, indexInParent, this);
            browserPopout.on("initialised", function() {
              self2.emit("windowOpened", browserPopout);
            });
            browserPopout.on("closed", function() {
              self2._$reconcilePopoutWindows();
            });
            this.openPopouts.push(browserPopout);
            return browserPopout;
          },
          createDragSource: function(element, itemConfig) {
            this.config.settings.constrainDragToContainer = false;
            var dragSource = new lm.controls.DragSource($2(element), itemConfig, this);
            this._dragSources.push(dragSource);
            return dragSource;
          },
          selectItem: function(item, _$silent) {
            if (this.config.settings.selectionEnabled !== true) {
              throw new Error("Please set selectionEnabled to true to use this feature");
            }
            if (item === this.selectedItem) {
              return;
            }
            if (this.selectedItem !== null) {
              this.selectedItem.deselect();
            }
            if (item && _$silent !== true) {
              item.select();
            }
            this.selectedItem = item;
            this.emit("selectionChanged", item);
          },
          _$maximiseItem: function(contentItem) {
            if (this._maximisedItem !== null) {
              this._$minimiseItem(this._maximisedItem);
            }
            this._maximisedItem = contentItem;
            this._maximisedItem.addId("__glMaximised");
            contentItem.element.addClass("lm_maximised");
            contentItem.element.after(this._maximisePlaceholder);
            this.root.element.prepend(contentItem.element);
            contentItem.element.width(this.container.width());
            contentItem.element.height(this.container.height());
            contentItem.callDownwards("setSize");
            this._maximisedItem.emit("maximised");
            this.emit("stateChanged");
          },
          _$minimiseItem: function(contentItem) {
            contentItem.element.removeClass("lm_maximised");
            contentItem.removeId("__glMaximised");
            this._maximisePlaceholder.after(contentItem.element);
            this._maximisePlaceholder.remove();
            contentItem.parent.callDownwards("setSize");
            this._maximisedItem = null;
            contentItem.emit("minimised");
            this.emit("stateChanged");
          },
          _$closeWindow: function() {
            window.setTimeout(function() {
              window.close();
            }, 1);
          },
          _$getArea: function(x, y) {
            var i, area, smallestSurface = Infinity, mathingArea = null;
            for (i = 0; i < this._itemAreas.length; i++) {
              area = this._itemAreas[i];
              if (x > area.x1 && x < area.x2 && y > area.y1 && y < area.y2 && smallestSurface > area.surface) {
                smallestSurface = area.surface;
                mathingArea = area;
              }
            }
            return mathingArea;
          },
          _$createRootItemAreas: function() {
            var areaSize = 50;
            var sides = { y2: 0, x2: 0, y1: "y2", x1: "x2" };
            for (var side in sides) {
              var area = this.root._$getArea();
              area.side = side;
              if (sides[side])
                area[side] = area[sides[side]] - areaSize;
              else
                area[side] = areaSize;
              area.surface = (area.x2 - area.x1) * (area.y2 - area.y1);
              this._itemAreas.push(area);
            }
          },
          _$calculateItemAreas: function() {
            var i, area, allContentItems = this._getAllContentItems();
            this._itemAreas = [];
            if (allContentItems.length === 1) {
              this._itemAreas.push(this.root._$getArea());
              return;
            }
            this._$createRootItemAreas();
            for (i = 0; i < allContentItems.length; i++) {
              if (!allContentItems[i].isStack) {
                continue;
              }
              area = allContentItems[i]._$getArea();
              if (area === null) {
                continue;
              } else if (area instanceof Array) {
                this._itemAreas = this._itemAreas.concat(area);
              } else {
                this._itemAreas.push(area);
                var header = {};
                lm.utils.copy(header, area);
                lm.utils.copy(header, area.contentItem._contentAreaDimensions.header.highlightArea);
                header.surface = (header.x2 - header.x1) * (header.y2 - header.y1);
                this._itemAreas.push(header);
              }
            }
          },
          _$normalizeContentItem: function(contentItemOrConfig, parent) {
            if (!contentItemOrConfig) {
              throw new Error("No content item defined");
            }
            if (lm.utils.isFunction(contentItemOrConfig)) {
              contentItemOrConfig = contentItemOrConfig();
            }
            if (contentItemOrConfig instanceof lm.items.AbstractContentItem) {
              return contentItemOrConfig;
            }
            if ($2.isPlainObject(contentItemOrConfig) && contentItemOrConfig.type) {
              var newContentItem = this.createContentItem(contentItemOrConfig, parent);
              newContentItem.callDownwards("_$init");
              return newContentItem;
            } else {
              throw new Error("Invalid contentItem");
            }
          },
          _$reconcilePopoutWindows: function() {
            var openPopouts = [], i;
            for (i = 0; i < this.openPopouts.length; i++) {
              if (this.openPopouts[i].getWindow().closed === false) {
                openPopouts.push(this.openPopouts[i]);
              } else {
                this.emit("windowClosed", this.openPopouts[i]);
              }
            }
            if (this.openPopouts.length !== openPopouts.length) {
              this.emit("stateChanged");
              this.openPopouts = openPopouts;
            }
          },
          _getAllContentItems: function() {
            var allContentItems = [];
            var addChildren = function(contentItem) {
              allContentItems.push(contentItem);
              if (contentItem.contentItems instanceof Array) {
                for (var i = 0; i < contentItem.contentItems.length; i++) {
                  addChildren(contentItem.contentItems[i]);
                }
              }
            };
            addChildren(this.root);
            return allContentItems;
          },
          _bindEvents: function() {
            if (this._isFullPage) {
              $2(window).resize(this._resizeFunction);
            }
            $2(window).on("unload beforeunload", this._unloadFunction);
          },
          _onResize: function() {
            clearTimeout(this._resizeTimeoutId);
            this._resizeTimeoutId = setTimeout(lm.utils.fnBind(this.updateSize, this), 100);
          },
          _createConfig: function(config3) {
            var windowConfigKey = lm.utils.getQueryStringParam("gl-window");
            if (windowConfigKey) {
              this.isSubWindow = true;
              config3 = localStorage.getItem(windowConfigKey);
              config3 = JSON.parse(config3);
              config3 = new lm.utils.ConfigMinifier().unminifyConfig(config3);
              localStorage.removeItem(windowConfigKey);
            }
            config3 = $2.extend(true, {}, lm.config.defaultConfig, config3);
            var nextNode = function(node) {
              for (var key in node) {
                if (key !== "props" && typeof node[key] === "object") {
                  nextNode(node[key]);
                } else if (key === "type" && node[key] === "react-component") {
                  node.type = "component";
                  node.componentName = "lm-react-component";
                }
              }
            };
            nextNode(config3);
            if (config3.settings.hasHeaders === false) {
              config3.dimensions.headerHeight = 0;
            }
            return config3;
          },
          _adjustToWindowMode: function() {
            var popInButton = $2('<div class="lm_popin" title="' + this.config.labels.popin + '"><div class="lm_icon"></div><div class="lm_bg"></div></div>');
            popInButton.click(lm.utils.fnBind(function() {
              this.emit("popIn");
            }, this));
            document.title = lm.utils.stripTags(this.config.content[0].title);
            $2("head").append($2("body link, body style, template, .gl_keep"));
            this.container = $2("body").html("").css("visibility", "visible").append(popInButton);
            var x = document.body.offsetHeight;
            window.__glInstance = this;
          },
          _createSubWindows: function() {
            var i, popout;
            for (i = 0; i < this.config.openPopouts.length; i++) {
              popout = this.config.openPopouts[i];
              this.createPopout(popout.content, popout.dimensions, popout.parentId, popout.indexInParent);
            }
          },
          _setContainer: function() {
            var container = $2(this.container || "body");
            if (container.length === 0) {
              throw new Error("GoldenLayout container not found");
            }
            if (container.length > 1) {
              throw new Error("GoldenLayout more than one container element specified");
            }
            if (container[0] === document.body) {
              this._isFullPage = true;
              $2("html, body").css({
                height: "100%",
                margin: 0,
                padding: 0,
                overflow: "hidden"
              });
            }
            this.container = container;
          },
          _create: function(config3) {
            var errorMsg;
            if (!(config3.content instanceof Array)) {
              if (config3.content === void 0) {
                errorMsg = "Missing setting 'content' on top level of configuration";
              } else {
                errorMsg = "Configuration parameter 'content' must be an array";
              }
              throw new lm.errors.ConfigurationError(errorMsg, config3);
            }
            if (config3.content.length > 1) {
              errorMsg = "Top level content can't contain more then one element.";
              throw new lm.errors.ConfigurationError(errorMsg, config3);
            }
            this.root = new lm.items.Root(this, { content: config3.content }, this.container);
            this.root.callDownwards("_$init");
            if (config3.maximisedItemId === "__glMaximised") {
              this.root.getItemsById(config3.maximisedItemId)[0].toggleMaximise();
            }
          },
          _onUnload: function() {
            if (this.config.settings.closePopoutsOnUnload === true) {
              for (var i = 0; i < this.openPopouts.length; i++) {
                this.openPopouts[i].close();
              }
            }
          },
          _adjustColumnsResponsive: function() {
            if (!this._useResponsiveLayout() || this._updatingColumnsResponsive || !this.config.dimensions || !this.config.dimensions.minItemWidth || this.root.contentItems.length === 0 || !this.root.contentItems[0].isRow) {
              this._firstLoad = false;
              return;
            }
            this._firstLoad = false;
            var columnCount = this.root.contentItems[0].contentItems.length;
            if (columnCount <= 1) {
              return;
            }
            var minItemWidth = this.config.dimensions.minItemWidth;
            var totalMinWidth = columnCount * minItemWidth;
            if (totalMinWidth <= this.width) {
              return;
            }
            this._updatingColumnsResponsive = true;
            var finalColumnCount = Math.max(Math.floor(this.width / minItemWidth), 1);
            var stackColumnCount = columnCount - finalColumnCount;
            var rootContentItem = this.root.contentItems[0];
            var firstStackContainer = this._findAllStackContainers()[0];
            for (var i = 0; i < stackColumnCount; i++) {
              var column = rootContentItem.contentItems[rootContentItem.contentItems.length - 1];
              this._addChildContentItemsToContainer(firstStackContainer, column);
            }
            this._updatingColumnsResponsive = false;
          },
          _useResponsiveLayout: function() {
            return this.config.settings && (this.config.settings.responsiveMode == "always" || this.config.settings.responsiveMode == "onload" && this._firstLoad);
          },
          _addChildContentItemsToContainer: function(container, node) {
            if (node.type === "stack") {
              node.contentItems.forEach(function(item) {
                container.addChild(item);
                node.removeChild(item, true);
              });
            } else {
              node.contentItems.forEach(lm.utils.fnBind(function(item) {
                this._addChildContentItemsToContainer(container, item);
              }, this));
            }
          },
          _findAllStackContainers: function() {
            var stackContainers = [];
            this._findAllStackContainersRecursive(stackContainers, this.root);
            return stackContainers;
          },
          _findAllStackContainersRecursive: function(stackContainers, node) {
            node.contentItems.forEach(lm.utils.fnBind(function(item) {
              if (item.type == "stack") {
                stackContainers.push(item);
              } else if (!item.isComponent) {
                this._findAllStackContainersRecursive(stackContainers, item);
              }
            }, this));
          }
        });
        (function() {
          if (typeof define === "function" && define.amd) {
            define(["jquery"], function(jquery) {
              $2 = jquery;
              return lm.LayoutManager;
            });
          } else if (typeof exports === "object") {
            module.exports = lm.LayoutManager;
          } else {
            window.GoldenLayout = lm.LayoutManager;
          }
        })();
        lm.config.itemDefaultConfig = {
          isClosable: true,
          reorderEnabled: true,
          title: ""
        };
        lm.config.defaultConfig = {
          openPopouts: [],
          settings: {
            hasHeaders: true,
            constrainDragToContainer: true,
            reorderEnabled: true,
            selectionEnabled: false,
            popoutWholeStack: false,
            blockedPopoutsThrowError: true,
            closePopoutsOnUnload: true,
            showPopoutIcon: true,
            showMaximiseIcon: true,
            showCloseIcon: true,
            responsiveMode: "onload",
            tabOverlapAllowance: 0,
            reorderOnTabMenuClick: true,
            tabControlOffset: 10
          },
          dimensions: {
            borderWidth: 5,
            borderGrabWidth: 15,
            minItemHeight: 10,
            minItemWidth: 10,
            headerHeight: 20,
            dragProxyWidth: 300,
            dragProxyHeight: 200
          },
          labels: {
            close: "close",
            maximise: "maximise",
            minimise: "minimise",
            popout: "open in new window",
            popin: "pop in",
            tabDropdown: "additional tabs"
          }
        };
        lm.container.ItemContainer = function(config3, parent, layoutManager) {
          lm.utils.EventEmitter.call(this);
          this.width = null;
          this.height = null;
          this.title = config3.componentName;
          this.parent = parent;
          this.layoutManager = layoutManager;
          this.isHidden = false;
          this._config = config3;
          this._element = $2([
            '<div class="lm_item_container">',
            '<div class="lm_content"></div>',
            "</div>"
          ].join(""));
          this._contentElement = this._element.find(".lm_content");
        };
        lm.utils.copy(lm.container.ItemContainer.prototype, {
          getElement: function() {
            return this._contentElement;
          },
          hide: function() {
            this.emit("hide");
            this.isHidden = true;
            this._element.hide();
          },
          show: function() {
            this.emit("show");
            this.isHidden = false;
            this._element.show();
            if (this.height != 0 || this.width != 0) {
              this.emit("shown");
            }
          },
          setSize: function(width, height) {
            var rowOrColumn = this.parent, rowOrColumnChild = this, totalPixel, percentage, direction, newSize, delta, i;
            while (!rowOrColumn.isColumn && !rowOrColumn.isRow) {
              rowOrColumnChild = rowOrColumn;
              rowOrColumn = rowOrColumn.parent;
              if (rowOrColumn.isRoot) {
                return false;
              }
            }
            direction = rowOrColumn.isColumn ? "height" : "width";
            newSize = direction === "height" ? height : width;
            totalPixel = this[direction] * (1 / (rowOrColumnChild.config[direction] / 100));
            percentage = newSize / totalPixel * 100;
            delta = (rowOrColumnChild.config[direction] - percentage) / (rowOrColumn.contentItems.length - 1);
            for (i = 0; i < rowOrColumn.contentItems.length; i++) {
              if (rowOrColumn.contentItems[i] === rowOrColumnChild) {
                rowOrColumn.contentItems[i].config[direction] = percentage;
              } else {
                rowOrColumn.contentItems[i].config[direction] += delta;
              }
            }
            rowOrColumn.callDownwards("setSize");
            return true;
          },
          close: function() {
            if (this._config.isClosable) {
              this.emit("close");
              this.parent.close();
            }
          },
          getState: function() {
            return this._config.componentState;
          },
          extendState: function(state) {
            this.setState($2.extend(true, this.getState(), state));
          },
          setState: function(state) {
            this._config.componentState = state;
            this.parent.emitBubblingEvent("stateChanged");
          },
          setTitle: function(title) {
            this.parent.setTitle(title);
          },
          _$setSize: function(width, height) {
            if (width !== this.width || height !== this.height) {
              this.width = width;
              this.height = height;
              var cl = this._contentElement[0];
              var hdelta = cl.offsetWidth - cl.clientWidth;
              var vdelta = cl.offsetHeight - cl.clientHeight;
              this._contentElement.width(this.width - hdelta).height(this.height - vdelta);
              this.emit("resize");
            }
          }
        });
        lm.controls.BrowserPopout = function(config3, dimensions, parentId, indexInParent, layoutManager) {
          lm.utils.EventEmitter.call(this);
          this.isInitialised = false;
          this._config = config3;
          this._dimensions = dimensions;
          this._parentId = parentId;
          this._indexInParent = indexInParent;
          this._layoutManager = layoutManager;
          this._popoutWindow = null;
          this._id = null;
          this._createWindow();
        };
        lm.utils.copy(lm.controls.BrowserPopout.prototype, {
          toConfig: function() {
            if (this.isInitialised === false) {
              throw new Error("Can't create config, layout not yet initialised");
              return;
            }
            return {
              dimensions: {
                width: this.getGlInstance().width,
                height: this.getGlInstance().height,
                left: this._popoutWindow.screenX || this._popoutWindow.screenLeft,
                top: this._popoutWindow.screenY || this._popoutWindow.screenTop
              },
              content: this.getGlInstance().toConfig().content,
              parentId: this._parentId,
              indexInParent: this._indexInParent
            };
          },
          getGlInstance: function() {
            return this._popoutWindow.__glInstance;
          },
          getWindow: function() {
            return this._popoutWindow;
          },
          close: function() {
            if (this.getGlInstance()) {
              this.getGlInstance()._$closeWindow();
            } else {
              try {
                this.getWindow().close();
              } catch (e) {
              }
            }
          },
          popIn: function() {
            var childConfig, parentItem, index2 = this._indexInParent;
            if (this._parentId) {
              childConfig = $2.extend(true, {}, this.getGlInstance().toConfig()).content[0];
              parentItem = this._layoutManager.root.getItemsById(this._parentId)[0];
              if (!parentItem) {
                if (this._layoutManager.root.contentItems.length > 0) {
                  parentItem = this._layoutManager.root.contentItems[0];
                } else {
                  parentItem = this._layoutManager.root;
                }
                index2 = 0;
              }
            }
            parentItem.addChild(childConfig, this._indexInParent);
            this.close();
          },
          _createWindow: function() {
            var checkReadyInterval, url = this._createUrl(), title = Math.floor(Math.random() * 1e6).toString(36), options = this._serializeWindowOptions({
              width: this._dimensions.width,
              height: this._dimensions.height,
              innerWidth: this._dimensions.width,
              innerHeight: this._dimensions.height,
              menubar: "no",
              toolbar: "no",
              location: "no",
              personalbar: "no",
              resizable: "yes",
              scrollbars: "no",
              status: "no"
            });
            this._popoutWindow = window.open(url, title, options);
            if (!this._popoutWindow) {
              if (this._layoutManager.config.settings.blockedPopoutsThrowError === true) {
                var error = new Error("Popout blocked");
                error.type = "popoutBlocked";
                throw error;
              } else {
                return;
              }
            }
            $2(this._popoutWindow).on("load", lm.utils.fnBind(this._positionWindow, this)).on("unload beforeunload", lm.utils.fnBind(this._onClose, this));
            checkReadyInterval = setInterval(lm.utils.fnBind(function() {
              if (this._popoutWindow.__glInstance && this._popoutWindow.__glInstance.isInitialised) {
                this._onInitialised();
                clearInterval(checkReadyInterval);
              }
            }, this), 10);
          },
          _serializeWindowOptions: function(windowOptions) {
            var windowOptionsString = [], key;
            for (key in windowOptions) {
              windowOptionsString.push(key + "=" + windowOptions[key]);
            }
            return windowOptionsString.join(",");
          },
          _createUrl: function() {
            var config3 = { content: this._config }, storageKey = "gl-window-config-" + lm.utils.getUniqueId(), urlParts;
            config3 = new lm.utils.ConfigMinifier().minifyConfig(config3);
            try {
              localStorage.setItem(storageKey, JSON.stringify(config3));
            } catch (e) {
              throw new Error("Error while writing to localStorage " + e.toString());
            }
            urlParts = document.location.href.split("?");
            if (urlParts.length === 1) {
              return urlParts[0] + "?gl-window=" + storageKey;
            } else {
              return document.location.href + "&gl-window=" + storageKey;
            }
          },
          _positionWindow: function() {
            this._popoutWindow.moveTo(this._dimensions.left, this._dimensions.top);
            this._popoutWindow.focus();
          },
          _onInitialised: function() {
            this.isInitialised = true;
            this.getGlInstance().on("popIn", this.popIn, this);
            this.emit("initialised");
          },
          _onClose: function() {
            setTimeout(lm.utils.fnBind(this.emit, this, ["closed"]), 50);
          }
        });
        lm.controls.DragProxy = function(x, y, dragListener, layoutManager, contentItem, originalParent) {
          lm.utils.EventEmitter.call(this);
          this._dragListener = dragListener;
          this._layoutManager = layoutManager;
          this._contentItem = contentItem;
          this._originalParent = originalParent;
          this._area = null;
          this._lastValidArea = null;
          this._dragListener.on("drag", this._onDrag, this);
          this._dragListener.on("dragStop", this._onDrop, this);
          this.element = $2(lm.controls.DragProxy._template);
          if (originalParent && originalParent._side) {
            this._sided = originalParent._sided;
            this.element.addClass("lm_" + originalParent._side);
            if (["right", "bottom"].indexOf(originalParent._side) >= 0)
              this.element.find(".lm_content").after(this.element.find(".lm_header"));
          }
          this.element.css({ left: x, top: y });
          this.element.find(".lm_tab").attr("title", lm.utils.stripTags(this._contentItem.config.title));
          this.element.find(".lm_title").html(this._contentItem.config.title);
          this.childElementContainer = this.element.find(".lm_content");
          this.childElementContainer.append(contentItem.element);
          this._updateTree();
          this._layoutManager._$calculateItemAreas();
          this._setDimensions();
          $2(document.body).append(this.element);
          var offset = this._layoutManager.container.offset();
          this._minX = offset.left;
          this._minY = offset.top;
          this._maxX = this._layoutManager.container.width() + this._minX;
          this._maxY = this._layoutManager.container.height() + this._minY;
          this._width = this.element.width();
          this._height = this.element.height();
          this._setDropPosition(x, y);
        };
        lm.controls.DragProxy._template = '<div class="lm_dragProxy"><div class="lm_header"><ul class="lm_tabs"><li class="lm_tab lm_active"><i class="lm_left"></i><span class="lm_title"></span><i class="lm_right"></i></li></ul></div><div class="lm_content"></div></div>';
        lm.utils.copy(lm.controls.DragProxy.prototype, {
          _onDrag: function(offsetX, offsetY, event) {
            event = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0] : event;
            var x = event.pageX, y = event.pageY, isWithinContainer = x > this._minX && x < this._maxX && y > this._minY && y < this._maxY;
            if (!isWithinContainer && this._layoutManager.config.settings.constrainDragToContainer === true) {
              return;
            }
            this._setDropPosition(x, y);
          },
          _setDropPosition: function(x, y) {
            this.element.css({ left: x, top: y });
            this._area = this._layoutManager._$getArea(x, y);
            if (this._area !== null) {
              this._lastValidArea = this._area;
              this._area.contentItem._$highlightDropZone(x, y, this._area);
            }
          },
          _onDrop: function() {
            this._layoutManager.dropTargetIndicator.hide();
            if (this._area !== null) {
              this._area.contentItem._$onDrop(this._contentItem, this._area);
            } else if (this._lastValidArea !== null) {
              this._lastValidArea.contentItem._$onDrop(this._contentItem, this._lastValidArea);
            } else if (this._originalParent) {
              this._originalParent.addChild(this._contentItem);
            } else {
              this._contentItem._$destroy();
            }
            this.element.remove();
            this._layoutManager.emit("itemDropped", this._contentItem);
          },
          _updateTree: function() {
            if (this._contentItem.parent) {
              this._contentItem.parent.removeChild(this._contentItem, true);
            }
            this._contentItem._$setParent(this);
          },
          _setDimensions: function() {
            var dimensions = this._layoutManager.config.dimensions, width = dimensions.dragProxyWidth, height = dimensions.dragProxyHeight;
            this.element.width(width);
            this.element.height(height);
            width -= this._sided ? dimensions.headerHeight : 0;
            height -= !this._sided ? dimensions.headerHeight : 0;
            this.childElementContainer.width(width);
            this.childElementContainer.height(height);
            this._contentItem.element.width(width);
            this._contentItem.element.height(height);
            this._contentItem.callDownwards("_$show");
            this._contentItem.callDownwards("setSize");
          }
        });
        lm.controls.DragSource = function(element, itemConfig, layoutManager) {
          this._element = element;
          this._itemConfig = itemConfig;
          this._layoutManager = layoutManager;
          this._dragListener = null;
          this._createDragListener();
        };
        lm.utils.copy(lm.controls.DragSource.prototype, {
          _createDragListener: function() {
            if (this._dragListener !== null) {
              this._dragListener.destroy();
            }
            this._dragListener = new lm.utils.DragListener(this._element);
            this._dragListener.on("dragStart", this._onDragStart, this);
            this._dragListener.on("dragStop", this._createDragListener, this);
          },
          _onDragStart: function(x, y) {
            var itemConfig = this._itemConfig;
            if (lm.utils.isFunction(itemConfig)) {
              itemConfig = itemConfig();
            }
            var contentItem = this._layoutManager._$normalizeContentItem($2.extend(true, {}, itemConfig)), dragProxy = new lm.controls.DragProxy(x, y, this._dragListener, this._layoutManager, contentItem, null);
            this._layoutManager.transitionIndicator.transitionElements(this._element, dragProxy.element);
          }
        });
        lm.controls.DropTargetIndicator = function() {
          this.element = $2(lm.controls.DropTargetIndicator._template);
          $2(document.body).append(this.element);
        };
        lm.controls.DropTargetIndicator._template = '<div class="lm_dropTargetIndicator"><div class="lm_inner"></div></div>';
        lm.utils.copy(lm.controls.DropTargetIndicator.prototype, {
          destroy: function() {
            this.element.remove();
          },
          highlight: function(x1, y1, x2, y2) {
            this.highlightArea({ x1, y1, x2, y2 });
          },
          highlightArea: function(area) {
            this.element.css({
              left: area.x1,
              top: area.y1,
              width: area.x2 - area.x1,
              height: area.y2 - area.y1
            }).show();
          },
          hide: function() {
            this.element.hide();
          }
        });
        lm.controls.Header = function(layoutManager, parent) {
          lm.utils.EventEmitter.call(this);
          this.layoutManager = layoutManager;
          this.element = $2(lm.controls.Header._template);
          if (this.layoutManager.config.settings.selectionEnabled === true) {
            this.element.addClass("lm_selectable");
            this.element.on("click touchstart", lm.utils.fnBind(this._onHeaderClick, this));
          }
          this.tabsContainer = this.element.find(".lm_tabs");
          this.tabDropdownContainer = this.element.find(".lm_tabdropdown_list");
          this.tabDropdownContainer.hide();
          this.controlsContainer = this.element.find(".lm_controls");
          this.parent = parent;
          this.parent.on("resize", this._updateTabSizes, this);
          this.tabs = [];
          this.activeContentItem = null;
          this.closeButton = null;
          this.tabDropdownButton = null;
          this.hideAdditionalTabsDropdown = lm.utils.fnBind(this._hideAdditionalTabsDropdown, this);
          $2(document).mouseup(this.hideAdditionalTabsDropdown);
          this._lastVisibleTabIndex = -1;
          this._tabControlOffset = this.layoutManager.config.settings.tabControlOffset;
          this._createControls();
        };
        lm.controls.Header._template = [
          '<div class="lm_header">',
          '<ul class="lm_tabs"></ul>',
          '<ul class="lm_controls"></ul>',
          '<ul class="lm_tabdropdown_list"></ul>',
          "</div>"
        ].join("");
        lm.utils.copy(lm.controls.Header.prototype, {
          createTab: function(contentItem, index2) {
            var tab, i;
            for (i = 0; i < this.tabs.length; i++) {
              if (this.tabs[i].contentItem === contentItem) {
                return;
              }
            }
            tab = new lm.controls.Tab(this, contentItem);
            if (this.tabs.length === 0) {
              this.tabs.push(tab);
              this.tabsContainer.append(tab.element);
              return;
            }
            if (index2 === void 0) {
              index2 = this.tabs.length;
            }
            if (index2 > 0) {
              this.tabs[index2 - 1].element.after(tab.element);
            } else {
              this.tabs[0].element.before(tab.element);
            }
            this.tabs.splice(index2, 0, tab);
            this._updateTabSizes();
          },
          removeTab: function(contentItem) {
            for (var i = 0; i < this.tabs.length; i++) {
              if (this.tabs[i].contentItem === contentItem) {
                this.tabs[i]._$destroy();
                this.tabs.splice(i, 1);
                return;
              }
            }
            throw new Error("contentItem is not controlled by this header");
          },
          setActiveContentItem: function(contentItem) {
            var i, j, isActive, activeTab;
            for (i = 0; i < this.tabs.length; i++) {
              isActive = this.tabs[i].contentItem === contentItem;
              this.tabs[i].setActive(isActive);
              if (isActive === true) {
                this.activeContentItem = contentItem;
                this.parent.config.activeItemIndex = i;
              }
            }
            if (this.layoutManager.config.settings.reorderOnTabMenuClick) {
              if (this._lastVisibleTabIndex !== -1 && this.parent.config.activeItemIndex > this._lastVisibleTabIndex) {
                activeTab = this.tabs[this.parent.config.activeItemIndex];
                for (j = this.parent.config.activeItemIndex; j > 0; j--) {
                  this.tabs[j] = this.tabs[j - 1];
                }
                this.tabs[0] = activeTab;
                this.parent.config.activeItemIndex = 0;
              }
            }
            this._updateTabSizes();
            this.parent.emitBubblingEvent("stateChanged");
          },
          position: function(position) {
            var previous2 = this.parent._header.show;
            if (previous2 && !this.parent._side)
              previous2 = "top";
            if (position !== void 0 && this.parent._header.show != position) {
              this.parent._header.show = position;
              this.parent._setupHeaderPosition();
            }
            return previous2;
          },
          _$setClosable: function(isClosable) {
            if (this.closeButton && this._isClosable()) {
              this.closeButton.element[isClosable ? "show" : "hide"]();
              return true;
            }
            return false;
          },
          _$destroy: function() {
            this.emit("destroy", this);
            for (var i = 0; i < this.tabs.length; i++) {
              this.tabs[i]._$destroy();
            }
            $2(document).off("mouseup", this.hideAdditionalTabsDropdown);
            this.element.remove();
          },
          _getHeaderSetting: function(name) {
            if (name in this.parent._header)
              return this.parent._header[name];
          },
          _createControls: function() {
            var closeStack, popout, label, maximiseLabel, minimiseLabel, maximise, maximiseButton, tabDropdownLabel, showTabDropdown;
            showTabDropdown = lm.utils.fnBind(this._showAdditionalTabsDropdown, this);
            tabDropdownLabel = this.layoutManager.config.labels.tabDropdown;
            this.tabDropdownButton = new lm.controls.HeaderButton(this, tabDropdownLabel, "lm_tabdropdown", showTabDropdown);
            this.tabDropdownButton.element.hide();
            if (this._getHeaderSetting("popout")) {
              popout = lm.utils.fnBind(this._onPopoutClick, this);
              label = this._getHeaderSetting("popout");
              new lm.controls.HeaderButton(this, label, "lm_popout", popout);
            }
            if (this._getHeaderSetting("maximise")) {
              maximise = lm.utils.fnBind(this.parent.toggleMaximise, this.parent);
              maximiseLabel = this._getHeaderSetting("maximise");
              minimiseLabel = this._getHeaderSetting("minimise");
              maximiseButton = new lm.controls.HeaderButton(this, maximiseLabel, "lm_maximise", maximise);
              this.parent.on("maximised", function() {
                maximiseButton.element.attr("title", minimiseLabel);
              });
              this.parent.on("minimised", function() {
                maximiseButton.element.attr("title", maximiseLabel);
              });
            }
            if (this._isClosable()) {
              closeStack = lm.utils.fnBind(this.parent.remove, this.parent);
              label = this._getHeaderSetting("close");
              this.closeButton = new lm.controls.HeaderButton(this, label, "lm_close", closeStack);
            }
          },
          _showAdditionalTabsDropdown: function() {
            this.tabDropdownContainer.show();
          },
          _hideAdditionalTabsDropdown: function(e) {
            this.tabDropdownContainer.hide();
          },
          _isClosable: function() {
            return this.parent.config.isClosable && this.layoutManager.config.settings.showCloseIcon;
          },
          _onPopoutClick: function() {
            if (this.layoutManager.config.settings.popoutWholeStack === true) {
              this.parent.popout();
            } else {
              this.activeContentItem.popout();
            }
          },
          _onHeaderClick: function(event) {
            if (event.target === this.element[0]) {
              this.parent.select();
            }
          },
          _updateTabSizes: function(showTabMenu) {
            if (this.tabs.length === 0) {
              return;
            }
            this.tabDropdownButton.element.toggle(showTabMenu === true);
            var size2 = function(val) {
              return val ? "width" : "height";
            };
            this.element.css(size2(!this.parent._sided), "");
            this.element[size2(this.parent._sided)](this.layoutManager.config.dimensions.headerHeight);
            var availableWidth = this.element.outerWidth() - this.controlsContainer.outerWidth() - this._tabControlOffset, cumulativeTabWidth = 0, visibleTabWidth = 0, tabElement, i, j, marginLeft, overlap = 0, tabWidth, tabOverlapAllowance = this.layoutManager.config.settings.tabOverlapAllowance, tabOverlapAllowanceExceeded = false, activeIndex = this.activeContentItem ? this.tabs.indexOf(this.activeContentItem.tab) : 0, activeTab = this.tabs[activeIndex];
            if (this.parent._sided)
              availableWidth = this.element.outerHeight() - this.controlsContainer.outerHeight() - this._tabControlOffset;
            this._lastVisibleTabIndex = -1;
            for (i = 0; i < this.tabs.length; i++) {
              tabElement = this.tabs[i].element;
              this.tabsContainer.append(tabElement);
              tabWidth = tabElement.outerWidth() + parseInt(tabElement.css("margin-right"), 10);
              cumulativeTabWidth += tabWidth;
              if (activeIndex <= i) {
                visibleTabWidth = cumulativeTabWidth;
              } else {
                visibleTabWidth = cumulativeTabWidth + activeTab.element.outerWidth() + parseInt(activeTab.element.css("margin-right"), 10);
              }
              if (visibleTabWidth > availableWidth) {
                if (!tabOverlapAllowanceExceeded) {
                  if (activeIndex > 0 && activeIndex <= i) {
                    overlap = (visibleTabWidth - availableWidth) / (i - 1);
                  } else {
                    overlap = (visibleTabWidth - availableWidth) / i;
                  }
                  if (overlap < tabOverlapAllowance) {
                    for (j = 0; j <= i; j++) {
                      marginLeft = j !== activeIndex && j !== 0 ? "-" + overlap + "px" : "";
                      this.tabs[j].element.css({ "z-index": i - j, "margin-left": marginLeft });
                    }
                    this._lastVisibleTabIndex = i;
                    this.tabsContainer.append(tabElement);
                  } else {
                    tabOverlapAllowanceExceeded = true;
                  }
                } else if (i === activeIndex) {
                  tabElement.css({ "z-index": "auto", "margin-left": "" });
                  this.tabsContainer.append(tabElement);
                }
                if (tabOverlapAllowanceExceeded && i !== activeIndex) {
                  if (showTabMenu) {
                    tabElement.css({ "z-index": "auto", "margin-left": "" });
                    this.tabDropdownContainer.append(tabElement);
                  } else {
                    this._updateTabSizes(true);
                    return;
                  }
                }
              } else {
                this._lastVisibleTabIndex = i;
                tabElement.css({ "z-index": "auto", "margin-left": "" });
                this.tabsContainer.append(tabElement);
              }
            }
          }
        });
        lm.controls.HeaderButton = function(header, label, cssClass, action) {
          this._header = header;
          this.element = $2('<li class="' + cssClass + '" title="' + label + '"></li>');
          this._header.on("destroy", this._$destroy, this);
          this._action = action;
          this.element.on("click touchstart", this._action);
          this._header.controlsContainer.append(this.element);
        };
        lm.utils.copy(lm.controls.HeaderButton.prototype, {
          _$destroy: function() {
            this.element.off();
            this.element.remove();
          }
        });
        lm.controls.Splitter = function(isVertical, size2, grabSize) {
          this._isVertical = isVertical;
          this._size = size2;
          this._grabSize = grabSize < size2 ? size2 : grabSize;
          this.element = this._createElement();
          this._dragListener = new lm.utils.DragListener(this.element);
        };
        lm.utils.copy(lm.controls.Splitter.prototype, {
          on: function(event, callback, context) {
            this._dragListener.on(event, callback, context);
          },
          _$destroy: function() {
            this.element.remove();
          },
          _createElement: function() {
            var dragHandle = $2('<div class="lm_drag_handle"></div>');
            var element = $2('<div class="lm_splitter"></div>');
            element.append(dragHandle);
            var handleExcessSize = this._grabSize - this._size;
            var handleExcessPos = handleExcessSize / 2;
            if (this._isVertical) {
              dragHandle.css("top", -handleExcessPos);
              dragHandle.css("height", this._size + handleExcessSize);
              element.addClass("lm_vertical");
              element["height"](this._size);
            } else {
              dragHandle.css("left", -handleExcessPos);
              dragHandle.css("width", this._size + handleExcessSize);
              element.addClass("lm_horizontal");
              element["width"](this._size);
            }
            return element;
          }
        });
        lm.controls.Tab = function(header, contentItem) {
          this.header = header;
          this.contentItem = contentItem;
          this.element = $2(lm.controls.Tab._template);
          this.titleElement = this.element.find(".lm_title");
          this.closeElement = this.element.find(".lm_close_tab");
          this.closeElement[contentItem.config.isClosable ? "show" : "hide"]();
          this.isActive = false;
          this.setTitle(contentItem.config.title);
          this.contentItem.on("titleChanged", this.setTitle, this);
          this._layoutManager = this.contentItem.layoutManager;
          if (this._layoutManager.config.settings.reorderEnabled === true && contentItem.config.reorderEnabled === true) {
            this._dragListener = new lm.utils.DragListener(this.element);
            this._dragListener.on("dragStart", this._onDragStart, this);
            this.contentItem.on("destroy", this._dragListener.destroy, this._dragListener);
          }
          this._onTabClickFn = lm.utils.fnBind(this._onTabClick, this);
          this._onCloseClickFn = lm.utils.fnBind(this._onCloseClick, this);
          this.element.on("mousedown touchstart", this._onTabClickFn);
          if (this.contentItem.config.isClosable) {
            this.closeElement.on("click touchstart", this._onCloseClickFn);
            this.closeElement.on("mousedown", this._onCloseMousedown);
          } else {
            this.closeElement.remove();
          }
          this.contentItem.tab = this;
          this.contentItem.emit("tab", this);
          this.contentItem.layoutManager.emit("tabCreated", this);
          if (this.contentItem.isComponent) {
            this.contentItem.container.tab = this;
            this.contentItem.container.emit("tab", this);
          }
        };
        lm.controls.Tab._template = '<li class="lm_tab"><i class="lm_left"></i><span class="lm_title"></span><div class="lm_close_tab"></div><i class="lm_right"></i></li>';
        lm.utils.copy(lm.controls.Tab.prototype, {
          setTitle: function(title) {
            this.element.attr("title", lm.utils.stripTags(title));
            this.titleElement.html(title);
          },
          setActive: function(isActive) {
            if (isActive === this.isActive) {
              return;
            }
            this.isActive = isActive;
            if (isActive) {
              this.element.addClass("lm_active");
            } else {
              this.element.removeClass("lm_active");
            }
          },
          _$destroy: function() {
            this.element.off("mousedown touchstart", this._onTabClickFn);
            this.closeElement.off("click touchstart", this._onCloseClickFn);
            if (this._dragListener) {
              this.contentItem.off("destroy", this._dragListener.destroy, this._dragListener);
              this._dragListener.off("dragStart", this._onDragStart);
              this._dragListener = null;
            }
            this.element.remove();
          },
          _onDragStart: function(x, y) {
            if (this.contentItem.parent.isMaximised === true) {
              this.contentItem.parent.toggleMaximise();
            }
            new lm.controls.DragProxy(x, y, this._dragListener, this._layoutManager, this.contentItem, this.header.parent);
          },
          _onTabClick: function(event) {
            if (event.button === 0 || event.type === "touchstart") {
              var activeContentItem = this.header.parent.getActiveContentItem();
              if (this.contentItem !== activeContentItem) {
                this.header.parent.setActiveContentItem(this.contentItem);
              }
            } else if (event.button === 1 && this.contentItem.config.isClosable) {
              this._onCloseClick(event);
            }
          },
          _onCloseClick: function(event) {
            event.stopPropagation();
            this.header.parent.removeChild(this.contentItem);
          },
          _onCloseMousedown: function(event) {
            event.stopPropagation();
          }
        });
        lm.controls.TransitionIndicator = function() {
          this._element = $2('<div class="lm_transition_indicator"></div>');
          $2(document.body).append(this._element);
          this._toElement = null;
          this._fromDimensions = null;
          this._totalAnimationDuration = 200;
          this._animationStartTime = null;
        };
        lm.utils.copy(lm.controls.TransitionIndicator.prototype, {
          destroy: function() {
            this._element.remove();
          },
          transitionElements: function(fromElement, toElement) {
            return;
            this._toElement = toElement;
            this._animationStartTime = lm.utils.now();
            this._fromDimensions = this._measure(fromElement);
            this._fromDimensions.opacity = 0.8;
            this._element.show().css(this._fromDimensions);
            lm.utils.animFrame(lm.utils.fnBind(this._nextAnimationFrame, this));
          },
          _nextAnimationFrame: function() {
            var toDimensions = this._measure(this._toElement), animationProgress = (lm.utils.now() - this._animationStartTime) / this._totalAnimationDuration, currentFrameStyles = {}, cssProperty;
            if (animationProgress >= 1) {
              this._element.hide();
              return;
            }
            toDimensions.opacity = 0;
            for (cssProperty in this._fromDimensions) {
              currentFrameStyles[cssProperty] = this._fromDimensions[cssProperty] + (toDimensions[cssProperty] - this._fromDimensions[cssProperty]) * animationProgress;
            }
            this._element.css(currentFrameStyles);
            lm.utils.animFrame(lm.utils.fnBind(this._nextAnimationFrame, this));
          },
          _measure: function(element) {
            var offset = element.offset();
            return {
              left: offset.left,
              top: offset.top,
              width: element.outerWidth(),
              height: element.outerHeight()
            };
          }
        });
        lm.errors.ConfigurationError = function(message, node) {
          Error.call(this);
          this.name = "Configuration Error";
          this.message = message;
          this.node = node;
        };
        lm.errors.ConfigurationError.prototype = new Error();
        lm.items.AbstractContentItem = function(layoutManager, config3, parent) {
          lm.utils.EventEmitter.call(this);
          this.config = this._extendItemNode(config3);
          this.type = config3.type;
          this.contentItems = [];
          this.parent = parent;
          this.isInitialised = false;
          this.isMaximised = false;
          this.isRoot = false;
          this.isRow = false;
          this.isColumn = false;
          this.isStack = false;
          this.isComponent = false;
          this.layoutManager = layoutManager;
          this._pendingEventPropagations = {};
          this._throttledEvents = ["stateChanged"];
          this.on(lm.utils.EventEmitter.ALL_EVENT, this._propagateEvent, this);
          if (config3.content) {
            this._createContentItems(config3);
          }
        };
        lm.utils.copy(lm.items.AbstractContentItem.prototype, {
          setSize: function() {
            throw new Error("Abstract Method");
          },
          callDownwards: function(functionName, functionArguments, bottomUp, skipSelf) {
            var i;
            if (bottomUp !== true && skipSelf !== true) {
              this[functionName].apply(this, functionArguments || []);
            }
            for (i = 0; i < this.contentItems.length; i++) {
              this.contentItems[i].callDownwards(functionName, functionArguments, bottomUp);
            }
            if (bottomUp === true && skipSelf !== true) {
              this[functionName].apply(this, functionArguments || []);
            }
          },
          removeChild: function(contentItem, keepChild) {
            var index2 = lm.utils.indexOf(contentItem, this.contentItems);
            if (index2 === -1) {
              throw new Error("Can't remove child item. Unknown content item");
            }
            if (keepChild !== true) {
              this.contentItems[index2]._$destroy();
            }
            this.contentItems.splice(index2, 1);
            this.config.content.splice(index2, 1);
            if (this.contentItems.length > 0) {
              this.callDownwards("setSize");
            } else if (!(this instanceof lm.items.Root) && this.config.isClosable === true) {
              this.parent.removeChild(this);
            }
          },
          addChild: function(contentItem, index2) {
            if (index2 === void 0) {
              index2 = this.contentItems.length;
            }
            this.contentItems.splice(index2, 0, contentItem);
            if (this.config.content === void 0) {
              this.config.content = [];
            }
            this.config.content.splice(index2, 0, contentItem.config);
            contentItem.parent = this;
            if (contentItem.parent.isInitialised === true && contentItem.isInitialised === false) {
              contentItem._$init();
            }
          },
          replaceChild: function(oldChild, newChild, _$destroyOldChild) {
            newChild = this.layoutManager._$normalizeContentItem(newChild);
            var index2 = lm.utils.indexOf(oldChild, this.contentItems), parentNode = oldChild.element[0].parentNode;
            if (index2 === -1) {
              throw new Error("Can't replace child. oldChild is not child of this");
            }
            parentNode.replaceChild(newChild.element[0], oldChild.element[0]);
            if (_$destroyOldChild === true) {
              oldChild.parent = null;
              oldChild._$destroy();
            }
            this.contentItems[index2] = newChild;
            newChild.parent = this;
            if (this.isStack) {
              this.header.tabs[index2].contentItem = newChild;
            }
            if (newChild.parent.isInitialised === true && newChild.isInitialised === false) {
              newChild._$init();
            }
            this.callDownwards("setSize");
          },
          remove: function() {
            this.parent.removeChild(this);
          },
          popout: function() {
            var browserPopout = this.layoutManager.createPopout(this);
            this.emitBubblingEvent("stateChanged");
            return browserPopout;
          },
          toggleMaximise: function(e) {
            e && e.preventDefault();
            if (this.isMaximised === true) {
              this.layoutManager._$minimiseItem(this);
            } else {
              this.layoutManager._$maximiseItem(this);
            }
            this.isMaximised = !this.isMaximised;
            this.emitBubblingEvent("stateChanged");
          },
          select: function() {
            if (this.layoutManager.selectedItem !== this) {
              this.layoutManager.selectItem(this, true);
              this.element.addClass("lm_selected");
            }
          },
          deselect: function() {
            if (this.layoutManager.selectedItem === this) {
              this.layoutManager.selectedItem = null;
              this.element.removeClass("lm_selected");
            }
          },
          setTitle: function(title) {
            this.config.title = title;
            this.emit("titleChanged", title);
            this.emit("stateChanged");
          },
          hasId: function(id) {
            if (!this.config.id) {
              return false;
            } else if (typeof this.config.id === "string") {
              return this.config.id === id;
            } else if (this.config.id instanceof Array) {
              return lm.utils.indexOf(id, this.config.id) !== -1;
            }
          },
          addId: function(id) {
            if (this.hasId(id)) {
              return;
            }
            if (!this.config.id) {
              this.config.id = id;
            } else if (typeof this.config.id === "string") {
              this.config.id = [this.config.id, id];
            } else if (this.config.id instanceof Array) {
              this.config.id.push(id);
            }
          },
          removeId: function(id) {
            if (!this.hasId(id)) {
              throw new Error("Id not found");
            }
            if (typeof this.config.id === "string") {
              delete this.config.id;
            } else if (this.config.id instanceof Array) {
              var index2 = lm.utils.indexOf(id, this.config.id);
              this.config.id.splice(index2, 1);
            }
          },
          getItemsByFilter: function(filter) {
            var result = [], next2 = function(contentItem) {
              for (var i = 0; i < contentItem.contentItems.length; i++) {
                if (filter(contentItem.contentItems[i]) === true) {
                  result.push(contentItem.contentItems[i]);
                }
                next2(contentItem.contentItems[i]);
              }
            };
            next2(this);
            return result;
          },
          getItemsById: function(id) {
            return this.getItemsByFilter(function(item) {
              if (item.config.id instanceof Array) {
                return lm.utils.indexOf(id, item.config.id) !== -1;
              } else {
                return item.config.id === id;
              }
            });
          },
          getItemsByType: function(type2) {
            return this._$getItemsByProperty("type", type2);
          },
          getComponentsByName: function(componentName) {
            var components = this._$getItemsByProperty("componentName", componentName), instances = [], i;
            for (i = 0; i < components.length; i++) {
              instances.push(components[i].instance);
            }
            return instances;
          },
          _$getItemsByProperty: function(key, value) {
            return this.getItemsByFilter(function(item) {
              return item[key] === value;
            });
          },
          _$setParent: function(parent) {
            this.parent = parent;
          },
          _$highlightDropZone: function(x, y, area) {
            this.layoutManager.dropTargetIndicator.highlightArea(area);
          },
          _$onDrop: function(contentItem) {
            this.addChild(contentItem);
          },
          _$hide: function() {
            this._callOnActiveComponents("hide");
            this.element.hide();
            this.layoutManager.updateSize();
          },
          _$show: function() {
            this._callOnActiveComponents("show");
            this.element.show();
            this.layoutManager.updateSize();
          },
          _callOnActiveComponents: function(methodName) {
            var stacks = this.getItemsByType("stack"), activeContentItem, i;
            for (i = 0; i < stacks.length; i++) {
              activeContentItem = stacks[i].getActiveContentItem();
              if (activeContentItem && activeContentItem.isComponent) {
                activeContentItem.container[methodName]();
              }
            }
          },
          _$destroy: function() {
            this.emitBubblingEvent("beforeItemDestroyed");
            this.callDownwards("_$destroy", [], true, true);
            this.element.remove();
            this.emitBubblingEvent("itemDestroyed");
          },
          _$getArea: function(element) {
            element = element || this.element;
            var offset = element.offset(), width = element.width(), height = element.height();
            return {
              x1: offset.left,
              y1: offset.top,
              x2: offset.left + width,
              y2: offset.top + height,
              surface: width * height,
              contentItem: this
            };
          },
          _$init: function() {
            var i;
            this.setSize();
            for (i = 0; i < this.contentItems.length; i++) {
              this.childElementContainer.append(this.contentItems[i].element);
            }
            this.isInitialised = true;
            this.emitBubblingEvent("itemCreated");
            this.emitBubblingEvent(this.type + "Created");
          },
          emitBubblingEvent: function(name) {
            var event = new lm.utils.BubblingEvent(name, this);
            this.emit(name, event);
          },
          _createContentItems: function(config3) {
            var oContentItem, i;
            if (!(config3.content instanceof Array)) {
              throw new lm.errors.ConfigurationError("content must be an Array", config3);
            }
            for (i = 0; i < config3.content.length; i++) {
              oContentItem = this.layoutManager.createContentItem(config3.content[i], this);
              this.contentItems.push(oContentItem);
            }
          },
          _extendItemNode: function(config3) {
            for (var key in lm.config.itemDefaultConfig) {
              if (config3[key] === void 0) {
                config3[key] = lm.config.itemDefaultConfig[key];
              }
            }
            return config3;
          },
          _propagateEvent: function(name, event) {
            if (event instanceof lm.utils.BubblingEvent && event.isPropagationStopped === false && this.isInitialised === true) {
              if (this.isRoot === false && this.parent) {
                this.parent.emit.apply(this.parent, Array.prototype.slice.call(arguments, 0));
              } else {
                this._scheduleEventPropagationToLayoutManager(name, event);
              }
            }
          },
          _scheduleEventPropagationToLayoutManager: function(name, event) {
            if (lm.utils.indexOf(name, this._throttledEvents) === -1) {
              this.layoutManager.emit(name, event.origin);
            } else {
              if (this._pendingEventPropagations[name] !== true) {
                this._pendingEventPropagations[name] = true;
                lm.utils.animFrame(lm.utils.fnBind(this._propagateEventToLayoutManager, this, [name, event]));
              }
            }
          },
          _propagateEventToLayoutManager: function(name, event) {
            this._pendingEventPropagations[name] = false;
            this.layoutManager.emit(name, event);
          }
        });
        lm.items.Component = function(layoutManager, config3, parent) {
          lm.items.AbstractContentItem.call(this, layoutManager, config3, parent);
          var ComponentConstructor = layoutManager.getComponent(this.config.componentName), componentConfig = $2.extend(true, {}, this.config.componentState || {});
          componentConfig.componentName = this.config.componentName;
          this.componentName = this.config.componentName;
          if (this.config.title === "") {
            this.config.title = this.config.componentName;
          }
          this.isComponent = true;
          this.container = new lm.container.ItemContainer(this.config, this, layoutManager);
          this.instance = new ComponentConstructor(this.container, componentConfig);
          this.element = this.container._element;
        };
        lm.utils.extend(lm.items.Component, lm.items.AbstractContentItem);
        lm.utils.copy(lm.items.Component.prototype, {
          close: function() {
            this.parent.removeChild(this);
          },
          setSize: function() {
            if (this.element.is(":visible")) {
              this.container._$setSize(this.element.width(), this.element.height());
            }
          },
          _$init: function() {
            lm.items.AbstractContentItem.prototype._$init.call(this);
            this.container.emit("open");
          },
          _$hide: function() {
            this.container.hide();
            lm.items.AbstractContentItem.prototype._$hide.call(this);
          },
          _$show: function() {
            this.container.show();
            lm.items.AbstractContentItem.prototype._$show.call(this);
          },
          _$shown: function() {
            this.container.shown();
            lm.items.AbstractContentItem.prototype._$shown.call(this);
          },
          _$destroy: function() {
            this.container.emit("destroy", this);
            lm.items.AbstractContentItem.prototype._$destroy.call(this);
          },
          _$getArea: function() {
            return null;
          }
        });
        lm.items.Root = function(layoutManager, config3, containerElement) {
          lm.items.AbstractContentItem.call(this, layoutManager, config3, null);
          this.isRoot = true;
          this.type = "root";
          this.element = $2('<div class="lm_goldenlayout lm_item lm_root"></div>');
          this.childElementContainer = this.element;
          this._containerElement = containerElement;
          this._containerElement.append(this.element);
        };
        lm.utils.extend(lm.items.Root, lm.items.AbstractContentItem);
        lm.utils.copy(lm.items.Root.prototype, {
          addChild: function(contentItem) {
            if (this.contentItems.length > 0) {
              throw new Error("Root node can only have a single child");
            }
            contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);
            this.childElementContainer.append(contentItem.element);
            lm.items.AbstractContentItem.prototype.addChild.call(this, contentItem);
            this.callDownwards("setSize");
            this.emitBubblingEvent("stateChanged");
          },
          setSize: function(width, height) {
            width = typeof width === "undefined" ? this._containerElement.width() : width;
            height = typeof height === "undefined" ? this._containerElement.height() : height;
            this.element.width(width);
            this.element.height(height);
            if (this.contentItems[0]) {
              this.contentItems[0].element.width(width);
              this.contentItems[0].element.height(height);
            }
          },
          _$highlightDropZone: function(x, y, area) {
            this.layoutManager.tabDropPlaceholder.remove();
            lm.items.AbstractContentItem.prototype._$highlightDropZone.apply(this, arguments);
          },
          _$onDrop: function(contentItem, area) {
            var stack;
            if (contentItem.isComponent) {
              stack = this.layoutManager.createContentItem({
                type: "stack",
                header: contentItem.config.header || {}
              }, this);
              stack._$init();
              stack.addChild(contentItem);
              contentItem = stack;
            }
            if (!this.contentItems.length) {
              this.addChild(contentItem);
            } else {
              var type2 = area.side[0] == "x" ? "row" : "column";
              var dimension = area.side[0] == "x" ? "width" : "height";
              var insertBefore = area.side[1] == "2";
              var column = this.contentItems[0];
              if (!column instanceof lm.items.RowOrColumn || column.type != type2) {
                var rowOrColumn = this.layoutManager.createContentItem({ type: type2 }, this);
                this.replaceChild(column, rowOrColumn);
                rowOrColumn.addChild(contentItem, insertBefore ? 0 : void 0, true);
                rowOrColumn.addChild(column, insertBefore ? void 0 : 0, true);
                column.config[dimension] = 50;
                contentItem.config[dimension] = 50;
                rowOrColumn.callDownwards("setSize");
              } else {
                var sibbling = column.contentItems[insertBefore ? 0 : column.contentItems.length - 1];
                column.addChild(contentItem, insertBefore ? 0 : void 0, true);
                sibbling.config[dimension] *= 0.5;
                contentItem.config[dimension] = sibbling.config[dimension];
                column.callDownwards("setSize");
              }
            }
          }
        });
        lm.items.RowOrColumn = function(isColumn, layoutManager, config3, parent) {
          lm.items.AbstractContentItem.call(this, layoutManager, config3, parent);
          this.isRow = !isColumn;
          this.isColumn = isColumn;
          this.element = $2('<div class="lm_item lm_' + (isColumn ? "column" : "row") + '"></div>');
          this.childElementContainer = this.element;
          this._splitterSize = layoutManager.config.dimensions.borderWidth;
          this._splitterGrabSize = layoutManager.config.dimensions.borderGrabWidth;
          this._isColumn = isColumn;
          this._dimension = isColumn ? "height" : "width";
          this._splitter = [];
          this._splitterPosition = null;
          this._splitterMinPosition = null;
          this._splitterMaxPosition = null;
        };
        lm.utils.extend(lm.items.RowOrColumn, lm.items.AbstractContentItem);
        lm.utils.copy(lm.items.RowOrColumn.prototype, {
          addChild: function(contentItem, index2, _$suspendResize) {
            var newItemSize, itemSize, i, splitterElement;
            contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);
            if (index2 === void 0) {
              index2 = this.contentItems.length;
            }
            if (this.contentItems.length > 0) {
              splitterElement = this._createSplitter(Math.max(0, index2 - 1)).element;
              if (index2 > 0) {
                this.contentItems[index2 - 1].element.after(splitterElement);
                splitterElement.after(contentItem.element);
              } else {
                this.contentItems[0].element.before(splitterElement);
                splitterElement.before(contentItem.element);
              }
            } else {
              this.childElementContainer.append(contentItem.element);
            }
            lm.items.AbstractContentItem.prototype.addChild.call(this, contentItem, index2);
            newItemSize = 1 / this.contentItems.length * 100;
            if (_$suspendResize === true) {
              this.emitBubblingEvent("stateChanged");
              return;
            }
            for (i = 0; i < this.contentItems.length; i++) {
              if (this.contentItems[i] === contentItem) {
                contentItem.config[this._dimension] = newItemSize;
              } else {
                itemSize = this.contentItems[i].config[this._dimension] *= (100 - newItemSize) / 100;
                this.contentItems[i].config[this._dimension] = itemSize;
              }
            }
            this.callDownwards("setSize");
            this.emitBubblingEvent("stateChanged");
          },
          removeChild: function(contentItem, keepChild) {
            var removedItemSize = contentItem.config[this._dimension], index2 = lm.utils.indexOf(contentItem, this.contentItems), splitterIndex = Math.max(index2 - 1, 0), i, childItem;
            if (index2 === -1) {
              throw new Error("Can't remove child. ContentItem is not child of this Row or Column");
            }
            if (this._splitter[splitterIndex]) {
              this._splitter[splitterIndex]._$destroy();
              this._splitter.splice(splitterIndex, 1);
            }
            for (i = 0; i < this.contentItems.length; i++) {
              if (this.contentItems[i] !== contentItem) {
                this.contentItems[i].config[this._dimension] += removedItemSize / (this.contentItems.length - 1);
              }
            }
            lm.items.AbstractContentItem.prototype.removeChild.call(this, contentItem, keepChild);
            if (this.contentItems.length === 1 && this.config.isClosable === true) {
              childItem = this.contentItems[0];
              this.contentItems = [];
              this.parent.replaceChild(this, childItem, true);
            } else {
              this.callDownwards("setSize");
              this.emitBubblingEvent("stateChanged");
            }
          },
          replaceChild: function(oldChild, newChild) {
            var size2 = oldChild.config[this._dimension];
            lm.items.AbstractContentItem.prototype.replaceChild.call(this, oldChild, newChild);
            newChild.config[this._dimension] = size2;
            this.callDownwards("setSize");
            this.emitBubblingEvent("stateChanged");
          },
          setSize: function() {
            if (this.contentItems.length > 0) {
              this._calculateRelativeSizes();
              this._setAbsoluteSizes();
            }
            this.emitBubblingEvent("stateChanged");
            this.emit("resize");
          },
          _$init: function() {
            if (this.isInitialised === true)
              return;
            var i;
            lm.items.AbstractContentItem.prototype._$init.call(this);
            for (i = 0; i < this.contentItems.length - 1; i++) {
              this.contentItems[i].element.after(this._createSplitter(i).element);
            }
          },
          _setAbsoluteSizes: function() {
            var i, sizeData = this._calculateAbsoluteSizes();
            for (i = 0; i < this.contentItems.length; i++) {
              if (sizeData.additionalPixel - i > 0) {
                sizeData.itemSizes[i]++;
              }
              if (this._isColumn) {
                this.contentItems[i].element.width(sizeData.totalWidth);
                this.contentItems[i].element.height(sizeData.itemSizes[i]);
              } else {
                this.contentItems[i].element.width(sizeData.itemSizes[i]);
                this.contentItems[i].element.height(sizeData.totalHeight);
              }
            }
          },
          _calculateAbsoluteSizes: function() {
            var i, totalSplitterSize = (this.contentItems.length - 1) * this._splitterSize, totalWidth = this.element.width(), totalHeight = this.element.height(), totalAssigned = 0, additionalPixel, itemSize, itemSizes = [];
            if (this._isColumn) {
              totalHeight -= totalSplitterSize;
            } else {
              totalWidth -= totalSplitterSize;
            }
            for (i = 0; i < this.contentItems.length; i++) {
              if (this._isColumn) {
                itemSize = Math.floor(totalHeight * (this.contentItems[i].config.height / 100));
              } else {
                itemSize = Math.floor(totalWidth * (this.contentItems[i].config.width / 100));
              }
              totalAssigned += itemSize;
              itemSizes.push(itemSize);
            }
            additionalPixel = Math.floor((this._isColumn ? totalHeight : totalWidth) - totalAssigned);
            return {
              itemSizes,
              additionalPixel,
              totalWidth,
              totalHeight
            };
          },
          _calculateRelativeSizes: function() {
            var i, total = 0, itemsWithoutSetDimension = [], dimension = this._isColumn ? "height" : "width";
            for (i = 0; i < this.contentItems.length; i++) {
              if (this.contentItems[i].config[dimension] !== void 0) {
                total += this.contentItems[i].config[dimension];
              } else {
                itemsWithoutSetDimension.push(this.contentItems[i]);
              }
            }
            if (Math.round(total) === 100) {
              this._respectMinItemWidth();
              return;
            }
            if (Math.round(total) < 100 && itemsWithoutSetDimension.length > 0) {
              for (i = 0; i < itemsWithoutSetDimension.length; i++) {
                itemsWithoutSetDimension[i].config[dimension] = (100 - total) / itemsWithoutSetDimension.length;
              }
              this._respectMinItemWidth();
              return;
            }
            if (Math.round(total) > 100) {
              for (i = 0; i < itemsWithoutSetDimension.length; i++) {
                itemsWithoutSetDimension[i].config[dimension] = 50;
                total += 50;
              }
            }
            for (i = 0; i < this.contentItems.length; i++) {
              this.contentItems[i].config[dimension] = this.contentItems[i].config[dimension] / total * 100;
            }
            this._respectMinItemWidth();
          },
          _respectMinItemWidth: function() {
            var minItemWidth = this.layoutManager.config.dimensions ? this.layoutManager.config.dimensions.minItemWidth || 0 : 0, sizeData = null, entriesOverMin = [], totalOverMin = 0, totalUnderMin = 0, remainingWidth = 0, itemSize = 0, contentItem = null, reducePercent, reducedWidth, allEntries = [], entry;
            if (this._isColumn || !minItemWidth || this.contentItems.length <= 1) {
              return;
            }
            sizeData = this._calculateAbsoluteSizes();
            for (var i = 0; i < this.contentItems.length; i++) {
              contentItem = this.contentItems[i];
              itemSize = sizeData.itemSizes[i];
              if (itemSize < minItemWidth) {
                totalUnderMin += minItemWidth - itemSize;
                entry = { width: minItemWidth };
              } else {
                totalOverMin += itemSize - minItemWidth;
                entry = { width: itemSize };
                entriesOverMin.push(entry);
              }
              allEntries.push(entry);
            }
            if (totalUnderMin === 0 || totalUnderMin > totalOverMin) {
              return;
            }
            reducePercent = totalUnderMin / totalOverMin;
            remainingWidth = totalUnderMin;
            for (i = 0; i < entriesOverMin.length; i++) {
              entry = entriesOverMin[i];
              reducedWidth = Math.round((entry.width - minItemWidth) * reducePercent);
              remainingWidth -= reducedWidth;
              entry.width -= reducedWidth;
            }
            if (remainingWidth !== 0) {
              allEntries[allEntries.length - 1].width -= remainingWidth;
            }
            for (i = 0; i < this.contentItems.length; i++) {
              this.contentItems[i].config.width = allEntries[i].width / sizeData.totalWidth * 100;
            }
          },
          _createSplitter: function(index2) {
            var splitter;
            splitter = new lm.controls.Splitter(this._isColumn, this._splitterSize, this._splitterGrabSize);
            splitter.on("drag", lm.utils.fnBind(this._onSplitterDrag, this, [splitter]), this);
            splitter.on("dragStop", lm.utils.fnBind(this._onSplitterDragStop, this, [splitter]), this);
            splitter.on("dragStart", lm.utils.fnBind(this._onSplitterDragStart, this, [splitter]), this);
            this._splitter.splice(index2, 0, splitter);
            return splitter;
          },
          _getItemsForSplitter: function(splitter) {
            var index2 = lm.utils.indexOf(splitter, this._splitter);
            return {
              before: this.contentItems[index2],
              after: this.contentItems[index2 + 1]
            };
          },
          _getMinimumDimensions: function(arr) {
            var minWidth = 0, minHeight = 0;
            for (var i = 0; i < arr.length; ++i) {
              minWidth = Math.max(arr[i].minWidth || 0, minWidth);
              minHeight = Math.max(arr[i].minHeight || 0, minHeight);
            }
            return { horizontal: minWidth, vertical: minHeight };
          },
          _onSplitterDragStart: function(splitter) {
            var items = this._getItemsForSplitter(splitter), minSize = this.layoutManager.config.dimensions[this._isColumn ? "minItemHeight" : "minItemWidth"];
            var beforeMinDim = this._getMinimumDimensions(items.before.config.content);
            var beforeMinSize = this._isColumn ? beforeMinDim.vertical : beforeMinDim.horizontal;
            var afterMinDim = this._getMinimumDimensions(items.after.config.content);
            var afterMinSize = this._isColumn ? afterMinDim.vertical : afterMinDim.horizontal;
            this._splitterPosition = 0;
            this._splitterMinPosition = -1 * (items.before.element[this._dimension]() - (beforeMinSize || minSize));
            this._splitterMaxPosition = items.after.element[this._dimension]() - (afterMinSize || minSize);
          },
          _onSplitterDrag: function(splitter, offsetX, offsetY) {
            var offset = this._isColumn ? offsetY : offsetX;
            if (offset > this._splitterMinPosition && offset < this._splitterMaxPosition) {
              this._splitterPosition = offset;
              splitter.element.css(this._isColumn ? "top" : "left", offset);
            }
          },
          _onSplitterDragStop: function(splitter) {
            var items = this._getItemsForSplitter(splitter), sizeBefore = items.before.element[this._dimension](), sizeAfter = items.after.element[this._dimension](), splitterPositionInRange = (this._splitterPosition + sizeBefore) / (sizeBefore + sizeAfter), totalRelativeSize = items.before.config[this._dimension] + items.after.config[this._dimension];
            items.before.config[this._dimension] = splitterPositionInRange * totalRelativeSize;
            items.after.config[this._dimension] = (1 - splitterPositionInRange) * totalRelativeSize;
            splitter.element.css({
              "top": 0,
              "left": 0
            });
            lm.utils.animFrame(lm.utils.fnBind(this.callDownwards, this, ["setSize"]));
          }
        });
        lm.items.Stack = function(layoutManager, config3, parent) {
          lm.items.AbstractContentItem.call(this, layoutManager, config3, parent);
          this.element = $2('<div class="lm_item lm_stack"></div>');
          this._activeContentItem = null;
          var cfg = layoutManager.config;
          this._header = {
            show: cfg.settings.hasHeaders === true && config3.hasHeaders !== false,
            popout: cfg.settings.showPopoutIcon && cfg.labels.popout,
            maximise: cfg.settings.showMaximiseIcon && cfg.labels.maximise,
            close: cfg.settings.showCloseIcon && cfg.labels.close,
            minimise: cfg.labels.minimise
          };
          if (cfg.header)
            lm.utils.copy(this._header, cfg.header);
          if (config3.header)
            lm.utils.copy(this._header, config3.header);
          if (config3.content && config3.content[0] && config3.content[0].header)
            lm.utils.copy(this._header, config3.content[0].header);
          this._dropZones = {};
          this._dropSegment = null;
          this._contentAreaDimensions = null;
          this._dropIndex = null;
          this.isStack = true;
          this.childElementContainer = $2('<div class="lm_items"></div>');
          this.header = new lm.controls.Header(layoutManager, this);
          this.element.append(this.header.element);
          this.element.append(this.childElementContainer);
          this._setupHeaderPosition();
          this._$validateClosability();
        };
        lm.utils.extend(lm.items.Stack, lm.items.AbstractContentItem);
        lm.utils.copy(lm.items.Stack.prototype, {
          setSize: function() {
            var i, headerSize = this._header.show ? this.layoutManager.config.dimensions.headerHeight : 0, contentWidth = this.element.width() - (this._sided ? headerSize : 0), contentHeight = this.element.height() - (!this._sided ? headerSize : 0);
            this.childElementContainer.width(contentWidth);
            this.childElementContainer.height(contentHeight);
            for (i = 0; i < this.contentItems.length; i++) {
              this.contentItems[i].element.width(contentWidth).height(contentHeight);
            }
            this.emit("resize");
            this.emitBubblingEvent("stateChanged");
          },
          _$init: function() {
            var i, initialItem;
            if (this.isInitialised === true)
              return;
            lm.items.AbstractContentItem.prototype._$init.call(this);
            for (i = 0; i < this.contentItems.length; i++) {
              this.header.createTab(this.contentItems[i]);
              this.contentItems[i]._$hide();
            }
            if (this.contentItems.length > 0) {
              initialItem = this.contentItems[this.config.activeItemIndex || 0];
              if (!initialItem) {
                throw new Error("Configured activeItemIndex out of bounds");
              }
              this.setActiveContentItem(initialItem);
            }
          },
          setActiveContentItem: function(contentItem) {
            if (lm.utils.indexOf(contentItem, this.contentItems) === -1) {
              throw new Error("contentItem is not a child of this stack");
            }
            if (this._activeContentItem !== null) {
              this._activeContentItem._$hide();
            }
            this._activeContentItem = contentItem;
            this.header.setActiveContentItem(contentItem);
            contentItem._$show();
            this.emit("activeContentItemChanged", contentItem);
            this.layoutManager.emit("activeContentItemChanged", contentItem);
            this.emitBubblingEvent("stateChanged");
          },
          getActiveContentItem: function() {
            return this.header.activeContentItem;
          },
          addChild: function(contentItem, index2) {
            contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);
            lm.items.AbstractContentItem.prototype.addChild.call(this, contentItem, index2);
            this.childElementContainer.append(contentItem.element);
            this.header.createTab(contentItem, index2);
            this.setActiveContentItem(contentItem);
            this.callDownwards("setSize");
            this._$validateClosability();
            this.emitBubblingEvent("stateChanged");
          },
          removeChild: function(contentItem, keepChild) {
            var index2 = lm.utils.indexOf(contentItem, this.contentItems);
            lm.items.AbstractContentItem.prototype.removeChild.call(this, contentItem, keepChild);
            this.header.removeTab(contentItem);
            if (this.header.activeContentItem === contentItem) {
              if (this.contentItems.length > 0) {
                this.setActiveContentItem(this.contentItems[Math.max(index2 - 1, 0)]);
              } else {
                this._activeContentItem = null;
              }
            }
            this._$validateClosability();
            this.emitBubblingEvent("stateChanged");
          },
          _$validateClosability: function() {
            var contentItem, isClosable, len, i;
            isClosable = this.header._isClosable();
            for (i = 0, len = this.contentItems.length; i < len; i++) {
              if (!isClosable) {
                break;
              }
              isClosable = this.contentItems[i].config.isClosable;
            }
            this.header._$setClosable(isClosable);
          },
          _$destroy: function() {
            lm.items.AbstractContentItem.prototype._$destroy.call(this);
            this.header._$destroy();
          },
          _$onDrop: function(contentItem) {
            if (this._dropSegment === "header") {
              this._resetHeaderDropZone();
              this.addChild(contentItem, this._dropIndex);
              return;
            }
            if (this._dropSegment === "body") {
              this.addChild(contentItem);
              return;
            }
            var isVertical = this._dropSegment === "top" || this._dropSegment === "bottom", isHorizontal = this._dropSegment === "left" || this._dropSegment === "right", insertBefore = this._dropSegment === "top" || this._dropSegment === "left", hasCorrectParent = isVertical && this.parent.isColumn || isHorizontal && this.parent.isRow, type2 = isVertical ? "column" : "row", dimension = isVertical ? "height" : "width", index2, stack, rowOrColumn;
            if (contentItem.isComponent) {
              stack = this.layoutManager.createContentItem({
                type: "stack",
                header: contentItem.config.header || {}
              }, this);
              stack._$init();
              stack.addChild(contentItem);
              contentItem = stack;
            }
            if (hasCorrectParent) {
              index2 = lm.utils.indexOf(this, this.parent.contentItems);
              this.parent.addChild(contentItem, insertBefore ? index2 : index2 + 1, true);
              this.config[dimension] *= 0.5;
              contentItem.config[dimension] = this.config[dimension];
              this.parent.callDownwards("setSize");
            } else {
              type2 = isVertical ? "column" : "row";
              rowOrColumn = this.layoutManager.createContentItem({ type: type2 }, this);
              this.parent.replaceChild(this, rowOrColumn);
              rowOrColumn.addChild(contentItem, insertBefore ? 0 : void 0, true);
              rowOrColumn.addChild(this, insertBefore ? void 0 : 0, true);
              this.config[dimension] = 50;
              contentItem.config[dimension] = 50;
              rowOrColumn.callDownwards("setSize");
            }
          },
          _$highlightDropZone: function(x, y) {
            var segment, area;
            for (segment in this._contentAreaDimensions) {
              area = this._contentAreaDimensions[segment].hoverArea;
              if (area.x1 < x && area.x2 > x && area.y1 < y && area.y2 > y) {
                if (segment === "header") {
                  this._dropSegment = "header";
                  this._highlightHeaderDropZone(this._sided ? y : x);
                } else {
                  this._resetHeaderDropZone();
                  this._highlightBodyDropZone(segment);
                }
                return;
              }
            }
          },
          _$getArea: function() {
            if (this.element.is(":visible") === false) {
              return null;
            }
            var getArea = lm.items.AbstractContentItem.prototype._$getArea, headerArea = getArea.call(this, this.header.element), contentArea = getArea.call(this, this.childElementContainer), contentWidth = contentArea.x2 - contentArea.x1, contentHeight = contentArea.y2 - contentArea.y1;
            this._contentAreaDimensions = {
              header: {
                hoverArea: {
                  x1: headerArea.x1,
                  y1: headerArea.y1,
                  x2: headerArea.x2,
                  y2: headerArea.y2
                },
                highlightArea: {
                  x1: headerArea.x1,
                  y1: headerArea.y1,
                  x2: headerArea.x2,
                  y2: headerArea.y2
                }
              }
            };
            if (this._activeContentItem && this._activeContentItem.isComponent === false) {
              return headerArea;
            }
            if (this.contentItems.length === 0) {
              this._contentAreaDimensions.body = {
                hoverArea: {
                  x1: contentArea.x1,
                  y1: contentArea.y1,
                  x2: contentArea.x2,
                  y2: contentArea.y2
                },
                highlightArea: {
                  x1: contentArea.x1,
                  y1: contentArea.y1,
                  x2: contentArea.x2,
                  y2: contentArea.y2
                }
              };
              return getArea.call(this, this.element);
            }
            this._contentAreaDimensions.left = {
              hoverArea: {
                x1: contentArea.x1,
                y1: contentArea.y1,
                x2: contentArea.x1 + contentWidth * 0.25,
                y2: contentArea.y2
              },
              highlightArea: {
                x1: contentArea.x1,
                y1: contentArea.y1,
                x2: contentArea.x1 + contentWidth * 0.5,
                y2: contentArea.y2
              }
            };
            this._contentAreaDimensions.top = {
              hoverArea: {
                x1: contentArea.x1 + contentWidth * 0.25,
                y1: contentArea.y1,
                x2: contentArea.x1 + contentWidth * 0.75,
                y2: contentArea.y1 + contentHeight * 0.5
              },
              highlightArea: {
                x1: contentArea.x1,
                y1: contentArea.y1,
                x2: contentArea.x2,
                y2: contentArea.y1 + contentHeight * 0.5
              }
            };
            this._contentAreaDimensions.right = {
              hoverArea: {
                x1: contentArea.x1 + contentWidth * 0.75,
                y1: contentArea.y1,
                x2: contentArea.x2,
                y2: contentArea.y2
              },
              highlightArea: {
                x1: contentArea.x1 + contentWidth * 0.5,
                y1: contentArea.y1,
                x2: contentArea.x2,
                y2: contentArea.y2
              }
            };
            this._contentAreaDimensions.bottom = {
              hoverArea: {
                x1: contentArea.x1 + contentWidth * 0.25,
                y1: contentArea.y1 + contentHeight * 0.5,
                x2: contentArea.x1 + contentWidth * 0.75,
                y2: contentArea.y2
              },
              highlightArea: {
                x1: contentArea.x1,
                y1: contentArea.y1 + contentHeight * 0.5,
                x2: contentArea.x2,
                y2: contentArea.y2
              }
            };
            return getArea.call(this, this.element);
          },
          _highlightHeaderDropZone: function(x) {
            var i, tabElement, tabsLength = this.header.tabs.length, isAboveTab = false, tabTop, tabLeft, offset, placeHolderLeft, headerOffset, tabWidth, halfX;
            if (tabsLength === 0) {
              headerOffset = this.header.element.offset();
              this.layoutManager.dropTargetIndicator.highlightArea({
                x1: headerOffset.left,
                x2: headerOffset.left + 100,
                y1: headerOffset.top + this.header.element.height() - 20,
                y2: headerOffset.top + this.header.element.height()
              });
              return;
            }
            for (i = 0; i < tabsLength; i++) {
              tabElement = this.header.tabs[i].element;
              offset = tabElement.offset();
              if (this._sided) {
                tabLeft = offset.top;
                tabTop = offset.left;
                tabWidth = tabElement.height();
              } else {
                tabLeft = offset.left;
                tabTop = offset.top;
                tabWidth = tabElement.width();
              }
              if (x > tabLeft && x < tabLeft + tabWidth) {
                isAboveTab = true;
                break;
              }
            }
            if (isAboveTab === false && x < tabLeft) {
              return;
            }
            halfX = tabLeft + tabWidth / 2;
            if (x < halfX) {
              this._dropIndex = i;
              tabElement.before(this.layoutManager.tabDropPlaceholder);
            } else {
              this._dropIndex = Math.min(i + 1, tabsLength);
              tabElement.after(this.layoutManager.tabDropPlaceholder);
            }
            if (this._sided) {
              placeHolderTop = this.layoutManager.tabDropPlaceholder.offset().top;
              this.layoutManager.dropTargetIndicator.highlightArea({
                x1: tabTop,
                x2: tabTop + tabElement.innerHeight(),
                y1: placeHolderTop,
                y2: placeHolderTop + this.layoutManager.tabDropPlaceholder.width()
              });
              return;
            }
            placeHolderLeft = this.layoutManager.tabDropPlaceholder.offset().left;
            this.layoutManager.dropTargetIndicator.highlightArea({
              x1: placeHolderLeft,
              x2: placeHolderLeft + this.layoutManager.tabDropPlaceholder.width(),
              y1: tabTop,
              y2: tabTop + tabElement.innerHeight()
            });
          },
          _resetHeaderDropZone: function() {
            this.layoutManager.tabDropPlaceholder.remove();
          },
          _setupHeaderPosition: function() {
            var side = ["right", "left", "bottom"].indexOf(this._header.show) >= 0 && this._header.show;
            this.header.element.toggle(!!this._header.show);
            this._side = side;
            this._sided = ["right", "left"].indexOf(this._side) >= 0;
            this.element.removeClass("lm_left lm_right lm_bottom");
            if (this._side)
              this.element.addClass("lm_" + this._side);
            if (this.element.find(".lm_header").length && this.childElementContainer) {
              var headerPosition = ["right", "bottom"].indexOf(this._side) >= 0 ? "before" : "after";
              this.header.element[headerPosition](this.childElementContainer);
              this.callDownwards("setSize");
            }
          },
          _highlightBodyDropZone: function(segment) {
            var highlightArea = this._contentAreaDimensions[segment].highlightArea;
            this.layoutManager.dropTargetIndicator.highlightArea(highlightArea);
            this._dropSegment = segment;
          }
        });
        lm.utils.BubblingEvent = function(name, origin) {
          this.name = name;
          this.origin = origin;
          this.isPropagationStopped = false;
        };
        lm.utils.BubblingEvent.prototype.stopPropagation = function() {
          this.isPropagationStopped = true;
        };
        lm.utils.ConfigMinifier = function() {
          this._keys = [
            "settings",
            "hasHeaders",
            "constrainDragToContainer",
            "selectionEnabled",
            "dimensions",
            "borderWidth",
            "minItemHeight",
            "minItemWidth",
            "headerHeight",
            "dragProxyWidth",
            "dragProxyHeight",
            "labels",
            "close",
            "maximise",
            "minimise",
            "popout",
            "content",
            "componentName",
            "componentState",
            "id",
            "width",
            "type",
            "height",
            "isClosable",
            "title",
            "popoutWholeStack",
            "openPopouts",
            "parentId",
            "activeItemIndex",
            "reorderEnabled",
            "borderGrabWidth"
          ];
          if (this._keys.length > 36) {
            throw new Error("Too many keys in config minifier map");
          }
          this._values = [
            true,
            false,
            "row",
            "column",
            "stack",
            "component",
            "close",
            "maximise",
            "minimise",
            "open in new window"
          ];
        };
        lm.utils.copy(lm.utils.ConfigMinifier.prototype, {
          minifyConfig: function(config3) {
            var min = {};
            this._nextLevel(config3, min, "_min");
            return min;
          },
          unminifyConfig: function(minifiedConfig) {
            var orig = {};
            this._nextLevel(minifiedConfig, orig, "_max");
            return orig;
          },
          _nextLevel: function(from, to, translationFn) {
            var key, minKey;
            for (key in from) {
              if (from instanceof Array)
                key = parseInt(key, 10);
              if (!from.hasOwnProperty(key))
                continue;
              minKey = this[translationFn](key, this._keys);
              if (typeof from[key] === "object") {
                to[minKey] = from[key] instanceof Array ? [] : {};
                this._nextLevel(from[key], to[minKey], translationFn);
              } else {
                to[minKey] = this[translationFn](from[key], this._values);
              }
            }
          },
          _min: function(value, dictionary) {
            if (typeof value === "string" && value.length === 1) {
              return "___" + value;
            }
            var index2 = lm.utils.indexOf(value, dictionary);
            if (index2 === -1) {
              return value;
            } else {
              return index2.toString(36);
            }
          },
          _max: function(value, dictionary) {
            if (typeof value === "string" && value.length === 1) {
              return dictionary[parseInt(value, 36)];
            }
            if (typeof value === "string" && value.substr(0, 3) === "___") {
              return value[3];
            }
            return value;
          }
        });
        lm.utils.EventHub = function(layoutManager) {
          lm.utils.EventEmitter.call(this);
          this._layoutManager = layoutManager;
          this._dontPropagateToParent = null;
          this._childEventSource = null;
          this.on(lm.utils.EventEmitter.ALL_EVENT, lm.utils.fnBind(this._onEventFromThis, this));
          this._boundOnEventFromChild = lm.utils.fnBind(this._onEventFromChild, this);
          $2(window).on("gl_child_event", this._boundOnEventFromChild);
        };
        lm.utils.EventHub.prototype._onEventFromThis = function() {
          var args = Array.prototype.slice.call(arguments);
          if (this._layoutManager.isSubWindow && args[0] !== this._dontPropagateToParent) {
            this._propagateToParent(args);
          }
          this._propagateToChildren(args);
          this._dontPropagateToParent = null;
          this._childEventSource = null;
        };
        lm.utils.EventHub.prototype._$onEventFromParent = function(args) {
          this._dontPropagateToParent = args[0];
          this.emit.apply(this, args);
        };
        lm.utils.EventHub.prototype._onEventFromChild = function(event) {
          this._childEventSource = event.originalEvent.__gl;
          this.emit.apply(this, event.originalEvent.__glArgs);
        };
        lm.utils.EventHub.prototype._propagateToParent = function(args) {
          var event, eventName = "gl_child_event";
          if (document.createEvent) {
            event = window.opener.document.createEvent("HTMLEvents");
            event.initEvent(eventName, true, true);
          } else {
            event = window.opener.document.createEventObject();
            event.eventType = eventName;
          }
          event.eventName = eventName;
          event.__glArgs = args;
          event.__gl = this._layoutManager;
          if (document.createEvent) {
            window.opener.dispatchEvent(event);
          } else {
            window.opener.fireEvent("on" + event.eventType, event);
          }
        };
        lm.utils.EventHub.prototype._propagateToChildren = function(args) {
          var childGl, i;
          for (i = 0; i < this._layoutManager.openPopouts.length; i++) {
            childGl = this._layoutManager.openPopouts[i].getGlInstance();
            if (childGl && childGl !== this._childEventSource) {
              childGl.eventHub._$onEventFromParent(args);
            }
          }
        };
        lm.utils.EventHub.prototype.destroy = function() {
          $2(window).off("gl_child_event", this._boundOnEventFromChild);
        };
        lm.utils.ReactComponentHandler = function(container, state) {
          this._reactComponent = null;
          this._originalComponentWillUpdate = null;
          this._container = container;
          this._initialState = state;
          this._reactClass = this._getReactClass();
          this._container.on("open", this._render, this);
          this._container.on("destroy", this._destroy, this);
        };
        lm.utils.copy(lm.utils.ReactComponentHandler.prototype, {
          _render: function() {
            this._reactComponent = ReactDOM.render(this._getReactComponent(), this._container.getElement()[0]);
            this._originalComponentWillUpdate = this._reactComponent.componentWillUpdate || function() {
            };
            this._reactComponent.componentWillUpdate = this._onUpdate.bind(this);
            if (this._container.getState()) {
              this._reactComponent.setState(this._container.getState());
            }
          },
          _destroy: function() {
            ReactDOM.unmountComponentAtNode(this._container.getElement()[0]);
            this._container.off("open", this._render, this);
            this._container.off("destroy", this._destroy, this);
          },
          _onUpdate: function(nextProps, nextState) {
            this._container.setState(nextState);
            this._originalComponentWillUpdate.call(this._reactComponent, nextProps, nextState);
          },
          _getReactClass: function() {
            var componentName = this._container._config.component;
            var reactClass;
            if (!componentName) {
              throw new Error("No react component name. type: react-component needs a field `component`");
            }
            reactClass = this._container.layoutManager.getComponent(componentName);
            if (!reactClass) {
              throw new Error('React component "' + componentName + '" not found. Please register all components with GoldenLayout using `registerComponent(name, component)`');
            }
            return reactClass;
          },
          _getReactComponent: function() {
            var defaultProps = {
              glEventHub: this._container.layoutManager.eventHub,
              glContainer: this._container
            };
            var props = $2.extend(defaultProps, this._container._config.props);
            return React.createElement(this._reactClass, props);
          }
        });
      })(window.$);
    }
  });

  // src/www/simple/index.js
  var import_react29 = __toModule(require_react());
  var import_react_dom = __toModule(require_react_dom());

  // src/www/simple/Store.js
  var import_stats = __toModule(require_stats_min());

  // src/core/Bus.js
  var _size = Symbol("_size");
  var _buffer = Symbol("_buffer");
  var _value = Symbol("_value");
  var _receivers = Symbol("_receivers");
  var _mask = Symbol("_mask");

  // src/core/SystemBus.js
  var _mapBus = Symbol("_mapBus");
  var _addressBus = Symbol("_addressBus");
  var _dataBus = Symbol("_dataBus");
  var _commandBus = Symbol("_commandBus");
  var _executeBus = Symbol("_executeBus");

  // src/core/Memory.js
  var _rom = Symbol("_rom");
  var _shared = Symbol("_shared");
  var _startingAddress = Symbol("_startingAddress");
  var _endingAddress = Symbol("_endingAddress");
  var _size2 = Symbol("_size");
  var _buffer2 = Symbol("_buffer");
  var _data = Symbol("_data");
  var _systemBus = Symbol("_systemBus");
  var _pages = Symbol("_pages");

  // src/core/IOBus.js
  var _irqServiceBus = Symbol("_irqService");
  var _irqSignalBus = Symbol("_irqSignal");
  var _deviceSelectBus = Symbol("_deviceSelect");
  var _addressSelectBus = Symbol("_addressSeect");
  var _dataBus2 = Symbol("_data");
  var _commandBus2 = Symbol("_command");
  var _executeBus2 = Symbol("_execute");

  // src/core/ALU.js
  var _op1 = Symbol("_op1");
  var _op2 = Symbol("_op2");
  var _ret = Symbol("_ret");
  var _flags = Symbol("_flags");
  var _command = Symbol("_command");
  var _execute = Symbol("_execute");
  var COMMANDS = {
    ADD: 1,
    SUB: 2,
    MUL: 3,
    DIV: 4,
    MOD: 5,
    SMUL: 6,
    SDIV: 7,
    SMOD: 8,
    NEG: 9,
    SHL: 10,
    SHR: 11,
    AND: 12,
    OR: 13,
    XOR: 14,
    NOT: 15
  };
  var SIZES = {
    BYTE: 0,
    WORD: 1,
    ADDR: 2,
    RET_8: 0,
    RET_16: 256,
    RET_19: 512,
    RET_32: 768,
    OP1_8: 0,
    OP1_16: 64,
    OP1_19: 128,
    OP1_32: 192,
    OP2_8: 0,
    OP2_16: 16,
    OP2_19: 32,
    OP2_32: 48
  };

  // src/core/Device.js
  var _controller = Symbol("_controller");
  var _ioBus = Symbol("_ioBus");
  var _memory = Symbol("_memory");
  var _buffer3 = Symbol("_buffer");
  var _device = Symbol("_device");
  var _priority = Symbol("_priority");
  var _addrStart = Symbol("_addrStart");
  var _addrEnd = Symbol("_addrEnd");

  // src/core/Controller.js
  var _processor = Symbol("_processor");
  var _ioBus2 = Symbol("_ioBus");
  var _devices = Symbol("_devices");
  var _deviceMap = Symbol("_deviceMap");

  // src/util/endianness.js
  var buffer = new ArrayBuffer(2);
  var bytes = new Uint8Array(buffer);
  var words = new Uint16Array(buffer);
  words[0] = 4660;
  var endianness = bytes[0] == 18 ? "big" : "little";

  // src/core/RegisterFile.js
  var _buffer4 = Symbol("_buffer");
  var _byteData = Symbol("_data");
  var _wordData = Symbol("_word");
  var REGISTER_INDEX = {
    A: 0,
    AL: 1,
    B: 2,
    BL: 3,
    C: 4,
    CL: 5,
    D: 6,
    DL: 7,
    X: 8,
    XL: 9,
    Y: 10,
    YL: 11,
    BP: 12,
    SP: 14,
    STATUS: 16,
    FLAGS: 17,
    PC: 18,
    MM: 20,
    MP: 22
  };
  var FLAGS_INDEX = {
    Z: 0,
    ZERO: 0,
    Z_SET_MASK: 1,
    Z_CLR_MASK: 254,
    V: 1,
    OVERFLOW: 1,
    V_SET_MASK: 2,
    V_CLR_MASK: 253,
    C: 2,
    CARRY: 2,
    C_SET_MASK: 4,
    C_CLR_MASK: 251,
    N: 3,
    NEGATIVE: 3,
    N_SET_MASK: 8,
    N_CLR_MASK: 247,
    SS: 4,
    SINGLE_STEP: 4,
    SS_SET_MASK: 16,
    SS_CLR_MASK: 239,
    IS: 5,
    INTERRUPT_SERVICE: 5,
    IS_SET_MASK: 32,
    IS_CLR_MASK: 223,
    ID: 6,
    INTERRUPT_DISABLE: 6,
    ID_SET_MASK: 64,
    ID_CLR_MASK: 191,
    EX: 7,
    EXCEPTION: 7,
    EX_SET_MASK: 128,
    EX_CLR_MASK: 127
  };

  // src/isa/tasks.js
  var SIZE_BYTE = SIZES.BYTE;
  var SIZE_WORD = SIZES.WORD;
  var SIZE_ADDR = SIZES.ADDR;
  var STACK_BYTE = 0;
  var STACK_WORD = 536870912;
  var STACK_ADDR = 1073741824;
  var STACK_TYPE_MASK = 1610612736;
  var STACK_DATA_MASK = 536870911;
  var FLAGS_PUSH_TO_ALU = 1;
  var FLAGS_PULL_FROM_ALU = 2;
  var FLAGS_PUSH_AND_PULL = 3;
  var mapSize = (size2) => size2 === SIZE_BYTE ? STACK_BYTE : size2 === SIZE_WORD ? STACK_WORD : size2 === SIZE_ADDR ? STACK_ADDR : size2 === STACK_BYTE ? SIZE_BYTE : size2 === STACK_WORD ? SIZE_WORD : size2 === STACK_ADDR ? SIZE_ADDR : size2;
  var push = (stack, data, size2) => {
    const newSize = mapSize(size2);
    return stack.push(newSize | data);
  };
  var pop = (stack) => {
    const s0 = stack.pop() | 0;
    const data = s0 & STACK_DATA_MASK;
    return data;
  };
  var popWithSize = (stack) => {
    const s0 = stack.pop() | 0;
    const data = s0 & STACK_DATA_MASK;
    const stackSize = s0 & STACK_TYPE_MASK;
    const size2 = mapSize(stackSize);
    return [data, size2];
  };
  var TASKS = {
    NOP: 0,
    GET_REGISTER_AND_PUSH: 16777216,
    POP_INTO_REGISTER: 33554432,
    PUSH_BYTE: 50331648,
    PUSH_WORD: 67108864,
    PUSH_ADDR: 83886080,
    GET_BYTE_FROM_MEMORY: 100663296,
    GET_WORD_FROM_MEMORY: 117440512,
    POP_BYTE_INTO_MEMORY: 134217728,
    POP_WORD_INTO_MEMORY: 150994944,
    DECOMPOSE_WORD_TO_BYTES: 268435456,
    RECOMPOSE_BYTES_TO_WORD: 285212672,
    DECOMPOSE_BYTE_TO_NIBBLE: 301989888,
    RECOMPOSE_NIBBLE_TO_BYTE: 318767104,
    DECOMPOSE_ADDR: 805306368,
    RECOMPOSE_ADDR: 822083584,
    GET_ADDR_FROM_MEMORY: 838860800,
    SET_BIT: 335544320,
    CLEAR_BIT: 352321536,
    PICK: 369098752,
    TRAP: 385875968,
    DUP: 402653184,
    SWAP: 419430400,
    CLEAR_FLAG_IMM: 436207616,
    SET_FLAG_IMM: 452984832,
    TEST_FLAG_IMM: 469762048,
    PULL_FLAGS_FROM_ALU: 486539264,
    PUSH_FLAGS_TO_ALU: 503316480,
    IO_IN: 536870912,
    IO_OUT: 553648128,
    ADD: 1073741824,
    SUB: 1107296256,
    CMP: 1140850688,
    AND: 1174405120,
    OR: 1207959552,
    TEST: 1241513984,
    XOR: 1275068416,
    SHL: 1342177280,
    SHR: 1375731712,
    MUL: 1610612736,
    DIV: 1644167168,
    MOD: 1677721600,
    SMUL: 1879048192,
    SDIV: 1912602624,
    SMOD: 1946157056
  };
  var TASK_FNS = new Array(256).fill(() => 0);
  [
    [TASKS.NOP, () => 0],
    [TASKS.GET_REGISTER_AND_PUSH, ({ stack, registerFile, arg }) => {
      push(stack, registerFile.getRegister(arg), registerFile.getSizeOfRegister(arg));
    }],
    [TASKS.POP_INTO_REGISTER, ({ stack, registerFile, arg }) => {
      registerFile.setRegister(arg, pop(stack));
    }],
    [TASKS.PUSH_BYTE, ({ stack, arg }) => {
      push(stack, arg, SIZE_BYTE);
    }],
    [TASKS.PUSH_WORD, ({ stack, arg }) => {
      push(stack, arg, SIZE_WORD);
    }],
    [TASKS.PUSH_ADDR, ({ stack, arg }) => {
      push(stack, arg, SIZE_ADDR);
    }],
    [TASKS.GET_BYTE_FROM_MEMORY, ({ stack, memory }) => {
      push(stack, memory.readByte(pop(stack)), SIZE_BYTE);
    }],
    [TASKS.GET_WORD_FROM_MEMORY, ({ stack, memory }) => {
      push(stack, memory.readWord(pop(stack)), SIZE_WORD);
    }],
    [TASKS.GET_ADDR_FROM_MEMORY, ({ stack, memory }) => {
      const addr = pop(stack);
      push(stack, memory.readWord(addr), SIZE_WORD);
      push(stack, memory.readWord(addr + 2), SIZE_WORD);
    }],
    [TASKS.POP_BYTE_INTO_MEMORY, ({ stack, memory }) => {
      const byte = pop(stack);
      const addr = pop(stack);
      memory.writeByte(addr, byte);
    }],
    [TASKS.POP_WORD_INTO_MEMORY, ({ stack, memory }) => {
      const word = pop(stack);
      const addr = pop(stack);
      memory.writeWord(addr, word);
    }],
    [TASKS.DECOMPOSE_WORD_TO_BYTES, ({ stack }) => {
      const word = pop(stack);
      push(stack, (word & 65280) >> 8, SIZE_BYTE);
      push(stack, word & 255, SIZE_BYTE);
    }],
    [TASKS.RECOMPOSE_BYTES_TO_WORD, ({ stack }) => {
      const s0 = pop(stack);
      const s1 = pop(stack);
      push(stack, s1 << 8 | s0, SIZE_WORD);
    }],
    [TASKS.DECOMPOSE_BYTE_TO_NIBBLE, ({ stack }) => {
      const byte = pop(stack);
      push(stack, (byte & 240) >> 4, SIZE_BYTE);
      push(stack, byte & 15, SIZE_BYTE);
    }],
    [TASKS.RECOMPOSE_NIBBLE_TO_BYTE, ({ stack }) => {
      const s0 = pop(stack);
      const s1 = pop(stack);
      push(stack, s1 << 4 | s0, SIZE_BYTE);
    }],
    [TASKS.DECOMPOSE_ADDR, ({ stack }) => {
      const addr = pop(stack);
      push(stack, addr >> 3, SIZE_WORD);
      push(stack, addr & 7, SIZE_WORD);
    }],
    [TASKS.RECOMPOSE_ADDR, ({ stack }) => {
      const lo = pop(stack);
      const hi = pop(stack);
      push(stack, (hi << 3) + lo, SIZE_ADDR);
    }],
    [TASKS.TRAP, ({ stack, ioBus }) => {
      const s0 = pop(stack) & 15;
      ioBus.irqServiceBus.value = s0;
      ioBus.irqSignalBus.signal();
    }],
    [TASKS.IO_IN, ({ stack, ioBus }) => {
      const s0 = pop(stack) & 255;
      ioBus.deviceSelectBus.value = (s0 & 240) >> 4;
      ioBus.addressSelectBus.value = s0 & 15;
      ioBus.commandBus.value = 0;
      ioBus.executeBus.signal();
      push(stack, ioBus.dataBus.value, SIZE_BYTE);
    }],
    [TASKS.IO_OUT, ({ stack, ioBus }) => {
      const s0 = pop(stack) & 255;
      const s1 = pop(stack) & 255;
      ioBus.deviceSelectBus.value = (s1 & 240) >> 4;
      ioBus.addressSelectBus.value = s1 & 15;
      ioBus.dataBus.value = s0;
      ioBus.commandBus.value = 1;
      ioBus.executeBus.signal();
    }],
    [TASKS.DUP, ({ stack }) => {
      const s0 = stack.pop();
      stack.push(s0);
      stack.push(s0);
    }],
    [TASKS.SWAP, ({ stack }) => {
      const s0 = stack.pop();
      const s1 = stack.pop();
      stack.push(s0);
      stack.push(s1);
    }],
    [TASKS.SET_BIT, ({ stack, arg }) => {
      const bit = 1 << arg;
      stack.push(stack.pop() | bit);
    }],
    [TASKS.CLEAR_BIT, ({ stack, arg }) => {
      const bit = ~(1 << arg);
      stack.push(stack.pop() & bit);
    }],
    [TASKS.PICK, ({ stack }) => {
      const s0 = pop(stack);
      const s1 = stack.pop();
      const s2 = stack.pop();
      stack.push(s0 !== 0 ? s2 : s1);
    }],
    [TASKS.SET_FLAG_IMM, ({ arg, registerFile }) => {
      const flags = registerFile.FLAGS;
      const bit = 1 << arg;
      registerFile.FLAGS = flags | bit;
    }],
    [TASKS.CLEAR_FLAG_IMM, ({ arg, registerFile }) => {
      const flags = registerFile.FLAGS;
      const bit = ~(1 << arg);
      registerFile.FLAGS = flags & bit;
    }],
    [TASKS.TEST_FLAG_IMM, ({ stack, arg, registerFile }) => {
      const flags = registerFile.FLAGS;
      const bit = 1 << arg;
      push(stack, (flags & bit) >> arg > 0 ? 1 : 0, SIZE_BYTE);
    }],
    [TASKS.PULL_FLAGS_FROM_ALU, ({ arg, alu, registerFile }) => {
      registerFile.FLAGS = registerFile.FLAGS & 240 | alu.flagsBus.data & arg;
    }],
    [TASKS.PUSH_FLAGS_TO_ALU, ({ arg, alu, registerFile }) => {
      alu.flagsBus.data = registerFile.FLAGS & 15 & arg;
    }]
  ].forEach(([command, fn]) => {
    const idx = command >>> 24;
    TASK_FNS[idx] = fn;
  });
  var makeArithOp = (command, eatReturn) => {
    return ({ arg, stack, alu, registerFile }) => {
      const [s0, sz0] = popWithSize(stack);
      const [s1, sz1] = popWithSize(stack);
      const retSize = sz1 > sz0 ? sz1 : sz0;
      alu.op1Bus.data = s1;
      alu.op2Bus.data = s0;
      alu.commandBus.data = retSize << 8 | sz1 << 6 | sz0 << 4 | command;
      alu.flagsBus.data = arg & FLAGS_PUSH_TO_ALU ? registerFile.FLAGS & 15 : 0;
      alu.executeBus.signal();
      if (arg & FLAGS_PULL_FROM_ALU) {
        registerFile.FLAGS = registerFile.FLAGS & 240 | alu.flagsBus.data;
        if (command === COMMANDS.SDIV || command === COMMANDS.DIV || command === COMMANDS.SMOD || command === COMMANDS.MOD) {
          if (s0 === 0) {
            registerFile.EXCEPTION = 1;
          }
        }
      }
      const ret = alu.retBus.data;
      if (!eatReturn)
        push(stack, ret, retSize);
    };
  };
  Object.entries(TASKS).forEach(([k, v]) => {
    if (v >= 1073741824) {
      let eatReturn = false;
      if (k.startsWith("CMP")) {
        k = k.replace("CMP", "SUB");
        eatReturn = true;
      }
      const op = k.split("_")[0];
      const command = COMMANDS[op];
      TASK_FNS[v >>> 24] = makeArithOp(command, eatReturn);
    }
  });
  var TASK_MAP = new Map(Object.entries(TASKS).map(([k, v]) => [v, k]));

  // src/isa/opcodes.js
  var taskCache = new Map();
  var equivCache = new Map();
  var SIZE_BYTE2 = SIZES.BYTE;
  var SIZE_WORD2 = SIZES.WORD;
  var SIZE_ADDR2 = SIZES.ADDR;
  var aluOp = ({ alu, registerFile, command, op0, sz0, op1, sz1, flagHandling }) => {
    const retSize = sz1 > sz0 ? sz1 : sz0;
    alu.op1Bus.data = op0;
    alu.op2Bus.data = op1;
    alu.commandBus.data = retSize << 8 | sz0 << 6 | sz1 << 4 | command;
    alu.flagsBus.data = flagHandling & FLAGS_PUSH_TO_ALU ? registerFile.FLAGS & 15 : 0;
    alu.executeBus.signal();
    if (flagHandling & FLAGS_PULL_FROM_ALU) {
      registerFile.FLAGS = registerFile.FLAGS & 240 | alu.flagsBus.data;
      if (command === COMMANDS.SDIV || command === COMMANDS.DIV || command === COMMANDS.SMOD || command === COMMANDS.MOD) {
        if (op1 === 0) {
          registerFile.EXCEPTION = 1;
        }
      }
    }
    return alu.retBus.data;
  };
  var OPCODES = {};
  [
    ["fclr", "Clears Floating Point Unit", "0000_0000", {}, (_, { fpu }) => fpu.init()],
    ["fadd", "Add two FP numbers together", "0001_0000", {}, (_, { fpu }) => fpu.add()],
    ["fsub", "Subtract two FP numbers", "0001_0001", {}, (_, { fpu }) => fpu.sub()],
    ["fcmp", "Compare two FP numbers", "0001_0010", {}, (_, { fpu }) => fpu.sub()],
    ["fmul", "Multiply two FP numbers", "0001_0011", {}, (_, { fpu }) => fpu.mul()],
    ["fmod", "Return modulo of two FP numbers", "0001_0100", {}, (_, { fpu }) => fpu.mod()],
    ["fdiv", "Divide two FP numbers", "0001_0101", {}, (_, { fpu }) => fpu.div()],
    ["fpow", "Raise to power", "0001_0110", {}, (_, { fpu }) => fpu.pow()],
    ["fsqrt", "Square Root", "0001_0111", {}, (_, { fpu }) => fpu.sqrt()],
    ["fneg", "Negate FP Number", "0001_1000", {}, (_, { fpu }) => fpu.neg()],
    ["fexc", "Exchange top two FP numbers", "0001_1001", {}, (_, { fpu }) => fpu.swap()],
    ["fint", "Convert FP number to integer", "0001_1010", {}, (_, { fpu }) => fpu.int()],
    ["fabs", "Absolute Value of FP Number", "0001_1011", {}, (_, { fpu }) => fpu.abs()],
    ["fsin", "Sine", "0010_0000", {}, (_, { fpu }) => fpu.sin()],
    ["fcos", "Cosine", "0010_0001", {}, (_, { fpu }) => fpu.cos()],
    ["ftan", "Tangent", "0010_0010", {}, (_, { fpu }) => fpu.tan()],
    ["fasin", "Arc Sine", "0010_0100", {}, (_, { fpu }) => fpu.asin()],
    ["facos", "Arc Cosine", "0010_0101", {}, (_, { fpu }) => fpu.acos()],
    ["fatan", "Arc Tangent", "0010_0110", {}, (_, { fpu }) => fpu.atan()],
    ["fisnan", "Check if FP Number is NaN", "0011_0000", {}, (_, { fpu }) => fpu.isnan()],
    ["fisinf", "Check if FP Number is Infinte", "0011_0001", {}, (_, { fpu }) => fpu.isinf()],
    ["flog2", "Perform Log 2", "0011_0010", {}, (_, { fpu }) => fpu.log2()],
    ["flog10", "Perform Log 10", "0011_0011", {}, (_, { fpu }) => fpu.log10()],
    ["fld0", "Load zero constant", "0111_0000", {}, (_, { fpu }) => fpu.ld0()],
    ["fld1", "Load one constant", "0111_0001", {}, (_, { fpu }) => fpu.ld1()],
    ["flde", "Load e constant", "0111_0010", {}, (_, { fpu }) => fpu.e()],
    ["fldpi", "Load pi constant", "0111_0011", {}, (_, { fpu }) => fpu.pi()],
    ["fldr", "Load from register", "1000_0000", { r: [3, 0] }, ({ r }, { registerFile, fpu }) => fpu.push(registerFile.getRegister(r))],
    [
      "fldm",
      "Load from memory",
      "1000_0001",
      { b: [7, 4], r: [3, 0] },
      ({ b: b2, r }, { memory, registerFile, fpu }) => {
        const addr = (registerFile.getRegister(b2) << 3) + registerFile.getRegister(r);
        fpu.pushBytes([
          memory.readByte(addr + 0),
          memory.readByte(addr + 1),
          memory.readByte(addr + 2),
          memory.readByte(addr + 3),
          memory.readByte(addr + 4),
          memory.readByte(addr + 5),
          memory.readByte(addr + 6),
          memory.readByte(addr + 7)
        ]);
      }
    ],
    [
      "fldim",
      "Load from memory, indirect",
      "1000_0010",
      { b: [7, 4], r: [3, 0] },
      ({ b: b2, r }, { memory, registerFile, fpu }) => {
        let addr = (registerFile.getRegister(b2) << 3) + registerFile.getRegister(r);
        const bank = memory.readWord(addr);
        const offs = memory.readWord(addr + 2);
        addr = (bank << 3) + offs;
        fpu.pushBytes([
          memory.readByte(addr + 0),
          memory.readByte(addr + 1),
          memory.readByte(addr + 2),
          memory.readByte(addr + 3),
          memory.readByte(addr + 4),
          memory.readByte(addr + 5),
          memory.readByte(addr + 6),
          memory.readByte(addr + 7)
        ]);
      }
    ],
    ["fstr", "Store to register", "1000_0100", { r: [3, 0] }, ({ r }, { registerFile, fpu }) => registerFile.setRegister(r, fpu.pop())],
    [
      "fstm",
      "Store to memory",
      "1000_0101",
      { b: [7, 4], r: [3, 0] },
      ({ b: b2, r }, { memory, registerFile, fpu }) => {
        const bytes2 = fpu.popBytes();
        const addr = (registerFile.getRegister(b2) << 3) + registerFile.getRegister(r);
        for (let i = 0; i < 8; i++)
          memory.writeByte(addr + i, bytes2[i]);
      }
    ],
    [
      "fstim",
      "Store to memory, indirect",
      "1000_0110",
      { b: [7, 4], r: [3, 0] },
      ({ b: b2, r }, { memory, registerFile, fpu }) => {
        const bytes2 = fpu.popBytes();
        let addr = (registerFile.getRegister(b2) << 3) + registerFile.getRegister(r);
        const bank = memory.readWord(addr);
        const offs = memory.readWord(addr + 2);
        addr = (bank << 3) + offs;
        for (let i = 0; i < 8; i++)
          memory.writeByte(addr + i, bytes2[i]);
      }
    ]
  ].forEach(([asm, description, pattern, operands, equiv]) => {
    OPCODES[asm] = {
      asm,
      pattern: `1010_1110 ${pattern}`,
      operands,
      description,
      flags: "xdshncvz",
      equiv
    };
  });
  OPCODES["nop"] = {
    asm: "nop",
    pattern: "0000_0000",
    operands: {},
    description: "Performs no operation",
    flags: "xdshncvz",
    equiv: () => {
    },
    decode: () => [
      TASKS.NOP
    ]
  };
  OPCODES["halt"] = {
    asm: "halt",
    pattern: "0011_1110",
    operands: {},
    description: "Halts the processor until an interrupt occurs",
    flags: "xdshncvz",
    equiv: (_, { registerFile }) => registerFile.SINGLE_STEP = 1,
    decode: () => [
      TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP
    ]
  };
  OPCODES["wait"] = {
    asm: "wait $r",
    pattern: "1010_1111 bbbb_bbbb",
    operands: { b: [7, 0] },
    description: "[TODO] Waits until a specific interrupt occurs",
    flags: "xdshncvz",
    equiv: (_, { registerFile }) => registerFile.SINGLE_STEP = 1,
    decode: ({ b: b2 = 0 } = {}) => [
      TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP
    ]
  };
  OPCODES["brk"] = {
    asm: "brk",
    pattern: "0011_1111",
    operands: {},
    description: "Halts the processor if a debugger is attached",
    flags: "xdshncvz",
    equiv: (_, { registerFile }) => {
      registerFile.SINGLE_STEP = 1;
      registerFile.INTERRUPT_DISABLE = 1;
    },
    decode: () => [
      TASKS.SET_FLAG_IMM | FLAGS_INDEX.INTERRUPT_DISABLE,
      TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP
    ]
  };
  OPCODES["not"] = {
    asm: "not $r",
    pattern: "0000_1001 0000_rrrr",
    operands: { r: [3, 0] },
    description: "!reg",
    flags: "xdshNcvZ",
    equiv: ({ r }, { alu, registerFile }) => {
      const mask = r & 1 ? 255 : 65535;
      const sign = r & 1 ? 128 : 32768;
      const v = ~registerFile.getRegister(r) & mask;
      registerFile.setRegister(r, v);
      registerFile.NEGATIVE = v & sign ? 1 : 0;
      registerFile.ZERO = v === 0 ? 1 : 0;
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | r,
      (r & 1 ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | (r & 1 ? 255 : 65535),
      TASKS.XOR | FLAGS_PULL_FROM_ALU,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["neg"] = {
    asm: "neg $r",
    pattern: "0000_1001 0001_rrrr",
    operands: { r: [3, 0] },
    description: "-1 * reg",
    flags: "xdshNcvZ",
    equiv: ({ r }, { alu, registerFile }) => {
      const mask = r & 1 ? 255 : 65535;
      const sign = r & 1 ? 128 : 32768;
      const v = -registerFile.getRegister(r) & mask;
      registerFile.setRegister(r, v);
      registerFile.NEGATIVE = v & sign ? 1 : 0;
      registerFile.ZERO = v === 0 ? 1 : 0;
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | r,
      (r & 1 ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | (r & 1 ? 255 : 65535),
      TASKS.XOR,
      (r & 1 ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | 1,
      TASKS.ADD | FLAGS_PULL_FROM_ALU,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["exc"] = {
    asm: "exc $r",
    pattern: "0000_1001 0010_rrrr",
    operands: { r: [3, 0] },
    description: "Swaps high and low regions of the register",
    flags: "xdshNcvZ",
    equiv: ({ r }, { alu, registerFile }) => {
      const mask = r & 1 ? 255 : 65535;
      const sign = r & 1 ? 128 : 32768;
      let v = registerFile.getRegister(r);
      if (r & 1) {
        v = (v & 15) << 4 | (v & 240) >> 4;
      } else {
        v = (v & 255) << 8 | (v & 65280) >> 8;
      }
      registerFile.setRegister(r, v);
      registerFile.NEGATIVE = v & sign ? 1 : 0;
      registerFile.ZERO = v === 0 ? 1 : 0;
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | r,
      r & 1 ? TASKS.DECOMPOSE_BYTE_TO_NIBBLE : TASKS.DECOMPOSE_WORD_TO_BYTES,
      TASKS.PUSH_WORD | (r & 1 ? 4 : 8),
      TASKS.SHL,
      TASKS.OR | FLAGS_PULL_FROM_ALU,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["swap_ds"] = {
    asm: "swap $d, $s",
    pattern: "0000_1110 dddd_ssss",
    operands: { s: [3, 0], d: [7, 4] },
    description: "Swaps register values",
    flags: "xdshncvz",
    equiv: ({ d, s }, { registerFile }) => {
      const dV = registerFile.getRegister(d);
      const sV = registerFile.getRegister(s);
      registerFile.setRegister(d, sV);
      registerFile.setRegister(s, dV);
    },
    decode: ({ d = 0, s = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | d,
      TASKS.GET_REGISTER_AND_PUSH | s,
      TASKS.POP_INTO_REGISTER | d,
      TASKS.POP_INTO_REGISTER | s
    ]
  };
  OPCODES["mov_ds"] = {
    asm: "mov $d, $s",
    pattern: "0000_1111 dddd_ssss",
    operands: { s: [3, 0], d: [7, 4] },
    description: "Moves value of source to dest",
    flags: "xdshncvz",
    equiv: ({ d, s }, { registerFile }) => {
      const sV = registerFile.getRegister(s);
      registerFile.setRegister(d, sV);
    },
    decode: ({ d = 0, s = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | s,
      TASKS.POP_INTO_REGISTER | d
    ]
  };
  [
    ["inc", TASKS.ADD, `1100_rrrr`, COMMANDS.ADD],
    ["dec", TASKS.SUB, `1101_rrrr`, COMMANDS.SUB]
  ].forEach(([opcode, task, pattern, command]) => {
    OPCODES[`${opcode}_r`] = {
      asm: `${opcode} $r`,
      pattern,
      operands: { r: [3, 0] },
      description: `${opcode}rements register`,
      flags: "xdshNCVZ",
      equiv: ({ r }, { registerFile, alu }) => {
        registerFile.setRegister(r, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(r),
          sz0: r & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: 1,
          sz1: r & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          flagHandling: FLAGS_PULL_FROM_ALU
        }));
      },
      decode: ({ r = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | r,
        (r & 1 ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | 1,
        task | FLAGS_PULL_FROM_ALU,
        TASKS.POP_INTO_REGISTER | r
      ]
    };
  });
  [
    ["set", TASKS.SET_FLAG_IMM, `1011_0fff`],
    ["clr", TASKS.CLEAR_FLAG_IMM, `1011_1fff`]
  ].forEach(([opcode, task, pattern]) => {
    OPCODES[`${opcode}_f`] = {
      asm: `${opcode} $f`,
      pattern,
      operands: { f: [2, 0] },
      description: `${opcode}s specified flag`,
      flags: "XDSHNCVZ",
      equiv: task === TASKS.SET_FLAG_IMM ? ({ f }, { registerFile }) => registerFile.FLAGS |= 1 << f : ({ f }, { registerFile }) => registerFile.FLAGS &= ~(1 << f),
      decode: ({ f = 0 } = {}) => [
        task | f
      ]
    };
  });
  [
    ["add", TASKS.ADD, "0000_0001", "0100_1dd1", "0100_1dd0", COMMANDS.ADD, FLAGS_PUSH_AND_PULL, true],
    ["sub", TASKS.SUB, "0000_0010", "0101_0dd1", "0101_0dd0", COMMANDS.SUB, FLAGS_PUSH_AND_PULL, true],
    ["cmp", TASKS.CMP, "0000_0011", "0101_1dd1", "0101_1dd0", COMMANDS.SUB, FLAGS_PULL_FROM_ALU, false],
    ["and", TASKS.AND, "0000_0100", "0110_0dd1", "0110_0dd0", COMMANDS.AND, FLAGS_PUSH_AND_PULL, true],
    ["or", TASKS.OR, "0000_0101", "0110_1dd1", "0110_1dd0", COMMANDS.OR, FLAGS_PUSH_AND_PULL, true],
    ["test", TASKS.AND, "0000_0110", "0111_0dd1", "0111_0dd0", COMMANDS.AND, FLAGS_PULL_FROM_ALU, false],
    ["xor", TASKS.XOR, "0000_0111", "0111_1dd1", "0111_1dd0", COMMANDS.XOR, FLAGS_PUSH_AND_PULL, true]
  ].forEach(([opcode, task, ds, db, dw, command, flagHandling, storeReturn], idx) => {
    OPCODES[`${opcode}_ds`] = {
      asm: `${opcode} $d, $s`,
      pattern: `${ds} dddd_ssss`,
      operands: { s: [3, 0], d: [7, 4] },
      description: `${opcode}s dest and source, storing result in dest`,
      flags: idx < 3 ? "xdshNCVZ" : "xdshNcvZ",
      equiv: !storeReturn ? ({ d, s }, { registerFile, alu }) => {
        aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d),
          sz0: d & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: registerFile.getRegister(s),
          sz1: s & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          flagHandling
        });
      } : ({ d, s }, { registerFile, alu }) => {
        registerFile.setRegister(d, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d),
          sz0: d & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: registerFile.getRegister(s),
          sz1: s & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          flagHandling
        }));
      },
      decode: !storeReturn ? ({ d = 0, s = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d,
        TASKS.GET_REGISTER_AND_PUSH | s,
        task | FLAGS_PULL_FROM_ALU
      ] : ({ d = 0, s = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d,
        TASKS.GET_REGISTER_AND_PUSH | s,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | d
      ]
    };
    OPCODES[`${opcode}_db`] = {
      asm: `${opcode} $d, $b`,
      pattern: `${db} bbbb_bbbb`,
      operands: { d: [10, 9], b: [7, 0] },
      description: `${opcode}s dest and imm8, storing result in dest`,
      flags: idx < 3 ? "xdshNCVZ" : "xdshNcvZ",
      equiv: !storeReturn ? ({ d, b: b2 }, { registerFile, alu }) => {
        aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d * 2 + 1),
          sz0: SIZE_BYTE2,
          op1: b2,
          sz1: SIZE_BYTE2,
          flagHandling
        });
      } : ({ d, b: b2 }, { registerFile, alu }) => {
        registerFile.setRegister(d * 2 + 1, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d * 2 + 1),
          sz0: SIZE_BYTE2,
          op1: b2,
          sz1: SIZE_BYTE2,
          flagHandling
        }));
      },
      decode: !storeReturn ? ({ d = 0, b: b2 = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | (d << 1 | 1),
        TASKS.PUSH_BYTE | b2,
        task | FLAGS_PULL_FROM_ALU
      ] : ({ d = 0, b: b2 = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | (d << 1 | 1),
        TASKS.PUSH_BYTE | b2,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | (d << 1 | 1)
      ]
    };
    OPCODES[`${opcode}_dw`] = {
      asm: `${opcode} $d, $w`,
      pattern: `${dw} wwww_wwww wwww_wwww`,
      operands: { d: [18, 17], w: [15, 0] },
      description: `${opcode}s dest and imm16, storing result in dest`,
      flags: idx < 3 ? "xdshNCVZ" : "xdshNcvZ",
      equiv: !storeReturn ? ({ d, w }, { registerFile, alu }) => {
        aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d * 2),
          sz0: SIZE_WORD2,
          op1: w,
          sz1: SIZE_WORD2,
          flagHandling
        });
      } : ({ d, w }, { registerFile, alu }) => {
        registerFile.setRegister(d * 2, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d * 2),
          sz0: SIZE_WORD2,
          op1: w,
          sz1: SIZE_WORD2,
          flagHandling
        }));
      },
      decode: !storeReturn ? ({ d = 0, w = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d << 1,
        TASKS.PUSH_WORD | w,
        task | FLAGS_PULL_FROM_ALU
      ] : ({ d = 0, w = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d << 1,
        TASKS.PUSH_WORD | w,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | d << 1
      ]
    };
  });
  OPCODES["trap_b"] = {
    asm: "trap $b",
    pattern: "0000_1000 bbbb_bbbb",
    operands: { b: [7, 0] },
    description: "Executes the specified trap",
    flags: "xdshncvz",
    equiv: ({ r }, { registerFile, memory }) => {
      OPCODES["br_call_f"].equiv({ w: 1, i: 1, m: 1, a: b }, { registerFile, memory });
    },
    decode: ({ b: b2 = 0 } = {}) => [
      ...OPCODES["br_call_f"].decode({ w: 1, i: 1, m: 1, a: b2 })
    ]
  };
  OPCODES["trap_r"] = {
    asm: "trap $r",
    pattern: "0100_0rrr",
    operands: { r: [2, 0] },
    description: "[TODO] Executes the specified trap in the given register",
    flags: "xdshncvz",
    equiv: ({ r }, { registerFile, memory }) => {
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.NOP
    ]
  };
  OPCODES["enter_n"] = {
    asm: "enter $n",
    pattern: "0011_1000 nnnn_nnnn",
    operands: { n: [7, 0] },
    description: "Enters a stack frame",
    flags: "xdshncvz",
    equiv: ({ n }, { registerFile, memory }) => {
      OPCODES["push_r"].equiv({ r: REGISTER_INDEX.BP }, { registerFile, memory });
      OPCODES["mov_ds"].equiv({ d: REGISTER_INDEX.BP, s: REGISTER_INDEX.SP }, { registerFile, memory });
      registerFile.SP -= n;
    },
    decode: ({ n = 0 } = {}) => [
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.BP }),
      ...OPCODES["mov_ds"].decode({ d: REGISTER_INDEX.BP, s: REGISTER_INDEX.SP }),
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
      TASKS.PUSH_WORD | n,
      TASKS.SUB,
      TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP
    ]
  };
  OPCODES["exit_n"] = {
    asm: "exit $n",
    pattern: "0011_1001 nnnn_nnnn",
    operands: { n: [7, 0] },
    description: "Leaves a stack frame",
    flags: "xdshncvz",
    equiv: ({ n }, { registerFile, memory }) => {
      registerFile.SP += n;
      OPCODES["pop_r"].equiv({ r: REGISTER_INDEX.BP }, { registerFile, memory });
    },
    decode: ({ n = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
      TASKS.PUSH_WORD | n,
      TASKS.ADD,
      TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.BP })
    ]
  };
  [
    ["shl", TASKS.SHL, "0000_1011 dddd_ssss", COMMANDS.SHL],
    ["shr", TASKS.SHR, "0000_1101 dddd_ssss", COMMANDS.SHR],
    ["mul", TASKS.MUL, "1010_1000 dddd_ssss", COMMANDS.MUL],
    ["div", TASKS.DIV, "1010_1001 dddd_ssss", COMMANDS.DIV],
    ["mod", TASKS.MOD, "1010_1010 dddd_ssss", COMMANDS.MOD],
    ["smul", TASKS.SMUL, "1010_1011 dddd_ssss", COMMANDS.SMUL],
    ["sdiv", TASKS.SDIV, "1010_1100 dddd_ssss", COMMANDS.SDIV],
    ["smod", TASKS.SMOD, "1010_1101 dddd_ssss", COMMANDS.SMOD]
  ].forEach(([opcode, task, pattern, command], idx) => {
    OPCODES[`${opcode}_ds`] = {
      asm: `${opcode} $d, $s`,
      pattern,
      operands: { s: [3, 0], d: [7, 4] },
      description: `${opcode} dest and source, storing result in dest`,
      flags: idx < 2 ? "xdshNCvZ" : (opcode.indexOf("mul") > -1 ? "x" : "X") + "dshNCVZ",
      equiv: ({ d = 0, s = 0 } = {}, { registerFile, alu }) => {
        registerFile.setRegister(d, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(d),
          sz0: d & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: registerFile.getRegister(s),
          sz1: s & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          flagHandling: FLAGS_PUSH_AND_PULL
        }));
      },
      decode: ({ d = 0, s = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | d,
        TASKS.GET_REGISTER_AND_PUSH | s,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | d
      ]
    };
  });
  [
    ["shl", TASKS.SHL, "0000_1010 rrrr_nnnn", COMMANDS.SHL],
    ["shr", TASKS.SHR, "0000_1100 rrrr_nnnn", COMMANDS.SHR]
  ].forEach(([opcode, task, pattern, command]) => {
    OPCODES[`${opcode}_rn`] = {
      asm: `${opcode} $r, $n`,
      pattern,
      operands: { n: [3, 0], r: [7, 4] },
      description: `${opcode} reg by specified bits`,
      flags: "xdshNCvZ",
      equiv: ({ r, n }, { registerFile, alu }) => {
        registerFile.setRegister(r, aluOp({
          alu,
          registerFile,
          command,
          op0: registerFile.getRegister(r),
          sz0: r & 1 ? SIZE_BYTE2 : SIZE_WORD2,
          op1: n,
          sz1: SIZE_BYTE2,
          flagHandling: FLAGS_PUSH_AND_PULL
        }));
      },
      decode: ({ r = 0, n = 0 } = {}) => [
        TASKS.GET_REGISTER_AND_PUSH | r,
        TASKS.PUSH_BYTE | n,
        task | FLAGS_PUSH_AND_PULL,
        TASKS.POP_INTO_REGISTER | r
      ]
    };
  });
  OPCODES["in_rp"] = {
    asm: "in $r, $p",
    pattern: "0011_0000 rrrr_0000 pppppppp",
    operands: { r: [15, 12], p: [7, 0] },
    description: "Reads a value from port and stores in reg",
    flags: "xdshncvz",
    equiv: ({ r, p }, { registerFile, ioBus }) => {
      ioBus.deviceSelectBus.value = (p & 240) >> 4;
      ioBus.addressSelectBus.value = p & 15;
      ioBus.commandBus.value = 0;
      ioBus.executeBus.signal();
      registerFile.setRegister(r, ioBus.dataBus.value);
    },
    decode: ({ r = 0, p = 0 } = {}) => [
      TASKS.PUSH_BYTE | p,
      TASKS.IO_IN,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["out_rp"] = {
    asm: "out $r, $p",
    pattern: "0011_0001 rrrr_0000 pppppppp",
    operands: { r: [15, 12], p: [7, 0] },
    description: "Writes value in reg to port",
    flags: "xdshncvz",
    equiv: ({ r, p }, { registerFile, ioBus }) => {
      ioBus.deviceSelectBus.value = (p & 240) >> 4;
      ioBus.addressSelectBus.value = p & 15;
      ioBus.dataBus.value = registerFile.getRegister(r);
      ioBus.commandBus.value = 1;
      ioBus.executeBus.signal();
    },
    decode: ({ r = 0, p = 0 } = {}) => [
      TASKS.PUSH_BYTE | p,
      TASKS.GET_REGISTER_AND_PUSH | r,
      TASKS.IO_OUT
    ]
  };
  OPCODES["ld_dw"] = {
    asm: "ld $d, $w",
    pattern: "0001_ddd0 0000_0000 wwww_wwww wwww_wwww",
    operands: { d: [27, 25], w: [15, 0] },
    description: "Loads an immediate word into dest",
    flags: "xdshncvz",
    equiv: ({ d, w }, { registerFile }) => {
      registerFile.setRegister(d * 2, w);
    },
    decode: ({ d = 0, w = 0 } = {}) => [
      TASKS.PUSH_WORD | w,
      TASKS.POP_INTO_REGISTER | d << 1
    ]
  };
  OPCODES["ld_db"] = {
    asm: "ld $d, $b",
    pattern: "0001_ddd1 0000_0000 bbbb_bbbb",
    operands: { d: [19, 17], b: [7, 0] },
    description: "Loads an immediate byte into dest",
    flags: "xdshncvz",
    equiv: ({ d, b: b2 }, { registerFile }) => {
      registerFile.setRegister(d * 2 + 1, b2);
    },
    decode: ({ d = 0, b: b2 = 0 } = {}) => [
      TASKS.PUSH_BYTE | b2,
      TASKS.POP_INTO_REGISTER | (d << 1 | 1)
    ]
  };
  var calcAddress = ({ m, i, x, y, a }, { registerFile, memory }) => {
    let addr = a;
    if (m === 2)
      addr = addr + registerFile.BP & 65535;
    if (m === 3)
      addr = addr + (registerFile.D << 3);
    if (x === 1)
      addr += registerFile.X;
    if (i === 1)
      addr = (memory.readWord(addr) << 3) + memory.readWord(addr + 2);
    if (y === 1)
      addr += registerFile.Y;
    return addr & 524287;
  };
  var addressingTasks = ({ m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [
    ...m === 2 ? [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.BP,
      TASKS.ADD,
      TASKS.PUSH_WORD | 65535,
      TASKS.AND
    ] : m === 3 ? [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.D,
      TASKS.PUSH_WORD | 0,
      TASKS.RECOMPOSE_ADDR,
      TASKS.ADD
    ] : [],
    ...x === 1 ? [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.X,
      TASKS.ADD
    ] : [],
    ...i === 1 ? [
      TASKS.GET_ADDR_FROM_MEMORY,
      TASKS.RECOMPOSE_ADDR
    ] : [],
    ...y === 1 ? [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.Y,
      TASKS.ADD
    ] : []
  ];
  OPCODES["ld"] = {
    asm: "ld $d, $a $x $y $m:$i",
    pattern: "0001_dddd mmix_yaaa aaaa_aaaa aaaa_aaaa",
    operands: { d: [27, 24], m: [23, 22], i: [21, 21], x: [20, 20], y: [19, 19], a: [18, 0] },
    description: "Loads a value from memory",
    flags: "xdshncvz",
    equiv: ({ d, m, i, x, y, a }, { registerFile, memory }) => {
      if (d & 1)
        registerFile.setRegister(d, memory.readByte(calcAddress({ m, i, x, y, a }, { registerFile, memory })));
      else
        registerFile.setRegister(d, memory.readWord(calcAddress({ m, i, x, y, a }, { registerFile, memory })));
    },
    decode: ({ d = 0, m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [
      TASKS.PUSH_ADDR | a,
      ...addressingTasks({ m, i, x, y, a }),
      d & 1 ? TASKS.GET_BYTE_FROM_MEMORY : TASKS.GET_WORD_FROM_MEMORY,
      TASKS.POP_INTO_REGISTER | d
    ]
  };
  OPCODES["st"] = {
    asm: "st $a, $s $x $y $m:$i",
    pattern: "0010_ssss mmix_yaaa aaaa_aaaa aaaa_aaaa",
    operands: { s: [27, 24], m: [23, 22], i: [21, 21], x: [20, 20], y: [19, 19], a: [18, 0] },
    description: "Stores a value to memory",
    flags: "xdshncvz",
    equiv: ({ s, m, i, x, y, a }, { registerFile, memory }) => {
      const data = registerFile.getRegister(s);
      if (s & 1)
        memory.writeByte(calcAddress({ m, i, x, y, a }, { registerFile, memory }), data);
      else
        memory.writeWord(calcAddress({ m, i, x, y, a }, { registerFile, memory }), data);
    },
    decode: ({ s = 0, m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [
      TASKS.PUSH_ADDR | a,
      ...addressingTasks({ m, i, x, y, a }),
      TASKS.GET_REGISTER_AND_PUSH | s,
      s & 1 ? TASKS.POP_BYTE_INTO_MEMORY : TASKS.POP_WORD_INTO_MEMORY
    ]
  };
  OPCODES["push_r"] = {
    asm: `push $r`,
    pattern: "1110_rrrr",
    operands: { r: [3, 0] },
    description: "Push the register on stack",
    flags: "xdshncvz",
    equiv: ({ r }, { registerFile, memory }) => {
      registerFile.SP -= r & 1 ? 1 : 2;
      if (r & 1)
        memory.writeByte(registerFile.SP, registerFile.getRegister(r));
      else
        memory.writeWord(registerFile.SP, registerFile.getRegister(r));
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
      TASKS.PUSH_WORD | (r & 1 ? 1 : 2),
      TASKS.SUB,
      TASKS.DUP,
      TASKS.GET_REGISTER_AND_PUSH | r,
      r & 1 ? TASKS.POP_BYTE_INTO_MEMORY : TASKS.POP_WORD_INTO_MEMORY,
      TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP
    ]
  };
  OPCODES["pop_r"] = {
    asm: `pop $r`,
    pattern: "1111_rrrr",
    operands: { r: [3, 0] },
    description: "Pop top of stack into register",
    flags: "xdshncvz",
    equiv: ({ r }, { registerFile, memory }) => {
      let data;
      if (r & 1)
        data = memory.readByte(registerFile.SP);
      else
        data = memory.readWord(registerFile.SP);
      registerFile.SP += r & 1 ? 1 : 2;
      registerFile.setRegister(r, data);
    },
    decode: ({ r = 0 } = {}) => [
      TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
      TASKS.DUP,
      TASKS.PUSH_WORD | (r & 1 ? 1 : 2),
      TASKS.ADD,
      TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,
      r & 1 ? TASKS.GET_BYTE_FROM_MEMORY : TASKS.GET_WORD_FROM_MEMORY,
      TASKS.POP_INTO_REGISTER | r
    ]
  };
  OPCODES["pushall"] = {
    asm: `pushall`,
    pattern: "1010_0000",
    operands: {},
    description: "Pushes SP, A, B, C, D, X, Y, and BP",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.SP }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.A }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.B }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.C }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.D }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.X }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.Y }, { registerFile, memory });
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.BP }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.SP }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.A }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.B }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.C }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.D }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.X }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.Y }),
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.BP })
    ]
  };
  OPCODES["popall"] = {
    asm: `popall`,
    pattern: "1010_0001",
    operands: {},
    description: "Reverse of pushall",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.BP }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.Y }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.X }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.D }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.C }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.B }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.A }, { registerFile, memory });
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.SP }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.BP }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.Y }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.X }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.D }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.C }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.B }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.A }),
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.SP })
    ]
  };
  OPCODES["pushf"] = {
    asm: `pushf`,
    pattern: "1010_0010",
    operands: {},
    description: "Push flags onto stack",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.STATUS }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.STATUS })
    ]
  };
  OPCODES["popf"] = {
    asm: `popf`,
    pattern: "1010_0011",
    operands: {},
    description: "Pops flags from stack",
    flags: "XDSHNCVZ",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.STATUS }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.STATUS })
    ]
  };
  OPCODES["pushmm"] = {
    asm: `pushmm`,
    pattern: "1010_0100",
    operands: {},
    description: "Push memory map register to stack",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.push_r.equiv({ r: REGISTER_INDEX.MM }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["push_r"].decode({ r: REGISTER_INDEX.MM })
    ]
  };
  OPCODES["popmm"] = {
    asm: `popmm`,
    pattern: "1010_0101",
    operands: {},
    description: "Pops value on stack into memory map register",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.MM }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.MM })
    ]
  };
  OPCODES["ret"] = {
    asm: `ret`,
    pattern: "1010_0111",
    operands: {},
    description: "Return from subroutine",
    flags: "xdshncvz",
    equiv: ({}, { registerFile, memory }) => {
      OPCODES.pop_r.equiv({ r: REGISTER_INDEX.PC }, { registerFile, memory });
    },
    decode: () => [
      ...OPCODES["pop_r"].decode({ r: REGISTER_INDEX.PC })
    ]
  };
  [
    ["brs_calls_f", "1001_nfff mmix_yuw1 aaaa_aaaa", 8],
    ["br_call_f", "1001_nfff mmix_yuw0 aaaa_aaaa aaaa_aaaa", 0]
  ].forEach(([opcode, pattern, offset]) => {
    OPCODES[opcode] = {
      asm: `${opcode} $n $f $m $i $x $y $u $w $a`,
      pattern,
      operands: {
        n: [27 - offset, 27 - offset],
        f: [26 - offset, 24 - offset],
        m: [23 - offset, 22 - offset],
        i: [21 - offset, 21 - offset],
        x: [20 - offset, 20 - offset],
        y: [19 - offset, 19 - offset],
        u: [18 - offset, 18 - offset],
        w: [17 - offset, 17 - offset],
        s: [16 - offset, 16 - offset],
        a: [15 - offset, 0]
      },
      description: "Conditional branch/call to address (U=unconditional; N=Not; W=Call)",
      flags: "xdshncvz",
      equiv: ({ n, f, m, i, x, y, u, w, s, a }, { registerFile, memory }) => {
        if (w === 1)
          OPCODES["push_r"].equiv({ r: REGISTER_INDEX.PC }, { registerFile, memory });
        let addr = s === 0 ? a : ((a & 128) > 0 ? 65280 : 0) | a;
        if (m === 0)
          addr = addr + registerFile.PC & 65535;
        addr = calcAddress({ m, i, x, y, a: addr }, { registerFile, memory });
        if (m !== 0)
          addr = memory.readWord(addr);
        if (u === 1) {
          switch (f) {
            case 0:
              registerFile.PC = addr;
              break;
            case 2:
              if (n === 0 && registerFile.NEGATIVE !== registerFile.OVERFLOW || n === 1 && registerFile.CARRY)
                registerFile.PC = addr;
              break;
            case 3:
              if (n === 0 && (registerFile.NEGATIVE !== registerFile.OVERFLOW || registerFile.ZERO) || n === 1 && (registerFile.CARRY || registerFile.ZERO))
                registerFile.PC = addr;
              break;
            case 4:
              if (n === 0 && registerFile.NEGATIVE === registerFile.OVERFLOW && !registerFile.ZERO || n === 1 && (!registerFile.CARRY && !registerFile.ZERO))
                registerFile.PC = addr;
              break;
            case 5:
              if (n === 0 && registerFile.NEGATIVE === registerFile.OVERFLOW && registerFile.ZERO || n === 1 && (!registerFile.CARRY || registerFile.ZERO))
                registerFile.PC = addr;
              break;
          }
        } else {
          let flagValue = registerFile.FLAGS & 1 << f ? 1 : 0;
          if (n === 1)
            flagValue = 1 - flagValue;
          if (flagValue === 1)
            registerFile.PC = addr;
        }
      },
      decode: ({ n = 0, f = 0, m = 0, i = 0, x = 0, y = 0, u = 0, w = 0, s = 0, a = 0 } = {}) => [
        ...w === 1 ? [
          TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,
          TASKS.PUSH_WORD | 2,
          TASKS.SUB,
          TASKS.DUP,
          TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,
          TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,
          TASKS.POP_WORD_INTO_MEMORY
        ] : [],
        ...s === 0 ? [
          TASKS.PUSH_WORD | a
        ] : [
          TASKS.PUSH_WORD | (((a & 128) > 0 ? 65280 : 0) | a)
        ],
        ...m === 0 ? [
          TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,
          TASKS.ADD
        ] : [],
        ...addressingTasks({ m, i, x, y, a }),
        ...m !== 0 ? [
          TASKS.GET_WORD_FROM_MEMORY
        ] : [],
        ...u === 1 ? [
          TASKS.POP_INTO_REGISTER | REGISTER_INDEX.PC
        ] : [
          TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,
          n === 1 ? TASKS.SWAP : TASKS.NOP,
          TASKS.TEST_FLAG_IMM | f,
          TASKS.PICK,
          TASKS.POP_INTO_REGISTER | REGISTER_INDEX.PC
        ]
      ]
    };
  });
  [
    ["loops_r", "1000_rrrr mmix_y..1 aaaa_aaaa", 8],
    ["loop_r", "1000_rrrr mmix_y..0 aaaa_aaaa aaaa_aaaa", 0]
  ].forEach(([opcode, pattern, offset]) => {
    OPCODES[opcode] = {
      asm: `${opcode} $r $m $i $x $y $a`,
      pattern,
      operands: {
        r: [27 - offset, 24 - offset],
        m: [23 - offset, 22 - offset],
        i: [21 - offset, 21 - offset],
        x: [20 - offset, 20 - offset],
        y: [19 - offset, 19 - offset],
        s: [16 - offset, 16 - offset],
        a: [15 - offset, 0]
      },
      description: "Decrements register and branches if carry is not set",
      flags: "xdshncvz",
      equiv: opcode === "loops_r" ? ({ r, m, i, x, y, s, a }, { registerFile, memory, alu }) => {
        OPCODES["dec_r"].equiv({ r }, { registerFile, memory, alu }), OPCODES["brs_calls_f"].equiv({ n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a }, { registerFile, memory });
      } : ({ r, m, i, x, y, s, a }, { registerFile, memory, alu }) => {
        OPCODES["dec_r"].equiv({ r }, { registerFile, memory, alu }), OPCODES["br_call_f"].equiv({ n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a }, { registerFile, memory });
      },
      decode: opcode === "loops_r" ? ({ r = 0, m = 0, i = 0, x = 0, y = 0, s = 0, a = 0 } = {}) => [
        ...OPCODES["dec_r"].decode({ r }),
        ...OPCODES["brs_calls_f"].decode({ n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a })
      ] : ({ r = 0, m = 0, i = 0, x = 0, y = 0, s = 0, a = 0 } = {}) => [
        ...OPCODES["dec_r"].decode({ r }),
        ...OPCODES["br_call_f"].decode({ n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a })
      ]
    };
  });

  // src/isa/decodeInstruction.js
  var INVALID_DECODE = {
    size: 0,
    opcode: null,
    instruction: 0
  };
  var opMap = [
    null,
    new Map(),
    new Map(),
    new Map(),
    new Map()
  ];
  function _decodeInstruction(bytes2) {
    let complete = false;
    let instruction = 0;
    let byte = 0;
    let size2 = 0;
    let idx = 0;
    let opcode;
    let op, p1;
    while (!complete) {
      byte = bytes2[idx];
      idx += 1;
      if (byte === void 0) {
        return INVALID_DECODE;
      }
      instruction = instruction << 8 | byte;
      size2 = idx;
      if (size2 > 4) {
        return INVALID_DECODE;
      }
      op = instruction >> (size2 - 1 << 3) & 255;
      if (size2 === 1) {
        if (op === 0) {
          opcode = OPCODES.nop;
        }
        if (op === 62) {
          opcode = OPCODES.halt;
        }
        if (op === 63) {
          opcode = OPCODES.brk;
        }
        if (op === 160) {
          opcode = OPCODES.pushall;
        }
        if (op === 161) {
          opcode = OPCODES.popall;
        }
        if (op === 162) {
          opcode = OPCODES.pushf;
        }
        if (op === 163) {
          opcode = OPCODES.popf;
        }
        if (op === 164) {
          opcode = OPCODES.pushmm;
        }
        if (op === 165) {
          opcode = OPCODES.popmm;
        }
        if (op === 167) {
          opcode = OPCODES.ret;
        }
        if (op >= 64 && op <= 71) {
          opcode = OPCODES.trap_r;
        }
        if (op >= 176 && op <= 183) {
          opcode = OPCODES.set_f;
        }
        if (op >= 184 && op <= 191) {
          opcode = OPCODES.clr_f;
        }
        if (op >= 192 && op <= 207) {
          opcode = OPCODES.inc_r;
        }
        if (op >= 208 && op <= 223) {
          opcode = OPCODES.dec_r;
        }
        if (op >= 224 && op <= 239) {
          opcode = OPCODES.push_r;
        }
        if (op >= 240 && op <= 255) {
          opcode = OPCODES.pop_r;
        }
      }
      p1 = size2 > 1 ? instruction >> (size2 - 2 << 3) & 255 : 0;
      if (size2 === 2) {
        if (op === 1) {
          opcode = OPCODES.add_ds;
        }
        if (op === 2) {
          opcode = OPCODES.sub_ds;
        }
        if (op === 3) {
          opcode = OPCODES.cmp_ds;
        }
        if (op === 4) {
          opcode = OPCODES.and_ds;
        }
        if (op === 5) {
          opcode = OPCODES.or_ds;
        }
        if (op === 6) {
          opcode = OPCODES.test_ds;
        }
        if (op === 7) {
          opcode = OPCODES.xor_ds;
        }
        if (op === 8) {
          opcode = OPCODES.trap_b;
        }
        if (op === 9) {
          if (p1 >= 0 && p1 <= 15) {
            opcode = OPCODES.not;
          }
          if (p1 >= 16 && p1 <= 31) {
            opcode = OPCODES.neg;
          }
          if (p1 >= 32 && p1 <= 47) {
            opcode = OPCODES.exc;
          }
        }
        if (op === 10) {
          opcode = OPCODES.shl_rn;
        }
        if (op === 11) {
          opcode = OPCODES.shl_ds;
        }
        if (op === 12) {
          opcode = OPCODES.shr_rn;
        }
        if (op === 13) {
          opcode = OPCODES.shr_ds;
        }
        if (op === 14) {
          opcode = OPCODES.swap_ds;
        }
        if (op === 15) {
          opcode = OPCODES.mov_ds;
        }
        if (op === 56) {
          opcode = OPCODES.enter_n;
        }
        if (op === 57) {
          opcode = OPCODES.exit_n;
        }
        if (op === 168) {
          opcode = OPCODES.mul_ds;
        }
        if (op === 169) {
          opcode = OPCODES.div_ds;
        }
        if (op === 170) {
          opcode = OPCODES.mod_ds;
        }
        if (op === 171) {
          opcode = OPCODES.smul_ds;
        }
        if (op === 172) {
          opcode = OPCODES.sdiv_ds;
        }
        if (op === 173) {
          opcode = OPCODES.smod_ds;
        }
        if (op === 174) {
          switch (p1) {
            case 0:
              opcode = OPCODES.fclr;
              break;
            case 16:
              opcode = OPCODES.fadd;
              break;
            case 17:
              opcode = OPCODES.fsub;
              break;
            case 18:
              opcode = OPCODES.fcmp;
              break;
            case 19:
              opcode = OPCODES.fmul;
              break;
            case 20:
              opcode = OPCODES.fmod;
              break;
            case 21:
              opcode = OPCODES.fdiv;
              break;
            case 22:
              opcode = OPCODES.fpow;
              break;
            case 23:
              opcode = OPCODES.fsqrt;
              break;
            case 24:
              opcode = OPCODES.fneg;
              break;
            case 25:
              opcode = OPCODES.fexc;
              break;
            case 26:
              opcode = OPCODES.fint;
              break;
            case 27:
              opcode = OPCODES.fabs;
              break;
            case 32:
              opcode = OPCODES.fsin;
              break;
            case 33:
              opcode = OPCODES.fcos;
              break;
            case 34:
              opcode = OPCODES.ftan;
              break;
            case 36:
              opcode = OPCODES.fasin;
              break;
            case 37:
              opcode = OPCODES.facos;
              break;
            case 38:
              opcode = OPCODES.fatan;
              break;
            case 48:
              opcode = OPCODES.fisnan;
              break;
            case 49:
              opcode = OPCODES.fisinf;
              break;
            case 50:
              opcode = OPCODES.flog2;
              break;
            case 51:
              opcode = OPCODES.flog10;
              break;
            case 112:
              opcode = OPCODES.fld0;
              break;
            case 113:
              opcode = OPCODES.fld1;
              break;
            case 114:
              opcode = OPCODES.flde;
              break;
            case 115:
              opcode = OPCODES.fldpi;
              break;
            default:
          }
        }
        if (op === 175) {
          opcode = OPCODES.wait;
        }
        if (op >= 72 && op <= 79 && (op & 1) === 1) {
          opcode = OPCODES.add_db;
        }
        if (op >= 80 && op <= 87 && (op & 1) === 1) {
          opcode = OPCODES.sub_db;
        }
        if (op >= 88 && op <= 95 && (op & 1) === 1) {
          opcode = OPCODES.cmp_db;
        }
        if (op >= 96 && op <= 103 && (op & 1) === 1) {
          opcode = OPCODES.and_db;
        }
        if (op >= 104 && op <= 111 && (op & 1) === 1) {
          opcode = OPCODES.or_db;
        }
        if (op >= 112 && op <= 119 && (op & 1) === 1) {
          opcode = OPCODES.test_db;
        }
        if (op >= 120 && op <= 127 && (op & 1) === 1) {
          opcode = OPCODES.xor_db;
        }
      }
      if (size2 === 3) {
        if (op >= 72 && op <= 79 && (op & 1) === 0) {
          opcode = OPCODES.add_dw;
        }
        if (op >= 80 && op <= 87 && (op & 1) === 0) {
          opcode = OPCODES.sub_dw;
        }
        if (op >= 88 && op <= 95 && (op & 1) === 0) {
          opcode = OPCODES.cmp_dw;
        }
        if (op >= 96 && op <= 103 && (op & 1) === 0) {
          opcode = OPCODES.and_dw;
        }
        if (op >= 104 && op <= 111 && (op & 1) === 0) {
          opcode = OPCODES.or_dw;
        }
        if (op >= 112 && op <= 119 && (op & 1) === 0) {
          opcode = OPCODES.test_dw;
        }
        if (op >= 120 && op <= 127 && (op & 1) === 0) {
          opcode = OPCODES.xor_dw;
        }
        if (op >= 16 && op <= 31 && (op & 1) === 1 && p1 === 0) {
          opcode = OPCODES.ld_db;
        }
        if (op === 48) {
          opcode = OPCODES.in_rp;
        }
        if (op === 49) {
          opcode = OPCODES.out_rp;
        }
        if (op >= 128 && op <= 143 && (p1 & 1) === 1) {
          opcode = OPCODES.loops_r;
        }
        if (op >= 144 && op <= 159 && (p1 & 1) === 1) {
          opcode = OPCODES.brs_calls_f;
        }
        if (op === 174) {
          switch (p1) {
            case 128:
              opcode = OPCODES.fldr;
              break;
            case 129:
              opcode = OPCODES.fldm;
              break;
            case 130:
              opcode = OPCODES.fldim;
              break;
            case 132:
              opcode = OPCODES.fstr;
              break;
            case 133:
              opcode = OPCODES.fstm;
              break;
            case 134:
              opcode = OPCODES.fstim;
              break;
            default:
          }
        }
      }
      if (size2 === 4) {
        if (op >= 16 && op <= 31 && (op & 1) === 0 && p1 === 0) {
          opcode = OPCODES.ld_dw;
        }
        if (op >= 16 && op <= 31 && p1 != 0) {
          opcode = OPCODES.ld;
        }
        if (op >= 32 && op <= 47) {
          opcode = OPCODES.st;
        }
        if (op >= 128 && op <= 143 && (p1 & 1) === 0) {
          opcode = OPCODES.loop_r;
        }
        if (op >= 144 && op <= 159 && (p1 & 1) === 0) {
          opcode = OPCODES.br_call_f;
        }
      }
      complete = opcode !== void 0;
    }
    if (!complete) {
      return INVALID_DECODE;
    }
    return { size: size2, opcode, instruction };
  }
  for (let b2 = 0; b2 < 256; b2++) {
    const r = _decodeInstruction([b2]);
    if (r !== INVALID_DECODE) {
      opMap[r.size].set(b2, r.opcode);
    }
  }
  for (let b2 = 0; b2 < 256; b2++) {
    for (let bb = 0; bb < 256; bb++) {
      const op = b2 << 8 | bb;
      let r = _decodeInstruction([b2, bb]);
      if (r !== INVALID_DECODE) {
        opMap[2].set(op, r.opcode);
      }
      r = _decodeInstruction([b2, bb, 0]);
      if (r !== INVALID_DECODE) {
        opMap[3].set(op, r.opcode);
      }
      r = _decodeInstruction([b2, bb, 0, 0]);
      if (r !== INVALID_DECODE) {
        opMap[4].set(op, r.opcode);
      }
    }
  }

  // src/core/Processor.js
  var _alu = Symbol("_alu");
  var _fpu = Symbol("_fpu");
  var _registerFile = Symbol("_registerFile");
  var _controller2 = Symbol("_controller");
  var _memory2 = Symbol("_memory");
  var _systemBus2 = Symbol("_systemBus");
  var _ioBus3 = Symbol("_ioBus");
  var _clock = Symbol("_clock");
  var _debug = Symbol("_debug");
  var _taskQueue = Symbol("_taskQueue");
  var _stack = Symbol("_stack");
  var _cache = Symbol("_cache");
  var _pendingServiceRequest = Symbol("_pendingServiceRequest");

  // src/core/Computer.js
  var TIMING_METHODS = {
    AUTO: 0,
    INTERVAL: 1,
    TIMEOUT: 2,
    RAF: 3,
    BLOCKING: 4,
    FIXED: 5,
    SENTINEL: 6
  };
  var detectedTimingMethod = typeof requestAnimationFrame !== "undefined" ? TIMING_METHODS.RAF : TIMING_METHODS.TIMEOUT;
  var _clock2 = Symbol("_clock");
  var _processor2 = Symbol("_processor");
  var _memory3 = Symbol("_memory");
  var _ioBus4 = Symbol("_ioBus");
  var _systemBus3 = Symbol("_systemBus");
  var _controller3 = Symbol("_controller");
  var _debug2 = Symbol("_debug");
  var _stopSignal = Symbol("_stopSignal");
  var _runID = Symbol("_runID");
  var _sentinel = Symbol("_sentinel");

  // src/basm/constants.js
  var REGISTERS = {
    A: 0,
    AL: 1,
    B: 2,
    BL: 3,
    C: 4,
    CL: 5,
    D: 6,
    DL: 7,
    X: 8,
    XL: 9,
    Y: 10,
    YL: 11,
    BP: 12,
    BPL: 13,
    SP: 14,
    SPL: 15
  };
  var REGISTER_NAMES = Object.entries(REGISTERS).reduce((o, [k, v]) => (o[v] = k, o), {});
  var OPCODES2 = {
    NOP: "nop",
    ADD: "add",
    AND: "and",
    CMP: "cmp",
    SUB: "sub",
    OR: "or",
    TEST: "test",
    XOR: "xor",
    TRAP: "trap",
    NOT: "not",
    NEG: "neg",
    EXC: "exc",
    SHL: "shl",
    SHR: "shr",
    SWAP: "swap",
    MOV: "mov",
    LD: "ld",
    ST: "st",
    INC: "inc",
    IN: "in",
    OUT: "out",
    ENTER: "enter",
    EXIT: "exit",
    BRK: "brk",
    LOOP: "loop",
    LOOPS: "loops",
    BR: "br",
    BRS: "brs",
    CALL: "call",
    CALLS: "calls",
    PUSHALL: "pushall",
    POPALL: "popall",
    PUSHF: "pushf",
    POPF: "popf",
    PUSHMM: "pushmm",
    POPMM: "popmm",
    PUSH: "push",
    POP: "pop",
    RET: "ret",
    MUL: "mul",
    MOD: "mod",
    DIV: "div",
    SMUL: "smul",
    SMOD: "smod",
    SDIV: "sdiv",
    SET: "set",
    CLR: "clr",
    DEC: "dec",
    HALT: "halt",
    WAIT: "wait",
    FCLR: "fclr",
    FLDR: "fldr",
    FLDM: "fldm",
    FLDIM: "fldim",
    FSTR: "fstr",
    FSTM: "fstm",
    FSTIM: "fstim",
    FADD: "fadd",
    FSUB: "fsub",
    FCMP: "fcmp",
    FMUL: "fmul",
    FDIV: "fdiv",
    FMOD: "fmod",
    FPOW: "fpow",
    FSQRT: "fsqrt",
    FABS: "fabs",
    FSIN: "fsin",
    FCOS: "fcos",
    FTAN: "ftan",
    FASIN: "fasin",
    FACOS: "facos",
    FATAN: "fatan",
    FNEG: "fneg",
    FEXC: "fexc",
    FINT: "fint",
    FISNAN: "fisnan",
    FISINF: "fisinf",
    FLOG2: "flog2",
    FLOG10: "flog10",
    FLD0: "fld0",
    FLD1: "fld1",
    FLDE: "flde",
    FLDPI: "fldpi"
  };
  var TOKENS = {
    COMMENT: "comment",
    STRING: "string",
    INTEGER: "integer",
    IDENTIFIER: "identifier",
    REGISTER: "register",
    FLAG: "flag",
    EXPRESSION: "expression",
    BINARY_EXPRESSION: "binary.expression",
    UNARY_EXPRESSION: "unary.expression",
    INSTRUCTION: "instruction",
    SEGMENT_DIRECTIVE: "directive.segment",
    NAMESPACE_DIRECTIVE: "directive.namespace",
    CONST_DIRECTIVE: "directive.const",
    IMPORT_DIRECTIVE: "directive.import",
    BYTE_DIRECTIVE: "directive.byte",
    WORD_DIRECTIVE: "directive.word",
    STRING_DIRECTIVE: "directive.string",
    LABEL: "label",
    MEMORY: "memory",
    BLOCK: "block",
    FUNCTION: "function",
    MACRO_DIRECTIVE: "directive.macro",
    MACRO_EXPANSION: "expand.macro",
    CONDITIONAL: "conditional"
  };
  var MODES = {
    IMMEDIATE: 0,
    ABSOLUTE: 1,
    BP: 2,
    D: 3
  };

  // src/core/Diagnostics.js
  var toHex = (n, padding = 4) => n.toString(16).padStart(padding, "0").toUpperCase();
  var toHex2 = (n) => toHex(n, 2);
  var toHex4 = (n) => toHex(n, 4);
  var toHex5 = (n) => toHex(n, 5);
  var round = (n, places = 0) => {
    const multiplier = 10 ** places;
    const v = Math.round(n * multiplier) / multiplier;
    return v;
  };
  var numToString = (n, { padWhole = 0, padDecimal = 2, padSign = 0 } = {}) => {
    const [whole, decimal] = Math.abs(n).toString().split(".");
    const neg = n < 0;
    return `${(neg ? "-" : "").padStart(padSign)}${whole.padStart(padWhole, "0")}${padDecimal ? "." : ""}${(decimal || "").padEnd(padDecimal, "0")}`;
  };

  // src/devices/Screen.js
  var PALETTE_PAGE = 0;
  var BG_COLOR = 1;
  var LAYER_SEL = 2;
  var SPRITE_SEL = 12;
  var SPRITE_COL_HI = 25;
  var SPRITE_COL_LO = 26;
  var BORDER_COLOR = 27;
  var BORDER_CFG = 28;
  var TRAP_ON_RASTER = 29;
  var CURRENT_RASTER = 30;
  var RESET_WAIT = 31;
  var SCREEN_COLUMNS = 640;
  var SCREEN_ROWS = 480;
  var ADDRESSABLE_COLUMNS = 512;
  var ADDRESSABLE_ROWS = 384;
  var BORDER_WIDTH = (SCREEN_COLUMNS - ADDRESSABLE_COLUMNS) / 2;
  var BORDER_HEIGHT = (SCREEN_ROWS - ADDRESSABLE_ROWS) / 2;
  var MIRROR_MAP = {
    [PALETTE_PAGE]: true,
    [BG_COLOR]: true,
    [LAYER_SEL]: true,
    [SPRITE_SEL]: true,
    [SPRITE_COL_HI]: true,
    [SPRITE_COL_LO]: true,
    [BORDER_COLOR]: true,
    [BORDER_CFG]: true,
    [TRAP_ON_RASTER]: true,
    [CURRENT_RASTER]: true,
    [RESET_WAIT]: true
  };

  // src/devices/DMA.js
  var SOURCE_ADDRESS = 0;
  var TARGET_ADDRESS = 4;
  var LENGTH = 8;
  var MODE = 12;
  var FILL = 13;
  var SKIP = 10;
  var TIMES = 14;
  var MIRROR_MAP2 = {
    [SOURCE_ADDRESS + 0]: true,
    [SOURCE_ADDRESS + 1]: true,
    [SOURCE_ADDRESS + 2]: true,
    [TARGET_ADDRESS + 0]: true,
    [TARGET_ADDRESS + 1]: true,
    [TARGET_ADDRESS + 2]: true,
    [LENGTH + 0]: true,
    [LENGTH + 1]: true,
    [MODE]: true,
    [FILL]: true,
    [SKIP]: true,
    [SKIP + 1]: true,
    [TIMES]: true,
    [TIMES + 1]: true
  };

  // src/devices/Keyboard.js
  var PORT_KEY_PRESSED = 0;
  var PORT_BUFFER_REMAINING = 1;
  var PORT_ROW_0_QUAD_0 = 2;
  var PORT_ROW_0_QUAD_1 = 3;
  var PORT_ROW_1_QUAD_0 = 4;
  var PORT_ROW_1_QUAD_1 = 5;
  var PORT_ROW_2_QUAD_0 = 6;
  var PORT_ROW_2_QUAD_1 = 7;
  var PORT_ROW_3_QUAD_0 = 8;
  var PORT_ROW_3_QUAD_1 = 9;
  var PORT_ROW_4_QUAD_0 = 10;
  var PORT_ROW_4_QUAD_1 = 11;
  var MIRROR_MAP3 = {
    [PORT_KEY_PRESSED]: true,
    [PORT_BUFFER_REMAINING]: true,
    [PORT_ROW_0_QUAD_0]: true,
    [PORT_ROW_0_QUAD_1]: true,
    [PORT_ROW_1_QUAD_0]: true,
    [PORT_ROW_1_QUAD_1]: true,
    [PORT_ROW_2_QUAD_0]: true,
    [PORT_ROW_2_QUAD_1]: true,
    [PORT_ROW_3_QUAD_0]: true,
    [PORT_ROW_3_QUAD_1]: true,
    [PORT_ROW_4_QUAD_0]: true,
    [PORT_ROW_4_QUAD_1]: true
  };
  var BS = 8;
  var TAB = 9;
  var FF = 12;
  var CR = 13;
  var ARR = 16;
  var ARL = 17;
  var F1 = 18;
  var F2 = 19;
  var F3 = 20;
  var F4 = 21;
  var F5 = 22;
  var F6 = 23;
  var F7 = 24;
  var F8 = 25;
  var F9 = 26;
  var F10 = 27;
  var DEL = 29;
  var ARU = 30;
  var ARD = 31;
  var KEYBOARD_MAP = [
    [
      ["Backquote", "`", "~", 255, 142, 0],
      [["Digit1", "Numpad1"], "1", "!", 228, 134, 28],
      [["Digit2", "Numpad2"], "2", "@", 229, 135, 29],
      [["Digit3", "Numpad3"], "3", "#", 251, 136, 30],
      [["Digit4", "Numpad4"], "4", "$", 240, 152, 31],
      [["Digit5", "Numpad5"], "5", "%", 241, 168, 0],
      [["Digit6", "Numpad6"], "6", "^", 242, 150, 0],
      [["Digit7", "Numpad7"], "7", "&", 243, 151, 0],
      [["Digit8", "Numpad8", "NumpadMultiply"], "8", "*", 244, 166, 0],
      [["Digit9", "Numpad9"], "9", "(", 245, 167, 0],
      [["Digit0", "Numpad0"], "0", ")", 246, 158, 27],
      [["Minus", "NumpadSubtract"], "-", "_", 237, 147, 0],
      [["Equal", "NumpadEqual", "NumpadAdd"], "=", "+", 235, 149, 0],
      ["Backspace", BS, DEL, 127, DEL, FF],
      ["F1", F1, F1, F1, F1, F1],
      ["F2", F2, F2, F2, F2, F2]
    ],
    [
      ["Tab", TAB, TAB, 0, 0, 0],
      ["KeyQ", "q", "Q", 218, 213, "Q".charCodeAt(0) - 64],
      ["KeyW", "w", "W", 194, 209, "W".charCodeAt(0) - 64],
      ["KeyE", "e", "E", 191, 184, "E".charCodeAt(0) - 64],
      ["KeyR", "r", "R", 201, 214, "R".charCodeAt(0) - 64],
      ["KeyT", "t", "T", 203, 210, "T".charCodeAt(0) - 64],
      ["KeyY", "y", "Y", 187, 183, "Y".charCodeAt(0) - 64],
      ["KeyU", "u", "U", 233, 227, "U".charCodeAt(0) - 64],
      ["KeyI", "i", "I", 223, 196, "I".charCodeAt(0) - 64],
      ["KeyO", "o", "O", 232, 226, "O".charCodeAt(0) - 64],
      ["KeyP", "p", "P", 178, 131, "P".charCodeAt(0) - 64],
      ["BracketLeft", "[", "{", 236, 133, 0],
      ["BracketRight", "]", "}", 234, 132, 0],
      ["Backslash", "\\", "|", 239, 164, 0],
      ["F3", F3, F3, F3, F3, F3],
      ["F4", F4, F4, F4, F4, F4]
    ],
    [
      ["CapsLock", 0, 0, 0, 0, 0],
      ["KeyA", "a", "A", 195, 198, "A".charCodeAt(0) - 64],
      ["KeyS", "s", "S", 197, 216, "S".charCodeAt(0) - 64],
      ["KeyD", "d", "D", 180, 181, "D".charCodeAt(0) - 64],
      ["KeyF", "f", "F", 204, 199, "F".charCodeAt(0) - 64],
      ["KeyG", "g", "G", 206, 215, "G".charCodeAt(0) - 64],
      ["KeyH", "h", "H", 185, 182, "H".charCodeAt(0) - 64],
      ["KeyJ", "j", "J", 221, 179, "J".charCodeAt(0) - 64],
      ["KeyK", "k", "K", 219, 159, "K".charCodeAt(0) - 64],
      ["KeyL", "l", "L", 222, 186, "L".charCodeAt(0) - 64],
      ["Semicolon", ";", ":", 176, 163, 0],
      ["Quote", `'`, `"`, 177, 165, 0],
      void 0,
      [["Enter", "NumpadEnter"], CR, CR, CR, CR, CR],
      ["F5", F5, F5, F5, F5, F5],
      ["F6", F6, F6, F6, F6, F6]
    ],
    [
      ["ShiftLeft", 0, 0, 0, 0, 0],
      ["KeyZ", "z", "Z", 192, 212, "Z".charCodeAt(0) - 64],
      ["KeyX", "x", "X", 193, 207, "X".charCodeAt(0) - 64],
      ["KeyC", "c", "C", 217, 190, "C".charCodeAt(0) - 64],
      ["KeyV", "v", "V", 200, 211, "V".charCodeAt(0) - 64],
      ["KeyB", "b", "B", 202, 208, "B".charCodeAt(0) - 64],
      ["KeyN", "n", "N", 188, 189, "N".charCodeAt(0) - 64],
      ["KeyM", "m", "M", 231, 225, "M".charCodeAt(0) - 64],
      ["Comma", ",", "<", 220, 205, 0],
      [["Period", "NumpadDecimal"], ".", ">", 230, 224, 0],
      [["Slash", "NumpadDivide"], "/", "?", 238, 143, 0],
      void 0,
      ["ArrowUp", ARU, ARU, ARU, ARU, ARU],
      ["ShiftRight", 0, 0, 0, 0, 0],
      ["F7", F7, F7, F7, F7, F7],
      ["F8", F8, F8, F8, F8, F8]
    ],
    [
      [["MetaLeft", "MetaRight"], 0, 0, 0, 0, 0],
      [["AltLeft", "AltRight"], 0, 0, 0, 0, 0],
      [["ControlLeft", "ControlRight"], 0, 0, 0, 0, 0],
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      ["Space", 32, 32, 32, 32, 32],
      void 0,
      void 0,
      ["ArrowLeft", ARL, ARL, ARL, ARL, ARL],
      ["ArrowDown", ARD, ARD, ARD, ARD, ARD],
      ["ArrowRight", ARR, ARR, ARR, ARR, ARR],
      ["F9", F9, F9, F9, F9, F9],
      ["F10", F10, F10, F10, F10, F10]
    ]
  ];
  var KEYCODE_MAP = {};
  KEYBOARD_MAP.map((keys, row) => keys && keys.map((data, col) => {
    if (data) {
      const [key, unshifted, shifted, gru, grs, ctl] = data;
      const tmp = { addr: row * 16 + col, unshifted, shifted, gru, grs, ctl };
      if (typeof tmp.unshifted === "string")
        tmp.unshifted = tmp.unshifted.charCodeAt(0);
      if (typeof tmp.shifted === "string")
        tmp.shifted = tmp.shifted.charCodeAt(0);
      if (typeof tmp.gru === "string")
        tmp.gru = tmp.gru.charCodeAt(0);
      if (typeof tmp.grs === "string")
        tmp.grs = tmp.grs.charCodeAt(0);
      if (typeof tmp.ctl === "string")
        tmp.ctl = tmp.ctl.charCodeAt(0);
      if (Array.isArray(key)) {
        for (let theKey of key) {
          KEYCODE_MAP[theKey] = tmp;
        }
      } else {
        KEYCODE_MAP[key] = tmp;
      }
    }
  }));

  // src/devices/Timers.js
  var PORT_RTC_HOURS = 0;
  var PORT_RTC_MINUTES = 1;
  var PORT_RTC_SECONDS = 2;
  var PORT_RTC_HUNDREDTHS = 3;
  var PORT_TIMER_0_HIGH = 4;
  var PORT_TIMER_0_LOW = 5;
  var PORT_TIMER_1_HIGH = 6;
  var PORT_TIMER_1_LOW = 7;
  var PORT_TIMER_2_HIGH = 8;
  var PORT_TIMER_2_LOW = 9;
  var PORT_TIMER_3_HIGH = 10;
  var PORT_TIMER_3_LOW = 11;
  var PORT_RANDOM_HIGH = 12;
  var PORT_RANDOM_LOW = 13;
  var PORT_TIMER_MODES = 14;
  var PORT_RESET = 15;
  var MIRROR_MAP4 = {
    [PORT_RTC_HOURS]: true,
    [PORT_RTC_MINUTES]: true,
    [PORT_RTC_SECONDS]: true,
    [PORT_RTC_HUNDREDTHS]: true,
    [PORT_TIMER_0_HIGH]: true,
    [PORT_TIMER_0_LOW]: true,
    [PORT_TIMER_1_HIGH]: true,
    [PORT_TIMER_1_LOW]: true,
    [PORT_TIMER_2_HIGH]: true,
    [PORT_TIMER_2_LOW]: true,
    [PORT_TIMER_3_HIGH]: true,
    [PORT_TIMER_3_LOW]: true,
    [PORT_TIMER_MODES]: true,
    [PORT_RANDOM_HIGH]: true,
    [PORT_RANDOM_LOW]: true,
    [PORT_RESET]: true
  };

  // src/roms/kernel.js
  var vectors = {
    "CLEAR_SCREEN": 523776,
    "SCROLL_SCREEN_UP": 523778,
    "SET_CURSOR_POS": 523780,
    "GET_CURSOR_POS": 523782,
    "GET_CURSOR_ADDR": 523784,
    "SET_FG_COLOR": 523786,
    "GET_FG_COLOR": 523788,
    "SET_BG_COLOR": 523790,
    "GET_BG_COLOR": 523792,
    "CVT_ADDR_TO_POS": 523794,
    "GET_CHAR_UNDER_CURSOR": 523796,
    "GET_LOGICAL_LINE_START_ADDR": 523798,
    "GET_LOGICAL_LINE_END_ADDR": 523800,
    "CURSOR_UP": 523802,
    "CURSOR_LEFT": 523804,
    "CURSOR_RIGHT": 523806,
    "CURSOR_DOWN": 523808,
    "CURSOR_NEWLINE": 523810,
    "PUT_CHAR": 523812,
    "GET_CHAR": 523814,
    "PRINT": 523816,
    "INPUT": 523818,
    "SHOW_CURSOR": 523820,
    "HIDE_CURSOR": 523822,
    "PRINT_RAW": 523824,
    "U16_TO_STR": 523826,
    "I16_TO_STR": 523828,
    "STRCMP": 523830,
    "STACK_PUSH": 523832,
    "STACK_POP": 523834,
    "MAKE_HEAP": 523836,
    "GET_HEAP_FREE": 523838,
    "ALLOC": 523840
  };

  // src/www/simple/System.js
  var worker = new Worker("./worker.js");
  var sentinel = new SharedArrayBuffer(1);
  var sentinelArray = new Uint8Array(sentinel);
  var sendMessage = (data) => {
    Atomics.store(sentinelArray, 0, 1);
    worker.postMessage(data);
  };
  var frame;
  worker.onmessage = (evt) => {
    const { data } = evt;
    const { command } = data;
    switch (command) {
      case "frame":
        frame = data.frame;
        break;
      default:
        console.log(`Unknown message ${evt}`);
    }
  };
  function sysInit(options) {
    sendMessage({ command: "sys-init", options: Object.assign({}, options, { sentinel }) });
  }
  function cpuReset() {
    sendMessage({ command: "cpu-reset" });
  }
  function frameDump() {
    sendMessage({ command: "frame-dump" });
  }
  function getLastFrame() {
    return frame;
  }

  // src/www/simple/Store.js
  var Store = class {
    constructor() {
      this.listeners = [];
      const stats = new import_stats.default();
      stats.showPanel(0);
      stats.dom.style.cssText = "";
      this.stats = stats;
      const screenFPS = new import_stats.default();
      screenFPS.showPanel(0);
      screenFPS.dom.style.cssText = "";
      this.fps = screenFPS;
      const cpuFPS = new import_stats.default();
      cpuFPS.showPanel(0);
      cpuFPS.dom.style.cssText = "";
      this.cpuStats = cpuFPS;
      this.config = {};
      this.load();
      sysInit(this.config.options);
      cpuReset();
    }
    get code() {
      return this.config.code;
    }
    set code(v) {
      this.config.code = v;
      this.save();
    }
    get updateInterval() {
      return this.config.panels.updateInterval || 250;
    }
    set updateInterval(ms) {
      this.config.panels.updateInterval = ms;
      this.save();
      this.notify();
    }
    get autoUpdate() {
      return this.config.panels.autoUpdate;
    }
    set autoUpdate(v) {
      this.config.panels.autoUpdate = v;
      this.save();
      this.notify();
    }
    get codes() {
      return this.config.codes;
    }
    get memoryStart() {
      return this.config.memoryPanel.start;
    }
    set memoryStart(v) {
      this.config.memoryPanel.start = Number.isNaN(Number(v)) ? "0x00000" : v;
      this.save();
      this.notify();
    }
    get memoryEnd() {
      return this.config.memoryPanel.end;
    }
    set memoryEnd(v) {
      this.config.memoryPanel.end = Number.isNaN(Number(v)) ? "0x7FFFF" : v;
      this.save();
      this.notify();
    }
    get useGL() {
      return this.config.options.useGL;
    }
    set useGL(v) {
      this.config.options.useGL = v;
      this.save();
      this.notify();
    }
    get accurateScreen() {
      return this.config.options.accurateScreen;
    }
    set accurateScreen(v) {
      this.config.options.accurateScreen = v;
      this.save();
      this.notify();
    }
    get showKeyboardOnScreen() {
      return this.config.options.showKeyboardOnScreen;
    }
    set showKeyboardOnScreen(v) {
      this.config.options.showKeyboardOnScreen = v;
      this.save();
      this.notify();
    }
    addListener(cb) {
      if (this.listeners.indexOf(cb) < 0) {
        this.listeners.push(cb);
      }
    }
    removeListener(cb) {
      this.listeners = this.listeners.filter((l) => l !== cb);
    }
    notify() {
      this.listeners.forEach((l) => l(this));
    }
    save() {
      localStorage.setItem("config", JSON.stringify(this.config));
    }
    saveProgram(name) {
      this.config.codes = [...this.config.codes.filter(({ name: aName }) => aName !== name), { name, code: this.code }];
      this.save();
      this.notify();
    }
    loadProgram(name) {
      this.code = this.config.codes.find(({ name: aName }) => name === aName).code;
      this.save();
      this.notify();
    }
    load() {
      const savedConfigStr = localStorage.getItem("config");
      const savedConfig = savedConfigStr ? JSON.parse(savedConfigStr) : {};
      this.config = Object.assign({}, {
        memoryPanel: {
          start: "0x00000",
          end: "0x000FF"
        },
        options: {
          timingMethod: TIMING_METHODS.SENTINEL,
          sliceGranularity: 16384,
          sliceTime: 16,
          ticksBetweenRasterLines: "AUTO",
          useGL: true,
          accurateScreen: false,
          showKeyboardOnScreen: false
        },
        panels: {
          canvas: true,
          state: true,
          code: true,
          console: false,
          control: true,
          updateInterval: 250,
          autoUpdate: true
        },
        codes: [],
        code: `
            .segment code 0x02000 {
                ld al, 0
            top:
                ld x, 0
                ld c, 768
                ld bl, 0xff
                ld dl, 0
                do {
                    st [0x10000,x], al
                    st [0x11000,x], bl
                    st [0x12000,x], dl
                    inc al
                    inc x
                    dec c
                } while !z
                dec al
                br top
                brk
            }
            `.split("\n").map((l) => l.substr(12)).join("\n")
      }, savedConfig);
    }
  };

  // src/www/simple/components/ComputerConsole.jsx
  var import_react = __toModule(require_react());
  var ComputerConsole = class extends import_react.default.Component {
    constructor(props) {
      super(props);
      this._console = import_react.default.createRef();
    }
    componentDidMount() {
      return;
      const { store: store3 } = this.props;
      const { devices: { console: console2 } } = store3;
      console2.target = this._console.current;
    }
    render() {
      return /* @__PURE__ */ import_react.default.createElement("div", {
        className: "panel"
      }, /* @__PURE__ */ import_react.default.createElement("code", {
        ref: this._console
      }));
    }
  };

  // src/www/simple/components/CodeEditor.jsx
  var import_react13 = __toModule(require_react());

  // node_modules/@monaco-editor/loader/lib/es/_virtual/_rollupPluginBabelHelpers.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/state-local/lib/es/state-local.js
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread22(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys2(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function compose() {
    for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }
    return function(x) {
      return fns.reduceRight(function(y, f) {
        return f(y);
      }, x);
    };
  }
  function curry(fn) {
    return function curried() {
      var _this = this;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return args.length >= fn.length ? fn.apply(this, args) : function() {
        for (var _len3 = arguments.length, nextArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          nextArgs[_key3] = arguments[_key3];
        }
        return curried.apply(_this, [].concat(args, nextArgs));
      };
    };
  }
  function isObject(value) {
    return {}.toString.call(value).includes("Object");
  }
  function isEmpty(obj) {
    return !Object.keys(obj).length;
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function hasOwnProperty(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }
  function validateChanges(initial, changes) {
    if (!isObject(changes))
      errorHandler("changeType");
    if (Object.keys(changes).some(function(field) {
      return !hasOwnProperty(initial, field);
    }))
      errorHandler("changeField");
    return changes;
  }
  function validateSelector(selector) {
    if (!isFunction(selector))
      errorHandler("selectorType");
  }
  function validateHandler(handler) {
    if (!(isFunction(handler) || isObject(handler)))
      errorHandler("handlerType");
    if (isObject(handler) && Object.values(handler).some(function(_handler) {
      return !isFunction(_handler);
    }))
      errorHandler("handlersType");
  }
  function validateInitial(initial) {
    if (!initial)
      errorHandler("initialIsRequired");
    if (!isObject(initial))
      errorHandler("initialType");
    if (isEmpty(initial))
      errorHandler("initialContent");
  }
  function throwError(errorMessages3, type2) {
    throw new Error(errorMessages3[type2] || errorMessages3["default"]);
  }
  var errorMessages = {
    initialIsRequired: "initial state is required",
    initialType: "initial state should be an object",
    initialContent: "initial state shouldn't be an empty object",
    handlerType: "handler should be an object or a function",
    handlersType: "all handlers should be a functions",
    selectorType: "selector should be a function",
    changeType: "provided value of changes should be an object",
    changeField: 'it seams you want to change a field in the state which is not specified in the "initial" state',
    "default": "an unknown error accured in `state-local` package"
  };
  var errorHandler = curry(throwError)(errorMessages);
  var validators = {
    changes: validateChanges,
    selector: validateSelector,
    handler: validateHandler,
    initial: validateInitial
  };
  function create(initial) {
    var handler = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    validators.initial(initial);
    validators.handler(handler);
    var state = {
      current: initial
    };
    var didUpdate = curry(didStateUpdate)(state, handler);
    var update = curry(updateState)(state);
    var validate = curry(validators.changes)(initial);
    var getChanges = curry(extractChanges)(state);
    function getState2() {
      var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function(state2) {
        return state2;
      };
      validators.selector(selector);
      return selector(state.current);
    }
    function setState2(causedChanges) {
      compose(didUpdate, update, validate, getChanges)(causedChanges);
    }
    return [getState2, setState2];
  }
  function extractChanges(state, causedChanges) {
    return isFunction(causedChanges) ? causedChanges(state.current) : causedChanges;
  }
  function updateState(state, changes) {
    state.current = _objectSpread22(_objectSpread22({}, state.current), changes);
    return changes;
  }
  function didStateUpdate(state, handler, changes) {
    isFunction(handler) ? handler(state.current) : Object.keys(changes).forEach(function(field) {
      var _handler$field;
      return (_handler$field = handler[field]) === null || _handler$field === void 0 ? void 0 : _handler$field.call(handler, state.current[field]);
    });
    return changes;
  }
  var index = {
    create
  };
  var state_local_default = index;

  // node_modules/@monaco-editor/loader/lib/es/config/index.js
  var config = {
    paths: {
      vs: "https://cdn.jsdelivr.net/npm/monaco-editor@0.28.1/min/vs"
    }
  };
  var config_default = config;

  // node_modules/@monaco-editor/loader/lib/es/utils/curry.js
  function curry2(fn) {
    return function curried() {
      var _this = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return args.length >= fn.length ? fn.apply(this, args) : function() {
        for (var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          nextArgs[_key2] = arguments[_key2];
        }
        return curried.apply(_this, [].concat(args, nextArgs));
      };
    };
  }
  var curry_default = curry2;

  // node_modules/@monaco-editor/loader/lib/es/utils/isObject.js
  function isObject2(value) {
    return {}.toString.call(value).includes("Object");
  }
  var isObject_default = isObject2;

  // node_modules/@monaco-editor/loader/lib/es/validators/index.js
  function validateConfig(config3) {
    if (!config3)
      errorHandler2("configIsRequired");
    if (!isObject_default(config3))
      errorHandler2("configType");
    if (config3.urls) {
      informAboutDeprecation();
      return {
        paths: {
          vs: config3.urls.monacoBase
        }
      };
    }
    return config3;
  }
  function informAboutDeprecation() {
    console.warn(errorMessages2.deprecation);
  }
  function throwError2(errorMessages3, type2) {
    throw new Error(errorMessages3[type2] || errorMessages3["default"]);
  }
  var errorMessages2 = {
    configIsRequired: "the configuration object is required",
    configType: "the configuration object should be an object",
    "default": "an unknown error accured in `@monaco-editor/loader` package",
    deprecation: "Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  "
  };
  var errorHandler2 = curry_default(throwError2)(errorMessages2);
  var validators2 = {
    config: validateConfig
  };
  var validators_default = validators2;

  // node_modules/@monaco-editor/loader/lib/es/utils/compose.js
  var compose2 = function compose3() {
    for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }
    return function(x) {
      return fns.reduceRight(function(y, f) {
        return f(y);
      }, x);
    };
  };
  var compose_default = compose2;

  // node_modules/@monaco-editor/loader/lib/es/utils/deepMerge.js
  function merge(target, source) {
    Object.keys(source).forEach(function(key) {
      if (source[key] instanceof Object) {
        if (target[key]) {
          Object.assign(source[key], merge(target[key], source[key]));
        }
      }
    });
    return _objectSpread2(_objectSpread2({}, target), source);
  }
  var deepMerge_default = merge;

  // node_modules/@monaco-editor/loader/lib/es/utils/makeCancelable.js
  var CANCELATION_MESSAGE = {
    type: "cancelation",
    msg: "operation is manually canceled"
  };
  function makeCancelable(promise) {
    var hasCanceled_ = false;
    var wrappedPromise = new Promise(function(resolve, reject) {
      promise.then(function(val) {
        return hasCanceled_ ? reject(CANCELATION_MESSAGE) : resolve(val);
      });
      promise["catch"](reject);
    });
    return wrappedPromise.cancel = function() {
      return hasCanceled_ = true;
    }, wrappedPromise;
  }
  var makeCancelable_default = makeCancelable;

  // node_modules/@monaco-editor/loader/lib/es/loader/index.js
  var _state$create = state_local_default.create({
    config: config_default,
    isInitialized: false,
    resolve: null,
    reject: null,
    monaco: null
  });
  var _state$create2 = _slicedToArray(_state$create, 2);
  var getState = _state$create2[0];
  var setState = _state$create2[1];
  function config2(config3) {
    setState(function(state) {
      return {
        config: deepMerge_default(state.config, validators_default.config(config3))
      };
    });
  }
  function init() {
    var state = getState(function(_ref) {
      var isInitialized = _ref.isInitialized;
      return {
        isInitialized
      };
    });
    if (!state.isInitialized) {
      if (window.monaco && window.monaco.editor) {
        storeMonacoInstance(window.monaco);
        return makeCancelable_default(Promise.resolve(window.monaco));
      }
      compose_default(injectScripts, getMonacoLoaderScript)(configureLoader);
      setState({
        isInitialized: true
      });
    }
    return makeCancelable_default(wrapperPromise);
  }
  function injectScripts(script) {
    return document.body.appendChild(script);
  }
  function createScript(src) {
    var script = document.createElement("script");
    return src && (script.src = src), script;
  }
  function getMonacoLoaderScript(configureLoader2) {
    var state = getState(function(_ref2) {
      var config3 = _ref2.config, reject = _ref2.reject;
      return {
        config: config3,
        reject
      };
    });
    var loaderScript = createScript("".concat(state.config.paths.vs, "/loader.js"));
    loaderScript.onload = function() {
      return configureLoader2();
    };
    loaderScript.onerror = state.reject;
    return loaderScript;
  }
  function configureLoader() {
    var state = getState(function(_ref3) {
      var config3 = _ref3.config, resolve = _ref3.resolve, reject = _ref3.reject;
      return {
        config: config3,
        resolve,
        reject
      };
    });
    var require2 = window.require;
    require2.config(state.config);
    require2(["vs/editor/editor.main"], function(monaco) {
      storeMonacoInstance(monaco);
      state.resolve(monaco);
    }, function(error) {
      state.reject(error);
    });
  }
  function storeMonacoInstance(monaco) {
    if (!getState().monaco) {
      setState({
        monaco
      });
    }
  }
  function __getMonacoInstance() {
    return getState(function(_ref4) {
      var monaco = _ref4.monaco;
      return monaco;
    });
  }
  var wrapperPromise = new Promise(function(resolve, reject) {
    return setState({
      resolve,
      reject
    });
  });
  var loader = {
    config: config2,
    init,
    __getMonacoInstance
  };
  var loader_default = loader;

  // node_modules/@monaco-editor/react/lib/es/DiffEditor/index.js
  var import_react8 = __toModule(require_react());

  // node_modules/@monaco-editor/react/lib/es/DiffEditor/DiffEditor.js
  var import_react7 = __toModule(require_react());
  var import_prop_types2 = __toModule(require_prop_types());

  // node_modules/@monaco-editor/react/lib/es/MonacoContainer/index.js
  var import_react4 = __toModule(require_react());

  // node_modules/@monaco-editor/react/lib/es/MonacoContainer/MonacoContainer.js
  var import_react3 = __toModule(require_react());
  var import_prop_types = __toModule(require_prop_types());

  // node_modules/@monaco-editor/react/lib/es/_virtual/_rollupPluginBabelHelpers.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@monaco-editor/react/lib/es/Loading/Loading.js
  var import_react2 = __toModule(require_react());
  var loadingStyles = {
    display: "flex",
    height: "100%",
    width: "100%",
    justifyContent: "center",
    alignItems: "center"
  };
  function Loading({
    content
  }) {
    return /* @__PURE__ */ import_react2.default.createElement("div", {
      style: loadingStyles
    }, content);
  }
  var Loading_default = Loading;

  // node_modules/@monaco-editor/react/lib/es/MonacoContainer/styles.js
  var styles = {
    wrapper: {
      display: "flex",
      position: "relative",
      textAlign: "initial"
    },
    fullWidth: {
      width: "100%"
    },
    hide: {
      display: "none"
    }
  };
  var styles_default = styles;

  // node_modules/@monaco-editor/react/lib/es/MonacoContainer/MonacoContainer.js
  function MonacoContainer({
    width,
    height,
    isEditorReady,
    loading,
    _ref,
    className,
    wrapperProps
  }) {
    return /* @__PURE__ */ import_react3.default.createElement("section", _extends({
      style: {
        ...styles_default.wrapper,
        width,
        height
      }
    }, wrapperProps), !isEditorReady && /* @__PURE__ */ import_react3.default.createElement(Loading_default, {
      content: loading
    }), /* @__PURE__ */ import_react3.default.createElement("div", {
      ref: _ref,
      style: {
        ...styles_default.fullWidth,
        ...!isEditorReady && styles_default.hide
      },
      className
    }));
  }
  MonacoContainer.propTypes = {
    width: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]).isRequired,
    height: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]).isRequired,
    loading: import_prop_types.default.oneOfType([import_prop_types.default.element, import_prop_types.default.string]).isRequired,
    isEditorReady: import_prop_types.default.bool.isRequired,
    className: import_prop_types.default.string,
    wrapperProps: import_prop_types.default.object
  };
  var MonacoContainer_default = MonacoContainer;

  // node_modules/@monaco-editor/react/lib/es/MonacoContainer/index.js
  var MonacoContainer2 = /* @__PURE__ */ (0, import_react4.memo)(MonacoContainer_default);
  var MonacoContainer_default2 = MonacoContainer2;

  // node_modules/@monaco-editor/react/lib/es/hooks/useMount/index.js
  var import_react5 = __toModule(require_react());
  function useMount(effect) {
    (0, import_react5.useEffect)(effect, []);
  }
  var useMount_default = useMount;

  // node_modules/@monaco-editor/react/lib/es/hooks/useUpdate/index.js
  var import_react6 = __toModule(require_react());
  function useUpdate(effect, deps, applyChanges = true) {
    const isInitialMount = (0, import_react6.useRef)(true);
    (0, import_react6.useEffect)(isInitialMount.current || !applyChanges ? () => {
      isInitialMount.current = false;
    } : effect, deps);
  }
  var useUpdate_default = useUpdate;

  // node_modules/@monaco-editor/react/lib/es/utils/index.js
  function noop() {
  }
  function getOrCreateModel(monaco, value, language, path) {
    return getModel(monaco, path) || createModel(monaco, value, language, path);
  }
  function getModel(monaco, path) {
    return monaco.editor.getModel(createModelUri(monaco, path));
  }
  function createModel(monaco, value, language, path) {
    return monaco.editor.createModel(value, language, path && createModelUri(monaco, path));
  }
  function createModelUri(monaco, path) {
    return monaco.Uri.parse(path);
  }
  function isUndefined(input) {
    return input === void 0;
  }

  // node_modules/@monaco-editor/react/lib/es/DiffEditor/DiffEditor.js
  function DiffEditor({
    original,
    modified,
    language,
    originalLanguage,
    modifiedLanguage,
    originalModelPath,
    modifiedModelPath,
    keepCurrentOriginalModel,
    keepCurrentModifiedModel,
    theme,
    loading,
    options,
    height,
    width,
    className,
    wrapperProps,
    beforeMount,
    onMount
  }) {
    const [isEditorReady, setIsEditorReady] = (0, import_react7.useState)(false);
    const [isMonacoMounting, setIsMonacoMounting] = (0, import_react7.useState)(true);
    const editorRef = (0, import_react7.useRef)(null);
    const monacoRef = (0, import_react7.useRef)(null);
    const containerRef = (0, import_react7.useRef)(null);
    const onMountRef = (0, import_react7.useRef)(onMount);
    const beforeMountRef = (0, import_react7.useRef)(beforeMount);
    useMount_default(() => {
      const cancelable = loader_default.init();
      cancelable.then((monaco) => (monacoRef.current = monaco) && setIsMonacoMounting(false)).catch((error) => (error === null || error === void 0 ? void 0 : error.type) !== "cancelation" && console.error("Monaco initialization: error:", error));
      return () => editorRef.current ? disposeEditor() : cancelable.cancel();
    });
    useUpdate_default(() => {
      const modifiedEditor = editorRef.current.getModifiedEditor();
      if (modifiedEditor.getOption(monacoRef.current.editor.EditorOption.readOnly)) {
        modifiedEditor.setValue(modified);
      } else {
        if (modified !== modifiedEditor.getValue()) {
          modifiedEditor.executeEdits("", [{
            range: modifiedEditor.getModel().getFullModelRange(),
            text: modified,
            forceMoveMarkers: true
          }]);
          modifiedEditor.pushUndoStop();
        }
      }
    }, [modified], isEditorReady);
    useUpdate_default(() => {
      editorRef.current.getModel().original.setValue(original);
    }, [original], isEditorReady);
    useUpdate_default(() => {
      const {
        original: original2,
        modified: modified2
      } = editorRef.current.getModel();
      monacoRef.current.editor.setModelLanguage(original2, originalLanguage || language);
      monacoRef.current.editor.setModelLanguage(modified2, modifiedLanguage || language);
    }, [language, originalLanguage, modifiedLanguage], isEditorReady);
    useUpdate_default(() => {
      monacoRef.current.editor.setTheme(theme);
    }, [theme], isEditorReady);
    useUpdate_default(() => {
      editorRef.current.updateOptions(options);
    }, [options], isEditorReady);
    const setModels = (0, import_react7.useCallback)(() => {
      beforeMountRef.current(monacoRef.current);
      const originalModel = getOrCreateModel(monacoRef.current, original, originalLanguage || language, originalModelPath);
      const modifiedModel = getOrCreateModel(monacoRef.current, modified, modifiedLanguage || language, modifiedModelPath);
      editorRef.current.setModel({
        original: originalModel,
        modified: modifiedModel
      });
    }, [language, modified, modifiedLanguage, original, originalLanguage, originalModelPath, modifiedModelPath]);
    const createEditor = (0, import_react7.useCallback)(() => {
      editorRef.current = monacoRef.current.editor.createDiffEditor(containerRef.current, {
        automaticLayout: true,
        ...options
      });
      setModels();
      monacoRef.current.editor.setTheme(theme);
      setIsEditorReady(true);
    }, [options, theme, setModels]);
    (0, import_react7.useEffect)(() => {
      if (isEditorReady) {
        onMountRef.current(editorRef.current, monacoRef.current);
      }
    }, [isEditorReady]);
    (0, import_react7.useEffect)(() => {
      !isMonacoMounting && !isEditorReady && createEditor();
    }, [isMonacoMounting, isEditorReady, createEditor]);
    function disposeEditor() {
      const models = editorRef.current.getModel();
      if (!keepCurrentOriginalModel) {
        var _models$original;
        (_models$original = models.original) === null || _models$original === void 0 ? void 0 : _models$original.dispose();
      }
      if (!keepCurrentModifiedModel) {
        var _models$modified;
        (_models$modified = models.modified) === null || _models$modified === void 0 ? void 0 : _models$modified.dispose();
      }
      editorRef.current.dispose();
    }
    return /* @__PURE__ */ import_react7.default.createElement(MonacoContainer_default2, {
      width,
      height,
      isEditorReady,
      loading,
      _ref: containerRef,
      className,
      wrapperProps
    });
  }
  DiffEditor.propTypes = {
    original: import_prop_types2.default.string,
    modified: import_prop_types2.default.string,
    language: import_prop_types2.default.string,
    originalLanguage: import_prop_types2.default.string,
    modifiedLanguage: import_prop_types2.default.string,
    originalModelPath: import_prop_types2.default.string,
    modifiedModelPath: import_prop_types2.default.string,
    keepCurrentOriginalModel: import_prop_types2.default.bool,
    keepCurrentModifiedModel: import_prop_types2.default.bool,
    theme: import_prop_types2.default.string,
    loading: import_prop_types2.default.oneOfType([import_prop_types2.default.element, import_prop_types2.default.string]),
    options: import_prop_types2.default.object,
    width: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
    height: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
    className: import_prop_types2.default.string,
    wrapperProps: import_prop_types2.default.object,
    beforeMount: import_prop_types2.default.func,
    onMount: import_prop_types2.default.func
  };
  DiffEditor.defaultProps = {
    theme: "light",
    loading: "Loading...",
    options: {},
    keepCurrentOriginalModel: false,
    keepCurrentModifiedModel: false,
    width: "100%",
    height: "100%",
    wrapperProps: {},
    beforeMount: noop,
    onMount: noop
  };

  // node_modules/@monaco-editor/react/lib/es/hooks/useMonaco/index.js
  var import_react9 = __toModule(require_react());

  // node_modules/@monaco-editor/react/lib/es/Editor/index.js
  var import_react12 = __toModule(require_react());

  // node_modules/@monaco-editor/react/lib/es/Editor/Editor.js
  var import_react11 = __toModule(require_react());
  var import_prop_types3 = __toModule(require_prop_types());

  // node_modules/@monaco-editor/react/lib/es/hooks/usePrevious/index.js
  var import_react10 = __toModule(require_react());
  function usePrevious(value) {
    const ref = (0, import_react10.useRef)();
    (0, import_react10.useEffect)(() => {
      ref.current = value;
    }, [value]);
    return ref.current;
  }
  var usePrevious_default = usePrevious;

  // node_modules/@monaco-editor/react/lib/es/Editor/Editor.js
  var viewStates = new Map();
  function Editor({
    defaultValue,
    defaultLanguage,
    defaultPath,
    value,
    language,
    path,
    theme,
    line,
    loading,
    options,
    overrideServices,
    saveViewState,
    keepCurrentModel,
    width,
    height,
    className,
    wrapperProps,
    beforeMount,
    onMount,
    onChange,
    onValidate
  }) {
    const [isEditorReady, setIsEditorReady] = (0, import_react11.useState)(false);
    const [isMonacoMounting, setIsMonacoMounting] = (0, import_react11.useState)(true);
    const monacoRef = (0, import_react11.useRef)(null);
    const editorRef = (0, import_react11.useRef)(null);
    const containerRef = (0, import_react11.useRef)(null);
    const onMountRef = (0, import_react11.useRef)(onMount);
    const beforeMountRef = (0, import_react11.useRef)(beforeMount);
    const subscriptionRef = (0, import_react11.useRef)(null);
    const valueRef = (0, import_react11.useRef)(value);
    const previousPath = usePrevious_default(path);
    useMount_default(() => {
      const cancelable = loader_default.init();
      cancelable.then((monaco) => (monacoRef.current = monaco) && setIsMonacoMounting(false)).catch((error) => (error === null || error === void 0 ? void 0 : error.type) !== "cancelation" && console.error("Monaco initialization: error:", error));
      return () => editorRef.current ? disposeEditor() : cancelable.cancel();
    });
    useUpdate_default(() => {
      const model = getOrCreateModel(monacoRef.current, defaultValue || value, defaultLanguage || language, path);
      if (model !== editorRef.current.getModel()) {
        saveViewState && viewStates.set(previousPath, editorRef.current.saveViewState());
        editorRef.current.setModel(model);
        saveViewState && editorRef.current.restoreViewState(viewStates.get(path));
      }
    }, [path], isEditorReady);
    useUpdate_default(() => {
      editorRef.current.updateOptions(options);
    }, [options], isEditorReady);
    useUpdate_default(() => {
      if (editorRef.current.getOption(monacoRef.current.editor.EditorOption.readOnly)) {
        editorRef.current.setValue(value);
      } else {
        if (value !== editorRef.current.getValue()) {
          editorRef.current.executeEdits("", [{
            range: editorRef.current.getModel().getFullModelRange(),
            text: value,
            forceMoveMarkers: true
          }]);
          editorRef.current.pushUndoStop();
        }
      }
    }, [value], isEditorReady);
    useUpdate_default(() => {
      monacoRef.current.editor.setModelLanguage(editorRef.current.getModel(), language);
    }, [language], isEditorReady);
    useUpdate_default(() => {
      if (!isUndefined(line)) {
        editorRef.current.revealLine(line);
      }
    }, [line], isEditorReady);
    useUpdate_default(() => {
      monacoRef.current.editor.setTheme(theme);
    }, [theme], isEditorReady);
    const createEditor = (0, import_react11.useCallback)(() => {
      beforeMountRef.current(monacoRef.current);
      const autoCreatedModelPath = path || defaultPath;
      const defaultModel = getOrCreateModel(monacoRef.current, value || defaultValue, defaultLanguage || language, autoCreatedModelPath);
      editorRef.current = monacoRef.current.editor.create(containerRef.current, {
        model: defaultModel,
        automaticLayout: true,
        ...options
      }, overrideServices);
      saveViewState && editorRef.current.restoreViewState(viewStates.get(autoCreatedModelPath));
      monacoRef.current.editor.setTheme(theme);
      setIsEditorReady(true);
    }, [defaultValue, defaultLanguage, defaultPath, value, language, path, options, overrideServices, saveViewState, theme]);
    (0, import_react11.useEffect)(() => {
      if (isEditorReady) {
        onMountRef.current(editorRef.current, monacoRef.current);
      }
    }, [isEditorReady]);
    (0, import_react11.useEffect)(() => {
      !isMonacoMounting && !isEditorReady && createEditor();
    }, [isMonacoMounting, isEditorReady, createEditor]);
    valueRef.current = value;
    (0, import_react11.useEffect)(() => {
      if (isEditorReady && onChange) {
        var _subscriptionRef$curr, _editorRef$current;
        (_subscriptionRef$curr = subscriptionRef.current) === null || _subscriptionRef$curr === void 0 ? void 0 : _subscriptionRef$curr.dispose();
        subscriptionRef.current = (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.onDidChangeModelContent((event) => {
          const editorValue = editorRef.current.getValue();
          if (valueRef.current !== editorValue) {
            onChange(editorValue, event);
          }
        });
      }
    }, [isEditorReady, onChange]);
    (0, import_react11.useEffect)(() => {
      if (isEditorReady) {
        const changeMarkersListener = monacoRef.current.editor.onDidChangeMarkers((uris) => {
          var _editorRef$current$ge;
          const editorUri = (_editorRef$current$ge = editorRef.current.getModel()) === null || _editorRef$current$ge === void 0 ? void 0 : _editorRef$current$ge.uri;
          if (editorUri) {
            const currentEditorHasMarkerChanges = uris.find((uri) => uri.path === editorUri.path);
            if (currentEditorHasMarkerChanges) {
              const markers = monacoRef.current.editor.getModelMarkers({
                resource: editorUri
              });
              onValidate === null || onValidate === void 0 ? void 0 : onValidate(markers);
            }
          }
        });
        return () => {
          changeMarkersListener === null || changeMarkersListener === void 0 ? void 0 : changeMarkersListener.dispose();
        };
      }
    }, [isEditorReady, onValidate]);
    function disposeEditor() {
      var _subscriptionRef$curr2;
      (_subscriptionRef$curr2 = subscriptionRef.current) === null || _subscriptionRef$curr2 === void 0 ? void 0 : _subscriptionRef$curr2.dispose();
      if (keepCurrentModel) {
        saveViewState && viewStates.set(path, editorRef.current.saveViewState());
      } else {
        var _editorRef$current$ge2;
        (_editorRef$current$ge2 = editorRef.current.getModel()) === null || _editorRef$current$ge2 === void 0 ? void 0 : _editorRef$current$ge2.dispose();
      }
      editorRef.current.dispose();
    }
    return /* @__PURE__ */ import_react11.default.createElement(MonacoContainer_default2, {
      width,
      height,
      isEditorReady,
      loading,
      _ref: containerRef,
      className,
      wrapperProps
    });
  }
  Editor.propTypes = {
    defaultValue: import_prop_types3.default.string,
    defaultPath: import_prop_types3.default.string,
    defaultLanguage: import_prop_types3.default.string,
    value: import_prop_types3.default.string,
    language: import_prop_types3.default.string,
    path: import_prop_types3.default.string,
    theme: import_prop_types3.default.string,
    line: import_prop_types3.default.number,
    loading: import_prop_types3.default.oneOfType([import_prop_types3.default.element, import_prop_types3.default.string]),
    options: import_prop_types3.default.object,
    overrideServices: import_prop_types3.default.object,
    saveViewState: import_prop_types3.default.bool,
    keepCurrentModel: import_prop_types3.default.bool,
    width: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
    height: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
    className: import_prop_types3.default.string,
    wrapperProps: import_prop_types3.default.object,
    beforeMount: import_prop_types3.default.func,
    onMount: import_prop_types3.default.func,
    onChange: import_prop_types3.default.func,
    onValidate: import_prop_types3.default.func
  };
  Editor.defaultProps = {
    theme: "light",
    loading: "Loading...",
    options: {},
    overrideServices: {},
    saveViewState: true,
    keepCurrentModel: false,
    width: "100%",
    height: "100%",
    wrapperProps: {},
    beforeMount: noop,
    onMount: noop,
    onValidate: noop
  };

  // src/www/simple/components/CodeEditor.jsx
  var import_react_icons_kit = __toModule(require_react_icons_kit());
  var import_pencil = __toModule(require_pencil());
  var import_floppyDisk = __toModule(require_floppyDisk());
  var import_eye = __toModule(require_eye());
  var import_copy = __toModule(require_copy());
  var import_magicWand = __toModule(require_magicWand());

  // src/basm/basm.peg.js
  function peg$subclass(child, parent) {
    function C() {
      this.constructor = child;
    }
    C.prototype = parent.prototype;
    child.prototype = new C();
  }
  function peg$SyntaxError(message, expected, found, location3) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location3;
    this.name = "SyntaxError";
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }
  peg$subclass(peg$SyntaxError, Error);
  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function(expectation) {
        return '"' + literalEscape(expectation.text) + '"';
      },
      class: function(expectation) {
        var escapedParts = expectation.parts.map(function(part) {
          return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
        });
        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },
      any: function() {
        return "any character";
      },
      end: function() {
        return "end of input";
      },
      other: function(expectation) {
        return expectation.description;
      },
      not: function(expectation) {
        return "not " + describeExpectation(expectation.expected);
      }
    };
    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }
    function literalEscape(s) {
      return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
        return "\\x0" + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
        return "\\x" + hex(ch);
      });
    }
    function classEscape(s) {
      return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
        return "\\x0" + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
        return "\\x" + hex(ch);
      });
    }
    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }
    function describeExpected(expected2) {
      var descriptions = expected2.map(describeExpectation);
      var i, j;
      descriptions.sort();
      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }
      switch (descriptions.length) {
        case 1:
          return descriptions[0];
        case 2:
          return descriptions[0] + " or " + descriptions[1];
        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }
    function describeFound(found2) {
      return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
    }
    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };
  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};
    var peg$FAILED = {};
    var peg$startRuleFunctions = { Program: peg$parseProgram };
    var peg$startRuleFunction = peg$parseProgram;
    var peg$c0 = ".segment";
    var peg$c1 = ".byte";
    var peg$c2 = ".word";
    var peg$c3 = ".string";
    var peg$c4 = ".append";
    var peg$c5 = ".const";
    var peg$c6 = ".import";
    var peg$c7 = ".namespace";
    var peg$c8 = ".macro";
    var peg$c9 = ".define";
    var peg$c10 = "{";
    var peg$c11 = "}";
    var peg$c12 = "add";
    var peg$c13 = "and";
    var peg$c14 = "brk";
    var peg$c15 = "br";
    var peg$c16 = "brs";
    var peg$c17 = "call";
    var peg$c18 = "calls";
    var peg$c19 = "clr";
    var peg$c20 = "cmp";
    var peg$c21 = "dec";
    var peg$c22 = "div";
    var peg$c23 = "enter";
    var peg$c24 = "exc";
    var peg$c25 = "exit";
    var peg$c26 = "halt";
    var peg$c27 = "ld";
    var peg$c28 = "loop";
    var peg$c29 = "loops";
    var peg$c30 = "in";
    var peg$c31 = "inc";
    var peg$c32 = "mod";
    var peg$c33 = "mov";
    var peg$c34 = "mul";
    var peg$c35 = "neg";
    var peg$c36 = "nop";
    var peg$c37 = "not";
    var peg$c38 = "or";
    var peg$c39 = "out";
    var peg$c40 = "pop";
    var peg$c41 = "popall";
    var peg$c42 = "popf";
    var peg$c43 = "push";
    var peg$c44 = "pushall";
    var peg$c45 = "pushf";
    var peg$c46 = "pushmm";
    var peg$c47 = "popmm";
    var peg$c48 = "ret";
    var peg$c49 = "sdiv";
    var peg$c50 = "set";
    var peg$c51 = "shl";
    var peg$c52 = "shr";
    var peg$c53 = "smod";
    var peg$c54 = "smul";
    var peg$c55 = "st";
    var peg$c56 = "sub";
    var peg$c57 = "swap";
    var peg$c58 = "test";
    var peg$c59 = "trap";
    var peg$c60 = "wait";
    var peg$c61 = "xor";
    var peg$c62 = "fclr";
    var peg$c63 = "fldr";
    var peg$c64 = "fldm";
    var peg$c65 = "fldim";
    var peg$c66 = "fstr";
    var peg$c67 = "fstm";
    var peg$c68 = "fstim";
    var peg$c69 = "fadd";
    var peg$c70 = "fsub";
    var peg$c71 = "fcmp";
    var peg$c72 = "fmul";
    var peg$c73 = "fdiv";
    var peg$c74 = "fmod";
    var peg$c75 = "fpow";
    var peg$c76 = "fsqrt";
    var peg$c77 = "fabs";
    var peg$c78 = "fsin";
    var peg$c79 = "fcos";
    var peg$c80 = "ftan";
    var peg$c81 = "fasin";
    var peg$c82 = "facos";
    var peg$c83 = "fatan";
    var peg$c84 = "fneg";
    var peg$c85 = "fexc";
    var peg$c86 = "fint";
    var peg$c87 = "fisnan";
    var peg$c88 = "fisinf";
    var peg$c89 = "flog2";
    var peg$c90 = "flog10";
    var peg$c91 = "fld0";
    var peg$c92 = "fld1";
    var peg$c93 = "flde";
    var peg$c94 = "fldpi";
    var peg$c95 = "if";
    var peg$c96 = "else";
    var peg$c97 = "do";
    var peg$c98 = "while";
    var peg$c99 = "break";
    var peg$c100 = "continue";
    var peg$c101 = "addrbank";
    var peg$c102 = "addrbh";
    var peg$c103 = "addrbofs";
    var peg$c104 = "addrbl";
    var peg$c105 = "addrpage";
    var peg$c106 = "addrph";
    var peg$c107 = "addrpofs";
    var peg$c108 = "addrpl";
    var peg$c109 = "asc";
    var peg$c110 = "next";
    var peg$c111 = "a";
    var peg$c112 = "al";
    var peg$c113 = "b";
    var peg$c114 = "bl";
    var peg$c115 = "c";
    var peg$c116 = "cl";
    var peg$c117 = "d";
    var peg$c118 = "dl";
    var peg$c119 = "x";
    var peg$c120 = "xl";
    var peg$c121 = "y";
    var peg$c122 = "yl";
    var peg$c123 = "sp";
    var peg$c124 = "bp";
    var peg$c125 = "pc";
    var peg$c126 = "flags";
    var peg$c127 = "z";
    var peg$c128 = "flag:z";
    var peg$c129 = "flag:c";
    var peg$c130 = "v";
    var peg$c131 = "flag:v";
    var peg$c132 = "n";
    var peg$c133 = "flag:n";
    var peg$c134 = "flag:x";
    var peg$c135 = "ex";
    var peg$c136 = "flag:ex";
    var peg$c137 = "id";
    var peg$c138 = "flag:id";
    var peg$c139 = "is";
    var peg$c140 = "flag:is";
    var peg$c141 = "ss";
    var peg$c142 = "flag:ss";
    var peg$c143 = "!";
    var peg$c144 = ".lte";
    var peg$c145 = ".ngt";
    var peg$c146 = ".lt";
    var peg$c147 = ".ngte";
    var peg$c148 = ".gte";
    var peg$c149 = ".nlt";
    var peg$c150 = ".gt";
    var peg$c151 = ".nlte";
    var peg$c152 = ".abe";
    var peg$c153 = ".nblo";
    var peg$c154 = ".abv";
    var peg$c155 = ".nble";
    var peg$c156 = ".ble";
    var peg$c157 = ".nabv";
    var peg$c158 = ".blo";
    var peg$c159 = ".nabe";
    var peg$c160 = ".eq";
    var peg$c161 = ".neq";
    var peg$c162 = "+";
    var peg$c163 = "-";
    var peg$c164 = "*";
    var peg$c165 = "/";
    var peg$c166 = "%";
    var peg$c167 = "<<";
    var peg$c168 = ">>";
    var peg$c169 = "&";
    var peg$c170 = "|";
    var peg$c171 = "^";
    var peg$c172 = "<=";
    var peg$c173 = ":=";
    var peg$c174 = ":";
    var peg$c175 = "_";
    var peg$c176 = "0x";
    var peg$c177 = "$";
    var peg$c178 = "0b";
    var peg$c179 = "[";
    var peg$c180 = "]";
    var peg$c181 = "(";
    var peg$c182 = ")";
    var peg$c183 = "<";
    var peg$c184 = ">";
    var peg$c185 = '"';
    var peg$c186 = ",";
    var peg$c187 = "#";
    var peg$r0 = /^[A-Za-z]/;
    var peg$r1 = /^[_A-Za-z0-9\-.]/;
    var peg$r2 = /^[0-9A-Fa-f]/;
    var peg$r3 = /^[0-9A-Fa-f_]/;
    var peg$r4 = /^[0-1]/;
    var peg$r5 = /^[0-1_]/;
    var peg$r6 = /^[0-9]/;
    var peg$r7 = /^[0-9_]/;
    var peg$r8 = /^[ \t]/;
    var peg$r9 = /^[^\n]/;
    var peg$r10 = /^[\r\n]/;
    var peg$e0 = peg$otherExpectation("Program");
    var peg$f0 = function(parts) {
      return parts.filter((part) => part !== null);
    };
    var peg$f1 = function(l) {
      return l;
    };
    var peg$f2 = function() {
      return null;
    };
    var peg$f3 = function(lines) {
      return tBlock(lines.flat().filter((line) => !!line));
    };
    var peg$f4 = function(label, content, c) {
      return [label, content, c].filter((e) => e !== null);
    };
    var peg$f5 = function(e) {
      return e;
    };
    var peg$f6 = function() {
      return tInstruction("br", {
        flag: null,
        addr: addressingMode({ addr: tIdentifier("__end"), m: 0 })
      });
    };
    var peg$f7 = function() {
      return tInstruction("br", {
        flag: null,
        addr: addressingMode({ addr: tIdentifier("__begin"), m: 0 })
      });
    };
    var peg$f8 = function(f, t, e) {
      newScope();
      const THEN = uniqIdent("__then");
      const ELSE = uniqIdent("__else");
      const ENDIF = uniqIdent("__endif");
      const ast = tBlock([
        tInstruction("br", {
          [f.type === "flag" ? "flag" : "condition"]: f,
          addr: addressingMode({ addr: tIdentifier(THEN), m: 0 })
        }),
        tInstruction("br", {
          flag: null,
          addr: addressingMode({ addr: e ? tIdentifier(ELSE) : tIdentifier(ENDIF), m: 0 })
        }),
        tLabel(tIdentifier(THEN)),
        rewriteIdents(t),
        ...e ? [
          tInstruction("br", {
            flag: null,
            addr: addressingMode({ addr: tIdentifier(ENDIF), m: 0 })
          }),
          tLabel(tIdentifier(ELSE)),
          rewriteIdents(e)
        ] : [],
        tLabel(tIdentifier(ENDIF))
      ]);
      exitScope();
      return ast;
    };
    var peg$f9 = function(l, f) {
      newScope();
      const BEGIN = uniqIdent("__begin");
      const END = uniqIdent("__end");
      const ast = tBlock([
        tLabel(tIdentifier(BEGIN)),
        rewriteIdents(l),
        tInstruction("br", {
          [f.type === "flag" ? "flag" : "condition"]: f,
          addr: addressingMode({ addr: tIdentifier(BEGIN), m: 0 })
        }),
        tLabel(tIdentifier(END))
      ]);
      exitScope();
      return ast;
    };
    var peg$f10 = function(f, l) {
      newScope();
      const BEGIN = uniqIdent("__begin");
      const END = uniqIdent("__end");
      const DO = uniqIdent("__do");
      const ast = tBlock([
        tLabel(tIdentifier(BEGIN)),
        tInstruction("br", {
          [f.type === "flag" ? "flag" : "condition"]: f,
          addr: addressingMode({ addr: tIdentifier(DO), m: 0 })
        }),
        tInstruction("br", {
          flag: null,
          addr: addressingMode({ addr: tIdentifier(END), m: 0 })
        }),
        tLabel(tIdentifier(DO)),
        rewriteIdents(l),
        tInstruction("br", {
          flag: null,
          addr: addressingMode({ addr: tIdentifier(BEGIN), m: 0 })
        }),
        tLabel(tIdentifier(END))
      ]);
      exitScope();
      return ast;
    };
    var peg$f11 = function(h, t) {
      return [h, ...t.map(([, , a]) => a)].filter((n) => n !== null);
    };
    var peg$f12 = function(name, args) {
      return tMacroExpansion(name, args);
    };
    var peg$f13 = function(name, addr, append, block) {
      return tSegment(name, addr, !!append, block);
    };
    var peg$f14 = function(name, block) {
      return tNamespace(name, block);
    };
    var peg$f15 = function(name, expr) {
      return tConstant(name, expr);
    };
    var peg$f16 = function(path) {
      return tImport(path);
    };
    var peg$f17 = function(size2, data) {
      return tDataDirective(TOKENS2.BYTE_DIRECTIVE, data, size2);
    };
    var peg$f18 = function(data) {
      return tDataDirective(TOKENS2.BYTE_DIRECTIVE, data);
    };
    var peg$f19 = function(size2, data) {
      return tDataDirective(TOKENS2.WORD_DIRECTIVE, data, size2);
    };
    var peg$f20 = function(data) {
      return tDataDirective(TOKENS2.WORD_DIRECTIVE, data);
    };
    var peg$f21 = function(data) {
      return tDataDirective(TOKENS2.STRING_DIRECTIVE, data);
    };
    var peg$f22 = function(name, params, ast) {
      return tMacroDirective(name, params, ast);
    };
    var peg$f23 = function(size2) {
      return size2;
    };
    var peg$f24 = function(bytes2) {
      return bytes2.map(([, byte]) => byte);
    };
    var peg$f25 = function(ins, bytes2) {
      if (bytes2) {
        ins.bytes = bytes2;
      }
      return ins;
    };
    var peg$f26 = function(op) {
      return tInstruction(op);
    };
    var peg$f27 = function() {
      expectedRegister();
    };
    var peg$f28 = function() {
      expectedComma();
    };
    var peg$f29 = function() {
      expectedMemoryAddress();
    };
    var peg$f30 = function(op, dest, source) {
      return tInstruction(op, { dest, source });
    };
    var peg$f31 = function(dest, source) {
      return tInstruction(OPCODES3.LD, { dest, source });
    };
    var peg$f32 = function(dest, source) {
      return tInstruction(OPCODES3.ST, { dest, source });
    };
    var peg$f33 = function(op, addr, reg) {
      return tInstruction(op, { addr, reg });
    };
    var peg$f34 = function(op, flag, addr) {
      return tInstruction(op, { addr, flag });
    };
    var peg$f35 = function(op, condition, addr) {
      return tInstruction(op, { addr, condition });
    };
    var peg$f36 = function(op, dest, imm) {
      return tInstruction(op, { dest, imm });
    };
    var peg$f37 = function() {
      expectedDataRegister();
    };
    var peg$f38 = function(dest, source) {
      return tInstruction(OPCODES3.MOV, { dest, source });
    };
    var peg$f39 = function(op, reg) {
      return tInstruction(op, { reg });
    };
    var peg$f40 = function(op, imm) {
      return tInstruction(op, { imm });
    };
    var peg$f41 = function(op, reg, imm) {
      return tInstruction(op, { reg, imm });
    };
    var peg$f42 = function(op, imm, reg) {
      return tInstruction(op, { reg, imm });
    };
    var peg$f43 = function(op, flag) {
      return tInstruction(op, { flag });
    };
    var peg$f44 = function(op, addr) {
      return tInstruction(op, { bankReg: addr.bank, offsReg: addr.offs, immediate: addr.immediate });
    };
    var peg$f45 = function() {
      return OPCODES3.ADD;
    };
    var peg$f46 = function() {
      return OPCODES3.AND;
    };
    var peg$f47 = function() {
      return OPCODES3.BRK;
    };
    var peg$f48 = function() {
      return OPCODES3.BR;
    };
    var peg$f49 = function() {
      return OPCODES3.BRS;
    };
    var peg$f50 = function() {
      return OPCODES3.CALL;
    };
    var peg$f51 = function() {
      return OPCODES3.CALLS;
    };
    var peg$f52 = function() {
      return OPCODES3.CLR;
    };
    var peg$f53 = function() {
      return OPCODES3.CMP;
    };
    var peg$f54 = function() {
      return OPCODES3.DEC;
    };
    var peg$f55 = function() {
      return OPCODES3.DIV;
    };
    var peg$f56 = function() {
      return OPCODES3.ENTER;
    };
    var peg$f57 = function() {
      return OPCODES3.EXC;
    };
    var peg$f58 = function() {
      return OPCODES3.EXIT;
    };
    var peg$f59 = function() {
      return OPCODES3.HALT;
    };
    var peg$f60 = function() {
      return OPCODES3.LD;
    };
    var peg$f61 = function() {
      return OPCODES3.LOOP;
    };
    var peg$f62 = function() {
      return OPCODES3.LOOPS;
    };
    var peg$f63 = function() {
      return OPCODES3.IN;
    };
    var peg$f64 = function() {
      return OPCODES3.INC;
    };
    var peg$f65 = function() {
      return OPCODES3.MOD;
    };
    var peg$f66 = function() {
      return OPCODES3.MOV;
    };
    var peg$f67 = function() {
      return OPCODES3.MUL;
    };
    var peg$f68 = function() {
      return OPCODES3.NEG;
    };
    var peg$f69 = function() {
      return OPCODES3.NOP;
    };
    var peg$f70 = function() {
      return OPCODES3.NOT;
    };
    var peg$f71 = function() {
      return OPCODES3.OR;
    };
    var peg$f72 = function() {
      return OPCODES3.OUT;
    };
    var peg$f73 = function() {
      return OPCODES3.POP;
    };
    var peg$f74 = function() {
      return OPCODES3.POPALL;
    };
    var peg$f75 = function() {
      return OPCODES3.POPF;
    };
    var peg$f76 = function() {
      return OPCODES3.PUSH;
    };
    var peg$f77 = function() {
      return OPCODES3.PUSHALL;
    };
    var peg$f78 = function() {
      return OPCODES3.PUSHF;
    };
    var peg$f79 = function() {
      return OPCODES3.PUSHMM;
    };
    var peg$f80 = function() {
      return OPCODES3.POPMM;
    };
    var peg$f81 = function() {
      return OPCODES3.RET;
    };
    var peg$f82 = function() {
      return OPCODES3.SDIV;
    };
    var peg$f83 = function() {
      return OPCODES3.SET;
    };
    var peg$f84 = function() {
      return OPCODES3.SHL;
    };
    var peg$f85 = function() {
      return OPCODES3.SHR;
    };
    var peg$f86 = function() {
      return OPCODES3.SMOD;
    };
    var peg$f87 = function() {
      return OPCODES3.SMUL;
    };
    var peg$f88 = function() {
      return OPCODES3.ST;
    };
    var peg$f89 = function() {
      return OPCODES3.SUB;
    };
    var peg$f90 = function() {
      return OPCODES3.SWAP;
    };
    var peg$f91 = function() {
      return OPCODES3.TEST;
    };
    var peg$f92 = function() {
      return OPCODES3.TRAP;
    };
    var peg$f93 = function() {
      return OPCODES3.WAIT;
    };
    var peg$f94 = function() {
      return OPCODES3.XOR;
    };
    var peg$f95 = function() {
      return OPCODES3.FCLR;
    };
    var peg$f96 = function() {
      return OPCODES3.FLDR;
    };
    var peg$f97 = function() {
      return OPCODES3.FLDM;
    };
    var peg$f98 = function() {
      return OPCODES3.FLDIM;
    };
    var peg$f99 = function() {
      return OPCODES3.FSTR;
    };
    var peg$f100 = function() {
      return OPCODES3.FSTM;
    };
    var peg$f101 = function() {
      return OPCODES3.FSTIM;
    };
    var peg$f102 = function() {
      return OPCODES3.FADD;
    };
    var peg$f103 = function() {
      return OPCODES3.FSUB;
    };
    var peg$f104 = function() {
      return OPCODES3.FCMP;
    };
    var peg$f105 = function() {
      return OPCODES3.FMUL;
    };
    var peg$f106 = function() {
      return OPCODES3.FDIV;
    };
    var peg$f107 = function() {
      return OPCODES3.FMOD;
    };
    var peg$f108 = function() {
      return OPCODES3.FPOW;
    };
    var peg$f109 = function() {
      return OPCODES3.FSQRT;
    };
    var peg$f110 = function() {
      return OPCODES3.FABS;
    };
    var peg$f111 = function() {
      return OPCODES3.FSIN;
    };
    var peg$f112 = function() {
      return OPCODES3.FCOS;
    };
    var peg$f113 = function() {
      return OPCODES3.FTAN;
    };
    var peg$f114 = function() {
      return OPCODES3.FASIN;
    };
    var peg$f115 = function() {
      return OPCODES3.FACOS;
    };
    var peg$f116 = function() {
      return OPCODES3.FATAN;
    };
    var peg$f117 = function() {
      return OPCODES3.FNEG;
    };
    var peg$f118 = function() {
      return OPCODES3.FEXC;
    };
    var peg$f119 = function() {
      return OPCODES3.FINT;
    };
    var peg$f120 = function() {
      return OPCODES3.FISNAN;
    };
    var peg$f121 = function() {
      return OPCODES3.FISINF;
    };
    var peg$f122 = function() {
      return OPCODES3.FLOG2;
    };
    var peg$f123 = function() {
      return OPCODES3.FLOG10;
    };
    var peg$f124 = function() {
      return OPCODES3.FLD0;
    };
    var peg$f125 = function() {
      return OPCODES3.FLD1;
    };
    var peg$f126 = function() {
      return OPCODES3.FLDE;
    };
    var peg$f127 = function() {
      return OPCODES3.FLDPI;
    };
    var peg$f128 = function() {
      return "IF";
    };
    var peg$f129 = function() {
      return "ELSE";
    };
    var peg$f130 = function() {
      return "DO";
    };
    var peg$f131 = function() {
      return "WHILE";
    };
    var peg$f132 = function() {
      return "BREAK";
    };
    var peg$f133 = function() {
      return "CONTINUE";
    };
    var peg$f134 = function() {
      return "ADDRBANK";
    };
    var peg$f135 = function() {
      return "ADDRBOFS";
    };
    var peg$f136 = function() {
      return "ADDRPAGE";
    };
    var peg$f137 = function() {
      return "ADDRPOFS";
    };
    var peg$f138 = function() {
      return "ASC";
    };
    var peg$f139 = function() {
      return "NEXT";
    };
    var peg$f140 = function() {
      return tRegister(REGISTERS2.A);
    };
    var peg$f141 = function() {
      return tRegister(REGISTERS2.AL);
    };
    var peg$f142 = function() {
      return tRegister(REGISTERS2.B);
    };
    var peg$f143 = function() {
      return tRegister(REGISTERS2.BL);
    };
    var peg$f144 = function() {
      return tRegister(REGISTERS2.C);
    };
    var peg$f145 = function() {
      return tRegister(REGISTERS2.CL);
    };
    var peg$f146 = function() {
      return tRegister(REGISTERS2.D);
    };
    var peg$f147 = function() {
      return tRegister(REGISTERS2.DL);
    };
    var peg$f148 = function() {
      return tRegister(REGISTERS2.X);
    };
    var peg$f149 = function() {
      return tRegister(REGISTERS2.XL);
    };
    var peg$f150 = function() {
      return tRegister(REGISTERS2.Y);
    };
    var peg$f151 = function() {
      return tRegister(REGISTERS2.YL);
    };
    var peg$f152 = function() {
      return tRegister(REGISTERS2.SP);
    };
    var peg$f153 = function() {
      return tRegister(REGISTERS2.BP);
    };
    var peg$f154 = function() {
      return tFlag(FLAGS2.ZERO);
    };
    var peg$f155 = function() {
      return tFlag(FLAGS2.CARRY);
    };
    var peg$f156 = function() {
      return tFlag(FLAGS2.OVERFLOW);
    };
    var peg$f157 = function() {
      return tFlag(FLAGS2.NEGATIVE);
    };
    var peg$f158 = function() {
      return tFlag(FLAGS2.EXCEPTION);
    };
    var peg$f159 = function() {
      return tFlag(FLAGS2.INTERRUPT_DISABLE);
    };
    var peg$f160 = function() {
      return tFlag(FLAGS2.INTERRUPT_SERVICE);
    };
    var peg$f161 = function() {
      return tFlag(FLAGS2.SINGLE_STEP);
    };
    var peg$f162 = function(flag) {
      flag.neg = true;
      return flag;
    };
    var peg$f163 = function() {
      return tConditional("s<=");
    };
    var peg$f164 = function() {
      return tConditional("s<");
    };
    var peg$f165 = function() {
      return tConditional("s>=");
    };
    var peg$f166 = function() {
      return tConditional("s>");
    };
    var peg$f167 = function() {
      return tConditional("u>=");
    };
    var peg$f168 = function() {
      return tConditional("u>");
    };
    var peg$f169 = function() {
      return tConditional("u<=");
    };
    var peg$f170 = function() {
      return tConditional("u<");
    };
    var peg$f171 = function() {
      return tConditional("==");
    };
    var peg$f172 = function() {
      return tConditional("!=");
    };
    var peg$f173 = function(imm) {
      return addressingMode({ m: MODES2.IMMEDIATE, addr: imm });
    };
    var peg$f174 = function(offset2) {
      return offset2;
    };
    var peg$f175 = function(addr, x, y) {
      return addressingMode({ addr, x: !!x, y: !!y, m: MODES2.ABSOLUTE });
    };
    var peg$f176 = function(addr, x, y) {
      return addressingMode({ addr, x: !!x, y: !!y, i: true, m: MODES2.ABSOLUTE });
    };
    var peg$f177 = function(reg, imm, x, y) {
      return addressingMode({
        m: reg.idx === REGISTERS2.D ? MODES2.D : MODES2.BP,
        addr: imm || 0,
        x: !!x,
        y: !!y
      });
    };
    var peg$f178 = function(reg, imm, x, y) {
      return addressingMode({
        m: reg.idx === REGISTERS2.D ? MODES2.D : MODES2.BP,
        addr: imm || 0,
        x: !!x,
        y: !!y,
        i: true
      });
    };
    var peg$f179 = function(bank, offs) {
      return { indirect: false, bank, offs };
    };
    var peg$f180 = function(bank, offs) {
      return { indirect: true, bank, offs };
    };
    var peg$f181 = function(head, tail) {
      return tBinaryExpression(head, tail);
    };
    var peg$f182 = function(op, v) {
      return tUnaryExpression(op, v);
    };
    var peg$f183 = function(head, tail) {
      return [head, ...tail.map(([, , , expr]) => expr)];
    };
    var peg$f184 = function(fn, expr) {
      return tFunction(fn, expr);
    };
    var peg$f185 = function(fn, expr) {
      return expectedStringLiteral();
    };
    var peg$f186 = function(expr) {
      return expr;
    };
    var peg$f187 = function(name) {
      return tLabel(name);
    };
    var peg$f188 = function() {
      error(`Label can not be a reserved word: ${text()}`);
    };
    var peg$f189 = function() {
      return tIdentifier(text());
    };
    var peg$f190 = function(head, tail) {
      return text();
    };
    var peg$f191 = function(head, tail) {
      return tLiteral(toNumber(text()));
    };
    var peg$f192 = function(negative, head, tail) {
      return tLiteral(toNumber(text()));
    };
    var peg$f193 = function(text2) {
      return tLiteral(text2.map(([, ch]) => ch).join(""));
    };
    var peg$f194 = function() {
      expectedQuote();
    };
    var peg$f195 = function() {
      return "";
    };
    var peg$f196 = function() {
      return "[";
    };
    var peg$f197 = function() {
      return "]";
    };
    var peg$f198 = function() {
      return "(";
    };
    var peg$f199 = function() {
      return ")";
    };
    var peg$f200 = function() {
      return "<";
    };
    var peg$f201 = function() {
      return ">";
    };
    var peg$f202 = function() {
      return '"';
    };
    var peg$f203 = function() {
      return "+";
    };
    var peg$f204 = function() {
      return ",";
    };
    var peg$f205 = function() {
      return " ";
    };
    var peg$f206 = function(data) {
      return tComment(data.join("").trim());
    };
    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$expected = [];
    var peg$silentFails = 0;
    var peg$result;
    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
      }
      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }
    function offset() {
      return peg$savedPos;
    }
    function range() {
      return [peg$savedPos, peg$currPos];
    }
    function location3() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location4) {
      location4 = location4 !== void 0 ? location4 : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location4);
    }
    function error(message, location4) {
      location4 = location4 !== void 0 ? location4 : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildSimpleError(message, location4);
    }
    function peg$literalExpectation(text2, ignoreCase) {
      return { type: "literal", text: text2, ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts, inverted, ignoreCase };
    }
    function peg$anyExpectation() {
      return { type: "any" };
    }
    function peg$endExpectation() {
      return { type: "end" };
    }
    function peg$otherExpectation(description) {
      return { type: "other", description };
    }
    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos];
      var p;
      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }
        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };
        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }
          p++;
        }
        peg$posDetailsCache[pos] = details;
        return details;
      }
    }
    var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
    function peg$computeLocation(startPos, endPos) {
      var loc = {};
      if (peg$VALIDFILENAME)
        loc.filename = options.filename;
      var startPosDetails = peg$computePosDetails(startPos);
      loc.start = {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      };
      var endPosDetails = peg$computePosDetails(endPos);
      loc.end = {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      };
      return loc;
    }
    function peg$begin() {
      peg$expected.push({ pos: peg$currPos, variants: [] });
    }
    function peg$expect(expected2) {
      var top = peg$expected[peg$expected.length - 1];
      if (peg$currPos < top.pos) {
        return;
      }
      if (peg$currPos > top.pos) {
        top.pos = peg$currPos;
        top.variants = [];
      }
      top.variants.push(expected2);
    }
    function peg$end(invert) {
      var expected2 = peg$expected.pop();
      var top = peg$expected[peg$expected.length - 1];
      var variants = expected2.variants;
      if (top.pos !== expected2.pos) {
        return;
      }
      if (invert) {
        variants = variants.map(function(e) {
          return e.type === "not" ? e.expected : { type: "not", expected: e };
        });
      }
      Array.prototype.push.apply(top.variants, variants);
    }
    function peg$buildSimpleError(message, location4) {
      return new peg$SyntaxError(message, null, null, location4);
    }
    function peg$buildStructuredError(expected2, found, location4) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location4);
    }
    function peg$buildError() {
      var expected2 = peg$expected[0];
      var failPos = expected2.pos;
      return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));
    }
    function peg$parseProgram() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      rule$expects(peg$e0);
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseTopLevel();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTopLevel();
      }
      peg$savedPos = s0;
      s1 = peg$f0(s1);
      s0 = s1;
      peg$silentFails--;
      return s0;
    }
    function peg$parseTopLevel() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsedSegment();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f1(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parsedImport();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f1(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = peg$parsedNamespace();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f1(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            s2 = peg$parsedMacro();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f1(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              s2 = peg$parseMacroExpansion();
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f1(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                s2 = peg$parseCOMMENT();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f1(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse_();
                  s2 = peg$parseEOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    peg$savedPos = s0;
                    s0 = peg$f2();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseBlock() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseLCURLY();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseLine();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseLine();
        }
        s4 = peg$parseRCURLY();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f3(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseLine() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseEOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f2();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseBlock();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = peg$parseLabel();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parse_();
          s4 = peg$parsehlStatement();
          if (s4 === peg$FAILED) {
            s4 = peg$parseInstruction();
            if (s4 === peg$FAILED) {
              s4 = peg$parseDirective();
              if (s4 === peg$FAILED) {
                s4 = peg$parseBlock();
              }
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parse_();
          s6 = peg$parseCOMMENT();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          s8 = peg$parseEOL();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f4(s2, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            s2 = peg$parseMacroExpansion();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f1(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
      return s0;
    }
    function peg$parsehlStatement() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parsehlIF();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehlDO();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehlBreak();
          if (s0 === peg$FAILED) {
            s0 = peg$parsehlContinue();
          }
        }
      }
      return s0;
    }
    function peg$parsehlElse() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseELSE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseBlock();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f5(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsehlBreak() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseBREAK();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f6();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsehlContinue() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseCONTINUE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f7();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsehlIF() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseIF();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseAllFlags();
        if (s4 === peg$FAILED) {
          s4 = peg$parseAllConditionals();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseBlock();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parsehlElse();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f8(s4, s6, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsehlDO() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseDO();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseBlock();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseWHILE();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseAllFlags();
            if (s8 === peg$FAILED) {
              s8 = peg$parseAllConditionals();
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f9(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parseWHILE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseAllFlags();
          if (s4 === peg$FAILED) {
            s4 = peg$parseAllConditionals();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parseDO();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              s8 = peg$parseBlock();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f10(s4, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseAST() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseRegister();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAllFlags();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAllConditionals();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStringOrConstantExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseMemoryAddressingMode();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBranchAddressingMode();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseLine();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseProgram();
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseASTList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseAST();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseCOMMA();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseAST();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAST();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f11(s1, s3);
      return s0;
    }
    function peg$parseIdentifierList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseCOMMA();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseIdentifier();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f11(s1, s3);
      return s0;
    }
    function peg$parseMacroExpansion() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseLPAREN();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseASTList();
          s6 = peg$parse_();
          s7 = peg$parseRPAREN();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f12(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseDirective() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parsedSegment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedByte();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedWord();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedString();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedConstant();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedImport();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsedNamespace();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsedMacro();
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parsedSegment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSEGMENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseOrExpression();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseAPPEND();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parse_();
            s9 = peg$parseBlock();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f13(s3, s5, s7, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsedNamespace() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseNAMESPACE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseBlock();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f14(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsedConstant() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseCONST();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseOrExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsedImport() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseIMPORT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseStringLiteral();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsedByte() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseBYTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseARRAY();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCommaSepExpressions();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f17(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBYTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseCommaSepExpressions();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f18(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parsedWord() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseWORD();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseARRAY();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCommaSepExpressions();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f19(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWORD();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseCommaSepExpressions();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f20(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parsedString() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSTRING();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseCommaSepStringOrConstantExpressions();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsedMacro() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseMACRO();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseLPAREN();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseIdentifierList();
            s8 = peg$parse_();
            s9 = peg$parseRPAREN();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseAST();
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f22(s3, s7, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSEGMENT() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c0) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseBYTE() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c1) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseWORD() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c2) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSTRING() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c3) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseAPPEND() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c4) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseCONST() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c5) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseIMPORT() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c6) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseNAMESPACE() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c7) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseARRAY() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLBRACKET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseOrExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseRBRACKET();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f23(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseMACRO() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c8) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c9) {
          s0 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseDirectiveKeywords() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseSEGMENT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBYTE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseWORD();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSTRING();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAPPEND();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCONST();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIMPORT();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseNAMESPACE();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseARRAY();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseMACRO();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseExpectedAssembly() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseInteger();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseInteger();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c11;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseInstruction() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseiNOP();
      if (s1 === peg$FAILED) {
        s1 = peg$parseiADD();
        if (s1 === peg$FAILED) {
          s1 = peg$parseiAND();
          if (s1 === peg$FAILED) {
            s1 = peg$parseiCMP();
            if (s1 === peg$FAILED) {
              s1 = peg$parseiSUB();
              if (s1 === peg$FAILED) {
                s1 = peg$parseiOR();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseiTEST();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseiXOR();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseiTRAP();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseiNOT();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseiNEG();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseiEXC();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseiSHL();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseiSHR();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseiSWAP();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseiMOV();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseiLOAD();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseiSTORE();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parseiINC();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parseiIN();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parseiOUT();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parseiENTER();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parseiEXIT();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = peg$parseiBRK();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = peg$parseiLOOP();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = peg$parseiBR();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = peg$parseiCALL();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = peg$parseiPUSHALL();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parseiPOPALL();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parseiPUSHF();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = peg$parseiPOPMM();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = peg$parseiPUSHMM();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = peg$parseiPOPF();
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = peg$parseiPUSH();
                                                                        if (s1 === peg$FAILED) {
                                                                          s1 = peg$parseiPOP();
                                                                          if (s1 === peg$FAILED) {
                                                                            s1 = peg$parseiRET();
                                                                            if (s1 === peg$FAILED) {
                                                                              s1 = peg$parseiMUL();
                                                                              if (s1 === peg$FAILED) {
                                                                                s1 = peg$parseiMOD();
                                                                                if (s1 === peg$FAILED) {
                                                                                  s1 = peg$parseiDIV();
                                                                                  if (s1 === peg$FAILED) {
                                                                                    s1 = peg$parseiSMUL();
                                                                                    if (s1 === peg$FAILED) {
                                                                                      s1 = peg$parseiSMOD();
                                                                                      if (s1 === peg$FAILED) {
                                                                                        s1 = peg$parseiSDIV();
                                                                                        if (s1 === peg$FAILED) {
                                                                                          s1 = peg$parseiSET();
                                                                                          if (s1 === peg$FAILED) {
                                                                                            s1 = peg$parseiCLR();
                                                                                            if (s1 === peg$FAILED) {
                                                                                              s1 = peg$parseiDEC();
                                                                                              if (s1 === peg$FAILED) {
                                                                                                s1 = peg$parseiHALT();
                                                                                                if (s1 === peg$FAILED) {
                                                                                                  s1 = peg$parseiWAIT();
                                                                                                  if (s1 === peg$FAILED) {
                                                                                                    s1 = peg$parseiFCLR();
                                                                                                    if (s1 === peg$FAILED) {
                                                                                                      s1 = peg$parseiFADD();
                                                                                                      if (s1 === peg$FAILED) {
                                                                                                        s1 = peg$parseiFSUB();
                                                                                                        if (s1 === peg$FAILED) {
                                                                                                          s1 = peg$parseiFCMP();
                                                                                                          if (s1 === peg$FAILED) {
                                                                                                            s1 = peg$parseiFMUL();
                                                                                                            if (s1 === peg$FAILED) {
                                                                                                              s1 = peg$parseiFMOD();
                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                s1 = peg$parseiFDIV();
                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                  s1 = peg$parseiFPOW();
                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                    s1 = peg$parseiFSQRT();
                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                      s1 = peg$parseiFNEG();
                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                        s1 = peg$parseiFEXC();
                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                          s1 = peg$parseiFINT();
                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                            s1 = peg$parseiFABS();
                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                              s1 = peg$parseiFSIN();
                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                s1 = peg$parseiFCOS();
                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                  s1 = peg$parseiFTAN();
                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                    s1 = peg$parseiFASIN();
                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                      s1 = peg$parseiFACOS();
                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                        s1 = peg$parseiFATAN();
                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                          s1 = peg$parseiFISNAN();
                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                            s1 = peg$parseiFISINF();
                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                              s1 = peg$parseiFLOG2();
                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                s1 = peg$parseiFLOG10();
                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                  s1 = peg$parseiFLD0();
                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                    s1 = peg$parseiFLD1();
                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                      s1 = peg$parseiFLDE();
                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                        s1 = peg$parseiFLDPI();
                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                          s1 = peg$parseiFLDR();
                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                            s1 = peg$parseiFLDM();
                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                              s1 = peg$parseiFLDIM();
                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                s1 = peg$parseiFSTR();
                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                  s1 = peg$parseiFSTM();
                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                    s1 = peg$parseiFSTIM();
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseExpectedAssembly();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f25(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiNOP() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseNOP();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiBRK() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseBRK();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiHALT() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseHALT();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiPUSHALL() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePUSHALL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiPOPALL() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePOPALL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiPUSHF() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePUSHF();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiPOPF() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePOPF();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiPUSHMM() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePUSHMM();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiPOPMM() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePOPMM();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiRET() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseRET();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiLOAD() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLD();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$currPos;
        peg$begin();
        s4 = peg$parseRegister();
        peg$end(true);
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLD();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$currPos;
            peg$begin();
            s6 = peg$parseCOMMA();
            peg$end(true);
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f28();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLD();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$currPos;
                peg$begin();
                s8 = peg$parseMemoryAddressingMode();
                peg$end(true);
                if (s8 === peg$FAILED) {
                  s7 = void 0;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f29();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseLD();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegister();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseCOMMA();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$parseMemoryAddressingMode();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f30(s1, s3, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseRegister();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseOP_TAKES();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  s5 = peg$parseMemoryAddressingMode();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f31(s1, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiSTORE() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseST();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseMemoryAddressingMode();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMemoryAddressingMode();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseOP_TAKES();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseRegister();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f32(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseST();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseMemoryAddressingMode();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$currPos;
                peg$begin();
                s8 = peg$parseRegister();
                peg$end(true);
                if (s8 === peg$FAILED) {
                  s7 = void 0;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseST();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseMemoryAddressingMode();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseCOMMA();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseST();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                peg$begin();
                s4 = peg$parseMemoryAddressingMode();
                peg$end(true);
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f29();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiLOOP() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLOOPS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseBranchAddressingMode();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f33(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLOOP();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseBranchAddressingMode();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseRegister();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f33(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLOOPS();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseBranchAddressingMode();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$currPos;
                peg$begin();
                s8 = peg$parseRegister();
                peg$end(true);
                if (s8 === peg$FAILED) {
                  s7 = void 0;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseLOOP();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseBranchAddressingMode();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseCOMMA();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$currPos;
                  peg$begin();
                  s8 = peg$parseRegister();
                  peg$end(true);
                  if (s8 === peg$FAILED) {
                    s7 = void 0;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f27();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseLOOPS();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseBranchAddressingMode();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  s5 = peg$currPos;
                  peg$begin();
                  s6 = peg$parseCOMMA();
                  peg$end(true);
                  if (s6 === peg$FAILED) {
                    s5 = void 0;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f28();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseLOOP();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseBranchAddressingMode();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$currPos;
                    peg$begin();
                    s6 = peg$parseCOMMA();
                    peg$end(true);
                    if (s6 === peg$FAILED) {
                      s5 = void 0;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f28();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseLOOPS();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$currPos;
                    peg$begin();
                    s4 = peg$parseBranchAddressingMode();
                    peg$end(true);
                    if (s4 === peg$FAILED) {
                      s3 = void 0;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f29();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseLOOP();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      s3 = peg$currPos;
                      peg$begin();
                      s4 = peg$parseBranchAddressingMode();
                      peg$end(true);
                      if (s4 === peg$FAILED) {
                        s3 = void 0;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f29();
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiCALL() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseCALLS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseAllFlags();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        s5 = peg$parseCOMMA();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseBranchAddressingMode();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f34(s1, s3, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCALLS();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseAllConditionals();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse_();
          s7 = peg$parseBranchAddressingMode();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f35(s1, s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCALL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseAllFlags();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parse_();
            s7 = peg$parseBranchAddressingMode();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f34(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCALL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseAllConditionals();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parse_();
              s7 = peg$parseBranchAddressingMode();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f35(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCALLS();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseAllFlags();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseBranchAddressingMode();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f29();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCALLS();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseAllConditionals();
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  s4 = peg$parse_();
                  s5 = peg$currPos;
                  peg$begin();
                  s6 = peg$parseBranchAddressingMode();
                  peg$end(true);
                  if (s6 === peg$FAILED) {
                    s5 = void 0;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f29();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseCALL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$parseAllFlags();
                    if (s3 === peg$FAILED) {
                      s3 = null;
                    }
                    s4 = peg$parse_();
                    s5 = peg$currPos;
                    peg$begin();
                    s6 = peg$parseBranchAddressingMode();
                    peg$end(true);
                    if (s6 === peg$FAILED) {
                      s5 = void 0;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f29();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseCALL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      s3 = peg$parseAllConditionals();
                      if (s3 === peg$FAILED) {
                        s3 = null;
                      }
                      s4 = peg$parse_();
                      s5 = peg$currPos;
                      peg$begin();
                      s6 = peg$parseBranchAddressingMode();
                      peg$end(true);
                      if (s6 === peg$FAILED) {
                        s5 = void 0;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f29();
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiBR() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseBRS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseAllFlags();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        s5 = peg$parseCOMMA();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseBranchAddressingMode();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f34(s1, s3, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBRS();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseAllConditionals();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse_();
          s7 = peg$parseBranchAddressingMode();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f35(s1, s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseBR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseAllFlags();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parse_();
            s7 = peg$parseBranchAddressingMode();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f34(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseBR();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseAllConditionals();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parse_();
              s7 = peg$parseBranchAddressingMode();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f35(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseBRS();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseAllFlags();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseBranchAddressingMode();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f29();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseBRS();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseAllConditionals();
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  s4 = peg$parse_();
                  s5 = peg$currPos;
                  peg$begin();
                  s6 = peg$parseBranchAddressingMode();
                  peg$end(true);
                  if (s6 === peg$FAILED) {
                    s5 = void 0;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f29();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseBR();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$parseAllFlags();
                    if (s3 === peg$FAILED) {
                      s3 = null;
                    }
                    s4 = peg$parse_();
                    s5 = peg$currPos;
                    peg$begin();
                    s6 = peg$parseBranchAddressingMode();
                    peg$end(true);
                    if (s6 === peg$FAILED) {
                      s5 = void 0;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f29();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseBR();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      s3 = peg$parseAllConditionals();
                      if (s3 === peg$FAILED) {
                        s3 = null;
                      }
                      s4 = peg$parse_();
                      s5 = peg$currPos;
                      peg$begin();
                      s6 = peg$parseBranchAddressingMode();
                      peg$end(true);
                      if (s6 === peg$FAILED) {
                        s5 = void 0;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f29();
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiADD() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseADD();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseADD();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseGeneralRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseADD();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseNonGeneralRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseOrExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseADD();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegister();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseCOMMA();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f28();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseADD();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                peg$begin();
                s4 = peg$parseRegister();
                peg$end(true);
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiAND() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseAND();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAND();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseGeneralRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseAND();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseNonGeneralRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseOrExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseAND();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegister();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseCOMMA();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f28();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseAND();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                peg$begin();
                s4 = peg$parseRegister();
                peg$end(true);
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiCMP() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseCMP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCMP();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseGeneralRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCMP();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseNonGeneralRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseOrExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCMP();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegister();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseCOMMA();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f28();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCMP();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                peg$begin();
                s4 = peg$parseRegister();
                peg$end(true);
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiSUB() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSUB();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSUB();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseGeneralRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSUB();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseNonGeneralRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseOrExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSUB();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegister();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseCOMMA();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f28();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSUB();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                peg$begin();
                s4 = peg$parseRegister();
                peg$end(true);
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiOR() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseGeneralRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseOR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseNonGeneralRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseOrExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseOR();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegister();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseCOMMA();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f28();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseOR();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                peg$begin();
                s4 = peg$parseRegister();
                peg$end(true);
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiXOR() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseXOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseXOR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseGeneralRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseXOR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseNonGeneralRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseOrExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseXOR();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegister();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseCOMMA();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f28();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseXOR();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                peg$begin();
                s4 = peg$parseRegister();
                peg$end(true);
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiTEST() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseTEST();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTEST();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseGeneralRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTEST();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseNonGeneralRegister();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseOrExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTEST();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegister();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$currPos;
                peg$begin();
                s6 = peg$parseCOMMA();
                peg$end(true);
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f28();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseTEST();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                peg$begin();
                s4 = peg$parseRegister();
                peg$end(true);
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseiSHL() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSHL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSHL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseImmediate4();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiSHR() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSHR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSHR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseImmediate4();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiDIV() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseDIV();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDIV();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f27();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiMUL() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseMUL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMUL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f27();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiMOD() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseMOD();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMOD();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f27();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiSDIV() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSDIV();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSDIV();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f27();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiSMUL() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSMUL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSMUL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f27();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiSMOD() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSMOD();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSMOD();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegister();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseOrExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f27();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiSWAP() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSWAP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiMOV() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseMOV();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRegister();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseOP_TAKES();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseRegister();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f38(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiNOT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiNEG() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseNEG();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiEXC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseEXC();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiTRAP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseTRAP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTRAP();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseImmediate8();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f40(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseiIN() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseImmediate8();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f41(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiOUT() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseOUT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseImmediate8();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f42(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiENTER() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseENTER();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseImmediate8();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f40(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiEXIT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseEXIT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseImmediate8();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f40(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiWAIT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseWAIT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseImmediate8();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f40(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiSET() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseFlags();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiCLR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseCLR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseFlags();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiINC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseINC();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiDEC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseDEC();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiPUSH() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePUSH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiPOP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePOP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiFCLR() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFCLR();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFLDR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLDR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiFLDM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLDM();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseFPAbsolute();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiFLDIM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLDIM();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseFPIndirect();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiFSTR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFSTR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiFSTM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFSTM();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseFPAbsolute();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiFSTIM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFSTIM();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseFPIndirect();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseiFADD() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFADD();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFSUB() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFSUB();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFCMP() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFCMP();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFMUL() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFMUL();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFMOD() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFMOD();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFDIV() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFDIV();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFABS() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFABS();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFPOW() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFPOW();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFSQRT() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFSQRT();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFSIN() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFSIN();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFCOS() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFCOS();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFTAN() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFTAN();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFASIN() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFASIN();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFACOS() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFACOS();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFATAN() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFATAN();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFNEG() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFNEG();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFEXC() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFEXC();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFINT() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFINT();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFISNAN() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFISNAN();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFISINF() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFISINF();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFLOG2() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLOG2();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFLOG10() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLOG10();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFLD0() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLD0();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFLD1() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLD1();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFLDE() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLDE();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseiFLDPI() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseFLDPI();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseADD() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c12) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f45();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseAND() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c13) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f46();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseBRK() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c14) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f47();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseBR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c15) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f48();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseBRS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c16) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f49();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseCALL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c17) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f50();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseCALLS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c18) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f51();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseCLR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c19) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f52();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseCMP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f53();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseDEC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c21) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f54();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseDIV() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c22) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f55();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseENTER() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c23) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f56();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseEXC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c24) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f57();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseEXIT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c25) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f58();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseHALT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c26) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f59();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseLD() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c27) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f60();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseLOOP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c28) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f61();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseLOOPS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c29) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f62();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseIN() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c30) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f63();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseINC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c31) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f64();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseMOD() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c32) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f65();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseMOV() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c33) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f66();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseMUL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c34) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f67();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseNEG() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c35) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f68();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseNOP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f69();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseNOT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c37) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f70();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c38) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f71();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOUT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c39) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f72();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsePOP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c40) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f73();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsePOPALL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c41) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f74();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsePOPF() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c42) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f75();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsePUSH() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c43) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f76();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsePUSHALL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c44) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f77();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsePUSHF() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c45) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f78();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsePUSHMM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c46) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f79();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsePOPMM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c47) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f80();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseRET() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c48) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f81();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSDIV() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c49) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f82();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSET() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c50) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f83();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSHL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c51) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f84();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSHR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c52) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f85();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSMOD() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c53) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f86();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSMUL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c54) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f87();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseST() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c55) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f88();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSUB() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c56) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f89();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseSWAP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c57) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f90();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseTEST() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c58) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f91();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseTRAP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c59) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f92();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseWAIT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c60) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f93();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseXOR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c61) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f94();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFCLR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c62) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f95();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLDR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c63) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f96();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLDM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c64) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f97();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLDIM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c65) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f98();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFSTR() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c66) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f99();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFSTM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c67) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f100();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFSTIM() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c68) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f101();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFADD() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c69) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f102();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFSUB() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c70) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f103();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFCMP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c71) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f104();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFMUL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c72) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f105();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFDIV() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c73) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f106();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFMOD() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c74) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f107();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFPOW() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c75) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f108();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFSQRT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c76) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f109();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFABS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c77) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f110();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFSIN() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c78) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f111();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFCOS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c79) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f112();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFTAN() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c80) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f113();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFASIN() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c81) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f114();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFACOS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c82) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f115();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFATAN() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c83) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f116();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFNEG() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c84) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f117();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFEXC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c85) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f118();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFINT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c86) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f119();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFISNAN() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c87) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f120();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFISINF() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c88) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f121();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLOG2() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c89) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f122();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLOG10() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c90) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f123();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLD0() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c91) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f124();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLD1() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c92) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f125();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLDE() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c93) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f126();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFLDPI() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c94) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f127();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseIF() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c95) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f128();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseELSE() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c96) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f129();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseDO() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c97) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f130();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseWHILE() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c98) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f131();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseBREAK() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c99) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f132();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseCONTINUE() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c100) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f133();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseADDRBANK() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c101) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f134();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c102) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$begin();
          s3 = peg$parseIdentifierPart();
          peg$end(true);
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f134();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseADDRBOFS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c103) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f135();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c104) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$begin();
          s3 = peg$parseIdentifierPart();
          peg$end(true);
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f135();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseADDRPAGE() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c105) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f136();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c106) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$begin();
          s3 = peg$parseIdentifierPart();
          peg$end(true);
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f136();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseADDRPOFS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c107) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f137();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c108) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$begin();
          s3 = peg$parseIdentifierPart();
          peg$end(true);
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f137();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseASC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c109) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f138();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseNEXT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c110) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f139();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseKeyword() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseADD();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAND();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBRK();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBRS();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBR();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCALLS();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseCALL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCLR();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCMP();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseDEC();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDIV();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseENTER();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseEXC();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseEXIT();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseLD();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseLOOPS();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseLOOP();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseINC();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseIN();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseMOD();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseMOV();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseMUL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseNEG();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseNOP();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseNOT();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseOR();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseOUT();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsePOPALL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsePOPF();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsePOP();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsePUSHALL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsePUSHF();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsePOPMM();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsePUSHMM();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsePUSH();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseRET();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseSDIV();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseSET();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseSMOD();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseSMUL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseSHL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseSHR();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseST();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseSUB();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseSWAP();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseTEST();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseTRAP();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseXOR();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseIF();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseELSE();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseDO();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseWHILE();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseBREAK();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseCONTINUE();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseWAIT();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseHALT();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseFunction();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseDirectiveKeywords();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseFloatingPointKeyword();
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseFloatingPointKeyword() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseFCLR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFLDR();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFLDM();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFLDIM();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFSTR();
              if (s0 === peg$FAILED) {
                s0 = peg$parseFSTM();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseFSTIM();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseFADD();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseFSUB();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseFCMP();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseFMUL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseFMOD();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseFDIV();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseFPOW();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseFSQRT();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseFABS();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseFSIN();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseFCOS();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseFTAN();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseFASIN();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseFACOS();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseFATAN();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseFNEG();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseFEXC();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseFINT();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseFISNAN();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseFISINF();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseFLOG2();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseFLOG10();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseFLD0();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseFLD1();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseFLDE();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseFLDPI();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseFunction() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseADDRBANK();
      if (s0 === peg$FAILED) {
        s0 = peg$parseADDRBOFS();
        if (s0 === peg$FAILED) {
          s0 = peg$parseADDRPAGE();
          if (s0 === peg$FAILED) {
            s0 = peg$parseADDRPOFS();
            if (s0 === peg$FAILED) {
              s0 = peg$parseASC();
              if (s0 === peg$FAILED) {
                s0 = peg$parseNEXT();
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parserA() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c111) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f140();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserAL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c112) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f141();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserB() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c113) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f142();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserBL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c114) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f143();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c115) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f144();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserCL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c116) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f145();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserD() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c117) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f146();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserDL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c118) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f147();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserX() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c119) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f148();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserXL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c120) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f149();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserY() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c121) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f150();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserYL() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c122) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f151();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserSP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c123) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f152();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserBP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c124) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f153();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserPC() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c125) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parserFLAGS() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c126) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseRegister() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parserAL();
      if (s0 === peg$FAILED) {
        s0 = peg$parserA();
        if (s0 === peg$FAILED) {
          s0 = peg$parserBL();
          if (s0 === peg$FAILED) {
            s0 = peg$parserB();
            if (s0 === peg$FAILED) {
              s0 = peg$parserCL();
              if (s0 === peg$FAILED) {
                s0 = peg$parserC();
                if (s0 === peg$FAILED) {
                  s0 = peg$parserDL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parserD();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parserXL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parserX();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parserYL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parserY();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parserSP();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parserBP();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseMacroExpansion();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseRegister16() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parserA();
      if (s0 === peg$FAILED) {
        s0 = peg$parserB();
        if (s0 === peg$FAILED) {
          s0 = peg$parserC();
          if (s0 === peg$FAILED) {
            s0 = peg$parserD();
            if (s0 === peg$FAILED) {
              s0 = peg$parserX();
              if (s0 === peg$FAILED) {
                s0 = peg$parserY();
                if (s0 === peg$FAILED) {
                  s0 = peg$parserSP();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parserBP();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseMacroExpansion();
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseRegister8() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parserAL();
      if (s0 === peg$FAILED) {
        s0 = peg$parserBL();
        if (s0 === peg$FAILED) {
          s0 = peg$parserCL();
          if (s0 === peg$FAILED) {
            s0 = peg$parserDL();
            if (s0 === peg$FAILED) {
              s0 = peg$parserXL();
              if (s0 === peg$FAILED) {
                s0 = peg$parserYL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseMacroExpansion();
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseGeneralRegister() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parserAL();
      if (s0 === peg$FAILED) {
        s0 = peg$parserA();
        if (s0 === peg$FAILED) {
          s0 = peg$parserBL();
          if (s0 === peg$FAILED) {
            s0 = peg$parserB();
            if (s0 === peg$FAILED) {
              s0 = peg$parserCL();
              if (s0 === peg$FAILED) {
                s0 = peg$parserC();
                if (s0 === peg$FAILED) {
                  s0 = peg$parserDL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parserD();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseMacroExpansion();
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseMemoryRegister() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parserD();
      if (s0 === peg$FAILED) {
        s0 = peg$parserBP();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMacroExpansion();
        }
      }
      return s0;
    }
    function peg$parseNonGeneralRegister() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parserXL();
      if (s0 === peg$FAILED) {
        s0 = peg$parserX();
        if (s0 === peg$FAILED) {
          s0 = peg$parserYL();
          if (s0 === peg$FAILED) {
            s0 = peg$parserY();
            if (s0 === peg$FAILED) {
              s0 = peg$parserSP();
              if (s0 === peg$FAILED) {
                s0 = peg$parserBP();
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parsefZERO() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c127) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f154();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefCARRY() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c115) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c129) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f155();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefOVERFLOW() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c130) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c131) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f156();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefNEGATIVE() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c133) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f157();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefEXCEPTION() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c119) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c134) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f158();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c135) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c136) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$begin();
          s3 = peg$parseIdentifierPart();
          peg$end(true);
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f158();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parsefINTERRUPT_DISABLE() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c137) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c138) {
          s1 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f159();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefINTERRUPT_SERVICE() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c139) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c140) {
          s1 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f160();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefSINGLE_STEP() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c141) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c142) {
          s1 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        s3 = peg$parseIdentifierPart();
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f161();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFlags() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parsefZERO();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefCARRY();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefOVERFLOW();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefNEGATIVE();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefEXCEPTION();
              if (s0 === peg$FAILED) {
                s0 = peg$parsefINTERRUPT_DISABLE();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsefINTERRUPT_SERVICE();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsefSINGLE_STEP();
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parsefNOTZERO() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c143;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefZERO();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefNOTCARRY() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c143;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefCARRY();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefNOTOVERFLOW() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c143;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefOVERFLOW();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefNOTNEGATIVE() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c143;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefNEGATIVE();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefNOTEXCEPTION() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c143;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefEXCEPTION();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefNOTINTERRUPT_DISABLE() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c143;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefINTERRUPT_DISABLE();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefNOTINTERRUPT_SERVICE() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c143;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefINTERRUPT_SERVICE();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parsefNOTSINGLE_STEP() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c132) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c143;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefSINGLE_STEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseNotFlags() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parsefNOTZERO();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefNOTCARRY();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefNOTOVERFLOW();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefNOTNEGATIVE();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefNOTEXCEPTION();
              if (s0 === peg$FAILED) {
                s0 = peg$parsefNOTINTERRUPT_DISABLE();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsefNOTINTERRUPT_SERVICE();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsefNOTSINGLE_STEP();
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseAllFlags() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseNotFlags();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFlags();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMacroExpansion();
        }
      }
      return s0;
    }
    function peg$parsecLTE() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c144) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c145) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f163();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecLT() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c147) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f164();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecGTE() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c148) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c149) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f165();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecGT() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c150) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c151) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f166();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecABE() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c152) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c153) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f167();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecABV() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c154) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c155) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f168();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecBLE() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c156) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c157) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f169();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecBLO() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c158) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c159) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f170();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecEQ() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c160) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f171();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsecNEQ() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c161) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f172();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseConditionals() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parsecLTE();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecLT();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecGTE();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecGT();
            if (s0 === peg$FAILED) {
              s0 = peg$parsecABE();
              if (s0 === peg$FAILED) {
                s0 = peg$parsecABV();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecBLE();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsecBLO();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsecEQ();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsecNEQ();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseAllConditionals() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseConditionals();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMacroExpansion();
      }
      return s0;
    }
    function peg$parseConditionalOrFlag() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseConditionals();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFlags();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMacroExpansion();
        }
      }
      return s0;
    }
    function peg$parseImmediate4() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseOrExpression();
      return s0;
    }
    function peg$parseImmediate8() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseOrExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f173(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseImmediate16() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseOrExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f173(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseRelative8() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseOrExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f173(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseRelative16() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseOrExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f173(s1);
      }
      s0 = s1;
      return s0;
    }
    function peg$parseIndexByX() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseCOMMA();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parserX();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseIndexByY() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseCOMMA();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parserY();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseImmediateOffset() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parsePLUS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseOrExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f174(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseAbsolute18() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLBRACKET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseOrExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseIndexByX();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse_();
          s7 = peg$parseIndexByY();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$parseRBRACKET();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f175(s3, s5, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseIndirect18() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLANGLE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseOrExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseIndexByX();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse_();
          s7 = peg$parseRANGLE();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseIndexByY();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f176(s3, s5, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseAbsoluteRegister() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLBRACKET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseMemoryRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseImmediateOffset();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse_();
          s7 = peg$parseIndexByX();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$parseIndexByY();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          s11 = peg$parseRBRACKET();
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f177(s3, s5, s7, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseIndirectRegister() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLANGLE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseMemoryRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseImmediateOffset();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse_();
          s7 = peg$parseIndexByX();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$parseRANGLE();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseIndexByY();
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f178(s3, s5, s7, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseMemoryAddressingMode() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseMacroExpansion();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAbsoluteRegister();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIndirectRegister();
          if (s0 === peg$FAILED) {
            s0 = peg$parseImmediate16();
            if (s0 === peg$FAILED) {
              s0 = peg$parseImmediate8();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAbsolute18();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIndirect18();
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseBranchAddressingMode() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseMacroExpansion();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAbsoluteRegister();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIndirectRegister();
          if (s0 === peg$FAILED) {
            s0 = peg$parseRelative16();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRelative8();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAbsolute18();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIndirect18();
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseFPAbsolute() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLBRACKET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseRBRACKET();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f179(s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFPIndirect() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLANGLE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRegister();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseRANGLE();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f180(s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseFPAddressingMode() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseMacroExpansion();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFPAbsolute();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFPIndirect();
        }
      }
      return s0;
    }
    function peg$parseOP_ADD() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c162;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_SUB() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c163;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_MUL() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 42) {
        s0 = peg$c164;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_DIV() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 47) {
        s0 = peg$c165;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_MOD() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 37) {
        s0 = peg$c166;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_SHL() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 2) === peg$c167) {
        s0 = peg$c167;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_SHR() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 2) === peg$c168) {
        s0 = peg$c168;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_AND() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 38) {
        s0 = peg$c169;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_OR() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 124) {
        s0 = peg$c170;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_NOT() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 33) {
        s0 = peg$c143;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_XOR() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.charCodeAt(peg$currPos) === 94) {
        s0 = peg$c171;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseOP_TAKES() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (input.substr(peg$currPos, 2) === peg$c172) {
        s0 = peg$c172;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c173) {
          s0 = peg$c173;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseAdditiveOperator() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseOP_ADD();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOP_SUB();
      }
      return s0;
    }
    function peg$parseMultiplicativeOperator() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseOP_MUL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOP_MOD();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOP_DIV();
        }
      }
      return s0;
    }
    function peg$parseLogicalOperator() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseOP_AND();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOP_OR();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOP_XOR();
        }
      }
      return s0;
    }
    function peg$parseShiftOperator() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseOP_SHL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOP_SHR();
      }
      return s0;
    }
    function peg$parseOrExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseXorExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseOP_OR();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseXorExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseOP_OR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseXorExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f181(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseXorExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseAndExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseOP_XOR();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAndExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseOP_XOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseAndExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f181(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseAndExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseShiftExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseOP_AND();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseShiftExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseOP_AND();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseShiftExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f181(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseShiftExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseShiftOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAdditiveExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseShiftOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseAdditiveExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f181(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseAdditiveExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseMultiplicativeExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseAdditiveOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseMultiplicativeExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseAdditiveOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseMultiplicativeExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f181(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseMultiplicativeExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLiteral();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseMultiplicativeOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseLiteral();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseMultiplicativeOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseLiteral();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f181(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseNotExpression() {
      var s0, s1, s2, s3, s4;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseOP_NOT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseOrExpression();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f182(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseNegativeExpression() {
      var s0, s1, s2, s3, s4;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseOP_SUB();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseOrExpression();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f182(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseCommaSepExpressions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseOrExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseOrExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseOrExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f183(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseStringOrConstantExpression() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseOrExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStringLiteral();
      }
      return s0;
    }
    function peg$parseCommaSepStringOrConstantExpressions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseStringOrConstantExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseStringOrConstantExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseStringOrConstantExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f183(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseConstantFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseADDRBANK();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseLPAREN();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseOrExpression();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseRPAREN();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f184(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseADDRBOFS();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseLPAREN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseOrExpression();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseRPAREN();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f184(s1, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseADDRPAGE();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseLPAREN();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseOrExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseRPAREN();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f184(s1, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseADDRPOFS();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseLPAREN();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseOrExpression();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$parseRPAREN();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f184(s1, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseNEXT();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseLPAREN();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  s5 = peg$parseOrExpression();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseRPAREN();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f184(s1, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseASC();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseLPAREN();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$parseStringLiteral();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      s7 = peg$parseRPAREN();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f184(s1, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseASC();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$parseLPAREN();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      s5 = peg$parseOrExpression();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseRegister();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parseFlags();
                        }
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        s7 = peg$parseRPAREN();
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f185(s1, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseLiteral() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseLPAREN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseOrExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseRPAREN();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f186(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseNotExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNegativeExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseConstantFunction();
            if (s0 === peg$FAILED) {
              s0 = peg$parseInteger();
              if (s0 === peg$FAILED) {
                s0 = peg$parseMacroExpansion();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIdentifier();
                }
              }
            }
          }
        }
      }
      return s0;
    }
    function peg$parseReservedWord() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$parseKeyword();
      return s0;
    }
    function peg$parseLabel() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c174;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f187(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseReservedWord();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s2 = peg$c174;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f188();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseIdentifier() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$begin();
      s2 = peg$parseReservedWord();
      peg$end(true);
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierName();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f189();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseIdentifierName() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseIdentifierStart();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseIdentifierPart();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseIdentifierPart();
        }
        peg$savedPos = s0;
        s0 = peg$f190(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseIdentifierStart() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s0 = peg$c175;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
      }
      return s0;
    }
    function peg$parseIdentifierPart() {
      var s0;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parseInteger() {
      var s0, s1, s2, s3, s4;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c176) {
        s1 = peg$c176;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
          }
          peg$savedPos = s0;
          s0 = peg$f191(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 36) {
          s1 = peg$c177;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
              }
            }
            peg$savedPos = s0;
            s0 = peg$f191(s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c178) {
            s1 = peg$c178;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$r5.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$r5.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                }
              }
              peg$savedPos = s0;
              s0 = peg$f191(s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c163;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            if (peg$r6.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$r7.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$r7.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                }
              }
              peg$savedPos = s0;
              s0 = peg$f192(s1, s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
      return s0;
    }
    function peg$parseStringLiteral() {
      var s0, s1, s2, s3, s4, s5;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$begin();
        s5 = peg$parseDQUOTE();
        peg$end(true);
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$begin();
          s5 = peg$parseDQUOTE();
          peg$end(true);
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        s3 = peg$parseDQUOTE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f193(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$begin();
          s5 = peg$parseDQUOTE();
          peg$end(true);
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$begin();
            s5 = peg$parseDQUOTE();
            peg$end(true);
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          peg$savedPos = s0;
          s0 = peg$f194();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseMacroExpansion();
        }
      }
      return s0;
    }
    function peg$parseLCURLY() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f195();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseRCURLY() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 125) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f195();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseLBRACKET() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c179;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f196();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseRBRACKET() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 93) {
        s1 = peg$c180;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f197();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseLPAREN() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c181;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f198();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseRPAREN() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c182;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f199();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseLANGLE() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c183;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f200();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseRANGLE() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c184;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f201();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseDQUOTE() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c185;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f202();
      }
      s0 = s1;
      return s0;
    }
    function peg$parsePLUS() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c162;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f203();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseCOMMA() {
      var s0, s1;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c186;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f204();
      }
      s0 = s1;
      return s0;
    }
    function peg$parse__() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = [];
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f205();
      }
      s0 = s1;
      return s0;
    }
    function peg$parseCOMMENT() {
      var s0, s1, s2, s3;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c187;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r9.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f206(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      return s0;
    }
    function peg$parse_() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = [];
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s1 = peg$f2();
      s0 = s1;
      return s0;
    }
    function peg$parseEOL() {
      var s0, s1, s2;
      var rule$expects = function(expected2) {
        if (peg$silentFails === 0)
          peg$expect(expected2);
      };
      s0 = peg$currPos;
      s1 = [];
      if (peg$r10.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$r10.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2();
      }
      s0 = s1;
      return s0;
    }
    const expectedRegister = () => expected("REGISTER");
    const expectedDataRegister = () => expected("DATA_REGISTER");
    const expectedMemoryAddress = () => expected("MEMORY ADDRESS");
    const expectedComma = () => expected("COMMA");
    const expectedExpression = () => expected("EXPRESSION");
    const expectedIdentifier = () => expected("IDENTIFIER");
    const expectedFlag = () => expected("FLAG");
    const expectedQuote = () => expected("QUOTE");
    const expectedStringLiteral = () => expected("STRING");
    const REGISTERS2 = {
      A: 0,
      AL: 1,
      B: 2,
      BL: 3,
      C: 4,
      CL: 5,
      D: 6,
      DL: 7,
      X: 8,
      XL: 9,
      Y: 10,
      YL: 11,
      BP: 12,
      SP: 14
    };
    const FLAGS2 = {
      ZERO: 0,
      OVERFLOW: 1,
      CARRY: 2,
      NEGATIVE: 3,
      SINGLE_STEP: 4,
      INTERRUPT_SERVICE: 5,
      INTERRUPT_DISABLE: 6,
      EXCEPTION: 7
    };
    const OPCODES3 = {
      NOP: "nop",
      ADD: "add",
      AND: "and",
      CMP: "cmp",
      SUB: "sub",
      OR: "or",
      TEST: "test",
      XOR: "xor",
      TRAP: "trap",
      NOT: "not",
      NEG: "neg",
      EXC: "exc",
      SHL: "shl",
      SHR: "shr",
      SWAP: "swap",
      MOV: "mov",
      LD: "ld",
      ST: "st",
      INC: "inc",
      IN: "in",
      OUT: "out",
      ENTER: "enter",
      EXIT: "exit",
      BRK: "brk",
      LOOP: "loop",
      LOOPS: "loops",
      BR: "br",
      BRS: "brs",
      CALL: "call",
      CALLS: "calls",
      PUSHALL: "pushall",
      POPALL: "popall",
      PUSHF: "pushf",
      POPF: "popf",
      PUSH: "push",
      POPMM: "popmm",
      PUSHMM: "pushmm",
      POP: "pop",
      RET: "ret",
      MUL: "mul",
      MOD: "mod",
      DIV: "div",
      SMUL: "smul",
      SMOD: "smod",
      SDIV: "sdiv",
      SET: "set",
      CLR: "clr",
      DEC: "dec",
      HALT: "halt",
      WAIT: "wait",
      FCLR: "fclr",
      FLDR: "fldr",
      FLDM: "fldm",
      FLDIM: "fldim",
      FSTR: "fstr",
      FSTM: "fstm",
      FSTIM: "fstim",
      FADD: "fadd",
      FSUB: "fsub",
      FCMP: "fcmp",
      FMUL: "fmul",
      FDIV: "fdiv",
      FMOD: "fmod",
      FPOW: "fpow",
      FSQRT: "fsqrt",
      FABS: "fabs",
      FSIN: "fsin",
      FCOS: "fcos",
      FTAN: "ftan",
      FASIN: "fasin",
      FACOS: "facos",
      FATAN: "fatan",
      FNEG: "fneg",
      FEXC: "fexc",
      FINT: "fint",
      FISNAN: "fisnan",
      FISINF: "fisinf",
      FLOG2: "flog2",
      FLOG10: "flog10",
      FLD0: "fld0",
      FLD1: "fld1",
      FLDE: "flde",
      FLDPI: "fldpi"
    };
    const DIRECTIVES2 = {
      SEGMENT: ".segment",
      BYTE: ".byte",
      WORD: ".word",
      STRING: ".string",
      APPEND: ".append"
    };
    function toNumber(inStr) {
      let str = inStr.replace(/\_/g, "");
      let radix = 10;
      if (str.startsWith("0x") || str.startsWith("$") || str.endsWith("h")) {
        radix = 16;
      }
      if (str.startsWith("0b") || str.endsWith("b")) {
        radix = 2;
      }
      str = str.replace("0x", "").replace("0b", "").replace("$", "").replace("h", "");
      return parseInt(str, radix);
    }
    const TOKENS2 = {
      COMMENT: "comment",
      STRING: "string",
      INTEGER: "integer",
      IDENTIFIER: "identifier",
      REGISTER: "register",
      FLAG: "flag",
      EXPRESSION: "expression",
      BINARY_EXPRESSION: "binary.expression",
      UNARY_EXPRESSION: "unary.expression",
      INSTRUCTION: "instruction",
      SEGMENT_DIRECTIVE: "directive.segment",
      NAMESPACE_DIRECTIVE: "directive.namespace",
      CONST_DIRECTIVE: "directive.const",
      IMPORT_DIRECTIVE: "directive.import",
      BYTE_DIRECTIVE: "directive.byte",
      WORD_DIRECTIVE: "directive.word",
      STRING_DIRECTIVE: "directive.string",
      LABEL: "label",
      MEMORY: "memory",
      BLOCK: "block",
      FUNCTION: "function",
      MACRO_DIRECTIVE: "directive.macro",
      MACRO_EXPANSION: "expand.macro",
      CONDITIONAL: "conditional"
    };
    function tBlock(block) {
      return {
        type: TOKENS2.BLOCK,
        block,
        pos: location3().start
      };
    }
    function tLiteral(value) {
      return {
        type: typeof value === "string" ? TOKENS2.STRING : TOKENS2.INTEGER,
        value,
        pos: location3().start
      };
    }
    function tIdentifier(ident) {
      return {
        type: TOKENS2.IDENTIFIER,
        ident,
        pos: location3().start
      };
    }
    function tRegister(idx) {
      return {
        type: TOKENS2.REGISTER,
        idx,
        size: 2 - (idx & 1),
        pos: location3().start
      };
    }
    function tBinaryExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: TOKENS2.BINARY_EXPRESSION,
          op: element[1],
          l: result,
          r: element[3],
          pos: location3().start
        };
      }, head);
    }
    function tUnaryExpression(op, v) {
      return {
        type: TOKENS2.UNARY_EXPRESSION,
        op,
        r: v,
        pos: location3().start
      };
    }
    function tFunction(fn, param) {
      return {
        type: TOKENS2.FUNCTION,
        fn,
        param,
        pos: location3().start
      };
    }
    function tConditional(conditional) {
      return {
        type: TOKENS2.CONDITIONAL,
        conditional
      };
    }
    const MODES2 = {
      IMMEDIATE: 0,
      ABSOLUTE: 1,
      BP: 2,
      D: 3
    };
    function tInstruction(op, { dest, source, m, i, x, y, a, imm, reg, addr, flag, bankReg, offsReg, condition } = {}) {
      return {
        type: TOKENS2.INSTRUCTION,
        op,
        dest,
        source,
        m,
        i,
        x,
        y,
        a,
        imm,
        reg,
        addr,
        flag,
        bankReg,
        offsReg,
        pos: location3().start,
        condition
      };
    }
    function tNamespace(name, block) {
      return {
        type: TOKENS2.NAMESPACE_DIRECTIVE,
        name,
        block,
        pos: location3().start
      };
    }
    function tConstant(name, expr) {
      return {
        type: TOKENS2.CONST_DIRECTIVE,
        name,
        value: expr,
        pos: location3().start
      };
    }
    function tSegment(name, addr, append, block) {
      return {
        type: TOKENS2.SEGMENT_DIRECTIVE,
        name,
        addr,
        append,
        block,
        pos: location3().start
      };
    }
    function tImport(path) {
      return {
        type: TOKENS2.IMPORT_DIRECTIVE,
        path,
        pos: location3().start
      };
    }
    function tDataDirective(which, data, size2 = -1) {
      return {
        type: which,
        data,
        size: size2,
        pos: location3().start
      };
    }
    function tComment(comment) {
      return {
        type: TOKENS2.COMMENT,
        comment,
        pos: location3().start
      };
    }
    function tLabel(name) {
      return {
        type: TOKENS2.LABEL,
        name,
        pos: location3().start
      };
    }
    function tFlag(flag, neg) {
      return {
        type: TOKENS2.FLAG,
        flag,
        neg,
        pos: location3().start
      };
    }
    function addressingMode({ addr, m, x, y, i }, srce = {}) {
      return Object.assign({}, srce, {
        type: TOKENS2.MEMORY,
        addr,
        m,
        x,
        y,
        i,
        pos: location3().start
      });
    }
    function tMacroDirective(name, params, ast) {
      return {
        type: TOKENS2.MACRO_DIRECTIVE,
        name,
        params,
        ast
      };
    }
    function tMacroExpansion(name, args) {
      return {
        type: TOKENS2.MACRO_EXPANSION,
        name,
        args
      };
    }
    const hlScopes = [];
    function newScope() {
      hlScopes.unshift({});
    }
    function exitScope() {
      hlScopes.shift();
    }
    const uniqNames = {};
    function uniqIdent(ident) {
      if (!uniqIdent[ident]) {
        uniqIdent[ident] = [];
      }
      if (!hlScopes[0][ident]) {
        hlScopes[0][ident] = [];
      }
      const newIdent = `${ident}__${uniqIdent[ident].length.toString(16).padStart(8, "0")}`;
      uniqIdent[ident].unshift(newIdent);
      hlScopes[0][ident].unshift(newIdent);
      return newIdent;
    }
    function getIdentInScope(ident) {
      if (hlScopes.length < 1) {
        error(`No current scope exists to perform rewrite; couldn't find ${ident}`);
      }
      for (let i = 0; i < hlScopes.length; i++) {
        const curScope = hlScopes[0];
        const curIdents = curScope[ident];
        if (curIdents) {
          return curIdents[0];
        }
      }
      return ident;
      error(`Rewrite failed; couldn't find ${ident} in scope.`);
    }
    function rewriteIdents(ast) {
      if (!ast)
        return;
      if (ast.type === TOKENS2.IDENTIFIER) {
        if (ast.ident.startsWith("__")) {
          ast.ident = getIdentInScope(ast.ident);
        }
        return ast;
      }
      if (Array.isArray(ast)) {
        for (let i = 0; i < ast.length; i++) {
          rewriteIdents(ast[i]);
        }
        return ast;
      }
      if (typeof ast === "object") {
        if (ast && ast.type) {
          for (let k of Object.keys(ast)) {
            if (typeof ast[k] === "object") {
              rewriteIdents(ast[k]);
            }
          }
        }
        return ast;
      }
      return ast;
    }
    peg$begin();
    peg$result = peg$startRuleFunction();
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$expect(peg$endExpectation());
      }
      throw peg$buildError();
    }
  }

  // src/basm/parser.js
  var parser = {
    parse: peg$parse
  };

  // src/basm/assemble.js
  var importProvider = {
    tryImport(name) {
      throw new Error("Import not supported in this environment.");
    },
    importFinally() {
    }
  };
  var depth = 0;
  function debug(...args) {
    const cli = globalThis.cli;
    const str = Array.from({ length: depth }, (_) => ".").join("");
    if (cli) {
      cli.debug(str + args.join(" "));
    }
  }
  var SCOPE = {
    CONTENTS: Symbol("SCOPE.CONTENTS"),
    TYPE: Symbol("SCOPE.TYPE"),
    TYPES: {
      ANONYMOUS: "anonymous",
      GLOBAL: "global",
      NAMESPACE: "namespace",
      SEGMENT: "segment",
      BLOCK: "block"
    },
    NAME: Symbol("SCOPE.NAME"),
    BASE: Symbol("SCOPE.BASE"),
    ADDR: Symbol("SCOPE.ADDR"),
    DATA: Symbol("SCOPE.DATA"),
    PARENT: Symbol("SCOPE.PARENT"),
    ADJUSTED: Symbol("SCOPE.ADJUSTED"),
    SEGMENTS: Symbol("SCOPE.SEGMENTS")
  };
  var lastPos = {
    line: 1,
    column: 1
  };
  function err(msg) {
    throw new Error(`${msg} at ${lastPos.line}:${lastPos.column}`);
  }
  function getScopeChain(context, global2) {
    let str = "";
    while (context && context !== global2) {
      str = str + "." + context[SCOPE.NAME];
      context = context[SCOPE.PARENT];
    }
    return str.substr(1);
  }
  function createScope(type2 = SCOPE.TYPES.GLOBAL, parent, name, addr, append = false) {
    const scope = {
      [SCOPE.CONTENTS]: {},
      [SCOPE.TYPE]: type2,
      [SCOPE.BASE]: addr,
      [SCOPE.ADDR]: addr,
      [SCOPE.DATA]: [],
      [SCOPE.PARENT]: parent,
      [SCOPE.NAME]: name,
      [SCOPE.ADJUSTED]: void 0,
      [SCOPE.SEGMENTS]: []
    };
    if (parent && type2 !== SCOPE.TYPES.BLOCK) {
      if (!parent[name]) {
        parent[name] = scope;
      } else {
        if (parent[name][SCOPE.TYPE] !== type2) {
          err(`Scope ${name} already declared with type ${parent[name][SCOPE.TYPE]}, but tried to change to ${type2}.`);
        }
        if (parent[name][SCOPE.BASE] !== addr) {
          err(`Scope ${name} already declared with base address ${parent[name][SCOPE.BASE]}, but tried to change it to ${addr}`);
        }
        if (type2 === SCOPE.TYPES.SEGMENT) {
          if (!append) {
            parent[name][SCOPE.ADDR] = addr;
          }
        }
        return parent[name];
      }
    }
    return scope;
  }
  function findIdent(ident, context = {}) {
    const parts = ident.split(".");
    const head = parts.length > 1 ? parts.shift() : void 0, last = parts.pop();
    let curContext = context;
    if (head !== void 0) {
      let rootContext = context;
      while (!rootContext.hasOwnProperty(head)) {
        rootContext = rootContext[SCOPE.PARENT];
        if (!rootContext) {
          err(`Could not locate ${ident} in current scope chain.`);
        }
      }
      curContext = rootContext[head];
      parts.forEach((part) => {
        if (curContext.hasOwnProperty(part)) {
          curContext = curContext[part];
        } else {
          err(`Could not locate ${ident} in current scope chain.`);
        }
      });
    }
    if (curContext[SCOPE.CONTENTS].hasOwnProperty(last)) {
      return curContext[SCOPE.CONTENTS][last];
    }
    if (head === void 0) {
      while (!curContext[SCOPE.CONTENTS].hasOwnProperty(last)) {
        curContext = curContext[SCOPE.PARENT];
        if (!curContext) {
          err(`Could not locate ${ident} in current scope chain.`);
        }
      }
      return curContext[SCOPE.CONTENTS][last];
    }
    err(`Could not locate ${ident} in current scope chain.`);
  }
  function evaluate(node, context) {
    if (node === void 0 || node === null)
      return;
    if (typeof node === "number" || typeof node === "string" || typeof node === "boolean") {
      return node;
    }
    lastPos = node.pos;
    switch (node.type) {
      case TOKENS.FUNCTION: {
        switch (node.fn) {
          case "ADDRBANK":
            return (evaluate(node.param, context) & 458752) >> 3;
          case "ADDRBOFS":
            return evaluate(node.param, context) & 65535;
          case "ADDRPAGE":
            return (evaluate(node.param, context) & 507904) >> 3;
          case "ADDRPOFS":
            return evaluate(node.param, context) & 16383;
          case "ASC":
            return evaluate(node.param, context).charCodeAt(0);
          case "NEXT":
            const cur = evalaute(node.param, context);
            context[SCOPE.CONTENTS][node.param.ident] = cur + 1;
            return cur;
          default:
            err(`Unimplemented function: ${node.fn}`);
        }
      }
      case TOKENS.MACRO_EXPANSION:
        {
          const macro = findIdent(node.name.ident, context);
          const addr = context[SCOPE.ADDR];
          const name = `macro-${++macro_id}`;
          const newContext = createScope(SCOPE.TYPES.BLOCK, context, name, addr, false);
          const argsArray = node.args;
          macro.params.forEach((param, idx) => {
            newContext[SCOPE.CONTENTS][param.ident] = {
              params: [],
              ast: argsArray[idx]
            };
          });
          if (macro.ast.type === TOKENS.MEMORY) {
            return macro.ast;
          }
          const r = evaluate(macro.ast, newContext);
          return r;
        }
        break;
      case TOKENS.UNARY_EXPRESSION: {
        switch (node.op) {
          case "-":
            return -evaluate(node.r, context);
          case "!":
            return evaluate(node.r, context) ^ 4294967295;
          default:
            err(`Unexpected operator in unary expression: ${node.op}`);
        }
      }
      case TOKENS.BINARY_EXPRESSION: {
        switch (node.op) {
          case "+":
            return evaluate(node.l, context) + evaluate(node.r, context);
          case "-":
            return evaluate(node.l, context) - evaluate(node.r, context);
          case "*":
            return evaluate(node.l, context) * evaluate(node.r, context);
          case "/":
            return evaluate(node.l, context) / evaluate(node.r, context);
          case "&":
            return evaluate(node.l, context) & evaluate(node.r, context);
          case "|":
            return evaluate(node.l, context) | evaluate(node.r, context);
          case "^":
            return evaluate(node.l, context) ^ evaluate(node.r, context);
          case "<<":
            return evaluate(node.l, context) << evaluate(node.r, context);
          case ">>":
            return evaluate(node.l, context) >> evaluate(node.r, context);
          default:
            err(`Unexpected operator in binary expression: ${node.op}`);
        }
      }
      case TOKENS.IDENTIFIER: {
        const v = findIdent(node.ident, context);
        return evaluate(v, context);
      }
      case TOKENS.INTEGER:
      case TOKENS.STRING:
        return node.value;
      case TOKENS.MEMORY:
        return evaluate(node.addr, context);
      case TOKENS.REGISTER:
      case TOKENS.FLAG:
      case TOKENS.CONDITIONAL:
        return node;
      default:
        err(`Unexpected token in expression ${node.type}`);
    }
  }
  function tryToAssemble(node, context, pc, fail = false) {
    if (node.type !== TOKENS.INSTRUCTION) {
      err(`Tried to assemble an unexpected token: ${node}`);
    }
    let { op, dest, source, reg, addr, flag, imm, x, y, i, m, bankReg, offsReg, condition } = node;
    try {
      let evalParts = [dest, source, reg, flag, imm, bankReg, offsReg].map((n) => {
        if (n !== void 0 && n !== null && n.type === TOKENS.MACRO_EXPANSION)
          return evaluate(n, context);
        return n;
      });
      [dest, source, reg, flag, imm, bankReg, offsReg] = evalParts;
    } catch (err2) {
    }
    let size2 = 0, bytes2 = [];
    try {
      switch (op) {
        case OPCODES2.FCLR:
          size2 = 2;
          bytes2.push(174, 0);
          break;
        case OPCODES2.FADD:
          size2 = 2;
          bytes2.push(174, 16);
          break;
        case OPCODES2.FSUB:
          size2 = 2;
          bytes2.push(174, 17);
          break;
        case OPCODES2.FCMP:
          size2 = 2;
          bytes2.push(174, 18);
          break;
        case OPCODES2.FMUL:
          size2 = 2;
          bytes2.push(174, 19);
          break;
        case OPCODES2.FMOD:
          size2 = 2;
          bytes2.push(174, 20);
          break;
        case OPCODES2.FDIV:
          size2 = 2;
          bytes2.push(174, 21);
          break;
        case OPCODES2.FPOW:
          size2 = 2;
          bytes2.push(174, 22);
          break;
        case OPCODES2.FSQRT:
          size2 = 2;
          bytes2.push(174, 23);
          break;
        case OPCODES2.FNEG:
          size2 = 2;
          bytes2.push(174, 24);
          break;
        case OPCODES2.FEXC:
          size2 = 2;
          bytes2.push(174, 25);
          break;
        case OPCODES2.FINT:
          size2 = 2;
          bytes2.push(174, 26);
          break;
        case OPCODES2.FABS:
          size2 = 2;
          bytes2.push(174, 27);
          break;
        case OPCODES2.FSIN:
          size2 = 2;
          bytes2.push(174, 32);
          break;
        case OPCODES2.FCOS:
          size2 = 2;
          bytes2.push(174, 33);
          break;
        case OPCODES2.FTAN:
          size2 = 2;
          bytes2.push(174, 34);
          break;
        case OPCODES2.FASIN:
          size2 = 2;
          bytes2.push(174, 36);
          break;
        case OPCODES2.FACOS:
          size2 = 2;
          bytes2.push(174, 37);
          break;
        case OPCODES2.FATAN:
          size2 = 2;
          bytes2.push(174, 38);
          break;
        case OPCODES2.FISNAN:
          size2 = 2;
          bytes2.push(174, 48);
          break;
        case OPCODES2.FISINF:
          size2 = 2;
          bytes2.push(174, 49);
          break;
        case OPCODES2.FLOG2:
          size2 = 2;
          bytes2.push(174, 50);
          break;
        case OPCODES2.FLOG10:
          size2 = 2;
          bytes2.push(174, 51);
          break;
        case OPCODES2.FLD0:
          size2 = 2;
          bytes2.push(174, 112);
          break;
        case OPCODES2.FLD1:
          size2 = 2;
          bytes2.push(174, 113);
          break;
        case OPCODES2.FLDE:
          size2 = 2;
          bytes2.push(174, 114);
          break;
        case OPCODES2.FLDPI:
          size2 = 2;
          bytes2.push(174, 115);
          break;
        case OPCODES2.FLDR:
          size2 = 3;
          bytes2.push(174, 128, reg.idx);
          break;
        case OPCODES2.FLDM:
          size2 = 3;
          bytes2.push(174, 129, bankReg.idx << 4 | offsReg.idx);
          break;
        case OPCODES2.FLDIM:
          size2 = 3;
          bytes2.push(174, 130, bankReg.idx << 4 | offsReg.idx);
          break;
        case OPCODES2.FSTR:
          size2 = 3;
          bytes2.push(174, 132, reg.idx);
          break;
        case OPCODES2.FSTM:
          size2 = 3;
          bytes2.push(174, 133, bankReg.idx << 4 | offsReg.idx);
          break;
        case OPCODES2.FSTIM:
          size2 = 3;
          bytes2.push(174, 134, bankReg.idx << 4 | offsReg.idx);
          break;
        case OPCODES2.NOP:
          size2 = 1;
          bytes2.push(0);
          break;
        case OPCODES2.HALT:
          size2 = 1;
          bytes2.push(62);
          break;
        case OPCODES2.BRK:
          size2 = 1;
          bytes2.push(63);
          break;
        case OPCODES2.PUSHALL:
          size2 = 1;
          bytes2.push(160);
          break;
        case OPCODES2.POPALL:
          size2 = 1;
          bytes2.push(161);
          break;
        case OPCODES2.PUSHF:
          size2 = 1;
          bytes2.push(162);
          break;
        case OPCODES2.POPF:
          size2 = 1;
          bytes2.push(163);
          break;
        case OPCODES2.PUSHMM:
          size2 = 1;
          bytes2.push(164);
          break;
        case OPCODES2.POPMM:
          size2 = 1;
          bytes2.push(165);
          break;
        case OPCODES2.RET:
          size2 = 1;
          bytes2.push(167);
          break;
        case OPCODES2.SET:
          size2 = 1;
          bytes2.push(176 | flag.flag);
          break;
        case OPCODES2.CLR:
          size2 = 1;
          bytes2.push(184 | flag.flag);
          break;
        case OPCODES2.INC:
          size2 = 1;
          bytes2.push(192 | reg.idx);
          break;
        case OPCODES2.DEC:
          size2 = 1;
          bytes2.push(208 | reg.idx);
          break;
        case OPCODES2.PUSH:
          size2 = 1;
          bytes2.push(224 | reg.idx);
          break;
        case OPCODES2.POP:
          size2 = 1;
          bytes2.push(240 | reg.idx);
          break;
        case OPCODES2.NOT:
          size2 = 2;
          bytes2.push(9, reg.idx);
          break;
        case OPCODES2.NEG:
          size2 = 2;
          bytes2.push(9, 16 | reg.idx);
          break;
        case OPCODES2.EXC:
          size2 = 2;
          bytes2.push(9, 32 | reg.idx);
          break;
        case OPCODES2.SWAP:
          size2 = 2;
          bytes2.push(14, dest.idx << 4 | source.idx);
          break;
        case OPCODES2.MOV:
          size2 = 2;
          bytes2.push(15, dest.idx << 4 | source.idx);
          break;
        case OPCODES2.MUL:
          size2 = 2;
          bytes2.push(168, dest.idx << 4 | source.idx);
          break;
        case OPCODES2.DIV:
          size2 = 2;
          bytes2.push(169, dest.idx << 4 | source.idx);
          break;
        case OPCODES2.MOD:
          size2 = 2;
          bytes2.push(170, dest.idx << 4 | source.idx);
          break;
        case OPCODES2.SMUL:
          size2 = 2;
          bytes2.push(171, dest.idx << 4 | source.idx);
          break;
        case OPCODES2.SDIV:
          size2 = 2;
          bytes2.push(172, dest.idx << 4 | source.idx);
          break;
        case OPCODES2.SMOD:
          size2 = 2;
          bytes2.push(173, dest.idx << 4 | source.idx);
          break;
        case OPCODES2.TRAP: {
          {
            size2 = imm ? 2 : 1;
            if (imm) {
              bytes2.push(8);
              bytes2.push(evaluate(imm, context) & 255);
            }
          }
          break;
        }
        case OPCODES2.SHL:
        case OPCODES2.SHR:
          {
            size2 = 2;
            if (imm) {
              bytes2.push(op === OPCODES2.SHL ? 10 : 12, dest.idx << 4 | evaluate(imm, context) & 15);
            } else {
              bytes2.push(op === OPCODES2.SHL ? 11 : 13, dest.idx << 4 | source.idx);
            }
          }
          break;
        case OPCODES2.IN:
        case OPCODES2.OUT:
          size2 = 3;
          bytes2.push(op === OPCODES2.IN ? 48 : 49, reg.idx << 4, evaluate(imm, context) & 255);
          break;
        case OPCODES2.ENTER:
        case OPCODES2.EXIT:
          size2 = 2;
          bytes2.push(op === OPCODES2.ENTER ? 56 : 57, evaluate(imm, context) & 255);
          break;
        case OPCODES2.WAIT:
          size2 = 2;
          bytes2.push(175, evaluate(imm, context) & 255);
          break;
        case OPCODES2.LD:
          {
            bytes2.push(16 | dest.idx);
            if (source.m === MODES.IMMEDIATE || source.m === void 0) {
              size2 = dest.size + 2;
              const v = evaluate(source.addr !== void 0 ? source.addr : source, context);
              bytes2.push(0);
              if (dest.size === 1) {
                bytes2.push(v & 255);
              } else {
                bytes2.push((v & 65280) >> 8);
                bytes2.push(v & 255);
              }
            } else {
              size2 = 4;
              const a = evaluate(source.addr, context) & 524287;
              bytes2.push(source.m << 6 | (source.i ? 1 : 0) << 5 | (source.x ? 1 : 0) << 4 | (source.y ? 1 : 0) << 3 | (a & 458752) >> 16, (a & 65280) >> 8, a & 255);
            }
          }
          break;
        case OPCODES2.ST:
          {
            size2 = 4;
            bytes2.push(32 | source.idx);
            const a = evaluate(dest.addr, context) & 524287;
            bytes2.push(dest.m << 6 | (dest.i ? 1 : 0) << 5 | (dest.x ? 1 : 0) << 4 | (dest.y ? 1 : 0) << 3 | (a & 458752) >> 16, (a & 65280) >> 8, a & 255);
          }
          break;
        case OPCODES2.LOOP:
        case OPCODES2.LOOPS:
          {
            size2 = op === OPCODES2.LOOP ? 4 : 3;
            const a = evaluate(addr.addr, context) & 65535;
            let r = a;
            if (addr.m === 0) {
              const npc = pc + size2 & 65535;
              r = a - npc;
              if (size2 === 3) {
                if (r > 127 || r < -128) {
                  err(`Attempted to loop beyond short range`);
                }
              } else {
                if (r > 32767 || r < -32768) {
                  err(`Attempted to loop beyond range`);
                }
              }
            }
            bytes2.push(128 | reg.idx, addr.m << 6 | (addr.i ? 1 : 0) << 5 | (addr.x ? 1 : 0) << 4 | (addr.y ? 1 : 0) << 3 | (size2 === 3 ? 1 : 0));
            if (size2 === 3) {
              bytes2.push(r & 255);
            } else {
              bytes2.push((r & 65280) >> 8, r & 255);
            }
          }
          break;
        case OPCODES2.CALL:
        case OPCODES2.CALLS:
        case OPCODES2.BR:
        case OPCODES2.BRS:
          {
            size2 = op === OPCODES2.CALL || op === OPCODES2.BR ? 4 : 3;
            const isCall = op === OPCODES2.CALL || op === OPCODES2.CALLS;
            const a = evaluate(addr.addr, context) & 65535;
            let r = a;
            if (addr.m === 0) {
              const npc = pc + size2 & 65535;
              r = a - npc;
            }
            let flagSpecific = false;
            if (!flag && !condition || flag) {
              const neg = flag && flag.neg;
              const flg = flag && flag.flag || 0;
              bytes2.push(144 | (neg ? 1 : 0) << 3 | flg);
              if (flag)
                flagSpecific = true;
            } else {
              switch (condition.conditional) {
                case "==":
                  bytes2.push(144);
                  flagSpecific = true;
                  break;
                case "!=":
                  bytes2.push(152);
                  flagSpecific = true;
                  break;
                case "s<=":
                  bytes2.push(144 | 3);
                  break;
                case "s<":
                  bytes2.push(144 | 2);
                  break;
                case "s>=":
                  bytes2.push(144 | 5);
                  break;
                case "s>":
                  bytes2.push(144 | 4);
                  break;
                case "u<=":
                  bytes2.push(144 | 11);
                  break;
                case "u<":
                  bytes2.push(144 | 10);
                  break;
                case "u>=":
                  bytes2.push(144 | 13);
                  break;
                case "u>":
                  bytes2.push(144 | 12);
                  break;
              }
            }
            bytes2.push(addr.m << 6 | (addr.i ? 1 : 0) << 5 | (addr.x ? 1 : 0) << 4 | (addr.y ? 1 : 0) << 3 | (!flagSpecific ? 1 : 0) << 2 | (isCall ? 1 : 0) << 1 | (size2 === 3 ? 1 : 0));
            if (size2 === 3) {
              bytes2.push(r & 255);
            } else {
              bytes2.push((r & 65280) >> 8, r & 255);
            }
          }
          break;
        case OPCODES2.ADD:
        case OPCODES2.SUB:
        case OPCODES2.CMP:
        case OPCODES2.AND:
        case OPCODES2.OR:
        case OPCODES2.TEST:
        case OPCODES2.XOR: {
          size2 = imm ? 1 + dest.size : 2;
          if (imm) {
            bytes2.push({
              [OPCODES2.ADD]: 72,
              [OPCODES2.SUB]: 80,
              [OPCODES2.CMP]: 88,
              [OPCODES2.AND]: 96,
              [OPCODES2.OR]: 104,
              [OPCODES2.TEST]: 112,
              [OPCODES2.XOR]: 120
            }[op] | dest.idx);
            if (dest.size === 1) {
              bytes2.push(evaluate(imm, context) & 255);
            } else {
              const v = evaluate(imm, context) & 65535;
              bytes2.push((v & 65280) >> 8);
              bytes2.push(v & 255);
            }
          } else {
            bytes2.push({
              [OPCODES2.ADD]: 1,
              [OPCODES2.SUB]: 2,
              [OPCODES2.CMP]: 3,
              [OPCODES2.AND]: 4,
              [OPCODES2.OR]: 5,
              [OPCODES2.TEST]: 6,
              [OPCODES2.XOR]: 7
            }[op]);
            bytes2.push(dest.idx << 4 | source.idx);
          }
          break;
        }
      }
    } catch (err2) {
      bytes2 = void 0;
      if (fail) {
        throw err2;
      }
      if (!err2.message.startsWith("Could not locate")) {
        throw err2;
      }
    }
    return { size: size2, bytes: bytes2 };
  }
  var block_id = 0;
  var macro_id = 0;
  function assemble(ast, global2, context) {
    try {
      depth += 1;
      debug(">");
      global2 = global2 || createScope();
      if (!context) {
        context = global2;
      }
      if (!ast) {
        err(`Tried to assemble an undefined AST.`);
      }
      if (!ast.forEach) {
        if (ast.type === TOKENS.BLOCK && ast.block) {
          return assemble(ast.block, global2, context);
        }
        err(`Tried to assemble invalid AST ${JSON.stringify(ast)}`);
      }
      for (let node of ast) {
        lastPos = node.pos;
        switch (node.type) {
          default:
          case TOKENS.COMMENT:
            {
            }
            break;
          case TOKENS.IMPORT_DIRECTIVE:
            {
              const name = node.path.value;
              debug(`IMPO ${name}...`);
              const fileContents = importProvider.tryImport(name);
              debug(`PARS ${name}...`);
              const ast2 = parser.parse(fileContents);
              try {
                debug(`ASM  ${name}...`);
                assemble(ast2, global2, context);
              } catch (err2) {
                throw err2;
              } finally {
                debug(`DONE ${name}`);
                importProvider.importFinally();
              }
            }
            break;
          case TOKENS.NAMESPACE_DIRECTIVE:
            {
              const name = node.name.ident;
              if (name !== "__current__") {
                debug(`NSPC ${node.name.ident}...`);
                const newContext = createScope(SCOPE.TYPES.NAMESPACE, context, name);
                assemble(node.block, global2, newContext);
              } else {
                assemble(node.block, global2, context);
              }
            }
            break;
          case TOKENS.SEGMENT_DIRECTIVE:
            {
              const name = node.name.ident;
              if (name !== "__current__") {
                let baseAddr = evaluate(node.addr, context);
                let matchingSegments = global2[SCOPE.SEGMENTS].filter((seg) => (seg[SCOPE.BASE] === baseAddr || seg[SCOPE.ADJUSTED] === baseAddr) && getScopeChain(seg[SCOPE.PARENT], global2) !== getScopeChain(context, global2));
                let newContext;
                if (matchingSegments.length > 0) {
                  matchingSegments = matchingSegments.sort((a, b2) => a[SCOPE.ADDR] < b2[SCOPE.ADDR] ? -1 : a[SCOPE.ADDR] > b2[SCOPE.ADDR] ? 1 : 0);
                  const nextAddr = matchingSegments[matchingSegments.length - 1][SCOPE.ADDR];
                  newContext = createScope(SCOPE.TYPES.SEGMENT, context, node.name.ident, nextAddr, node.append);
                  newContext[SCOPE.ADJUSTED] = baseAddr;
                } else {
                  newContext = createScope(SCOPE.TYPES.SEGMENT, context, node.name.ident, baseAddr, node.append);
                }
                if (global2[SCOPE.SEGMENTS].indexOf(newContext) < 0) {
                  global2[SCOPE.SEGMENTS].push(newContext);
                }
                debug(`SEGM ${newContext[SCOPE.NAME]}...`);
                assemble(node.block, global2, newContext);
              } else {
                assemble(node.block, global2, context);
              }
            }
            break;
          case TOKENS.BLOCK:
            {
              const addr = context[SCOPE.ADDR];
              const name = `block-${++block_id}`;
              debug(`BLCK ${name}...`);
              const newContext = createScope(SCOPE.TYPES.BLOCK, context, name, addr, false);
              try {
                assemble(node.block, global2, newContext);
              } catch (err2) {
              }
              newContext[SCOPE.DATA].forEach((data) => {
                context[SCOPE.DATA][context[SCOPE.ADDR]] = {
                  asm: data.asm,
                  bytes: data.bytes,
                  size: data.size,
                  pc: data.pc,
                  context: data.context
                };
                context[SCOPE.ADDR] += data.size;
              });
            }
            break;
          case TOKENS.CONST_DIRECTIVE:
            {
              if (context[SCOPE.CONTENTS].hasOwnProperty(node.name.ident)) {
                err(`Cannot redefine constant ${node.name.ident}`);
              }
              context[SCOPE.CONTENTS][node.name.ident] = node.value;
            }
            break;
          case TOKENS.MACRO_DIRECTIVE:
            {
              if (context[SCOPE.CONTENTS].hasOwnProperty(node.name.ident)) {
                err(`Cannot redefine macro ${node.name.ident}`);
              }
              context[SCOPE.CONTENTS][node.name.ident] = {
                params: node.params,
                ast: node.ast
              };
            }
            break;
          case TOKENS.LABEL: {
            if (context[SCOPE.TYPE] !== SCOPE.TYPES.SEGMENT && context[SCOPE.TYPE] !== SCOPE.TYPES.BLOCK) {
              err(`Unexpected label ${node.name.ident} in ${context[SCOPE.NAME]} scope`);
            }
            context[SCOPE.CONTENTS][node.name.ident] = context[SCOPE.ADDR];
            break;
          }
          case TOKENS.WORD_DIRECTIVE:
          case TOKENS.BYTE_DIRECTIVE:
            {
              if (context[SCOPE.TYPE] !== SCOPE.TYPES.SEGMENT && context[SCOPE.TYPE] !== SCOPE.TYPES.BLOCK) {
                err(`Unexpected data directive in ${context[SCOPE.NAME]} scope`);
              }
              const incAmount = node.type === TOKENS.WORD_DIRECTIVE ? 2 : 1;
              const size2 = node.size ? evaluate(node.size, context) : -1;
              const data = (node.data || []).map((e) => evaluate(e, context));
              while (data.length < size2) {
                data.push(0);
              }
              const bytes2 = [];
              data.forEach((v) => {
                if (incAmount === 1) {
                  bytes2.push(v & 255);
                } else {
                  bytes2.push((v & 65280) >> 8);
                  bytes2.push(v & 255);
                }
              });
              context[SCOPE.DATA][context[SCOPE.ADDR]] = {
                asm: node,
                size: bytes2.length,
                bytes: bytes2
              };
              context[SCOPE.ADDR] += bytes2.length;
            }
            break;
          case TOKENS.STRING_DIRECTIVE: {
            if (context[SCOPE.TYPE] !== SCOPE.TYPES.SEGMENT && context[SCOPE.TYPE] !== SCOPE.TYPES.BLOCK) {
              err(`Unexpected string directive in ${context[SCOPE.NAME]} scope`);
            }
            const data = (node.data || []).map((el) => evaluate(el, context)).reduce((bytes2, data2) => {
              if (typeof data2 === "string") {
                bytes2.push(...data2.split("").map((ch) => ch.charCodeAt(0)));
              } else {
                bytes2.push(data2);
              }
              return bytes2;
            }, []);
            context[SCOPE.DATA][context[SCOPE.ADDR]] = {
              asm: node,
              bytes: data,
              size: data.length,
              pc: context[SCOPE.ADDR],
              context
            };
            context[SCOPE.ADDR] += data.length;
            break;
          }
          case TOKENS.MACRO_EXPANSION:
            {
              const macro = findIdent(node.name.ident, context);
              const addr = context[SCOPE.ADDR];
              const name = `macro-${++macro_id}`;
              debug(`MCRO ${name}...`);
              const newContext = createScope(SCOPE.TYPES.BLOCK, context, name, addr, false);
              const argsArray = node.args;
              macro.params.forEach((param, idx) => {
                newContext[SCOPE.CONTENTS][param.ident] = {
                  params: [],
                  ast: argsArray[idx]
                };
              });
              try {
                assemble(macro.ast, global2, newContext);
              } catch (err2) {
              }
              newContext[SCOPE.DATA].forEach((data) => {
                context[SCOPE.DATA][context[SCOPE.ADDR]] = {
                  asm: data.asm,
                  bytes: data.bytes,
                  size: data.size,
                  pc: data.pc,
                  context: data.context
                };
                context[SCOPE.ADDR] += data.size;
              });
            }
            break;
          case TOKENS.INSTRUCTION: {
            if (context[SCOPE.TYPE] !== SCOPE.TYPES.SEGMENT && context[SCOPE.TYPE] !== SCOPE.TYPES.BLOCK) {
              err(`Unexpected code in ${context[SCOPE.NAME]} scope`);
            }
            const { size: size2, bytes: bytes2 } = tryToAssemble(node, context, context[SCOPE.ADDR]);
            context[SCOPE.DATA][context[SCOPE.ADDR]] = {
              asm: node,
              bytes: bytes2,
              size: size2,
              pc: context[SCOPE.ADDR],
              context
            };
            context[SCOPE.ADDR] += size2;
            break;
          }
        }
      }
      const segments = global2[SCOPE.SEGMENTS];
      let code = [];
      if (depth < 2) {
        debug("CODE", segments.map((segment) => segment[SCOPE.NAME]).join(", "));
        for (let segment of segments) {
          const data = segment[SCOPE.DATA];
          const contents = segment[SCOPE.CONTENTS];
          const bytes2 = data.map((datum, idx) => {
            if (datum) {
              const { asm, bytes: bytes3, context: context2, pc } = datum;
              if (bytes3 === void 0) {
                try {
                  debug("TTAS");
                  const { bytes: newBytes } = tryToAssemble(asm, context2, pc, true);
                  if (newBytes) {
                    datum.bytes = newBytes;
                  } else {
                    err(`Could not locate symbol`);
                  }
                } catch (err2) {
                  throw err2;
                }
              }
              if (asm.bytes) {
                const matchBytes = asm.bytes.map((byte) => evaluate(byte, context2));
                if (datum.bytes.join(",") !== matchBytes.join(",")) {
                  err(`Bytes mismatched at ${asm.pos.line}:${asm.pos.column}. Expected ${matchBytes.map((b2) => b2.toString(16).padStart(2, "0"))}; saw ${datum.bytes.map((b2) => b2.toString(16).padStart(2, "0"))}`);
                }
              }
              return { idx, bytes: datum.bytes };
            }
          });
          const arr = bytes2.reduce((arr2, item) => {
            if (!item) {
              err(`Non-contiguous code or data in segment ${segment[SCOPE.NAME]}`);
            }
            arr2.push(...item.bytes);
            return arr2;
          }, []);
          code.push({
            name: segment[SCOPE.NAME],
            addr: segment[SCOPE.BASE],
            length: arr.length,
            data: arr,
            contents,
            chain: getScopeChain(segment, global2),
            adj: !!segment[SCOPE.ADJUSTED]
          });
        }
      }
      return code.sort((a, b2) => a.addr < b2.addr ? -1 : a.addr > b2.addr ? 1 : 0);
    } finally {
      debug("<");
      depth -= 1;
    }
  }

  // src/www/simple/util/keyboard.js
  function type({ keyboard, str } = {}) {
    Array.from(str).forEach((ch) => {
      const c = ch.charCodeAt(0);
      switch (c) {
        case 8220:
        case 8221:
          keyboard.keyPressed(34);
          break;
        case 10:
          keyboard.keyPressed(13);
          break;
        default:
          keyboard.keyPressed(c);
      }
    });
  }
  async function paste({ keyboard } = {}) {
    const str = await navigator.clipboard.readText();
    type({ keyboard, str });
  }

  // src/www/simple/components/CodeEditor.jsx
  var CodeEditor = class extends import_react13.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        code: props.store.code,
        log: "",
        view: "edit",
        curProgram: "__programs"
      };
      this.editor = import_react13.default.createRef();
      this.codeChanged = this.codeChanged.bind(this);
      this.codeChangedOutside = this.codeChangedOutside.bind(this);
      this.storeChanged = this.storeChanged.bind(this);
      this.assembleClicked = this.assembleClicked.bind(this);
      this.showEditor = this.showEditor.bind(this);
      this.showLogs = this.showLogs.bind(this);
      this.selectProgram = this.selectProgram.bind(this);
      this.saveProgram = this.saveProgram.bind(this);
      this.saveProgramAs = this.saveProgramAs.bind(this);
      this.editorDidMount = this.editorDidMount.bind(this);
      this.program = import_react13.default.createRef();
    }
    editorDidMount() {
      if (window.define && window.define.amd) {
        window.define.amd = false;
      }
    }
    storeChanged() {
      if (this.state.code !== this.props.store.code) {
        this.codeChangedOutside(this.props.store);
      }
    }
    componentDidMount() {
      this.props.store.addListener(this.storeChanged);
    }
    componentWillUnmount() {
      this.props.store.removeListener(this.storeChanged);
    }
    showEditor() {
      this.setState({
        view: "edit"
      });
    }
    showLogs() {
      this.setState({
        view: "logs"
      });
    }
    selectProgram(e) {
      const newValue = e.target.value;
      const { store: store3 } = this.props;
      store3.loadProgram(newValue);
      this.setState(() => ({ code: store3.code, curProgram: newValue }));
    }
    saveProgram() {
      let theName = this.program.current.value;
      store.saveProgram(theName);
      this.setState(() => ({}));
    }
    saveProgramAs() {
      const theName = prompt("Name for program?");
      store.saveProgram(theName);
      this.setState(() => ({ curProgram: theName }));
    }
    codeChanged(e, v) {
      const { store: store3 } = this.props;
      const code = v || e.target.value;
      store3.code = code;
      this.setState({ code });
    }
    codeChangedOutside(store3) {
      const code = store3.code;
      this.setState({ code });
    }
    assembleClicked() {
      const { store: store3 } = this.props;
      const { code, computer } = store3;
      const firstLineNumber = parseInt(code, 10);
      if (Number.isNaN(firstLineNumber)) {
        const asm = code;
        const memory = computer.memory;
        try {
          const ast = parser.parse(asm);
          const globals = createScope();
          globals[SCOPE.CONTENTS] = Object.assign({}, vectors);
          const segments = assemble(ast, globals);
          segments.forEach((segment) => {
            const data = segment.data;
            const name = segment.name;
            data.forEach((byte, idx) => memory.writeByte(segment.addr + idx, byte));
          });
          this.setState({ log: "Assembled successfully.\n" });
        } catch (e) {
          this.setState({ log: e.message, view: "logs" });
        }
      } else {
        type({ keyboard: store3.devices.keyboard, str: `
NEW
${code}

RUN
` });
      }
    }
    render() {
      const { store: store3 } = this.props;
      const { codes = [] } = store3;
      const { code, log, view, curProgram } = this.state;
      return /* @__PURE__ */ import_react13.default.createElement("div", {
        className: "panel column"
      }, /* @__PURE__ */ import_react13.default.createElement("div", {
        className: "nogrow noshrink row"
      }, /* @__PURE__ */ import_react13.default.createElement("button", {
        onClick: this.showEditor,
        className: "nogrow noshrink",
        title: "Editor"
      }, /* @__PURE__ */ import_react13.default.createElement(import_react_icons_kit.Icon, {
        icon: import_pencil.pencil
      })), /* @__PURE__ */ import_react13.default.createElement("button", {
        onClick: this.showLogs,
        className: "nogrow noshrink",
        title: "Logs"
      }, /* @__PURE__ */ import_react13.default.createElement(import_react_icons_kit.Icon, {
        icon: import_eye.eye
      })), /* @__PURE__ */ import_react13.default.createElement("div", {
        style: { display: "inline-block" },
        className: "grow shrink"
      }), /* @__PURE__ */ import_react13.default.createElement("select", {
        value: curProgram,
        onChange: this.selectProgram,
        ref: this.program
      }, /* @__PURE__ */ import_react13.default.createElement("option", {
        value: "_selected"
      }, "Programs..."), codes.sort(({ name: a }, { name: b2 }) => a < b2 ? -1 : a > b2 ? 1 : 0).map((el) => /* @__PURE__ */ import_react13.default.createElement("option", {
        key: el.name,
        value: el.name
      }, el.name))), /* @__PURE__ */ import_react13.default.createElement("button", {
        onClick: this.saveProgram,
        className: "nogrow noshrink",
        title: "Save"
      }, /* @__PURE__ */ import_react13.default.createElement(import_react_icons_kit.Icon, {
        icon: import_floppyDisk.floppyDisk
      })), /* @__PURE__ */ import_react13.default.createElement("button", {
        onClick: this.saveProgramAs,
        className: "nogrow noshrink",
        title: "Save As..."
      }, /* @__PURE__ */ import_react13.default.createElement(import_react_icons_kit.Icon, {
        icon: import_copy.copy
      })), /* @__PURE__ */ import_react13.default.createElement("div", {
        style: { display: "inline-block" },
        className: "grow shrink"
      }), /* @__PURE__ */ import_react13.default.createElement("button", {
        className: "nogrow noshrink",
        title: "Assemble",
        onClick: this.assembleClicked
      }, /* @__PURE__ */ import_react13.default.createElement(import_react_icons_kit.Icon, {
        icon: import_magicWand.magicWand
      }))), view === "edit" ? /* @__PURE__ */ import_react13.default.createElement("textarea", {
        className: "grow shink",
        height: "100%",
        language: "asm",
        value: code,
        theme: "dark",
        onMount: this.editorDidMount,
        onChange: this.codeChanged,
        options: {
          lineNumbersMinChars: 3,
          fixedOverflowWidgets: true,
          minimap: { enabled: false }
        }
      }, code) : /* @__PURE__ */ import_react13.default.createElement("code", {
        className: "nogrow noshrink",
        style: { whiteSpace: "pre-wrap" }
      }, log));
    }
  };

  // src/www/simple/components/ComputerState.jsx
  var import_react16 = __toModule(require_react());

  // src/www/simple/components/AutoUpdateComponent.jsx
  var import_react15 = __toModule(require_react());
  var columnWidths = [48, ...Array.from({ length: 8 }, () => 24), 16, ...Array.from({ length: 8 }, () => 12)];
  var AutoUpdateComponent = class extends import_react15.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        updating: false
      };
      this.setupUpdates = this.setupUpdates.bind(this);
      this.clearUpdates = this.clearUpdates.bind(this);
      this.doUpdate = this.doUpdate.bind(this);
    }
    doUpdate() {
      this.setState((next2) => ({ updating: !next2.updating }));
    }
    setupUpdates() {
      const { store: store3 } = this.props;
      this.clearUpdates();
      if (store3.autoUpdate)
        this._cancelUpdate = setInterval(this.doUpdate, store3.updateInterval);
    }
    clearUpdates() {
      clearInterval(this._cancelUpdate);
    }
    componentDidMount() {
      const { store: store3 } = this.props;
      store3.addListener(this.setupUpdates);
      store3.addListener(this.doUpdate);
      this.setupUpdates();
    }
    componentWillUnmount() {
      this.clearUpdates();
    }
  };

  // src/www/simple/components/ComputerState.jsx
  var import_react_icons_kit2 = __toModule(require_react_icons_kit());
  var import_play2 = __toModule(require_play2());
  var import_stop = __toModule(require_stop());
  var import_info = __toModule(require_info());
  var ComputerState = class extends AutoUpdateComponent {
    constructor(props) {
      super(props);
      this.singleRefreshClicked = this.singleRefreshClicked.bind(this);
    }
    singleRefreshClicked() {
      this.setState({});
    }
    render() {
      return /* @__PURE__ */ import_react16.default.createElement(import_react16.default.Fragment, null);
      const { store: store3 } = this.props;
      const { computer, diagnostics, devices: { screen } } = store3;
      const { updating, updateFrequency } = this.state;
      const statsHeader = ["Activity", "#Ticks", "#\xB5OPs", "#Insts", "#aOPs", "#Slices", "\xB5OP/slice", "i/slice", "time(ms)", "time/slice", "m\xB5OP/s", "mips", "maOP/s", "\xB5OP/i"];
      const regsHeader = ["", "r: A", "r: B", "r: C", "r: D", "r: X", "r: Y", "r:BP", "r:SP", "STAT", "r:PC", "r:MP", "r:MM"];
      const dumpedStats = diagnostics.dumpStatistics();
      const stats = [
        diagnostics.state,
        dumpedStats.ticks,
        dumpedStats.tasks,
        dumpedStats.insts,
        dumpedStats.aluOps,
        dumpedStats.slices,
        dumpedStats.microOpsPerSlice,
        dumpedStats.instsPerSlice,
        dumpedStats.totalTime,
        dumpedStats.timeThisSlice,
        dumpedStats.MMOPs,
        dumpedStats.MIPs,
        dumpedStats.MAOPs,
        dumpedStats.microOpsPerInst
      ];
      const regs = ["", ...diagnostics.dumpRegisters().map(toHex4)];
      const flags = diagnostics.dumpFlags();
      const fpu = diagnostics.dumpFPU();
      return /* @__PURE__ */ import_react16.default.createElement("div", {
        className: "panel"
      }, /* @__PURE__ */ import_react16.default.createElement("div", null, /* @__PURE__ */ import_react16.default.createElement("button", {
        onClick: this.singleRefreshClicked,
        title: "Update"
      }, /* @__PURE__ */ import_react16.default.createElement(import_react_icons_kit2.Icon, {
        icon: import_info.info
      }))), /* @__PURE__ */ import_react16.default.createElement("table", null, /* @__PURE__ */ import_react16.default.createElement("tbody", null, Array.from({ length: statsHeader.length }, (_, idx) => /* @__PURE__ */ import_react16.default.createElement("tr", {
        key: idx
      }, /* @__PURE__ */ import_react16.default.createElement("th", null, statsHeader[idx]), /* @__PURE__ */ import_react16.default.createElement("td", {
        style: { width: "25%" }
      }, stats[idx]), /* @__PURE__ */ import_react16.default.createElement("th", null, regsHeader[idx]), /* @__PURE__ */ import_react16.default.createElement("td", {
        style: { width: "25%" }
      }, regs[idx]))), /* @__PURE__ */ import_react16.default.createElement("tr", null, /* @__PURE__ */ import_react16.default.createElement("th", null, "Scr TSR"), /* @__PURE__ */ import_react16.default.createElement("td", null, numToString(round(screen._ticksSinceRaster, 0), { padDecimal: 0 })), /* @__PURE__ */ import_react16.default.createElement("th", null, "Scr TTS"), /* @__PURE__ */ import_react16.default.createElement("td", null, numToString(round(screen._ticksThisSecond, 0), { padDecimal: 0 }))), /* @__PURE__ */ import_react16.default.createElement("tr", null, /* @__PURE__ */ import_react16.default.createElement("th", null, "Scr TPS"), /* @__PURE__ */ import_react16.default.createElement("td", null, numToString(round(screen._ticksPerSecond, 4), { padDecimal: 4 })), /* @__PURE__ */ import_react16.default.createElement("th", null, "Scr TBR"), /* @__PURE__ */ import_react16.default.createElement("td", null, numToString(round(screen._ticksPerRaster, 4), { padDecimal: 4 }))))), /* @__PURE__ */ import_react16.default.createElement("table", null, /* @__PURE__ */ import_react16.default.createElement("thead", null, /* @__PURE__ */ import_react16.default.createElement("tr", null, /* @__PURE__ */ import_react16.default.createElement("th", null, "7.EX"), /* @__PURE__ */ import_react16.default.createElement("th", null, "6.ID"), /* @__PURE__ */ import_react16.default.createElement("th", null, "5.IS"), /* @__PURE__ */ import_react16.default.createElement("th", null, "4.SS"), /* @__PURE__ */ import_react16.default.createElement("th", null, "3.N"), /* @__PURE__ */ import_react16.default.createElement("th", null, "2.C"), /* @__PURE__ */ import_react16.default.createElement("th", null, "1.V"), /* @__PURE__ */ import_react16.default.createElement("th", null, "0.Z"))), /* @__PURE__ */ import_react16.default.createElement("tbody", null, /* @__PURE__ */ import_react16.default.createElement("tr", null, /* @__PURE__ */ import_react16.default.createElement("td", null, flags.EX ? "+" : "-"), /* @__PURE__ */ import_react16.default.createElement("td", null, flags.ID ? "+" : "-"), /* @__PURE__ */ import_react16.default.createElement("td", null, flags.IS ? "+" : "-"), /* @__PURE__ */ import_react16.default.createElement("td", null, flags.SS ? "+" : "-"), /* @__PURE__ */ import_react16.default.createElement("td", null, flags.N ? "+" : "-"), /* @__PURE__ */ import_react16.default.createElement("td", null, flags.C ? "+" : "-"), /* @__PURE__ */ import_react16.default.createElement("td", null, flags.V ? "+" : "-"), /* @__PURE__ */ import_react16.default.createElement("td", null, flags.Z ? "+" : "-")))), /* @__PURE__ */ import_react16.default.createElement("table", null, /* @__PURE__ */ import_react16.default.createElement("tbody", null, fpu.map((n, idx) => /* @__PURE__ */ import_react16.default.createElement("tr", {
        key: idx
      }, /* @__PURE__ */ import_react16.default.createElement("td", null, `${idx}.`), /* @__PURE__ */ import_react16.default.createElement("td", null, `${n}`))))));
    }
  };

  // src/www/simple/components/Disassembler.jsx
  var import_react17 = __toModule(require_react());
  var import_react_icons_kit3 = __toModule(require_react_icons_kit());
  var import_info2 = __toModule(require_info());
  var Disassembler = class extends AutoUpdateComponent {
    constructor(props) {
      super(props);
      this.state = {
        address: "PC",
        count: "128"
      };
      this.addressChanged = this.addressChanged.bind(this);
      this.countChanged = this.countChanged.bind(this);
      this.refreshClicked = this.refreshClicked.bind(this);
      this.refreshIfNeeded = this.refreshIfNeeded.bind(this);
    }
    jumpTo(address) {
      this.setState({ address });
    }
    addressChanged(e) {
      const address = e.target.value || "0x00000";
      this.setState({ address });
    }
    countChanged(e) {
      const count = e.target.value || "128";
      this.setState({ count });
    }
    refreshClicked() {
      this.setState({});
    }
    refreshIfNeeded() {
      if (this.state.address === "PC") {
        this.refreshClicked();
      }
    }
    render() {
      const { store: store3 } = this.props;
      const { computer, diagnostics } = store3;
      const { address, count } = this.state;
      let realAddress = Number(address);
      if (address === "PC") {
        realAddress = computer.processor.registers.PC;
      }
      const asm = diagnostics.disassembleMemory({ start: Number(realAddress), length: Number(count) }).split("\n").map((str) => ({
        address: str.substr(0, 5),
        bytes: str.substr(7, 11).trim(),
        asm: str.substr(22).trim()
      }));
      return /* @__PURE__ */ import_react17.default.createElement("div", {
        className: "panel"
      }, /* @__PURE__ */ import_react17.default.createElement("div", null, /* @__PURE__ */ import_react17.default.createElement("label", null, "Address: ", /* @__PURE__ */ import_react17.default.createElement("input", {
        type: "text",
        value: address,
        size: 8,
        onChange: this.addressChanged
      })), /* @__PURE__ */ import_react17.default.createElement("label", null, "Count: ", /* @__PURE__ */ import_react17.default.createElement("input", {
        type: "text",
        value: count,
        size: 6,
        onChange: this.countChanged
      })), /* @__PURE__ */ import_react17.default.createElement("span", {
        className: "divider"
      }), /* @__PURE__ */ import_react17.default.createElement("button", {
        onClick: this.refreshClicked,
        title: "Refresh"
      }, /* @__PURE__ */ import_react17.default.createElement(import_react_icons_kit3.Icon, {
        icon: import_info2.info
      }))), /* @__PURE__ */ import_react17.default.createElement("code", null, asm.map((inst, idx) => /* @__PURE__ */ import_react17.default.createElement("div", {
        key: idx
      }, /* @__PURE__ */ import_react17.default.createElement("a", {
        style: { color: "currentColor" },
        href: "#",
        onClick: (e) => this.jumpTo("0x" + inst.address)
      }, inst.address), ":\xA0", /* @__PURE__ */ import_react17.default.createElement("span", {
        style: { display: "inline-block", width: "8em" }
      }, inst.bytes), /* @__PURE__ */ import_react17.default.createElement("span", null, inst.asm)))));
    }
  };

  // src/www/simple/components/FPS.jsx
  var import_react18 = __toModule(require_react());
  var FPS = class extends import_react18.default.Component {
    constructor(props) {
      super(props);
      this.domStats = import_react18.default.createRef();
      this.fpsStats = import_react18.default.createRef();
      this.cpuStats = import_react18.default.createRef();
    }
    compontWillUnmount() {
      const { store: { stats, fps, cpuStats } } = this.props;
      stats.dom.remove();
      fps.dom.remove();
      cpuStats.dom.remove();
    }
    componentDidMount() {
      const { store: { stats, fps, cpuStats } } = this.props;
      this.domStats.current.appendChild(stats.dom);
      this.fpsStats.current.appendChild(fps.dom);
      this.cpuStats.current.appendChild(cpuStats.dom);
    }
    render() {
      const { store: store3 } = this.props;
      return /* @__PURE__ */ import_react18.default.createElement("div", {
        className: "panel"
      }, /* @__PURE__ */ import_react18.default.createElement("div", {
        style: { display: "flex", flexDirection: "row", flexWrap: "wrap" }
      }, /* @__PURE__ */ import_react18.default.createElement("div", {
        ref: this.domStats
      }, "DOM"), /* @__PURE__ */ import_react18.default.createElement("div", {
        ref: this.fpsStats
      }, "Screen"), /* @__PURE__ */ import_react18.default.createElement("div", {
        ref: this.cpuStats
      }, "CPU")));
    }
  };

  // src/www/simple/components/ComputerScreen.jsx
  var import_react21 = __toModule(require_react());

  // src/www/simple/components/Keyboard.jsx
  var import_react20 = __toModule(require_react());

  // src/www/simple/components/Key.jsx
  var import_react19 = __toModule(require_react());

  // src/www/simple/assets/charset@3x.png
  var charset_3x_default = "./charset@3x-TJPOG2U2.png";

  // src/www/simple/components/Key.jsx
  var strOrAscii = (idx) => typeof idx === "string" ? idx.charCodeAt(0) : idx;
  var calcSpriteStyle = (idx, scale = 2) => {
    return {
      backgroundImage: `url(${charset_3x_default})`,
      backgroundPosition: `-${((strOrAscii(idx) & 15) + 2) * (8 * scale)}px -${(((strOrAscii(idx) & 240) >> 4) + 2) * (8 * scale)}px`
    };
  };
  var Key = ({
    which: [_, normal, normalShift, gr, grShift, ctrl],
    label,
    coord: [row, col],
    toggle = false,
    size: size2 = "key100",
    pressed = false,
    keyState: { isShift, isGr, isCtrl },
    style
  } = {}) => {
    const theKey = isCtrl ? ctrl : isGr && isShift ? grShift : isGr ? gr : isShift ? normalShift : normal;
    const theKeyShift = isShift ? 0 : isGr ? grShift : normalShift;
    const grKey = isGr ? 0 : gr;
    const grShiftKey = isGr ? 0 : grShift;
    const ctrlKey = isGr | isShift | isCtrl ? 0 : ctrl;
    return /* @__PURE__ */ import_react19.default.createElement("div", {
      style,
      className: `keycap ${pressed ? "pressed" : ""} ${size2}`,
      datavalue: strOrAscii(theKey),
      datarow: row,
      datacol: col,
      datatoggle: toggle ? "toggle" : void 0
    }, label ? /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "main label"
    }, label) : /* @__PURE__ */ import_react19.default.createElement(import_react19.default.Fragment, null, !(isShift || theKeyShift === theKey) && /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "shift",
      style: calcSpriteStyle(theKeyShift, 1)
    }), /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "main",
      style: calcSpriteStyle(theKey)
    }), /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "grRow"
    }, /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "gr",
      style: calcSpriteStyle(grKey, 1)
    }), /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "grShift",
      style: calcSpriteStyle(grShiftKey, 1)
    })), /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "ctrl",
      style: calcSpriteStyle(ctrlKey, 1)
    })));
  };

  // src/www/simple/assets/Logo@3x.png
  var Logo_3x_default = "./Logo@3x-62KRPELE.png";

  // src/www/simple/components/Keyboard.jsx
  var Keyboard2 = class extends import_react20.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        isGr: false,
        isShift: false,
        isCtrl: false
      };
      this.keyUp = this.keyUp.bind(this);
      this.keyDown = this.keyDown.bind(this);
      this.realKeyPressed = this.realKeyPressed.bind(this);
      this.realKeyDown = this.realKeyDown.bind(this);
      this.realKeyUp = this.realKeyUp.bind(this);
    }
    componentDidMount() {
      return;
      const { store: store3 } = this.props;
      const { keyboard } = store3.devices;
      this._watcher = setInterval(() => {
        this.setState({
          isGr: keyboard.isGr,
          isCtrl: keyboard.isCtl,
          isShift: keyboard.isShifted
        });
      }, 100);
      document.addEventListener("keypress", this.realKeyPressed);
      document.addEventListener("keydown", this.realKeyDown);
      document.addEventListener("keyup", this.realKeyUp);
    }
    componentWillUnmount() {
      clearInterval(this._watcher);
      document.removeEventListener("keypress", this.realKeyPressed);
      document.removeEventListener("keydown", this.realKeyDown);
      document.removeEventListener("keyup", this.realKeyUp);
    }
    realKeyPressed(e) {
      if (e.target.tagName === "INPUT" && !e.target.classList.contains("keyboard")) {
        return;
      }
      if (e.target.tagName === "TEXTAREA") {
        return;
      }
      e.preventDefault();
    }
    realKeyDown(e) {
      if (e.target.tagName === "INPUT" && !e.target.classList.contains("keyboard")) {
        return;
      }
      if (e.target.tagName === "TEXTAREA") {
        return;
      }
      const { store: store3 } = this.props;
      const { keyboard } = store3.devices;
      keyboard.keyDown(e.nativeEvent ? e.nativeEvent.code : e.code);
      e.preventDefault();
    }
    realKeyUp(e) {
      if (e.target.tagName === "INPUT" && !e.target.classList.contains("keyboard")) {
        return;
      }
      if (e.target.tagName === "TEXTAREA") {
        return;
      }
      const { store: store3 } = this.props;
      const { keyboard } = store3.devices;
      keyboard.keyUp(e.nativeEvent ? e.nativeEvent.code : e.code);
      e.preventDefault();
    }
    keyDown(evt) {
      const { store: store3 } = this.props;
      const { keyboard } = store3.devices;
      let target = evt.target;
      if (!target.classList.contains("keycap"))
        target = target.parentElement;
      const row = Number(target.getAttribute("datarow"));
      const col = Number(target.getAttribute("datacol"));
      const toggle = target.getAttribute("datatoggle");
      const value = target.getAttribute("datavalue");
      if (row && row > -1 && col >= 0) {
        const rowNum = Number(row);
        const colNum = Number(col);
        const byte = Number(value);
        if (toggle) {
          const keyState = keyboard.getRawKey(rowNum, colNum);
          if (!keyState)
            keyboard.setRawKey(rowNum, colNum);
          else
            keyboard.clearRawKey(rowNum, colNum);
        } else {
          keyboard.setRawKey(rowNum, colNum);
          keyboard.keyPressed(byte);
        }
      }
      if (row === -1) {
        switch (col) {
          case 0:
            paste({ keyboard });
            break;
          default:
        }
      }
    }
    keyUp(evt) {
      const { store: store3 } = this.props;
      const { keyboard } = store3.devices;
      let target = evt.target;
      if (!target.classList.contains("keycap"))
        target = target.parentElement;
      const row = Number(target.getAttribute("datarow"));
      const col = Number(target.getAttribute("datacol"));
      const toggle = target.getAttribute("datatoggle");
      const value = target.getAttribute("datavalue");
      if (row && row > -1 && col >= 0) {
        const rowNum = Number(row);
        const colNum = Number(col);
        const byte = Number(value);
        if (!toggle) {
          keyboard.clearRawKey(rowNum, colNum);
        }
      }
    }
    render() {
      const keyState = this.state;
      const mode = this.props.mode || "full";
      return /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardPanel",
        onMouseDown: this.keyDown,
        onMouseUp: this.keyUp
      }, /* @__PURE__ */ import_react20.default.createElement("img", {
        style: { position: "absolute", right: 0, flex: "0 0 auto", height: "40px", mixBlendMode: "exclusion" },
        src: Logo_3x_default
      }), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardSection"
      }, /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        style: { minWidth: "50px" },
        coord: [-1, 0],
        label: "Paste",
        which: [],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement("span", {
        style: { flex: "1 1 80%" }
      })), mode === "full" && /* @__PURE__ */ import_react20.default.createElement(import_react20.default.Fragment, null, /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 0],
        which: KEYBOARD_MAP[0][0],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 1],
        which: KEYBOARD_MAP[0][1],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 2],
        which: KEYBOARD_MAP[0][2],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 3],
        which: KEYBOARD_MAP[0][3],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 4],
        which: KEYBOARD_MAP[0][4],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 5],
        which: KEYBOARD_MAP[0][5],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 6],
        which: KEYBOARD_MAP[0][6],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 7],
        which: KEYBOARD_MAP[0][7],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 8],
        which: KEYBOARD_MAP[0][8],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 9],
        which: KEYBOARD_MAP[0][9],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 10],
        which: KEYBOARD_MAP[0][10],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 11],
        which: KEYBOARD_MAP[0][11],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 12],
        which: KEYBOARD_MAP[0][12],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 13],
        label: "Back",
        which: KEYBOARD_MAP[0][13],
        keyState,
        size: "key125"
      })), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 0],
        label: "tab",
        which: KEYBOARD_MAP[1][0],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 1],
        which: KEYBOARD_MAP[1][1],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 2],
        which: KEYBOARD_MAP[1][2],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 3],
        which: KEYBOARD_MAP[1][3],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 4],
        which: KEYBOARD_MAP[1][4],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 5],
        which: KEYBOARD_MAP[1][5],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 6],
        which: KEYBOARD_MAP[1][6],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 7],
        which: KEYBOARD_MAP[1][7],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 8],
        which: KEYBOARD_MAP[1][8],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 9],
        which: KEYBOARD_MAP[1][9],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 10],
        which: KEYBOARD_MAP[1][10],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 11],
        which: KEYBOARD_MAP[1][11],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 12],
        which: KEYBOARD_MAP[1][12],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 13],
        which: KEYBOARD_MAP[1][13],
        keyState
      })), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 0],
        toggle: true,
        label: "caps",
        which: KEYBOARD_MAP[2][0],
        keyState,
        size: "key150"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 1],
        which: KEYBOARD_MAP[2][1],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 2],
        which: KEYBOARD_MAP[2][2],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 3],
        which: KEYBOARD_MAP[2][3],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 4],
        which: KEYBOARD_MAP[2][4],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 5],
        which: KEYBOARD_MAP[2][5],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 6],
        which: KEYBOARD_MAP[2][6],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 7],
        which: KEYBOARD_MAP[2][7],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 8],
        which: KEYBOARD_MAP[2][8],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 9],
        which: KEYBOARD_MAP[2][9],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 10],
        which: KEYBOARD_MAP[2][10],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 11],
        which: KEYBOARD_MAP[2][11],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 13],
        label: "enter",
        which: KEYBOARD_MAP[2][13],
        keyState,
        size: "key125"
      })), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 0],
        toggle: true,
        label: "shift",
        which: KEYBOARD_MAP[3][0],
        keyState,
        size: "key175"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 1],
        which: KEYBOARD_MAP[3][1],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 2],
        which: KEYBOARD_MAP[3][2],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 3],
        which: KEYBOARD_MAP[3][3],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 4],
        which: KEYBOARD_MAP[3][4],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 5],
        which: KEYBOARD_MAP[3][5],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 6],
        which: KEYBOARD_MAP[3][6],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 7],
        which: KEYBOARD_MAP[3][7],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 8],
        which: KEYBOARD_MAP[3][8],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 9],
        which: KEYBOARD_MAP[3][9],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 10],
        which: KEYBOARD_MAP[3][10],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 12],
        which: KEYBOARD_MAP[3][12],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 13],
        toggle: true,
        label: "shift",
        which: KEYBOARD_MAP[3][13],
        keyState
      })), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 0],
        toggle: true,
        label: "fn",
        which: KEYBOARD_MAP[4][0],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 1],
        toggle: true,
        label: "gr",
        which: KEYBOARD_MAP[4][1],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 2],
        toggle: true,
        label: "ctrl",
        which: KEYBOARD_MAP[4][2],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 8],
        label: "space",
        which: KEYBOARD_MAP[4][8],
        keyState,
        size: "key200"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 1],
        toggle: true,
        label: "gr",
        which: KEYBOARD_MAP[4][1],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 11],
        which: KEYBOARD_MAP[4][11],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 12],
        which: KEYBOARD_MAP[4][12],
        keyState
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 13],
        which: KEYBOARD_MAP[4][13],
        keyState
      })))), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardSection"
      }, /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement("span", {
        style: { height: "40px" }
      })), mode === "full" && /* @__PURE__ */ import_react20.default.createElement(import_react20.default.Fragment, null, /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 14],
        label: "f1",
        which: KEYBOARD_MAP[0][14],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [0, 15],
        label: "f2",
        which: KEYBOARD_MAP[0][15],
        keyState,
        size: "key125"
      })), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 14],
        label: "f3",
        which: KEYBOARD_MAP[1][14],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [1, 15],
        label: "f4",
        which: KEYBOARD_MAP[1][15],
        keyState,
        size: "key125"
      })), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 14],
        label: "f5",
        which: KEYBOARD_MAP[2][14],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [2, 15],
        label: "f6",
        which: KEYBOARD_MAP[2][15],
        keyState,
        size: "key125"
      })), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 14],
        label: "f7",
        which: KEYBOARD_MAP[3][14],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [3, 15],
        label: "f8",
        which: KEYBOARD_MAP[3][15],
        keyState,
        size: "key125"
      })), /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "keyboardRow"
      }, /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 14],
        label: "f9",
        which: KEYBOARD_MAP[3][14],
        keyState,
        size: "key125"
      }), /* @__PURE__ */ import_react20.default.createElement(Key, {
        coord: [4, 15],
        label: "f10",
        which: KEYBOARD_MAP[3][15],
        keyState,
        size: "key125"
      })))));
    }
  };

  // src/www/simple/components/ComputerScreen.jsx
  var ASPECT = 0.936;
  function resizeCanvas(c) {
    const otherHeights = Array.from(c.parentElement.parentElement.children, (el, idx) => idx > 1 ? el.getBoundingClientRect().height : 0).reduce((acc, sz) => acc + sz, 0);
    const width = c.parentElement.parentElement.clientWidth - 40;
    const height = c.parentElement.parentElement.clientHeight - otherHeights - 20;
    let aspectWidth = width;
    let aspectHeight = Math.floor(width * ASPECT);
    if (aspectHeight > height) {
      aspectHeight = height;
      aspectWidth = height / ASPECT;
    }
    c.style.width = `${aspectWidth}px`;
    c.style.height = `${aspectHeight}px`;
  }
  function glresize(gl, program) {
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    gl.uniform2f(gl.getUniformLocation(program, "u_canvasSize"), gl.canvas.width, gl.canvas.height);
  }
  function compileShader(gl, source, type2) {
    var shader = gl.createShader(type2);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      var info4 = gl.getShaderInfoLog(shader);
      throw "could not compile shader:" + info4;
    }
    return shader;
  }
  function initGLCanvas(canvas, useGL) {
    if (!useGL)
      return [false, canvas.getContext("2d")];
    let gl = canvas.getContext("webgl2");
    if (!gl)
      gl = canvas.getContext("webgl");
    if (!gl)
      return [false, canvas.getContext("2d")];
    var vs_script = document.getElementById("some-vertex-shader");
    var vs = compileShader(gl, vs_script.text, gl.VERTEX_SHADER);
    var fs_script = document.getElementById("some-fragment-shader");
    var fs = compileShader(gl, fs_script.text, gl.FRAGMENT_SHADER);
    const program = gl.createProgram();
    gl.attachShader(program, vs);
    gl.attachShader(program, fs);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      var info4 = gl.getProgramInfoLog(program);
      throw "shader program failed to link:" + info4;
    }
    gl.useProgram(program);
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    gl.uniform3f(gl.getUniformLocation(program, "u_canvasSize"), gl.canvas.width, gl.canvas.height, 0);
    gl.uniform2f(gl.getUniformLocation(program, "u_canvasSize"), gl.canvas.width, gl.canvas.height);
    var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");
    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0]), gl.STATIC_DRAW);
    gl.enableVertexAttribArray(texCoordLocation);
    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
    var positionLocation = gl.getAttribLocation(program, "a_position");
    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
    const gltex = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, gltex);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.activeTexture(gl.TEXTURE0);
    gl.uniform1i(gl.getUniformLocation(program, "u_texture0"), 0);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
    return [true, gl, program];
  }
  function gldraw(gl, source, program) {
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);
    gl.drawArrays(gl.TRIANGLES, 0, 6);
  }
  var ComputerScreen = class extends import_react21.default.Component {
    constructor(props) {
      super(props);
      this.renderFrame = this.renderFrame.bind(this);
      this.glChecked = this.glChecked.bind(this);
      this.accuracyChecked = this.accuracyChecked.bind(this);
      this.keyboardChecked = this.keyboardChecked.bind(this);
      this.hideToolsClicked = this.hideToolsClicked.bind(this);
      const frameCanvas = document.createElement("canvas");
      frameCanvas.setAttribute("width", "640");
      frameCanvas.setAttribute("height", "480");
      const frameCtx = frameCanvas.getContext("2d");
      const frameBuffer = frameCtx.createImageData(640, 480);
      this.canvas = import_react21.default.createRef();
      this.ctx = null;
      this.isGL = false;
      this.program = null;
      this._cancelRAF = null;
      this._lastTimestamp = 0;
      this.state = {
        frameBuffer,
        frameCtx,
        frameCanvas,
        frames: 0,
        orphanedFrames: 0,
        hideTools: false
      };
    }
    componentDidMount() {
      this._cancelRAF = requestAnimationFrame(this.renderFrame);
      const useGL = this.props.store.useGL;
      [this.isGL, this.ctx, this.program] = initGLCanvas(this.canvas.current, useGL);
      if (!this.isGL) {
        this.ctx.scale(2, 2);
      }
    }
    componentWillUnmount() {
      cancelAnimationFrame(this._cancelRAF);
    }
    hideToolsClicked(e) {
      this.setState((nextState) => ({ hideTools: !nextState.hideTools }));
    }
    accuracyChecked(e) {
      const { computer, diagnostics, devices: { screen }, stats } = store;
      this.props.store.accurateScreen = e.target.checked;
      screen.mode = this.props.store.accurateScreen ? 2 : 1;
      this.setState({});
    }
    glChecked(e) {
      this.props.store.useGL = e.target.checked;
      this.setState({});
      const newCanvas = this.canvas.current.cloneNode();
      this.canvas.current.replaceWith(newCanvas);
      this.canvas.current = newCanvas;
      const useGL = this.props.store.useGL;
      [this.isGL, this.ctx, this.program] = initGLCanvas(this.canvas.current, useGL);
      if (!this.isGL) {
        this.ctx.scale(2, 2);
      }
    }
    keyboardChecked(e) {
      const { computer, diagnostics, devices: { screen }, stats } = store;
      this.props.store.showKeyboardOnScreen = e.target.checked;
      this.setState({});
    }
    renderFrame(now2) {
      const { store: store3 } = this.props;
      const { stats } = store3;
      stats.begin();
      resizeCanvas(this.canvas.current);
      if (this.isGL)
        glresize(this.ctx, this.program);
      let { orphanedFrames, frames, frameBuffer, frameCtx, frameCanvas } = this.state;
      frames++;
      if (frames % 60 === 0) {
        orphanedFrames = 0;
      }
      const delta = now2 - this._lastTimestamp;
      this._lastTimestamp = now2;
      this._cancelRAF = requestAnimationFrame(this.renderFrame);
      const lastFrame = getLastFrame();
      if (lastFrame) {
        frameBuffer.data.set(lastFrame);
        frameCtx.putImageData(frameBuffer, 0, 0);
        const canvas = this.canvas.current;
        const ctx = this.ctx;
        if (this.isGL) {
          gldraw(ctx, frameBuffer, this.program);
        } else {
          ctx.drawImage(frameCanvas, 0, 0);
        }
      }
      frameDump();
      this.setState({
        orphanedFrames,
        frames
      });
      stats.end();
    }
    render() {
      const showKeyboardOnScreen = this.props.store.showKeyboardOnScreen;
      const hideTools = this.state.hideTools;
      return /* @__PURE__ */ import_react21.default.createElement("div", {
        className: "panel column",
        style: { position: "relative", overflow: "hidden" }
      }, /* @__PURE__ */ import_react21.default.createElement("div", {
        className: "row",
        style: { position: "absolute", zIndex: "99", backgroundColor: hideTools ? "" : "rgba(0,0,0,0.2)", right: "0", left: "0", margin: "-6px -6px 0 -6px", padding: "6px" }
      }, /* @__PURE__ */ import_react21.default.createElement("button", {
        style: { padding: "0 6px", margin: 0, marginRight: "6px", height: "1.5em", color: "white", backgroundColor: "transparent" },
        onClick: this.hideToolsClicked
      }, `${hideTools ? ">" : "<"}`), !hideTools && /* @__PURE__ */ import_react21.default.createElement(import_react21.default.Fragment, null, /* @__PURE__ */ import_react21.default.createElement("label", null, /* @__PURE__ */ import_react21.default.createElement("input", {
        type: "checkbox",
        checked: this.props.store.useGL,
        onChange: this.glChecked
      }), " CRT Effect "), "\xA0", /* @__PURE__ */ import_react21.default.createElement("label", null, /* @__PURE__ */ import_react21.default.createElement("input", {
        type: "checkbox",
        checked: this.props.store.accurateScreen,
        onChange: this.accuracyChecked
      }), " Accurate"), "\xA0", /* @__PURE__ */ import_react21.default.createElement("label", null, /* @__PURE__ */ import_react21.default.createElement("input", {
        type: "checkbox",
        checked: this.props.store.showKeyboardOnScreen,
        onChange: this.keyboardChecked
      }), " Keyboard"))), /* @__PURE__ */ import_react21.default.createElement("div", {
        style: { position: "relative" },
        className: "nogrow noshrink center"
      }, /* @__PURE__ */ import_react21.default.createElement("canvas", {
        width: 1280,
        height: 960,
        ref: this.canvas,
        className: "screen nogrow noshrink center"
      })), /* @__PURE__ */ import_react21.default.createElement("div", {
        className: "noshrink",
        style: { position: "relative", minHeight: showKeyboardOnScreen ? "240px" : "48px" }
      }, /* @__PURE__ */ import_react21.default.createElement(Keyboard2, {
        mode: showKeyboardOnScreen ? "full" : "mini",
        store: this.props.store
      })));
    }
  };

  // src/www/simple/components/ComputerControl.jsx
  var import_react22 = __toModule(require_react());
  var import_react_icons_kit4 = __toModule(require_react_icons_kit());
  var import_play22 = __toModule(require_play2());
  var import_forward2 = __toModule(require_forward2());
  var import_stop2 = __toModule(require_stop());
  var import_next = __toModule(require_next());
  var import_previous = __toModule(require_previous());
  var import_info3 = __toModule(require_info());
  var import_location2 = __toModule(require_location2());
  var import_shuffle = __toModule(require_shuffle());
  var TIMING_METHOD_SELECT = {
    [TIMING_METHODS.RAF]: { label: "Auto", granularities: [1, 15, 255, 511, 4095, 8191, 16383], default: 255 },
    [TIMING_METHODS.INTERVAL]: { label: "Interval", granularities: [1, 15, 255, 511, 4095, 8191, 16383], default: 255 },
    [TIMING_METHODS.TIMEOUT]: { label: "Timeout", granularities: [1, 15, 255, 511, 4095, 8191, 16383], default: 255 },
    [TIMING_METHODS.FIXED]: { label: "Fixed", granularities: [256, 512, 1024, 2048, 3072, 4096, 6144, 8192, 10240, 12288, 16384, 24576, 32768], default: 12288 },
    [TIMING_METHODS.SENTINEL]: { label: "Sentinel", granularities: [1], default: 1 }
  };
  var TICKS_BETWEEN_RASTER_LINES = ["AUTO", 8, 12, 16, 20, 24, 28, 32, 40, 48, 64, 96, 128];
  var ComputerControl = class extends import_react22.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        startAddress: "0x0FF00",
        timingMethod: props.store.config.options.timingMethod,
        sliceGranularity: props.store.config.options.sliceGranularity,
        sliceTime: props.store.config.options.sliceTime,
        ticksBetweenRasterLines: props.store.config.options.ticksBetweenRasterLines
      };
      this.startAddressChanged = this.startAddressChanged.bind(this);
      this.granularityChanged = this.granularityChanged.bind(this);
      this.timingMethodChanged = this.timingMethodChanged.bind(this);
      this.ticksChanged = this.ticksChanged.bind(this);
      this.randomizeClicked = this.randomizeClicked.bind(this);
      this.resetClicked = this.resetClicked.bind(this);
      this.startClicked = this.startClicked.bind(this);
      this.stopClicked = this.stopClicked.bind(this);
      this.continueClicked = this.continueClicked.bind(this);
      this.stepClicked = this.stepClicked.bind(this);
      this.jumpClicked = this.jumpClicked.bind(this);
      this.applyClicked = this.applyClicked.bind(this);
      this.autoUpdateClicked = this.autoUpdateClicked.bind(this);
      this.updateFrequencyChanged = this.updateFrequencyChanged.bind(this);
    }
    startAddressChanged(e) {
      this.setState({ startAddress: e.target.value });
    }
    granularityChanged(e) {
      const { timingMethod } = this.state;
      const sliceGranularity = Number(e.target.value) || TIMING_METHOD_SELECT[timingMethod].default;
      this.setState({ sliceGranularity });
    }
    timingMethodChanged(e) {
      const timingMethod = Number(e.target.value);
      const sliceGranularity = TIMING_METHOD_SELECT[timingMethod].default;
      this.setState({ timingMethod, sliceGranularity });
    }
    ticksChanged(e) {
      const ticksBetweenRasterLines = e.target.value;
      this.setState({ ticksBetweenRasterLines });
    }
    applyClicked() {
      const { timingMethod, sliceGranularity, ticksBetweenRasterLines } = this.state;
      const { store: store3 } = this.props;
      const { computer, devices: { screen } } = store3;
      store3.config.options.timingMethod = timingMethod;
      store3.config.options.sliceGranularity = sliceGranularity;
      store3.config.options.ticksBetweenRasterLines = ticksBetweenRasterLines;
      computer.options = Object.assign({}, computer.options, { timingMethod, sliceGranularity });
      if (ticksBetweenRasterLines !== "AUTO") {
        screen.adjustPerformance = false;
        screen.ticksBetweenRasterLines = ticksBetweenRasterLines;
      } else {
        screen.adjustPerformance = true;
        screen.ticksBetweenRasterLines = 8;
      }
      store3.save();
    }
    resetClicked() {
      const { store: store3 } = this.props;
      const { computer, diagnostics } = store3;
      computer.reset();
      if (diagnostics.state == "running")
        return;
      computer.run();
    }
    startClicked() {
      const { store: store3 } = this.props;
      const { startAddress } = this.state;
      const { computer, diagnostics } = store3;
      computer.processor.jump(Number(startAddress));
      computer.processor.registers.SINGLE_STEP = 0;
      if (diagnostics.state == "running")
        return;
      computer.run();
    }
    stopClicked() {
      const { store: store3 } = this.props;
      const { computer } = store3;
      computer.stop();
    }
    continueClicked() {
      const { store: store3 } = this.props;
      const { diagnostics, computer } = store3;
      if (diagnostics.state == "running")
        return;
      computer.processor.registers.SINGLE_STEP = 0;
      computer.processor.registers.INTERRUPT_DISABLE = 0;
      computer.run();
    }
    stepClicked() {
      const { store: store3 } = this.props;
      const { diagnostics, computer } = store3;
      if (diagnostics.state == "running") {
        computer.processor.registers.INTERRUPT_DISABLE = 1;
        computer.processor.registers.SINGLE_STEP = 1;
      }
      ;
      computer.step();
      store3.notify();
      this.setState({});
    }
    jumpClicked() {
      const { store: store3 } = this.props;
      const { startAddress } = this.state;
      const { diagnostics, computer } = store3;
      computer.processor.jump(Number(startAddress));
    }
    randomizeClicked() {
      const { store: store3 } = this.props;
      const { computer } = store3;
      let byte = 0;
      for (let addr = 0; addr < computer.memory.size - 65536; addr++) {
        do {
          byte = Math.floor(Math.random() * 255);
        } while (byte === 63);
        computer.memory.writeByte(addr, byte);
      }
      ;
    }
    updateFrequencyChanged(e) {
      const { store: store3 } = this.props;
      const newFreq = Number(e.target.value) || 250;
      store3.updateInterval = newFreq;
      store3.notify();
      this.setState({});
    }
    autoUpdateClicked() {
      const { store: store3 } = this.props;
      store3.autoUpdate = !store3.autoUpdate;
      store3.notify();
      this.setState({});
    }
    render() {
      const { store: store3 } = this.props;
      const { startAddress, sliceGranularity, timingMethod, ticksBetweenRasterLines } = this.state;
      const updateFrequency = store3.updateInterval;
      const updating = store3.autoUpdate;
      return /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "panel"
      }, /* @__PURE__ */ import_react22.default.createElement("label", null, "Start Address: ", /* @__PURE__ */ import_react22.default.createElement("input", {
        size: 10,
        type: "text",
        value: startAddress,
        onChange: this.startAddressChanged
      })), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "divider"
      }), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.resetClicked,
        title: "Reset"
      }, /* @__PURE__ */ import_react22.default.createElement(import_react_icons_kit4.Icon, {
        icon: import_previous.previous
      })), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.startClicked,
        title: "Start",
        id: "start"
      }, /* @__PURE__ */ import_react22.default.createElement(import_react_icons_kit4.Icon, {
        icon: import_play22.play2
      })), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.continueClicked,
        title: "Continue"
      }, /* @__PURE__ */ import_react22.default.createElement(import_react_icons_kit4.Icon, {
        icon: import_forward2.forward2
      })), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.stopClicked,
        title: "Stop"
      }, /* @__PURE__ */ import_react22.default.createElement(import_react_icons_kit4.Icon, {
        icon: import_stop2.stop
      })), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "divider"
      }), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.jumpClicked,
        title: "Jump to address"
      }, /* @__PURE__ */ import_react22.default.createElement(import_react_icons_kit4.Icon, {
        icon: import_location2.location2
      })), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.stepClicked,
        title: "Single Step"
      }, /* @__PURE__ */ import_react22.default.createElement(import_react_icons_kit4.Icon, {
        icon: import_next.next
      })), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "divider"
      }), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.randomizeClicked,
        title: "Randomize memory"
      }, /* @__PURE__ */ import_react22.default.createElement(import_react_icons_kit4.Icon, {
        icon: import_shuffle.shuffle
      })), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "divider"
      }), /* @__PURE__ */ import_react22.default.createElement("label", null, "Update Freq: ", /* @__PURE__ */ import_react22.default.createElement("input", {
        type: "text",
        size: 10,
        value: updateFrequency,
        onChange: this.updateFrequencyChanged
      })), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "divider"
      }), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.autoUpdateClicked,
        title: "Start/Stop Automatic Update"
      }, /* @__PURE__ */ import_react22.default.createElement(import_react_icons_kit4.Icon, {
        icon: updating ? import_stop2.stop : import_play22.play2
      })), /* @__PURE__ */ import_react22.default.createElement("br", null), /* @__PURE__ */ import_react22.default.createElement("label", null, "Mode:", /* @__PURE__ */ import_react22.default.createElement("select", {
        onChange: this.timingMethodChanged,
        value: timingMethod
      }, Object.entries(TIMING_METHOD_SELECT).map(([k, { label }]) => /* @__PURE__ */ import_react22.default.createElement("option", {
        key: k,
        value: k
      }, label)))), /* @__PURE__ */ import_react22.default.createElement("label", null, "Slice Granularity:", /* @__PURE__ */ import_react22.default.createElement("select", {
        onChange: this.granularityChanged,
        value: sliceGranularity
      }, TIMING_METHOD_SELECT[timingMethod].granularities.map((v) => /* @__PURE__ */ import_react22.default.createElement("option", {
        key: v,
        value: v
      }, v)))), /* @__PURE__ */ import_react22.default.createElement("input", {
        type: "text",
        value: sliceGranularity,
        onChange: this.granularityChanged
      }), /* @__PURE__ */ import_react22.default.createElement("label", null, "Ticks between raster:", /* @__PURE__ */ import_react22.default.createElement("select", {
        onChange: this.ticksChanged,
        value: ticksBetweenRasterLines
      }, TICKS_BETWEEN_RASTER_LINES.map((v) => /* @__PURE__ */ import_react22.default.createElement("option", {
        key: v,
        value: v
      }, v)))), /* @__PURE__ */ import_react22.default.createElement("button", {
        onClick: this.applyClicked
      }, "Apply"));
    }
  };

  // src/www/simple/components/ComputerMemory.jsx
  var import_react26 = __toModule(require_react());

  // src/www/simple/components/BufferEditor.jsx
  var import_react25 = __toModule(require_react());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/memoize-one/dist/memoize-one.esm.js
  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === "number" && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
      if (!isEqual(newInputs[i], lastInputs[i])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual2) {
    if (isEqual2 === void 0) {
      isEqual2 = areInputsEqual;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (calledOnce && lastThis === this && isEqual2(newArgs, lastArgs)) {
        return lastResult;
      }
      lastResult = resultFn.apply(this, newArgs);
      calledOnce = true;
      lastThis = this;
      lastArgs = newArgs;
      return lastResult;
    }
    return memoized;
  }
  var memoize_one_esm_default = memoizeOne;

  // node_modules/react-window/dist/index.esm.js
  var import_react23 = __toModule(require_react());
  var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
  var now = hasNativePerformanceNow ? function() {
    return performance.now();
  } : function() {
    return Date.now();
  };
  function cancelTimeout(timeoutID) {
    cancelAnimationFrame(timeoutID.id);
  }
  function requestTimeout(callback, delay) {
    var start = now();
    function tick() {
      if (now() - start >= delay) {
        callback.call(null);
      } else {
        timeoutID.id = requestAnimationFrame(tick);
      }
    }
    var timeoutID = {
      id: requestAnimationFrame(tick)
    };
    return timeoutID;
  }
  var size = -1;
  function getScrollbarSize(recalculate) {
    if (recalculate === void 0) {
      recalculate = false;
    }
    if (size === -1 || recalculate) {
      var div = document.createElement("div");
      var style = div.style;
      style.width = "50px";
      style.height = "50px";
      style.overflow = "scroll";
      document.body.appendChild(div);
      size = div.offsetWidth - div.clientWidth;
      document.body.removeChild(div);
    }
    return size;
  }
  var cachedRTLResult = null;
  function getRTLOffsetType(recalculate) {
    if (recalculate === void 0) {
      recalculate = false;
    }
    if (cachedRTLResult === null || recalculate) {
      var outerDiv = document.createElement("div");
      var outerStyle = outerDiv.style;
      outerStyle.width = "50px";
      outerStyle.height = "50px";
      outerStyle.overflow = "scroll";
      outerStyle.direction = "rtl";
      var innerDiv = document.createElement("div");
      var innerStyle = innerDiv.style;
      innerStyle.width = "100px";
      innerStyle.height = "100px";
      outerDiv.appendChild(innerDiv);
      document.body.appendChild(outerDiv);
      if (outerDiv.scrollLeft > 0) {
        cachedRTLResult = "positive-descending";
      } else {
        outerDiv.scrollLeft = 1;
        if (outerDiv.scrollLeft === 0) {
          cachedRTLResult = "negative";
        } else {
          cachedRTLResult = "positive-ascending";
        }
      }
      document.body.removeChild(outerDiv);
      return cachedRTLResult;
    }
    return cachedRTLResult;
  }
  var IS_SCROLLING_DEBOUNCE_INTERVAL = 150;
  var defaultItemKey = function defaultItemKey2(_ref) {
    var columnIndex = _ref.columnIndex, data = _ref.data, rowIndex = _ref.rowIndex;
    return rowIndex + ":" + columnIndex;
  };
  var devWarningsOverscanCount = null;
  var devWarningsOverscanRowsColumnsCount = null;
  var devWarningsTagName = null;
  if (true) {
    if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
      devWarningsOverscanCount = /* @__PURE__ */ new WeakSet();
      devWarningsOverscanRowsColumnsCount = /* @__PURE__ */ new WeakSet();
      devWarningsTagName = /* @__PURE__ */ new WeakSet();
    }
  }
  function createGridComponent(_ref2) {
    var _class, _temp;
    var getColumnOffset2 = _ref2.getColumnOffset, getColumnStartIndexForOffset2 = _ref2.getColumnStartIndexForOffset, getColumnStopIndexForStartIndex2 = _ref2.getColumnStopIndexForStartIndex, getColumnWidth2 = _ref2.getColumnWidth, getEstimatedTotalHeight3 = _ref2.getEstimatedTotalHeight, getEstimatedTotalWidth3 = _ref2.getEstimatedTotalWidth, getOffsetForColumnAndAlignment2 = _ref2.getOffsetForColumnAndAlignment, getOffsetForRowAndAlignment2 = _ref2.getOffsetForRowAndAlignment, getRowHeight2 = _ref2.getRowHeight, getRowOffset2 = _ref2.getRowOffset, getRowStartIndexForOffset2 = _ref2.getRowStartIndexForOffset, getRowStopIndexForStartIndex2 = _ref2.getRowStopIndexForStartIndex, initInstanceProps2 = _ref2.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange, validateProps2 = _ref2.validateProps;
    return _temp = _class = /* @__PURE__ */ function(_PureComponent) {
      _inheritsLoose(Grid, _PureComponent);
      function Grid(props) {
        var _this;
        _this = _PureComponent.call(this, props) || this;
        _this._instanceProps = initInstanceProps2(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));
        _this._resetIsScrollingTimeoutId = null;
        _this._outerRef = void 0;
        _this.state = {
          instance: _assertThisInitialized(_assertThisInitialized(_this)),
          isScrolling: false,
          horizontalScrollDirection: "forward",
          scrollLeft: typeof _this.props.initialScrollLeft === "number" ? _this.props.initialScrollLeft : 0,
          scrollTop: typeof _this.props.initialScrollTop === "number" ? _this.props.initialScrollTop : 0,
          scrollUpdateWasRequested: false,
          verticalScrollDirection: "forward"
        };
        _this._callOnItemsRendered = void 0;
        _this._callOnItemsRendered = memoize_one_esm_default(function(overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {
          return _this.props.onItemsRendered({
            overscanColumnStartIndex,
            overscanColumnStopIndex,
            overscanRowStartIndex,
            overscanRowStopIndex,
            visibleColumnStartIndex,
            visibleColumnStopIndex,
            visibleRowStartIndex,
            visibleRowStopIndex
          });
        });
        _this._callOnScroll = void 0;
        _this._callOnScroll = memoize_one_esm_default(function(scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {
          return _this.props.onScroll({
            horizontalScrollDirection,
            scrollLeft,
            scrollTop,
            verticalScrollDirection,
            scrollUpdateWasRequested
          });
        });
        _this._getItemStyle = void 0;
        _this._getItemStyle = function(rowIndex, columnIndex) {
          var _this$props = _this.props, columnWidth = _this$props.columnWidth, direction = _this$props.direction, rowHeight = _this$props.rowHeight;
          var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);
          var key = rowIndex + ":" + columnIndex;
          var style;
          if (itemStyleCache.hasOwnProperty(key)) {
            style = itemStyleCache[key];
          } else {
            var _offset = getColumnOffset2(_this.props, columnIndex, _this._instanceProps);
            var isRtl = direction === "rtl";
            itemStyleCache[key] = style = {
              position: "absolute",
              left: isRtl ? void 0 : _offset,
              right: isRtl ? _offset : void 0,
              top: getRowOffset2(_this.props, rowIndex, _this._instanceProps),
              height: getRowHeight2(_this.props, rowIndex, _this._instanceProps),
              width: getColumnWidth2(_this.props, columnIndex, _this._instanceProps)
            };
          }
          return style;
        };
        _this._getItemStyleCache = void 0;
        _this._getItemStyleCache = memoize_one_esm_default(function(_, __, ___) {
          return {};
        });
        _this._onScroll = function(event) {
          var _event$currentTarget = event.currentTarget, clientHeight = _event$currentTarget.clientHeight, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop, scrollHeight = _event$currentTarget.scrollHeight, scrollWidth = _event$currentTarget.scrollWidth;
          _this.setState(function(prevState) {
            if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
              return null;
            }
            var direction = _this.props.direction;
            var calculatedScrollLeft = scrollLeft;
            if (direction === "rtl") {
              switch (getRTLOffsetType()) {
                case "negative":
                  calculatedScrollLeft = -scrollLeft;
                  break;
                case "positive-descending":
                  calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;
                  break;
              }
            }
            calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));
            var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
            return {
              isScrolling: true,
              horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
              scrollLeft: calculatedScrollLeft,
              scrollTop: calculatedScrollTop,
              verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward",
              scrollUpdateWasRequested: false
            };
          }, _this._resetIsScrollingDebounced);
        };
        _this._outerRefSetter = function(ref) {
          var outerRef = _this.props.outerRef;
          _this._outerRef = ref;
          if (typeof outerRef === "function") {
            outerRef(ref);
          } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
            outerRef.current = ref;
          }
        };
        _this._resetIsScrollingDebounced = function() {
          if (_this._resetIsScrollingTimeoutId !== null) {
            cancelTimeout(_this._resetIsScrollingTimeoutId);
          }
          _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);
        };
        _this._resetIsScrolling = function() {
          _this._resetIsScrollingTimeoutId = null;
          _this.setState({
            isScrolling: false
          }, function() {
            _this._getItemStyleCache(-1);
          });
        };
        return _this;
      }
      Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
        validateSharedProps(nextProps, prevState);
        validateProps2(nextProps);
        return null;
      };
      var _proto = Grid.prototype;
      _proto.scrollTo = function scrollTo(_ref3) {
        var scrollLeft = _ref3.scrollLeft, scrollTop = _ref3.scrollTop;
        if (scrollLeft !== void 0) {
          scrollLeft = Math.max(0, scrollLeft);
        }
        if (scrollTop !== void 0) {
          scrollTop = Math.max(0, scrollTop);
        }
        this.setState(function(prevState) {
          if (scrollLeft === void 0) {
            scrollLeft = prevState.scrollLeft;
          }
          if (scrollTop === void 0) {
            scrollTop = prevState.scrollTop;
          }
          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
            return null;
          }
          return {
            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
            scrollLeft,
            scrollTop,
            scrollUpdateWasRequested: true,
            verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward"
          };
        }, this._resetIsScrollingDebounced);
      };
      _proto.scrollToItem = function scrollToItem(_ref4) {
        var _ref4$align = _ref4.align, align = _ref4$align === void 0 ? "auto" : _ref4$align, columnIndex = _ref4.columnIndex, rowIndex = _ref4.rowIndex;
        var _this$props2 = this.props, columnCount = _this$props2.columnCount, height = _this$props2.height, rowCount = _this$props2.rowCount, width = _this$props2.width;
        var _this$state = this.state, scrollLeft = _this$state.scrollLeft, scrollTop = _this$state.scrollTop;
        var scrollbarSize = getScrollbarSize();
        if (columnIndex !== void 0) {
          columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));
        }
        if (rowIndex !== void 0) {
          rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));
        }
        var estimatedTotalHeight = getEstimatedTotalHeight3(this.props, this._instanceProps);
        var estimatedTotalWidth = getEstimatedTotalWidth3(this.props, this._instanceProps);
        var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;
        var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;
        this.scrollTo({
          scrollLeft: columnIndex !== void 0 ? getOffsetForColumnAndAlignment2(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,
          scrollTop: rowIndex !== void 0 ? getOffsetForRowAndAlignment2(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop
        });
      };
      _proto.componentDidMount = function componentDidMount() {
        var _this$props3 = this.props, initialScrollLeft = _this$props3.initialScrollLeft, initialScrollTop = _this$props3.initialScrollTop;
        if (this._outerRef != null) {
          var outerRef = this._outerRef;
          if (typeof initialScrollLeft === "number") {
            outerRef.scrollLeft = initialScrollLeft;
          }
          if (typeof initialScrollTop === "number") {
            outerRef.scrollTop = initialScrollTop;
          }
        }
        this._callPropsCallbacks();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        var direction = this.props.direction;
        var _this$state2 = this.state, scrollLeft = _this$state2.scrollLeft, scrollTop = _this$state2.scrollTop, scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
        if (scrollUpdateWasRequested && this._outerRef != null) {
          var outerRef = this._outerRef;
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                outerRef.scrollLeft = -scrollLeft;
                break;
              case "positive-ascending":
                outerRef.scrollLeft = scrollLeft;
                break;
              default:
                var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          } else {
            outerRef.scrollLeft = Math.max(0, scrollLeft);
          }
          outerRef.scrollTop = Math.max(0, scrollTop);
        }
        this._callPropsCallbacks();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(this._resetIsScrollingTimeoutId);
        }
      };
      _proto.render = function render() {
        var _this$props4 = this.props, children = _this$props4.children, className = _this$props4.className, columnCount = _this$props4.columnCount, direction = _this$props4.direction, height = _this$props4.height, innerRef = _this$props4.innerRef, innerElementType = _this$props4.innerElementType, innerTagName = _this$props4.innerTagName, itemData = _this$props4.itemData, _this$props4$itemKey = _this$props4.itemKey, itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey, outerElementType = _this$props4.outerElementType, outerTagName = _this$props4.outerTagName, rowCount = _this$props4.rowCount, style = _this$props4.style, useIsScrolling = _this$props4.useIsScrolling, width = _this$props4.width;
        var isScrolling = this.state.isScrolling;
        var _this$_getHorizontalR = this._getHorizontalRangeToRender(), columnStartIndex = _this$_getHorizontalR[0], columnStopIndex = _this$_getHorizontalR[1];
        var _this$_getVerticalRan = this._getVerticalRangeToRender(), rowStartIndex = _this$_getVerticalRan[0], rowStopIndex = _this$_getVerticalRan[1];
        var items = [];
        if (columnCount > 0 && rowCount) {
          for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {
            for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {
              items.push((0, import_react23.createElement)(children, {
                columnIndex: _columnIndex,
                data: itemData,
                isScrolling: useIsScrolling ? isScrolling : void 0,
                key: itemKey({
                  columnIndex: _columnIndex,
                  data: itemData,
                  rowIndex: _rowIndex
                }),
                rowIndex: _rowIndex,
                style: this._getItemStyle(_rowIndex, _columnIndex)
              }));
            }
          }
        }
        var estimatedTotalHeight = getEstimatedTotalHeight3(this.props, this._instanceProps);
        var estimatedTotalWidth = getEstimatedTotalWidth3(this.props, this._instanceProps);
        return (0, import_react23.createElement)(outerElementType || outerTagName || "div", {
          className,
          onScroll: this._onScroll,
          ref: this._outerRefSetter,
          style: _extends2({
            position: "relative",
            height,
            width,
            overflow: "auto",
            WebkitOverflowScrolling: "touch",
            willChange: "transform",
            direction
          }, style)
        }, (0, import_react23.createElement)(innerElementType || innerTagName || "div", {
          children: items,
          ref: innerRef,
          style: {
            height: estimatedTotalHeight,
            pointerEvents: isScrolling ? "none" : void 0,
            width: estimatedTotalWidth
          }
        }));
      };
      _proto._callPropsCallbacks = function _callPropsCallbacks() {
        var _this$props5 = this.props, columnCount = _this$props5.columnCount, onItemsRendered = _this$props5.onItemsRendered, onScroll = _this$props5.onScroll, rowCount = _this$props5.rowCount;
        if (typeof onItemsRendered === "function") {
          if (columnCount > 0 && rowCount > 0) {
            var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(), _overscanColumnStartIndex = _this$_getHorizontalR2[0], _overscanColumnStopIndex = _this$_getHorizontalR2[1], _visibleColumnStartIndex = _this$_getHorizontalR2[2], _visibleColumnStopIndex = _this$_getHorizontalR2[3];
            var _this$_getVerticalRan2 = this._getVerticalRangeToRender(), _overscanRowStartIndex = _this$_getVerticalRan2[0], _overscanRowStopIndex = _this$_getVerticalRan2[1], _visibleRowStartIndex = _this$_getVerticalRan2[2], _visibleRowStopIndex = _this$_getVerticalRan2[3];
            this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);
          }
        }
        if (typeof onScroll === "function") {
          var _this$state3 = this.state, _horizontalScrollDirection = _this$state3.horizontalScrollDirection, _scrollLeft = _this$state3.scrollLeft, _scrollTop = _this$state3.scrollTop, _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested, _verticalScrollDirection = _this$state3.verticalScrollDirection;
          this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);
        }
      };
      _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {
        var _this$props6 = this.props, columnCount = _this$props6.columnCount, overscanColumnCount = _this$props6.overscanColumnCount, overscanColumnsCount = _this$props6.overscanColumnsCount, overscanCount = _this$props6.overscanCount, rowCount = _this$props6.rowCount;
        var _this$state4 = this.state, horizontalScrollDirection = _this$state4.horizontalScrollDirection, isScrolling = _this$state4.isScrolling, scrollLeft = _this$state4.scrollLeft;
        var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;
        if (columnCount === 0 || rowCount === 0) {
          return [0, 0, 0, 0];
        }
        var startIndex = getColumnStartIndexForOffset2(this.props, scrollLeft, this._instanceProps);
        var stopIndex = getColumnStopIndexForStartIndex2(this.props, startIndex, scrollLeft, this._instanceProps);
        var overscanBackward = !isScrolling || horizontalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
        var overscanForward = !isScrolling || horizontalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
        return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
      };
      _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {
        var _this$props7 = this.props, columnCount = _this$props7.columnCount, overscanCount = _this$props7.overscanCount, overscanRowCount = _this$props7.overscanRowCount, overscanRowsCount = _this$props7.overscanRowsCount, rowCount = _this$props7.rowCount;
        var _this$state5 = this.state, isScrolling = _this$state5.isScrolling, verticalScrollDirection = _this$state5.verticalScrollDirection, scrollTop = _this$state5.scrollTop;
        var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;
        if (columnCount === 0 || rowCount === 0) {
          return [0, 0, 0, 0];
        }
        var startIndex = getRowStartIndexForOffset2(this.props, scrollTop, this._instanceProps);
        var stopIndex = getRowStopIndexForStartIndex2(this.props, startIndex, scrollTop, this._instanceProps);
        var overscanBackward = !isScrolling || verticalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
        var overscanForward = !isScrolling || verticalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
        return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
      };
      return Grid;
    }(import_react23.PureComponent), _class.defaultProps = {
      direction: "ltr",
      itemData: void 0,
      useIsScrolling: false
    }, _temp;
  }
  var validateSharedProps = function validateSharedProps2(_ref5, _ref6) {
    var children = _ref5.children, direction = _ref5.direction, height = _ref5.height, innerTagName = _ref5.innerTagName, outerTagName = _ref5.outerTagName, overscanColumnsCount = _ref5.overscanColumnsCount, overscanCount = _ref5.overscanCount, overscanRowsCount = _ref5.overscanRowsCount, width = _ref5.width;
    var instance = _ref6.instance;
    if (true) {
      if (typeof overscanCount === "number") {
        if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {
          devWarningsOverscanCount.add(instance);
          console.warn("The overscanCount prop has been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
        }
      }
      if (typeof overscanColumnsCount === "number" || typeof overscanRowsCount === "number") {
        if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {
          devWarningsOverscanRowsColumnsCount.add(instance);
          console.warn("The overscanColumnsCount and overscanRowsCount props have been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
        }
      }
      if (innerTagName != null || outerTagName != null) {
        if (devWarningsTagName && !devWarningsTagName.has(instance)) {
          devWarningsTagName.add(instance);
          console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
        }
      }
      if (children == null) {
        throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children === null ? "null" : typeof children) + '" was specified.'));
      }
      switch (direction) {
        case "ltr":
        case "rtl":
          break;
        default:
          throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
      }
      if (typeof width !== "number") {
        throw Error('An invalid "width" prop has been specified. Grids must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
      }
      if (typeof height !== "number") {
        throw Error('An invalid "height" prop has been specified. Grids must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
      }
    }
  };
  var DEFAULT_ESTIMATED_ITEM_SIZE = 50;
  var getEstimatedTotalHeight = function getEstimatedTotalHeight2(_ref, _ref2) {
    var rowCount = _ref.rowCount;
    var rowMetadataMap = _ref2.rowMetadataMap, estimatedRowHeight = _ref2.estimatedRowHeight, lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;
    var totalSizeOfMeasuredRows = 0;
    if (lastMeasuredRowIndex >= rowCount) {
      lastMeasuredRowIndex = rowCount - 1;
    }
    if (lastMeasuredRowIndex >= 0) {
      var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];
      totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
    }
    var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;
    var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;
    return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
  };
  var getEstimatedTotalWidth = function getEstimatedTotalWidth2(_ref3, _ref4) {
    var columnCount = _ref3.columnCount;
    var columnMetadataMap = _ref4.columnMetadataMap, estimatedColumnWidth = _ref4.estimatedColumnWidth, lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;
    var totalSizeOfMeasuredRows = 0;
    if (lastMeasuredColumnIndex >= columnCount) {
      lastMeasuredColumnIndex = columnCount - 1;
    }
    if (lastMeasuredColumnIndex >= 0) {
      var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];
      totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
    }
    var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;
    var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;
    return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
  };
  var getItemMetadata = function getItemMetadata2(itemType, props, index2, instanceProps) {
    var itemMetadataMap, itemSize, lastMeasuredIndex;
    if (itemType === "column") {
      itemMetadataMap = instanceProps.columnMetadataMap;
      itemSize = props.columnWidth;
      lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
    } else {
      itemMetadataMap = instanceProps.rowMetadataMap;
      itemSize = props.rowHeight;
      lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
    }
    if (index2 > lastMeasuredIndex) {
      var offset = 0;
      if (lastMeasuredIndex >= 0) {
        var itemMetadata = itemMetadataMap[lastMeasuredIndex];
        offset = itemMetadata.offset + itemMetadata.size;
      }
      for (var i = lastMeasuredIndex + 1; i <= index2; i++) {
        var size2 = itemSize(i);
        itemMetadataMap[i] = {
          offset,
          size: size2
        };
        offset += size2;
      }
      if (itemType === "column") {
        instanceProps.lastMeasuredColumnIndex = index2;
      } else {
        instanceProps.lastMeasuredRowIndex = index2;
      }
    }
    return itemMetadataMap[index2];
  };
  var findNearestItem = function findNearestItem2(itemType, props, instanceProps, offset) {
    var itemMetadataMap, lastMeasuredIndex;
    if (itemType === "column") {
      itemMetadataMap = instanceProps.columnMetadataMap;
      lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
    } else {
      itemMetadataMap = instanceProps.rowMetadataMap;
      lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
    }
    var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
    if (lastMeasuredItemOffset >= offset) {
      return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);
    } else {
      return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);
    }
  };
  var findNearestItemBinarySearch = function findNearestItemBinarySearch2(itemType, props, instanceProps, high, low, offset) {
    while (low <= high) {
      var middle = low + Math.floor((high - low) / 2);
      var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;
      if (currentOffset === offset) {
        return middle;
      } else if (currentOffset < offset) {
        low = middle + 1;
      } else if (currentOffset > offset) {
        high = middle - 1;
      }
    }
    if (low > 0) {
      return low - 1;
    } else {
      return 0;
    }
  };
  var findNearestItemExponentialSearch = function findNearestItemExponentialSearch2(itemType, props, instanceProps, index2, offset) {
    var itemCount = itemType === "column" ? props.columnCount : props.rowCount;
    var interval = 1;
    while (index2 < itemCount && getItemMetadata(itemType, props, index2, instanceProps).offset < offset) {
      index2 += interval;
      interval *= 2;
    }
    return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index2, itemCount - 1), Math.floor(index2 / 2), offset);
  };
  var getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment2(itemType, props, index2, align, scrollOffset, instanceProps, scrollbarSize) {
    var size2 = itemType === "column" ? props.width : props.height;
    var itemMetadata = getItemMetadata(itemType, props, index2, instanceProps);
    var estimatedTotalSize = itemType === "column" ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);
    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size2, itemMetadata.offset));
    var minOffset = Math.max(0, itemMetadata.offset - size2 + scrollbarSize + itemMetadata.size);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        return Math.round(minOffset + (maxOffset - minOffset) / 2);
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  };
  var VariableSizeGrid = /* @__PURE__ */ createGridComponent({
    getColumnOffset: function getColumnOffset(props, index2, instanceProps) {
      return getItemMetadata("column", props, index2, instanceProps).offset;
    },
    getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {
      return findNearestItem("column", props, instanceProps, scrollLeft);
    },
    getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {
      var columnCount = props.columnCount, width = props.width;
      var itemMetadata = getItemMetadata("column", props, startIndex, instanceProps);
      var maxOffset = scrollLeft + width;
      var offset = itemMetadata.offset + itemMetadata.size;
      var stopIndex = startIndex;
      while (stopIndex < columnCount - 1 && offset < maxOffset) {
        stopIndex++;
        offset += getItemMetadata("column", props, stopIndex, instanceProps).size;
      }
      return stopIndex;
    },
    getColumnWidth: function getColumnWidth(props, index2, instanceProps) {
      return instanceProps.columnMetadataMap[index2].size;
    },
    getEstimatedTotalHeight,
    getEstimatedTotalWidth,
    getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index2, align, scrollOffset, instanceProps, scrollbarSize) {
      return getOffsetForIndexAndAlignment("column", props, index2, align, scrollOffset, instanceProps, scrollbarSize);
    },
    getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index2, align, scrollOffset, instanceProps, scrollbarSize) {
      return getOffsetForIndexAndAlignment("row", props, index2, align, scrollOffset, instanceProps, scrollbarSize);
    },
    getRowOffset: function getRowOffset(props, index2, instanceProps) {
      return getItemMetadata("row", props, index2, instanceProps).offset;
    },
    getRowHeight: function getRowHeight(props, index2, instanceProps) {
      return instanceProps.rowMetadataMap[index2].size;
    },
    getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {
      return findNearestItem("row", props, instanceProps, scrollTop);
    },
    getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {
      var rowCount = props.rowCount, height = props.height;
      var itemMetadata = getItemMetadata("row", props, startIndex, instanceProps);
      var maxOffset = scrollTop + height;
      var offset = itemMetadata.offset + itemMetadata.size;
      var stopIndex = startIndex;
      while (stopIndex < rowCount - 1 && offset < maxOffset) {
        stopIndex++;
        offset += getItemMetadata("row", props, stopIndex, instanceProps).size;
      }
      return stopIndex;
    },
    initInstanceProps: function initInstanceProps(props, instance) {
      var _ref5 = props, estimatedColumnWidth = _ref5.estimatedColumnWidth, estimatedRowHeight = _ref5.estimatedRowHeight;
      var instanceProps = {
        columnMetadataMap: {},
        estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,
        estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,
        lastMeasuredColumnIndex: -1,
        lastMeasuredRowIndex: -1,
        rowMetadataMap: {}
      };
      instance.resetAfterColumnIndex = function(columnIndex, shouldForceUpdate) {
        if (shouldForceUpdate === void 0) {
          shouldForceUpdate = true;
        }
        instance.resetAfterIndices({
          columnIndex,
          shouldForceUpdate
        });
      };
      instance.resetAfterRowIndex = function(rowIndex, shouldForceUpdate) {
        if (shouldForceUpdate === void 0) {
          shouldForceUpdate = true;
        }
        instance.resetAfterIndices({
          rowIndex,
          shouldForceUpdate
        });
      };
      instance.resetAfterIndices = function(_ref6) {
        var columnIndex = _ref6.columnIndex, rowIndex = _ref6.rowIndex, _ref6$shouldForceUpda = _ref6.shouldForceUpdate, shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;
        if (typeof columnIndex === "number") {
          instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);
        }
        if (typeof rowIndex === "number") {
          instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);
        }
        instance._getItemStyleCache(-1);
        if (shouldForceUpdate) {
          instance.forceUpdate();
        }
      };
      return instanceProps;
    },
    shouldResetStyleCacheOnItemSizeChange: false,
    validateProps: function validateProps(_ref7) {
      var columnWidth = _ref7.columnWidth, rowHeight = _ref7.rowHeight;
      if (true) {
        if (typeof columnWidth !== "function") {
          throw Error('An invalid "columnWidth" prop has been specified. Value should be a function. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
        } else if (typeof rowHeight !== "function") {
          throw Error('An invalid "rowHeight" prop has been specified. Value should be a function. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
        }
      }
    }
  });
  var devWarningsDirection = null;
  var devWarningsTagName$1 = null;
  if (true) {
    if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
      devWarningsDirection = /* @__PURE__ */ new WeakSet();
      devWarningsTagName$1 = /* @__PURE__ */ new WeakSet();
    }
  }

  // node_modules/react-virtualized-auto-sizer/dist/index.esm.js
  var import_react24 = __toModule(require_react());
  var classCallCheck = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  var createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  var _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  var inherits = function(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };
  var possibleConstructorReturn = function(self2, call) {
    if (!self2) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self2;
  };
  var slicedToArray = function() {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err2) {
        _d = true;
        _e = err2;
      } finally {
        try {
          if (!_n && _i["return"])
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    return function(arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();
  var windowObject = void 0;
  if (typeof window !== "undefined") {
    windowObject = window;
  } else if (typeof self !== "undefined") {
    windowObject = self;
  } else {
    windowObject = global;
  }
  var cancelFrame = null;
  var requestFrame = null;
  var TIMEOUT_DURATION = 20;
  var clearTimeoutFn = windowObject.clearTimeout;
  var setTimeoutFn = windowObject.setTimeout;
  var cancelAnimationFrameFn = windowObject.cancelAnimationFrame || windowObject.mozCancelAnimationFrame || windowObject.webkitCancelAnimationFrame;
  var requestAnimationFrameFn = windowObject.requestAnimationFrame || windowObject.mozRequestAnimationFrame || windowObject.webkitRequestAnimationFrame;
  if (cancelAnimationFrameFn == null || requestAnimationFrameFn == null) {
    cancelFrame = clearTimeoutFn;
    requestFrame = function requestAnimationFrameViaSetTimeout(callback) {
      return setTimeoutFn(callback, TIMEOUT_DURATION);
    };
  } else {
    cancelFrame = function cancelFrame2(_ref) {
      var _ref2 = slicedToArray(_ref, 2), animationFrameID = _ref2[0], timeoutID = _ref2[1];
      cancelAnimationFrameFn(animationFrameID);
      clearTimeoutFn(timeoutID);
    };
    requestFrame = function requestAnimationFrameWithSetTimeoutFallback(callback) {
      var animationFrameID = requestAnimationFrameFn(function animationFrameCallback() {
        clearTimeoutFn(timeoutID);
        callback();
      });
      var timeoutID = setTimeoutFn(function timeoutCallback() {
        cancelAnimationFrameFn(animationFrameID);
        callback();
      }, TIMEOUT_DURATION);
      return [animationFrameID, timeoutID];
    };
  }
  function createDetectElementResize(nonce) {
    var animationKeyframes = void 0;
    var animationName = void 0;
    var animationStartEvent = void 0;
    var animationStyle = void 0;
    var checkTriggers = void 0;
    var resetTriggers = void 0;
    var scrollListener = void 0;
    var attachEvent = typeof document !== "undefined" && document.attachEvent;
    if (!attachEvent) {
      resetTriggers = function resetTriggers2(element) {
        var triggers = element.__resizeTriggers__, expand = triggers.firstElementChild, contract = triggers.lastElementChild, expandChild = expand.firstElementChild;
        contract.scrollLeft = contract.scrollWidth;
        contract.scrollTop = contract.scrollHeight;
        expandChild.style.width = expand.offsetWidth + 1 + "px";
        expandChild.style.height = expand.offsetHeight + 1 + "px";
        expand.scrollLeft = expand.scrollWidth;
        expand.scrollTop = expand.scrollHeight;
      };
      checkTriggers = function checkTriggers2(element) {
        return element.offsetWidth !== element.__resizeLast__.width || element.offsetHeight !== element.__resizeLast__.height;
      };
      scrollListener = function scrollListener2(e) {
        if (e.target.className && typeof e.target.className.indexOf === "function" && e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0) {
          return;
        }
        var element = this;
        resetTriggers(this);
        if (this.__resizeRAF__) {
          cancelFrame(this.__resizeRAF__);
        }
        this.__resizeRAF__ = requestFrame(function animationFrame() {
          if (checkTriggers(element)) {
            element.__resizeLast__.width = element.offsetWidth;
            element.__resizeLast__.height = element.offsetHeight;
            element.__resizeListeners__.forEach(function forEachResizeListener(fn) {
              fn.call(element, e);
            });
          }
        });
      };
      var animation = false;
      var keyframeprefix = "";
      animationStartEvent = "animationstart";
      var domPrefixes = "Webkit Moz O ms".split(" ");
      var startEvents = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" ");
      var pfx = "";
      {
        var elm = document.createElement("fakeelement");
        if (elm.style.animationName !== void 0) {
          animation = true;
        }
        if (animation === false) {
          for (var i = 0; i < domPrefixes.length; i++) {
            if (elm.style[domPrefixes[i] + "AnimationName"] !== void 0) {
              pfx = domPrefixes[i];
              keyframeprefix = "-" + pfx.toLowerCase() + "-";
              animationStartEvent = startEvents[i];
              animation = true;
              break;
            }
          }
        }
      }
      animationName = "resizeanim";
      animationKeyframes = "@" + keyframeprefix + "keyframes " + animationName + " { from { opacity: 0; } to { opacity: 0; } } ";
      animationStyle = keyframeprefix + "animation: 1ms " + animationName + "; ";
    }
    var createStyles = function createStyles2(doc) {
      if (!doc.getElementById("detectElementResize")) {
        var css = (animationKeyframes ? animationKeyframes : "") + ".resize-triggers { " + (animationStyle ? animationStyle : "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }', head = doc.head || doc.getElementsByTagName("head")[0], style = doc.createElement("style");
        style.id = "detectElementResize";
        style.type = "text/css";
        if (nonce != null) {
          style.setAttribute("nonce", nonce);
        }
        if (style.styleSheet) {
          style.styleSheet.cssText = css;
        } else {
          style.appendChild(doc.createTextNode(css));
        }
        head.appendChild(style);
      }
    };
    var addResizeListener = function addResizeListener2(element, fn) {
      if (attachEvent) {
        element.attachEvent("onresize", fn);
      } else {
        if (!element.__resizeTriggers__) {
          var doc = element.ownerDocument;
          var elementStyle = windowObject.getComputedStyle(element);
          if (elementStyle && elementStyle.position === "static") {
            element.style.position = "relative";
          }
          createStyles(doc);
          element.__resizeLast__ = {};
          element.__resizeListeners__ = [];
          (element.__resizeTriggers__ = doc.createElement("div")).className = "resize-triggers";
          var expandTrigger = doc.createElement("div");
          expandTrigger.className = "expand-trigger";
          expandTrigger.appendChild(doc.createElement("div"));
          var contractTrigger = doc.createElement("div");
          contractTrigger.className = "contract-trigger";
          element.__resizeTriggers__.appendChild(expandTrigger);
          element.__resizeTriggers__.appendChild(contractTrigger);
          element.appendChild(element.__resizeTriggers__);
          resetTriggers(element);
          element.addEventListener("scroll", scrollListener, true);
          if (animationStartEvent) {
            element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
              if (e.animationName === animationName) {
                resetTriggers(element);
              }
            };
            element.__resizeTriggers__.addEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
          }
        }
        element.__resizeListeners__.push(fn);
      }
    };
    var removeResizeListener = function removeResizeListener2(element, fn) {
      if (attachEvent) {
        element.detachEvent("onresize", fn);
      } else {
        element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
        if (!element.__resizeListeners__.length) {
          element.removeEventListener("scroll", scrollListener, true);
          if (element.__resizeTriggers__.__animationListener__) {
            element.__resizeTriggers__.removeEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
            element.__resizeTriggers__.__animationListener__ = null;
          }
          try {
            element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
          } catch (e) {
          }
        }
      }
    };
    return {
      addResizeListener,
      removeResizeListener
    };
  }
  var AutoSizer = function(_React$PureComponent) {
    inherits(AutoSizer2, _React$PureComponent);
    function AutoSizer2() {
      var _ref;
      var _temp, _this, _ret2;
      classCallCheck(this, AutoSizer2);
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _ret2 = (_temp = (_this = possibleConstructorReturn(this, (_ref = AutoSizer2.__proto__ || Object.getPrototypeOf(AutoSizer2)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        height: _this.props.defaultHeight || 0,
        width: _this.props.defaultWidth || 0
      }, _this._onResize = function() {
        var _this$props = _this.props, disableHeight = _this$props.disableHeight, disableWidth = _this$props.disableWidth, onResize2 = _this$props.onResize;
        if (_this._parentNode) {
          var _height = _this._parentNode.offsetHeight || 0;
          var _width = _this._parentNode.offsetWidth || 0;
          var _style = window.getComputedStyle(_this._parentNode) || {};
          var paddingLeft = parseInt(_style.paddingLeft, 10) || 0;
          var paddingRight = parseInt(_style.paddingRight, 10) || 0;
          var paddingTop = parseInt(_style.paddingTop, 10) || 0;
          var paddingBottom = parseInt(_style.paddingBottom, 10) || 0;
          var newHeight = _height - paddingTop - paddingBottom;
          var newWidth = _width - paddingLeft - paddingRight;
          if (!disableHeight && _this.state.height !== newHeight || !disableWidth && _this.state.width !== newWidth) {
            _this.setState({
              height: _height - paddingTop - paddingBottom,
              width: _width - paddingLeft - paddingRight
            });
            onResize2({ height: _height, width: _width });
          }
        }
      }, _this._setRef = function(autoSizer) {
        _this._autoSizer = autoSizer;
      }, _temp), possibleConstructorReturn(_this, _ret2);
    }
    createClass(AutoSizer2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var nonce = this.props.nonce;
        if (this._autoSizer && this._autoSizer.parentNode && this._autoSizer.parentNode.ownerDocument && this._autoSizer.parentNode.ownerDocument.defaultView && this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement) {
          this._parentNode = this._autoSizer.parentNode;
          this._detectElementResize = createDetectElementResize(nonce);
          this._detectElementResize.addResizeListener(this._parentNode, this._onResize);
          this._onResize();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._detectElementResize && this._parentNode) {
          this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props, children = _props.children, className = _props.className, disableHeight = _props.disableHeight, disableWidth = _props.disableWidth, style = _props.style;
        var _state = this.state, height = _state.height, width = _state.width;
        var outerStyle = { overflow: "visible" };
        var childParams = {};
        var bailoutOnChildren = false;
        if (!disableHeight) {
          if (height === 0) {
            bailoutOnChildren = true;
          }
          outerStyle.height = 0;
          childParams.height = height;
        }
        if (!disableWidth) {
          if (width === 0) {
            bailoutOnChildren = true;
          }
          outerStyle.width = 0;
          childParams.width = width;
        }
        return (0, import_react24.createElement)("div", {
          className,
          ref: this._setRef,
          style: _extends3({}, outerStyle, style)
        }, !bailoutOnChildren && children(childParams));
      }
    }]);
    return AutoSizer2;
  }(import_react24.PureComponent);
  AutoSizer.defaultProps = {
    onResize: function onResize() {
    },
    disableHeight: false,
    disableWidth: false,
    style: {}
  };
  var index_esm_default = AutoSizer;

  // src/www/simple/components/BufferEditor.jsx
  var columnWidths2 = [48, ...Array.from({ length: 8 }, () => 24), 16, ...Array.from({ length: 8 }, () => 12)];
  var BufferEditor = class extends import_react25.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        quickEdit: false
      };
      this.cell = this.cell.bind(this);
      this.startChanged = this.startChanged.bind(this);
      this.endChanged = this.endChanged.bind(this);
      this.bankDown = this.bankDown.bind(this);
      this.pageDown = this.pageDown.bind(this);
      this.bankUp = this.bankUp.bind(this);
      this.pageUp = this.pageUp.bind(this);
      this.changeMemory = this.changeMemory.bind(this);
      this.incMemory = this.incMemory.bind(this);
      this.decMemory = this.decMemory.bind(this);
      this.toggleQuickEdit = this.toggleQuickEdit.bind(this);
    }
    startChanged(e) {
      const newAddress = e.target.value;
      if (this.props.onRangeChanged) {
        this.props.onRangeChanged({ start: newAddress, end: this.props.range.end });
      }
    }
    endChanged(e) {
      const newAddress = e.target.value;
      if (this.props.onRangeChanged) {
        this.props.onRangeChanged({ start: this.props.range.start, end: newAddress });
      }
    }
    bankDown() {
      const { bigDelta = 65536, mask = 524287 } = this.props;
      const [start, end] = [this.props.range.start, this.props.range.end].map((n) => Number(n)).map((addr) => "0x" + (addr - bigDelta & mask).toString(16));
      if (this.props.onRangeChanged) {
        this.props.onRangeChanged({ start, end });
      }
    }
    pageDown() {
      const { smallDelta = 256, mask = 524287 } = this.props;
      const [start, end] = [this.props.range.start, this.props.range.end].map((n) => Number(n)).map((addr) => "0x" + (addr - smallDelta & mask).toString(16));
      if (this.props.onRangeChanged) {
        this.props.onRangeChanged({ start, end });
      }
    }
    bankUp() {
      const { bigDelta = 65536, mask = 524287 } = this.props;
      const [start, end] = [this.props.range.start, this.props.range.end].map((n) => Number(n)).map((addr) => "0x" + (addr + bigDelta & mask).toString(16));
      if (this.props.onRangeChanged) {
        this.props.onRangeChanged({ start, end });
      }
    }
    pageUp() {
      const { smallDelta = 256, mask = 524287 } = this.props;
      const [start, end] = [this.props.range.start, this.props.range.end].map((n) => Number(n)).map((addr) => "0x" + (addr + smallDelta & mask).toString(16));
      if (this.props.onRangeChanged) {
        this.props.onRangeChanged({ start, end });
      }
    }
    toggleQuickEdit() {
      this.setState((state) => ({ quickEdit: !state.quickEdit }));
    }
    incMemory(evt) {
      if (!this.state.quickEdit)
        return;
      evt.preventDefault();
      const el = evt.target;
      const addr = Number(el.dataset.addr);
      const data = Number(el.dataset.data) + 1 & 255;
      const { buffer: buffer2, writeFn } = this.props;
      buffer2[writeFn](addr, data);
      this.setState(() => ({}));
      return false;
    }
    decMemory(evt) {
      if (!this.state.quickEdit)
        return;
      evt.preventDefault();
      const el = evt.target;
      const addr = Number(el.dataset.addr);
      const data = Number(el.dataset.data) - 1 & 255;
      const { buffer: buffer2, writeFn } = this.props;
      buffer2[writeFn](addr, data);
      this.setState(() => ({}));
      return false;
    }
    changeMemory(evt) {
      if (this.state.quickEdit)
        return;
      evt.preventDefault();
      const el = evt.target;
      const addr = Number(el.dataset.addr);
      const data = Number(el.dataset.data);
      const char = el.dataset.char;
      const v = prompt(`Value or character for ${toHex5(addr)}?`, "0x" + toHex2(data));
      let newData = data;
      if (v.length < 2) {
        newData = v.charCodeAt(0);
      } else {
        newData = Number(v);
        if (Number.isNaN(newData)) {
          newData = data;
        }
      }
      const { buffer: buffer2, writeFn } = this.props;
      buffer2[writeFn](addr, newData);
      this.setState(() => ({}));
      return false;
    }
    cell({ columnIndex, rowIndex, style }) {
      const { buffer: buffer2, readFn, range } = this.props;
      const { start } = range;
      const rowAddr = rowIndex * 8;
      const whichByte = columnIndex % 9 - 1;
      const realAddr = Number(start) + rowAddr + Math.max(whichByte, 0);
      const byteAtAddr = buffer2[readFn](realAddr);
      const charAtAddr = byteAtAddr < 32 ? "." : String.fromCharCode(byteAtAddr);
      const newStyle = Object.assign({}, style, {
        opacity: columnIndex > 0 ? byteAtAddr === 0 ? "0.25" : byteAtAddr < 32 ? "0.5" : "1" : "1"
      });
      return /* @__PURE__ */ import_react25.default.createElement("div", {
        style: newStyle,
        "data-addr": realAddr,
        "data-data": byteAtAddr,
        "data-char": charAtAddr,
        title: `${toHex5(realAddr)}: ${toHex2(byteAtAddr)} (${charAtAddr})`
      }, columnIndex < 1 ? toHex5(realAddr) : columnIndex > 0 && columnIndex < 9 ? toHex2(byteAtAddr) : columnIndex === 9 ? "" : columnIndex > 9 ? charAtAddr : "");
    }
    render() {
      const { range, className } = this.props;
      const { start, end } = range;
      const rowCount = (Number(end) - Number(start) + 1) / 8;
      const Cell = this.cell;
      return /* @__PURE__ */ import_react25.default.createElement("div", {
        className: "panel",
        style: { display: "flex", flexDirection: "column", overflow: "hidden" }
      }, /* @__PURE__ */ import_react25.default.createElement("div", null, /* @__PURE__ */ import_react25.default.createElement("input", {
        type: "text",
        size: 8,
        value: start,
        onChange: this.startChanged
      }), "-", /* @__PURE__ */ import_react25.default.createElement("input", {
        type: "text",
        size: 8,
        value: end,
        onChange: this.endChanged
      }), /* @__PURE__ */ import_react25.default.createElement("button", {
        onClick: this.bankDown
      }, "--"), " ", /* @__PURE__ */ import_react25.default.createElement("button", {
        onClick: this.pageDown
      }, "-"), "\xA0|\xA0", /* @__PURE__ */ import_react25.default.createElement("button", {
        onClick: this.pageUp
      }, "+"), " ", /* @__PURE__ */ import_react25.default.createElement("button", {
        onClick: this.bankUp
      }, "++"), /* @__PURE__ */ import_react25.default.createElement("label", null, /* @__PURE__ */ import_react25.default.createElement("input", {
        type: "checkbox",
        checked: this.state.quickEdit,
        onChange: this.toggleQuickEdit
      }), "Quick Edit")), /* @__PURE__ */ import_react25.default.createElement("div", {
        style: { overflow: "hidden", flex: "1 1 auto", userSelect: "none", ["-webkit-user-select"]: "none" },
        onClick: this.incMemory,
        onContextMenu: this.decMemory,
        onDoubleClick: this.changeMemory
      }, /* @__PURE__ */ import_react25.default.createElement(index_esm_default, null, ({ height, width }) => /* @__PURE__ */ import_react25.default.createElement(VariableSizeGrid, {
        className,
        columnCount: columnWidths2.length,
        columnWidth: (index2) => columnWidths2[index2],
        rowCount,
        rowHeight: () => 16,
        estimatedRowHeight: 16,
        height,
        width
      }, Cell))));
    }
  };

  // src/www/simple/components/ComputerMemory.jsx
  var ComputerMemory = class extends AutoUpdateComponent {
    constructor(props) {
      super(props);
      this.rangeChanged = this.rangeChanged.bind(this);
    }
    rangeChanged({ start, end } = {}) {
      const { store: store3 } = this.props;
      store3.memoryStart = start || store3.memoryStart;
      store3.memoryEnd = end || store3.memoryEnd;
      this.setState({});
    }
    render() {
      const { store: store3 } = this.props;
      const { memoryStart, memoryEnd } = store3;
      const range = { start: memoryStart, end: memoryEnd };
      return /* @__PURE__ */ import_react26.default.createElement(BufferEditor, {
        range,
        buffer: store3.computer.memory,
        readFn: "readByte",
        writeFn: "writeByte",
        onRangeChanged: this.rangeChanged,
        className: "Memory",
        bigDelta: 65536,
        smallDelta: 256,
        mask: 524287
      });
    }
  };

  // src/www/simple/components/ComputerKeyboard.jsx
  var import_react27 = __toModule(require_react());
  var ComputerKeyboard = class extends import_react27.default.Component {
    constructor(props) {
      super(props);
      this.keyPressed = this.keyPressed.bind(this);
      this.keyDown = this.keyDown.bind(this);
      this.keyUp = this.keyUp.bind(this);
      this.handlePaste = this.handlePaste.bind(this);
      this._handlers = {};
    }
    componentDidMount() {
    }
    componentWillUnmount() {
    }
    keyPressed(e) {
      if (e.target.tagName === "INPUT" && !e.target.classList.contains("keyboard")) {
        return;
      }
      if (e.target.tagName === "TEXTAREA") {
        return;
      }
      e.preventDefault();
    }
    keyDown(e) {
      if (e.target.tagName === "INPUT" && !e.target.classList.contains("keyboard")) {
        return;
      }
      if (e.target.tagName === "TEXTAREA") {
        return;
      }
      const { store: store3 } = this.props;
      const { keyboard } = store3.devices;
      keyboard.keyDown(e.nativeEvent ? e.nativeEvent.code : e.code);
      e.preventDefault();
    }
    keyUp(e) {
      if (e.target.tagName === "INPUT" && !e.target.classList.contains("keyboard")) {
        return;
      }
      if (e.target.tagName === "TEXTAREA") {
        return;
      }
      const { store: store3 } = this.props;
      const { keyboard } = store3.devices;
      keyboard.keyUp(e.nativeEvent ? e.nativeEvent.code : e.code);
      e.preventDefault();
    }
    handlePaste(e) {
      const target = e.target;
      const data = target.value;
      const { store: store3 } = this.props;
      const { keyboard } = store3.devices;
      let l = 0;
      const id = setInterval(() => {
        if (l >= data.length) {
          clearInterval(id);
          target.value = "";
        } else {
          const c = data.charCodeAt(l);
          switch (c) {
            case 8220:
            case 8221:
              keyboard.keyPressed(34);
              break;
            case 10:
              keyboard.keyPressed(13);
              break;
            default:
              keyboard.keyPressed(c);
          }
          l++;
        }
      }, 4);
    }
    render() {
      return /* @__PURE__ */ import_react27.default.createElement("div", {
        className: "panel"
      }, /* @__PURE__ */ import_react27.default.createElement("label", null, "Input:", /* @__PURE__ */ import_react27.default.createElement("input", {
        autoFocus: true,
        autoComplete: "off",
        className: "keyboard",
        type: "text",
        size: 1
      }), /* @__PURE__ */ import_react27.default.createElement("textarea", {
        onChange: this.handlePaste,
        rows: 1,
        cols: 1
      })));
    }
  };

  // src/www/simple/components/ComputerIO.jsx
  var import_react28 = __toModule(require_react());
  var ComputerIO = class extends AutoUpdateComponent {
    constructor(props) {
      super(props);
      this.state = {
        ioStart: "0x00",
        ioEnd: "0xFF"
      };
      this.rangeChanged = this.rangeChanged.bind(this);
    }
    rangeChanged({ start, end } = {}) {
      this.state.ioStart = start || this.state.ioStart;
      this.state.ioEnd = end || this.state.ioEnd;
      this.setState({});
    }
    render() {
      const { store: store3 } = this.props;
      const { ioStart, ioEnd } = this.state;
      const range = { start: ioStart, end: ioEnd };
      return /* @__PURE__ */ import_react28.default.createElement(BufferEditor, {
        range,
        buffer: store3.computer.controller,
        readFn: "pureRead",
        writeFn: "pureWrite",
        onRangeChanged: this.rangeChanged,
        className: "Io",
        bigDelta: 256,
        smallDelta: 16,
        mask: 255
      });
    }
  };

  // src/www/simple/index.js
  var $ = require_jquery();
  window.$ = $;
  var GoldenLayout = require_goldenlayout();
  var store2 = new Store();
  window.store = store2;
  window.React = import_react29.default;
  window.ReactDOM = import_react_dom.default;
  var defaultConfig = {
    settings: {
      showPopoutIcon: false,
      showCloseIcon: false
    },
    content: [{
      type: "column",
      content: [
        {
          type: "row",
          height: 14,
          content: [
            {
              type: "react-component",
              title: "Control",
              component: "computer-control",
              props: { store: store2 }
            },
            {
              type: "react-component",
              width: 15,
              title: "FPS",
              component: "fps",
              props: { store: store2 }
            }
          ]
        },
        {
          type: "row",
          content: [
            {
              type: "column",
              content: [
                {
                  type: "stack",
                  height: 75,
                  content: [
                    {
                      type: "react-component",
                      title: "Screen",
                      component: "computer-screen",
                      props: { store: store2 }
                    },
                    {
                      type: "react-component",
                      title: "Console",
                      component: "computer-console",
                      props: { store: store2 }
                    }
                  ]
                }
              ]
            },
            {
              type: "column",
              width: 25,
              content: [
                {
                  type: "stack",
                  height: 75,
                  content: [
                    {
                      type: "react-component",
                      title: "State",
                      component: "computer-state",
                      width: 25,
                      props: { store: store2 }
                    },
                    {
                      type: "react-component",
                      title: "Code",
                      component: "code-editor",
                      width: 25,
                      props: { store: store2 }
                    },
                    {
                      type: "react-component",
                      title: "Disassembly",
                      component: "disassembler",
                      width: 25,
                      props: { store: store2 }
                    }
                  ]
                },
                {
                  type: "stack",
                  height: 25,
                  content: [
                    {
                      type: "react-component",
                      title: "Memory",
                      component: "computer-memory",
                      width: 25,
                      props: { store: store2 }
                    },
                    {
                      type: "react-component",
                      title: "I/O",
                      component: "computer-io",
                      width: 25,
                      props: { store: store2 }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }]
  };
  function setProps(node) {
    if (Array.isArray(node)) {
      node.forEach((node2) => setProps(node2));
    } else {
      if (node.type.endsWith("component")) {
        node.props = { store: store2 };
      } else {
        if (node.content) {
          setProps(node.content);
        }
      }
    }
  }
  function removeProps(node) {
    if (Array.isArray(node)) {
      node.forEach((node2) => removeProps(node2));
    } else {
      if (node.type.endsWith("component")) {
        node.props = null;
        node.componentState = {};
      } else {
        if (node.content) {
          removeProps(node.content);
        }
      }
    }
  }
  var lastConfigSaveTimer = null;
  function initGoldenLayout() {
    let config3;
    const storedConfig = localStorage.getItem("panelConfig");
    if (storedConfig) {
      config3 = JSON.parse(storedConfig);
      Object.assign(config3.settings, defaultConfig.settings);
      setProps(config3.content);
    } else {
      config3 = defaultConfig;
    }
    if (window.location.search.includes("reset-layout")) {
      config3 = defaultConfig;
    }
    const myLayout = new GoldenLayout(config3);
    myLayout.registerComponent("computer-control", ComputerControl);
    myLayout.registerComponent("fps", FPS);
    myLayout.registerComponent("computer-screen", ComputerScreen);
    myLayout.registerComponent("computer-state", ComputerState);
    myLayout.registerComponent("disassembler", Disassembler);
    myLayout.registerComponent("computer-memory", ComputerMemory);
    myLayout.registerComponent("computer-io", ComputerIO);
    myLayout.registerComponent("computer-console", ComputerConsole);
    myLayout.registerComponent("computer-keyboard", ComputerKeyboard);
    myLayout.registerComponent("code-editor", CodeEditor);
    myLayout.registerComponent("keyboard", Keyboard2);
    myLayout.init();
    myLayout.on("stateChanged", () => {
      if (!lastConfigSaveTimer) {
        lastConfigSaveTimer = setTimeout(() => {
          lastConfigSaveTimer = null;
          try {
            const curConfig = myLayout.toConfig();
            removeProps(curConfig.content);
            localStorage.setItem("panelConfig", JSON.stringify(curConfig));
          } catch (err2) {
            console.log(err2.message);
          }
        }, 1e3);
      }
    });
  }
  initGoldenLayout();
  setTimeout(() => document.getElementById("start").click(), 250);
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.14.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.14.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=index.js.map
