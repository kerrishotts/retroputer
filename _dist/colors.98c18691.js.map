{"version":3,"sources":["../../../docs/technical/technical-overview/6448-video-generator-1/colors.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"colors.98c18691.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Colors`}</h1>\n    <p>{`The VGP can render 256 colors at once from a much larger palette. For most color values, the resulting palette entry directly corresponds to the color value. That is, color `}<inlineCode parentName=\"p\">{`0x01`}</inlineCode>{` maps to palette entry `}<inlineCode parentName=\"p\">{`0x01`}</inlineCode>{`. Except for the background and border color, however, `}<inlineCode parentName=\"p\">{`0x00`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`0xFF`}</inlineCode>{` refer instead to the `}<em parentName=\"p\">{`resource background`}</em>{` and `}<em parentName=\"p\">{`foreground color`}</em>{` respectively. If the `}<em parentName=\"p\">{`resource background`}</em>{` or `}<em parentName=\"p\">{`foreground color`}</em>{` is also `}<inlineCode parentName=\"p\">{`0x00`}</inlineCode>{`, that color is considered to be `}<em parentName=\"p\">{`transparent`}</em>{`.`}</p>\n    <p>{`Determining the resource's corresponding background or foreground color depends upon the resource itself:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The background color for the screen is derived from port `}<inlineCode parentName=\"li\">{`0x11`}</inlineCode>{`. Should this value be `}<inlineCode parentName=\"li\">{`0x00`}</inlineCode>{`, palette entry `}<inlineCode parentName=\"li\">{`0x00`}</inlineCode>{` is used. `}{`(`}{`No transparency`}{`)`}</li>\n      <li parentName=\"ul\">{`The border color for the screen is derived from `}<inlineCode parentName=\"li\">{`0x2B`}</inlineCode>{`. Should this value be `}<inlineCode parentName=\"li\">{`0x00`}</inlineCode>{`, palette entry `}<inlineCode parentName=\"li\">{`0x00`}</inlineCode>{` is used. `}{`(`}{`No transparency`}{`)`}</li>\n      <li parentName=\"ul\">{`When rendering tiles, the background color is obtained from the memory address `}<inlineCode parentName=\"li\">{`0x2000`}</inlineCode>{` higher than the tile's address. Any `}<inlineCode parentName=\"li\">{`0x00`}</inlineCode>{` pixel from the corresponding tile definition will be rendered in the background color. If this background color is `}<inlineCode parentName=\"li\">{`0x00`}</inlineCode>{`, the pixel is transparent. The foreground color is obtained from the memory address `}<inlineCode parentName=\"li\">{`0x1000`}</inlineCode>{` higher than the tile's address. Any `}<inlineCode parentName=\"li\">{`0xFF`}</inlineCode>{` pixel from the corresponding tile definition is rendered as the foreground color. As with the background color, an `}<inlineCode parentName=\"li\">{`0x00`}</inlineCode>{` result is considered transparent.`}</li>\n      <li parentName=\"ul\">{`When rendering Hires Graphics, `}<inlineCode parentName=\"li\">{`0x00`}</inlineCode>{` is considered to be transparent.`}</li>\n      <li parentName=\"ul\">{`When rendering sprites, tile definitions are used. However, instead of obtaining colors from tile page memory, background and foreground colors are obtained from the sprite configuration settings. The foreground color is stored `}<inlineCode parentName=\"li\">{`0x40`}</inlineCode>{` bytes from the sprite data, and the background is stored `}<inlineCode parentName=\"li\">{`0x80`}</inlineCode>{` bytes from the sprite data.`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}