{"version":3,"sources":["../../../docs/technical/technical-overview/6516-central-processing-unit/flags.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"flags.fec33eac.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Flags`}</h1>\n    <p>{`Retroputer has eight flags, and are stored in the STATUS register.. Each flag can be SET or UNSET. This corresponds to `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{`(`}{`SET`}{`)`}{` and `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` `}{`(`}{`UNSET`}{`)`}{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Index`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Alias`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`7`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Exception`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SET if the processor has encountered an exception.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`6`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IRQ Disable`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`When SET maskable interrupts are ignored.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`5`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IRQ In Service`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SET when the processor is servicing an interrupt. Useful for a trap handler to determine if it is dealing with a hardware interrupt `}{`(`}{`SET`}{`)`}{` or a software trap `}{`(`}{`UNSET`}{`)`}{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`4`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Single Step`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`When SET, the processor will execute a single instruction and then WAIT until an NMI is received in order to continue.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`3`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Negative`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SET if the result of the last arithmetic operation would result in a negative number `}{`(`}{`MSB is SET`}{`)`}{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Carry`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`When SET, the last arithmetic operation caused a carry condition`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Overflow`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SET if the result of the last arithmetic operation would result in an arithmetic overflow `}{`(`}{`important for 2's complement math`}{`)`}{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Zero`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`When ZERO, the last arithmetic operation resulted in zero.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Each flag can be set using the `}<inlineCode parentName=\"p\">{`SET`}</inlineCode>{` instruction, along with the flag alias. To clear a flag, use the `}<inlineCode parentName=\"p\">{`CLR`}</inlineCode>{` instruction with the flag alias.`}</p>\n    <p>{`Testing the state of a flag is done by using the `}<inlineCode parentName=\"p\">{`BR(S)`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CALL(S)`}</inlineCode>{` instructions.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}