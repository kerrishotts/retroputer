{"version":3,"sources":["../../../docs/programming-retroputer/asm/identifiers.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"identifiers.71eb4187.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Identifiers`}</h1>\n    <p>{`Identifiers can be used to label any address, whether it be for code or for data storage. Identifiers can consist of alphanumeric characters as well as underscores and dashes.`}</p>\n    <blockquote>\n      <h4 parentName=\"blockquote\">{`Important`}</h4>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`An identifier must start with an alphabetic character or an underscore. It may not begin with a digit or a dash.`}</li>\n        <li parentName=\"ul\">{`An identifier may `}<em parentName=\"li\">{`not`}</em>{` be a reserved word or register.`}</li>\n      </ul>\n    </blockquote>\n    <p>{`Identifiers are often defined by providing the name of the identifier followed by a colon `}{`(`}<inlineCode parentName=\"p\">{`:`}</inlineCode>{`)`}{`. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`cursor-pos: .word 0x0000\ncursor-page: .byte 0x01\n\n    LD A, screen.tile-pages-bot\n    LD B, screen.tile-page-offset\n    XOR C, C\n    LD CL, [cursor-page]\n    SUB A, B\nloop:\n    ADD A, B\n    LOOP CL, loop\n`}</code></pre>\n    <p>{`Identifiers are scoped to their nearest parent block. Identifiers within a block do not need additional qualification, but to access identifiers in other blocks, one must qualify the identifier with the scope name. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment kdata 0x0B800 .append {\n    cursor-pos: .word 0x0000\n    cursor-page: .byte 0x01\n}\n\n.segment kcode 0x0BC00 .append {\n    LD A, [kdata.cursor-pos]\n}\n`}</code></pre>\n    <h2>{`Reserved Words`}</h2>\n    <h3>{`Registers`}</h3>\n    <p>{`Registers can be specified using their alias `}{`(`}<inlineCode parentName=\"p\">{`A`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`B`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`D`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Y`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`SP`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BP`}</inlineCode>{`)`}{`. For `}<inlineCode parentName=\"p\">{`A`}</inlineCode>{` - `}<inlineCode parentName=\"p\">{`D`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Y`}</inlineCode>{`, the eight-bit form can also be used `}{`(`}<inlineCode parentName=\"p\">{`AL`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`BL`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`CL`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`DL`}</inlineCode>{`, etc`}{`)`}{`.`}</p>\n    <p>{`The status register and the `}<inlineCode parentName=\"p\">{`PC`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`MM`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`CF`}</inlineCode>{` registers cannot be specified directly in any assembly language instruction. This also means that registers 16 - 23 are inaccessible. Only certain commands can work on these registers. `}<inlineCode parentName=\"p\">{`PUSHF`}</inlineCode>{`, for example, can push the status register on to the stack. `}<inlineCode parentName=\"p\">{`BR`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CALL`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`RET`}</inlineCode>{` all manipulate the `}<inlineCode parentName=\"p\">{`PC`}</inlineCode>{`.`}</p>\n    <h3>{`Flags`}</h3>\n    <p>{`Flags can be specified using their names: `}<inlineCode parentName=\"p\">{`N`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`V`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Z`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ID`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`IS`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`EX`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`SS`}</inlineCode>{`. Flag names are not reserved for identifiers as it is unambiguous when flags are being used in an instruction.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}