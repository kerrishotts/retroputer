parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"CxWT":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=i;var t=a(require("react")),e=require("@mdx-js/react");function a(t){return t&&t.__esModule?t:{default:t}}function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t}).apply(this,arguments)}const n=t=>(function(a){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,e.mdx)("div",a)}),d={},l="wrapper";function i({components:t,...a}){return(0,e.mdx)(l,r({},d,a,{components:t,mdxType:"MDXLayout"}),(0,e.mdx)("h1",null,"Flags"),(0,e.mdx)("p",null,"Retroputer has eight flags, and are stored in the STATUS register.. Each flag can be SET or UNSET. This corresponds to ",(0,e.mdx)("inlineCode",{parentName:"p"},"1"),"(","SET",")"," and ",(0,e.mdx)("inlineCode",{parentName:"p"},"0")," ","(","UNSET",")","."),(0,e.mdx)("table",null,(0,e.mdx)("thead",{parentName:"table"},(0,e.mdx)("tr",{parentName:"thead"},(0,e.mdx)("th",r({parentName:"tr"},{align:"left"}),"Index"),(0,e.mdx)("th",r({parentName:"tr"},{align:"left"}),"Name"),(0,e.mdx)("th",r({parentName:"tr"},{align:"left"}),"Alias"),(0,e.mdx)("th",r({parentName:"tr"},{align:"left"}),"Description"))),(0,e.mdx)("tbody",{parentName:"table"},(0,e.mdx)("tr",{parentName:"tbody"},(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"7"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"Exception"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"EX"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"SET if the processor has encountered an exception.")),(0,e.mdx)("tr",{parentName:"tbody"},(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"6"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"IRQ Disable"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"ID"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"When SET maskable interrupts are ignored.")),(0,e.mdx)("tr",{parentName:"tbody"},(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"5"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"IRQ In Service"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"IS"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"SET when the processor is servicing an interrupt. Useful for a trap handler to determine if it is dealing with a hardware interrupt ","(","SET",")"," or a software trap ","(","UNSET",")",".")),(0,e.mdx)("tr",{parentName:"tbody"},(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"4"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"Single Step"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"SS"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"When SET, the processor will execute a single instruction and then WAIT until an NMI is received in order to continue.")),(0,e.mdx)("tr",{parentName:"tbody"},(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"3"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"Negative"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"N"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"SET if the result of the last arithmetic operation would result in a negative number ","(","MSB is SET",")",".")),(0,e.mdx)("tr",{parentName:"tbody"},(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"2"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"Carry"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"C"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"When SET, the last arithmetic operation caused a carry condition")),(0,e.mdx)("tr",{parentName:"tbody"},(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"1"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"Overflow"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"V"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"SET if the result of the last arithmetic operation would result in an arithmetic overflow ","(","important for 2's complement math",")",".")),(0,e.mdx)("tr",{parentName:"tbody"},(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"0"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"Zero"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"Z"),(0,e.mdx)("td",r({parentName:"tr"},{align:"left"}),"When ZERO, the last arithmetic operation resulted in zero.")))),(0,e.mdx)("p",null,"Each flag can be set using the ",(0,e.mdx)("inlineCode",{parentName:"p"},"SET")," instruction, along with the flag alias. To clear a flag, use the ",(0,e.mdx)("inlineCode",{parentName:"p"},"CLR")," instruction with the flag alias."),(0,e.mdx)("p",null,"Testing the state of a flag is done by using the ",(0,e.mdx)("inlineCode",{parentName:"p"},"BR(S)")," and ",(0,e.mdx)("inlineCode",{parentName:"p"},"CALL(S)")," instructions."))}i.isMDXComponent=!0;
},{"react":"SAdv","@mdx-js/react":"QaRW"}]},{},[], null)
//# sourceMappingURL=/flags.fec33eac.js.map