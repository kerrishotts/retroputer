{"version":3,"sources":["../../../docs/programming-retroputer/asm/subroutine-calling-convention.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"subroutine-calling-convention.95d5f25e.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Calling Convention`}</h1>\n    <h2>{`Volatile and Preserved Registers`}</h2>\n    <p>{`When calling a subroutine, it is expected that some registers will be preserved, whereas others will be destroyed.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Register`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Typical Use`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Preserved?`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`By Whom?`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`A`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`General Purpose Register`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Yes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Subroutine`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`B`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`General Purpose Register`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Yes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Subroutine`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Counter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`No`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`D`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Access Register & Return Value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`No`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">X</th>\n      <th style=\"text-align:left\">\n        <p>Index Register / Low Pointer Address /</p>\n        <p>Low Pointer Address Return Value</p>\n      </th>\n      <th style=\"text-align:left\">No</th>\n      <th style=\"text-align:left\"></th>\n    </tr>\n  </thead>\n  <tbody></tbody>\n    </table>| Y | Index Register / Low Pointer address | No |  |\n| :--- | :--- | :--- | :--- |\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BP`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Base Pointer`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Yes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Subroutine`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SP`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Stack Pointer`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Yes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Subroutine`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Flags`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Processor Status`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Yes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Subroutine`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`PC`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Program Counter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Yes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`CPU`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MM`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Memory Map`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Yes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Subroutine`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MP`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Memory Pointer`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Yes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`CPU`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n      </tbody>\n    </table>\n    <p>{`Because the 6516 has several registers, the calling convention does use some of them when passing parameters to subroutines. Any remaining parameters are passed on the stack.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Parameter Index `}{`(`}{`Word`}{`)`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Register`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`D`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`3+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BP+-2 `}{`(`}{`...`}{`)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <h3 parentName=\"blockquote\">{`IMPORTANT`}</h3>\n      <p parentName=\"blockquote\">{`Aggregates `}{`(`}{`8-bit values`}{`)`}{` are passed in using `}<em parentName=\"p\">{`both`}</em>{` the low and high portions of the corresponding 16-bit register. As such, the parameter ordering changes to the following: DL, DH, CL, CH, `}<em parentName=\"p\">{`stack`}</em>{`.`}</p>\n    </blockquote>\n    <h2>{`Pointer Parameters`}</h2>\n    <p>{`When a parameter needs to be a pointer to some data, the form `}<inlineCode parentName=\"p\">{`R[,IDX]`}</inlineCode>{` is used `}{`(`}{`where `}<inlineCode parentName=\"p\">{`IDX`}</inlineCode>{` is an index register`}{`)`}{`. On the stack, a similar pattern is used where `}<inlineCode parentName=\"p\">{`BP+-2`}</inlineCode>{` would refer to the top 16 bits and `}<inlineCode parentName=\"p\">{`BP+-4`}</inlineCode>{` would refer to the bottom 16 bits of an address `}{`(`}{`which is 19 bits`}{`)`}{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Parameter Index `}{`(`}{`Word`}{`)`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Register`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`D, X`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C, Y`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`3+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BP+-2, BP+-4 `}{`(`}{`...`}{`)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`Integer Return Value`}</h2>\n    <p>{`The return value of a subroutine is returned through the `}<inlineCode parentName=\"p\">{`D`}</inlineCode>{` register for 16-bit values `}{`(`}{`or `}<inlineCode parentName=\"p\">{`DL`}</inlineCode>{` for 8-bit values`}{`)`}{`.`}</p>\n    <h2>{`Pointer Return Value`}</h2>\n    <p>{`Should a return value need to be a pointer to another memory address, the result must be in `}<inlineCode parentName=\"p\">{`D,X`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`D`}</inlineCode>{` contains the top 16-bits of the address and `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` contains the bottom 16-bits address such that `}<inlineCode parentName=\"p\">{`( D << 3 ) | X`}</inlineCode>{` results in the desired address.`}</p>\n    <h2>{`In Practice`}</h2>\n    <p>{`Let's go over a few of some typical subroutines and how one calls them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment data 0x03000 {\n    str: .string \"Hello, World\"\n         .byte 0x00\n}\n.segment code 0x02000 {\n\n    ld d, data.str >> 3    # passing {ptr} str\n    ld x, data.str & 0x7   # passing {ptr} str\n    ld cl, 10              # passing {byte} col\n    exc c                  # swap bytes\n    ld cl, 12              # passing {byte} row\n    calls print\n    brk\n\n    ##\n    ## Displays a string at the desired row and column.\n    ##\n    ## @param {ptr} str - the string to display\n    ## @param {byte} row - the row at which to start displaying it\n    ## @param {byte} col - the column at which to start displaying it\n    ## @affects X, Y\n    ## @returns {byte} newRow - the ending row\n    ## @returns {byte} newCol - the ending column\n    print: {\n    pre:\n        push b\n        push a\n        pushf\n    main:\n        mov a, cl                # calculate addr = row * 32 + col\n        shl a, 5                 #           a    = cl * 32  + ch\n        mov b, c\n        clr c # clear carry, so shr isn't sign extending\n        shr b, 8\n        add a, b\n\n        mov y, a                 # y is used as the screen pos\n        ld a, 0x00FF             # color\n        ld bl, [D,X]             # load character        \n        while !z do {\n            st [0x10000,y], bl   # write to screen\n            st [0x11000,y], al   # foreground color\n            exc a\n            st [0x12000,y], al   # background color\n            exc a\n            inc x\n            inc y\n            ld bl, [D,X]         # load next character\n            cmp bl, 0x00         # is it NULL?\n        }\n\n        mov a, y\n        and a, 0b11111\n        exc a\n        mov b, y\n        shr b, 5\n        add a, b\n        mov d, a     # Compute return row and column\n\n    post:\n       popf\n       pop a\n       pop b\n       ret\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}