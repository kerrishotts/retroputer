{"version":3,"sources":["../../../docs/assembly-language/untitled.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";AAqDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EApDA,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,iBAmDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,IAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,UAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,WA/CA,MAAMA,EAAgBC,IAAQ,SAA6BC,GAElD,OADPC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,EAASC,EAAAA,KAAAA,MAAAA,KAGZG,EAAc,GAGdC,EAAY,UACH,SAASC,GAAW,WACjCC,KACGN,IAEI,OAAA,EAAC,EAAA,KAAA,EAAcG,EAAAA,GAAAA,EAAiBH,EAAhC,CAAuC,WAAYM,EAAY,QAAQ,eAC5E,EADK,EAAA,KAAA,KAAA,KAAA,wBAEL,EAA0C,EAAA,KAAA,IAAA,KAAA,uCAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,KAAjE,QAFK,oOAGL,EAHK,EAAA,KAAA,KAAA,KAAA,sBAIL,EAJK,EAAA,KAAA,IAAA,KAAA,sKAKL,EAAK,EAAA,KAAA,MAAA,MAAA,EAAA,EAAA,KAAA,OAAA,EAAA,CAAM,WAAW,OAAU,CACf,UAAA,kBADjB,6YA6BJD,EAAWE,gBAAiB","file":"untitled.188121b3.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`About the Assembler`}</h1>\n    <p>{`The Retroputer Assembler is called `}<inlineCode parentName=\"p\">{`BASM`}</inlineCode>{` and, while not a macro assembler, can parse some constructs that feel like a high-level language. BASM generates output that Retroputer can then load into its memory and feed to the 6516 CPU to execute the desired program.`}</p>\n    <h3>{`Program Structure`}</h3>\n    <p>{`An assembly language program consists of a series of constant definitions, namespaces, segments, and comments. Code and data can only be defined within segments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`#\n# Comments are allowed outside of any namespace or block\n#\n\n.namespace app {\n    .segment code 0x01000 {\n        xor a, a\n    }\n}\n\n# segments don't have to live within namespaces\n.segment kcode 0x02000 {\n    xor b, b\n}\n\n# you can have as many namespaces and segments as needed\n.namespace util {\n    .segment code 0x09000 {\n        str-length:\n            ret\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}