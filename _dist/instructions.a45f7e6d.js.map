{"version":3,"sources":["../../../docs/programming-retroputer/asm/instructions.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"instructions.a45f7e6d.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Instructions`}</h1>\n    <blockquote>\n      <h3 parentName=\"blockquote\">{`Instruction Set Encodings`}</h3>\n      <p parentName=\"blockquote\">{`If you want to see the entire instruction set and how it is encoded, `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSIMH-L17-UxNa2rhyLNF6gWUWPXic_-txike9oHIXu6zykN89dUTzA0-zNfKN-6toSEn6ox084nnId/pubhtml\"\n        }}>{`take a look at this reference`}</a>{`.`}</p>\n    </blockquote>\n    <h2>{`ADD `}{`(`}{`with Carry`}{`)`}</h2>\n    <p>{`Adds the source to the destination and stores the result in the destination register using the following algorithm `}{`(`}{`here, `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{` denotes the carry flag`}{`)`}{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`r = carry_in + source + dest_in\nsign_source = source[msb]\nsign_dest = dest[msb]\ndest_out = r[msb:0]\n`}</code></pre>\n    <p>{`Once the result of the operation is computed, the ALU computes the flags as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`z_out = {\n    1 when r = 0\n    0 when r != 0\n}\n\nc_out = {\n    0 when r>>width = 0\n    1 when r>>width >= 0\n}\n\nn_out = r[msb]\n\nv_out = {\n    0 when sign_dest = 0, sign_source = 0, and n_out = 0\n    1 when sign_dest = 0, sign_source = 0, and n_out = 1\n    0 when sign_dest = 0, sign_source = 1, and n_out = 0\n    0 when sign_dest = 0, sign_source = 1, and n_out = 1\n    0 when sign_dest = 1, sign_source = 0, and n_out = 0\n    0 when sign_dest = 1, sign_source = 0, and n_out = 1\n    1 when sign_dest = 1, sign_source = 1, and n_out = 0\n    0 when sign_dest = 1, sign_source = 1, and n_out = 1\n}    \n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Warning`}</strong></p>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`ADD`}</inlineCode>{` always takes the carry flag in to account when performing addition. As such, you should always `}<inlineCode parentName=\"p\">{`CLR C`}</inlineCode>{` before any addition when you know that the carry flag should not be considered.`}</p>\n    </blockquote>\n    <h4>{`Forms`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Immediate 8-bit value`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Immediate 16-bit value`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`ADD dest, src\nADD dest, immediate\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 1234\n    add a, 2345       # a is 3579\n\n    ld a, 0x5000\n    ld b, 0x4000\n    add a, b          # value in a is incorrect if this is signed\n                      # addition -- V is set. For unsigned addition\n                      # a is 0x9000.\n}\n`}</code></pre>\n    <h2>{`AND `}{`(`}{`Bitwise AND`}{`)`}</h2>\n    <p>{`Performs a bitwise AND on the source and destination operands, and stores the result in the destination.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`r = dest_out = dest_in AND source_in\n`}</code></pre>\n    <p>{`Once the result of the operation is computed, the ALU computes the flags as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`z_out = {\n    1 when r = 0\n    0 when r != 0\n}\n\nc_out = 0\n\nn_out = r[msb]\n\nv_out = 0\n`}</code></pre>\n    <h4>{`Forms`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Immediate 8-bit value`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Immediate 16-bit value`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`AND dest, src\nAND dest, immediate\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld al, 0b1111_0000\n    and al, 0b0001_1000    # al is 0b0001_0000\n\n    ld a, 0x1234\n    ld b, 0x00FF\n    and a, b               # a is 0x0034\n}\n`}</code></pre>\n    <h2>{`BR `}{`(`}{`Branch`}{`)`}</h2>\n    <p>{`Sets `}<inlineCode parentName=\"p\">{`PC`}</inlineCode>{` to the specified value, causing a jump or branch to that location. Code execution continues from the new address. The width of the value determines if the branch is `}<em parentName=\"p\">{`short`}</em>{` `}{`(`}{`8 bits`}{`)`}{` or `}<em parentName=\"p\">{`long`}</em>{` `}{`(`}{`16 bits`}{`)`}{`.`}</p>\n    <p>{`Branches can be unconditional `}{`(`}{`the branch is taken every time`}{`)`}{`, or they can be conditional `}{`(`}{`based upon if a flag is set or not`}{`)`}{`.`}</p>\n    <h4>{`Forms`}</h4>\n    <p>{`A branch is `}<em parentName=\"p\">{`long`}</em>{` unless `}<inlineCode parentName=\"p\">{`s`}</inlineCode>{` is added to the alias. That is, `}<inlineCode parentName=\"p\">{`br`}</inlineCode>{` is a long branch, whereas `}<inlineCode parentName=\"p\">{`brs`}</inlineCode>{` is a short branch.`}</p>\n    <p>{`The unconditional form specifies only a target address:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`br next-frame        # long branch\n`}</code></pre>\n    <p>{`The conditional form specifies a target address `}<em parentName=\"p\">{`and`}</em>{` a flag. If the flag is set, the branch will be taken. Conditionals can also be `}<em parentName=\"p\">{`negated`}</em>{`, meaning that the branch will be taken if the flag is clear.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`brs z next-frame        # branch to next-frame if last ALU op was zero\nbr !c end-game          # branch to end-game if carry is clear\n`}</code></pre>\n    <p>{`It should be noted that there are no concessions offered for checking multiple flags at once -- such as you might want to do when checking if a value is less than or equal to another value. Instead, you must make multiple branches:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`ld a, 0x4000\ncmp a, 0x4001\nbr z lte        # when zero is set, that signals equality\nbr n lte        # when negative is set, that signals less-than\n`}</code></pre>\n    <p>{`For reference, the following conditions may prove useful when mapping flags to their mathematical equivalents:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result of Comparison`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Flags`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Equal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Not Equal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`!Z`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Less Than`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Greater Than`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Less Than or Equal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z, N`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Greater Than or Equal`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z, C`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`BR[S] [!][flag]\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment data 0x03000 {\n     lives: .byte 3\n}\n.segment code 0x02000 {\n     ld al, [lives]\n     cmp al, 0\n     br z game-over\n     # more code\ngame-over:\n     # no more lives left!\n     brk\n}\n`}</code></pre>\n    <h2><strong parentName=\"h2\">{`BRK `}{`(`}{`Break`}{`)`}</strong></h2>\n    <p>{`Transitions the CPU to single-step mode. This will cause the debugger to halt the processor until a single-step or continue signal is received.`}</p>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`+`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`BRK\n`}</code></pre>\n    <h2>{`CALL `}{`(`}{`Subroutine`}{`)`}</h2>\n    <p>{`Pushes `}<inlineCode parentName=\"p\">{`PC`}</inlineCode>{` on to the stack, and then sets `}<inlineCode parentName=\"p\">{`PC`}</inlineCode>{` to the specified value, causing a jump or branch to that location. Code execution continues from the new address. The width of the value determines if the branch is `}<em parentName=\"p\">{`short`}</em>{` `}{`(`}{`8 bits`}{`)`}{` or `}<em parentName=\"p\">{`long`}</em>{` `}{`(`}{`16 bits`}{`)`}{`.`}</p>\n    <p>{`Calls can be unconditional `}{`(`}{`the branch is taken every time`}{`)`}{`, or they can be conditional `}{`(`}{`based upon if a flag is set or not`}{`)`}{`.`}</p>\n    <h4>{`Forms`}</h4>\n    <p>{`A call is `}<em parentName=\"p\">{`long`}</em>{` unless `}<inlineCode parentName=\"p\">{`s`}</inlineCode>{` is added to the alias. That is, `}<inlineCode parentName=\"p\">{`call`}</inlineCode>{` is a long call, whereas `}<inlineCode parentName=\"p\">{`calls`}</inlineCode>{` is a short call.`}</p>\n    <p>{`The unconditional form specifies only a target address:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`call next-frame        # long call\n`}</code></pre>\n    <p>{`The conditional form specifies a target address `}<em parentName=\"p\">{`and`}</em>{` a flag. If the flag is set, the call will be taken. Conditionals can also be `}<em parentName=\"p\">{`negated`}</em>{`, meaning that the call will be taken if the flag is clear.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`calls z next-frame        # call next-frame if last ALU op was zero\ncall !c end-game          # call end-game if carry is clear\n`}</code></pre>\n    <p>{`It should be noted that there are no concessions offered for checking multiple flags at once -- such as you might want to do when checking if a value is less than or equal to another value. Instead, you should make multiple branches and then call :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`ld a, 0x4000\ncmp a, 0x4001\nbr z _lte        # when zero is set, that signals equality\nbr n _lte        # when negative is set, that signals less-than\nbrk\n_lte:\ncall lte         # call lte if less than or equal\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`CALL[S] [!][flag]\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment data 0x03000 {\n     score: .word 0\n}\n.segment code 0x02000 {\n     ld a, [score]\n     cmp a, 10000\n     call z extra-life\n     # more code\n     brk\nextra-life:\n     # bonus life!\n     ld a, [score]\n     inc a\n     st [score], a\n     ret\n}\n`}</code></pre>\n    <h2><strong parentName=\"h2\">{`CLR `}{`(`}{`Clear Flag`}{`)`}</strong></h2>\n    <p>{`Clears the specified flag.`}</p>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`CLR flag\n`}</code></pre>\n    <h4>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`clr c        # clear the carry flag before addition\nadd a, b\n`}</code></pre>\n    <h2>{`CMP `}{`(`}{`Compare`}{`)`}</h2>\n    <p>{`Compares the two values and sets the flags according to the results of the comparison.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`r = dest_in - source\nsign_source = source[msb]\nsign_dest = dest_in[msb]\n`}</code></pre>\n    <p>{`Once the result of the operation is computed, the ALU computes the flags as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`z_out = {\n    1 when r = 0\n    0 when r != 0\n}\n\nc_out = {\n    0 when r>>width = 0\n    1 when r>>width >= 0\n}\n\nn_out = r[msb]\n\nv_out = {\n    0 when sign_dest = 0, sign_source = 1, and n_out = 0\n    1 when sign_dest = 0, sign_source = 1, and n_out = 1\n    0 when sign_dest = 0, sign_source = 0, and n_out = 0\n    0 when sign_dest = 0, sign_source = 0, and n_out = 1\n    0 when sign_dest = 1, sign_source = 1, and n_out = 0\n    0 when sign_dest = 1, sign_source = 1, and n_out = 1\n    1 when sign_dest = 1, sign_source = 0, and n_out = 0\n    0 when sign_dest = 1, sign_source = 0, and n_out = 1\n}   \n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Unlike other arithmetic operations, `}<inlineCode parentName=\"p\">{`cmp`}</inlineCode>{` does not take the carry flag into consideration when performing a comparison.`}</p>\n    </blockquote>\n    <h4>{`Forms`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Immediate 8-bit value`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Immediate 16-bit value`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Although the full contingent of ALU flags is calculated when `}<inlineCode parentName=\"p\">{`cmp`}</inlineCode>{` is executed, only `}<inlineCode parentName=\"p\">{`N`}</inlineCode>{` , `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{`, and`}<inlineCode parentName=\"p\">{`Z`}</inlineCode>{` have any real meaning.`}</p>\n    </blockquote>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Meaning`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Set`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source and Destination are equal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Clear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source and Destination are unequal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Set`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination is less than Source`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Set`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination is greater than Source`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`CMP dest, src\nCMP dest, immediate\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 0x2000\n    ld b, 0x2001\n    cmp a, b          # N will be set because a < b\n                      # Z will be clear (not equal)\n}\n`}</code></pre>\n    <h2>{`DEC `}{`(`}{`Decrement`}{`)`}</h2>\n    <p>{`Decrements the specified register by one, updating flags as appropriate:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Condition`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Flag`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result is zero`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z is set`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result is negative`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N is set`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result goes below zero`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C is set`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result goes below signed minimum`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V is set`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Unlike other arithmetic operations, `}<inlineCode parentName=\"p\">{`dec`}</inlineCode>{` does not take the carry flag into consideration when performing a comparison.`}</p>\n    </blockquote>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`DEC dest\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 0x2000\n    dec a\n}\n`}</code></pre>\n    <h2>{`DIV `}{`(`}{`Unsigned Divide`}{`)`}</h2>\n    <p>{`Divides the destination by the source, and stores the result in the destination.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`r = source / dest_in\ndest_out = r[msb:0]\n`}</code></pre>\n    <p>{`Once the result of the operation is computed, the ALU computes the flags as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`z_out = {\n    1 when r = 0\n    0 when r != 0\n}\n\nc_out = 0\n\nn_out = r[msb]\n\nv_out = 0\n\nEX_out = {\n    1 when dest_in = 0\n    EX_in when dest_in != 0\n}\n\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`If the operation would result in a division by zero, the `}<inlineCode parentName=\"p\">{`EX`}</inlineCode>{` flag will be set, indicating a processor exception. This flag is not cleared automatically—it must be cleared using `}<inlineCode parentName=\"p\">{`clr ex`}</inlineCode>{` manually.`}</p>\n      <p parentName=\"blockquote\">{`The `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`N`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Z`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`V`}</inlineCode>{` flags are also set. The return result will be `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h4>{`Forms`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`DIV dest, src\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 2000\n    ld b, 20\n    div a, b          # a is 100\n\n    ld a, 0x5000\n    ld b, 0\n    div a, b          # a is zero, and EX is set (divide by zero)\n}\n`}</code></pre>\n    <h2>{`ENTER `}{`(`}{`Enter Stack Frame`}{`)`}</h2>\n    <p>{`Allocates the specified number of bytes on the stack and adjusts `}<inlineCode parentName=\"p\">{`SP`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`BP`}</inlineCode>{` to create a new stack frame.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`The data allocated on the stack is `}<em parentName=\"p\">{`not zeroed`}</em>{`. You should initialize it with data before use.`}</p>\n    </blockquote>\n    <p>{`Specifically, the order of operations is as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`BP`}</inlineCode>{` is pushed on to the stack`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SP`}</inlineCode>{` is moved to `}<inlineCode parentName=\"li\">{`BP`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SP`}</inlineCode>{` is decremented by the specified number of bytes`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Warning`}</strong></p>\n      <p parentName=\"blockquote\">{`Be sure there is sufficient space on the stack before using `}<inlineCode parentName=\"p\">{`ENTER`}</inlineCode>{`, otherwise a stack overflow could occur and memory outside of the stack could be overwritten.`}</p>\n    </blockquote>\n    <p>{`In order to access the reserved data on the stack, one should use `}<inlineCode parentName=\"p\">{`BP`}</inlineCode>{`-relative addressing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`enter 2\nld a, [BP+0]        # Previous BP\nld a, [BP+-2]       # Reserved word on stack\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`ENTER immediate\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\nmain:\n    enter 10           # reserve space on the stack for 10 bytes\n    ...\n    exit 10\n    ret\n}\n`}</code></pre>\n    <h2>{`EXC `}{`(`}{`Exchange Components`}{`)`}</h2>\n    <p>{`Exchanges the components of the register. Used to access the high portions of a 16-bit register, but also works to swap nybbles in an 8-bit register. Flags are updated as a result, although only `}<inlineCode parentName=\"p\">{`N`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Z`}</inlineCode>{` have any real meaning.`}</p>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`EXC register\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 0x3134\n    out 0x80, al      # output 34 to port 80\n    exc a             # exchange the high and low components\n                      # a is now 0x3431\n    out 0x80, al      # output 31 to port 80\n    exc a             # restore a to the original value\n}\n`}</code></pre>\n    <h2>{`EXIT `}{`(`}{`Exit Stack Frame`}{`)`}</h2>\n    <p>{`Exits from the current stack frame, deallocating the specified number of bytes.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Warning`}</strong></p>\n      <p parentName=\"blockquote\">{`The number of bytes to deallocate `}<em parentName=\"p\">{`must`}</em>{` match the number of bytes allocated by the corresponding `}<inlineCode parentName=\"p\">{`ENTER`}</inlineCode>{` instruction. Otherwise the stack will become corrupted.`}</p>\n    </blockquote>\n    <p>{`Specifically, the order of operations is as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SP`}</inlineCode>{` is incremented by the specified number of bytes`}</li>\n      <li parentName=\"ul\">{`The next word on the stack `}{`(`}{`previous `}<inlineCode parentName=\"li\">{`BP`}</inlineCode>{`)`}{` is popped into `}<inlineCode parentName=\"li\">{`BP`}</inlineCode></li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Warning`}</strong></p>\n      <p parentName=\"blockquote\">{`Be sure there is a stack frame on the stack before using `}<inlineCode parentName=\"p\">{`EXIT`}</inlineCode>{`, otherwise a stack underflow could occur and memory outside of the stack could be overwritten.`}</p>\n    </blockquote>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`EXIT immediate\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\nmain:\n    enter 10           # reserve space on the stack for 10 bytes\n    ...\n    exit 10            # always make sure the immediate value matches!\n    ret\n}\n`}</code></pre>\n    <h2>{`IN `}{`(`}{`Input from port`}{`)`}</h2>\n    <p>{`Inputs a byte from a given port into the specified register. The size of the register doesn't matter—the low eight bits of the register will contain the value from the port.`}</p>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`IN dest, port#\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\nmain:\n    in al, 0x80\n}\n`}</code></pre>\n    <h2>{`INC `}{`(`}{`Increment`}{`)`}</h2>\n    <p>{`Increment the specified register by one, updating flags as appropriate:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Condition`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Flag`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result is zero`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z is set`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result is negative`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N is set`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result goes above unsigned maximum`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C is set`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Result goes below signed maximum`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V is set`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Unlike other arithmetic operations, `}<inlineCode parentName=\"p\">{`inc`}</inlineCode>{` does not take the carry flag into consideration when performing a comparison.`}</p>\n    </blockquote>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`INC dest\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 0x2000\n    inc a\n}\n`}</code></pre>\n    <h2>{`LD `}{`(`}{`Load Data`}{`)`}</h2>\n    <p>{`Loads data from memory `}{`(`}{`or immediately from the instruction`}{`)`}{` into a destination register. The width of the destination determines how much data is loaded—if the destination is an eight-bit register, only one byte will be loaded, and if is a sixteen-bit register, two bytes will be loaded. Note that data is always stored and loaded in `}<em parentName=\"p\">{`big endian`}</em>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Loading data into a register does not affect the processor status flags.`}</p>\n    </blockquote>\n    <p>{`The immediate forms of this instruction allows direct assignment of a value to a register:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`LD A, 1234\nLD AL, 65\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Warning`}</strong></p>\n      <p parentName=\"blockquote\">{`When loading data into the low portion of the register, the data in the high portion is not modified.`}</p>\n    </blockquote>\n    <p>{`The other forms load data from memory into the destination register. There are several `}<a parentName=\"p\" {...{\n        \"href\": \"../../technical/technical-overview/6516-central-processing-unit/addressing-modes.md\"\n      }}>{`addressing modes`}</a>{` available.`}</p>\n    <h2>{`LOOP`}</h2>\n    <p>{`Decrements the target register, and then if carry hasn't been set, loops back to the target address. The width of the value determines if the loop is `}<em parentName=\"p\">{`short`}</em>{` `}{`(`}{`8 bits`}{`)`}{` or `}<em parentName=\"p\">{`long`}</em>{` `}{`(`}{`16 bits`}{`)`}{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`The body of the loop will always be taken at least once. Initialize the starting value of your loop register accordingly.`}</p>\n      <pre parentName=\"blockquote\"><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`    ld c, 0\n_loop:\n    out 0x80, cl      # executes once\n    loop _loop, c\n`}</code></pre>\n    </blockquote>\n    <h4>{`Forms`}</h4>\n    <p>{`A loop is `}<em parentName=\"p\">{`long`}</em>{` unless `}<inlineCode parentName=\"p\">{`s`}</inlineCode>{` is added to the alias. That is, `}<inlineCode parentName=\"p\">{`loop`}</inlineCode>{` is a long loop, whereas `}<inlineCode parentName=\"p\">{`loops`}</inlineCode>{` is a short loop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`loops c next-frame        # short loop to next-frame\nloop c next-game          # long loop to next-frame\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`LOOP[S] target-address, loop-register\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`todo\n`}</code></pre>\n    <h2>{`MOD `}{`(`}{`Unsigned Modulo`}{`)`}</h2>\n    <p>{`Divides the destination by the source, and stores the remainder in the destination.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`r = source mod dest_in\ndest_out = r[msb:0]\n`}</code></pre>\n    <p>{`Once the result of the operation is computed, the ALU computes the flags as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`z_out = {\n    1 when r = 0\n    0 when r != 0\n}\n\nc_out = 0\n\nn_out = r[msb]\n\nv_out = 0\n\nEX_out = {\n    1 when dest_in = 0\n    EX_in when dest_in != 0\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`If the operation would result in a division by zero, the `}<inlineCode parentName=\"p\">{`EX`}</inlineCode>{` flag will be set, indicating a processor exception. This flag is not cleared automatically—it must be cleared using `}<inlineCode parentName=\"p\">{`clr ex`}</inlineCode>{` manually.`}</p>\n      <p parentName=\"blockquote\">{`The `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`N`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Z`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`V`}</inlineCode>{` flags are also set. The return result will be `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h4>{`Forms`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`MOD dest, src\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 2000\n    ld b, 20\n    mod a, b          # a is 0\n\n    ld a, 0x5000\n    ld b, 0\n    mod a, b          # a is zero, and EX is set (divide by zero)\n}\n`}</code></pre>\n    <h2>{`MOV `}{`(`}{`Move`}{`)`}</h2>\n    <p>{`Transfers the value of one register into another register. Flags are not affected.`}</p>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`MOV dest, srce\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`ld a, 10\nmov b, a\nld a, 20\n`}</code></pre>\n    <h2>{`MUL `}{`(`}{`Unsigned Multiply`}{`)`}</h2>\n    <p>{`Multiples the destination by the source, and stores the result in the destination.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`r = source * dest_in\ndest_out = r[msb:0]\n`}</code></pre>\n    <p>{`Once the result of the operation is computed, the ALU computes the flags as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`z_out = {\n    1 when r = 0\n    0 when r != 0\n}\n\nc_out = r > max-unsigned-word\n\nn_out = r[msb]\n\nv_out = 0\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`If the operation would result in a value too large for the destination register, the `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{` flag is set.`}</p>\n    </blockquote>\n    <h4>{`Forms`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`MUL dest, src\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 2000\n    ld b, 2\n    mul a, b          # a is 4000\n\n    ld a, 0x5000\n    ld b, 0\n    mul a, b          # a is zero\n}\n`}</code></pre>\n    <h2>{`NEG `}{`(`}{`Negate`}{`)`}</h2>\n    <p>{`Negates `}{`(`}{`two's complement`}{`)`}{` the signed value in the register. If the register was originally `}<inlineCode parentName=\"p\">{`42`}</inlineCode>{`, it will now be `}<inlineCode parentName=\"p\">{`-42`}</inlineCode>{`.`}</p>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`NEG dest\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, 2000\n    neg a        # a is -2000\n}\n`}</code></pre>\n    <h2>{`NOP `}{`(`}{`No Operation`}{`)`}</h2>\n    <p>{`Do nothing. Takes some time, so can be used to slow a process down slightly.`}</p>\n    <h2>{`NOT `}{`(`}{`Bitwise Not`}{`)`}</h2>\n    <p>{`Flips the bits in the register. If the register was originally `}<inlineCode parentName=\"p\">{`0b10010010`}</inlineCode>{`, it will now be `}<inlineCode parentName=\"p\">{`0b01101101`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`dest-out = !dest_in\n`}</code></pre>\n    <p>{`Flags are computed as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`z_out = {\n    1 when r = 0\n    0 when r != 0\n}\n\nc_out = 0\nn_out = r[msb]\nv_out = 0\n`}</code></pre>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`NOT dest\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld al, 0b0000_1111\n    not al        # a is 0b1111_0000 or 0xF0\n}\n`}</code></pre>\n    <h2>{`OR `}{`(`}{`Bitwise Or`}{`)`}</h2>\n    <p>{`Performs a bitwise OR on the source and destination operands, and stores the result in the destination.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`dest_out = dest_in OR source_in\n`}</code></pre>\n    <p>{`Once the result of the operation is computed, the ALU computes the flags as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`z_out = {\n    1 when r = 0\n    0 when r != 0\n}\n\nc_out = {\n    0 when r >> width = 0\n    1 when r >> width >= 0\n}\n\nn_out = r[msb]\n\nv_out = 0\n`}</code></pre>\n    <h4>{`Forms`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Destination`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Source`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Addressable Register`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Immediate 8-bit value`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Data Register`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Immediate 16-bit value`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`OR dest, src\nOR dest, immediate\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld al, 0b1111_0000\n    or al, 0b0001_1000    # al is 0b1111_1000\n\n    ld a, 0x1234\n    ld b, 0x00FF\n    or a, b               # a is 0x12FF\n}\n`}</code></pre>\n    <h2>{`OUT `}{`(`}{`Output to port`}{`)`}</h2>\n    <p>{`Outputs a byte to a given port from the specified register. The size of the register doesn't matter—the low eight bits of the register will be sent to the port.`}</p>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`OUT port#, srce\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\nmain:\n    out 0x80, al\n}\n`}</code></pre>\n    <h2>{`POP `}{`(`}{`Pop from Stack`}{`)`}</h2>\n    <p>{`Pops the top value from the stack and stores it in the specified register. The width of the register determines if a byte or a word is popped from the stack.`}</p>\n    <p><inlineCode parentName=\"p\">{`SP`}</inlineCode>{` is increased by the size of the data popped from the stack.`}</p>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`POP dest\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\nmain:\n    pop a\n}\n`}</code></pre>\n    <h2>{`POPALL`}</h2>\n    <p>{`Pops the state of the addressable registers from the stack, in reverse order as `}<inlineCode parentName=\"p\">{`PUSHALL`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`BP`}</li>\n      <li parentName=\"ul\">{`Y`}</li>\n      <li parentName=\"ul\">{`X`}</li>\n      <li parentName=\"ul\">{`D`}</li>\n      <li parentName=\"ul\">{`C`}</li>\n      <li parentName=\"ul\">{`B`}</li>\n      <li parentName=\"ul\">{`A`}</li>\n      <li parentName=\"ul\">{`SP`}</li>\n    </ul>\n    <p>{`Unless you need to store all the above registers on the stack, it's better to push and pop only those registers that you need, as the `}<inlineCode parentName=\"p\">{`POPALL`}</inlineCode>{` command is very slow.`}</p>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`POPALL\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\nmain:\n    pushall\n    # some intermediate code\n    popall\n    ret\n}\n`}</code></pre>\n    <h2>{`POPF `}{`(`}{`Pop Flags`}{`)`}</h2>\n    <p>{`Pops the top byte off the stack and sets the processor status flags to the value popped.`}</p>\n    <h4>{`Flags`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`EX`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`ID`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SS`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`N`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`V`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Z`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`✓`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`POPF\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\nmain:\n    ld al, 1\n    push al\n    popf        # z is now set\n}\n`}</code></pre>\n    <h2>{`POPMM `}{`(`}{`Pop Memory Map`}{`)`}</h2>\n    <p>{`Pops the top value on the stack and sets the memory map register to that value. Used to finish a page map operation.`}</p>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`POPMM\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\nmain:\n    set id      # disable interrupts\n    pushmm      # save the current memory map\n    pop a       # pop it into A\n    and a, 0b0_11111_00000_11111   # zero page 2 mapping\n    or a, 0b0_00000_00100_00000    # set page 2 to map to page 4\n    push a\n    pop mm      # pop revised memory map\n    clr id      # re-enable interrupts\n}\n`}</code></pre>\n    <h2>{`PUSH`}</h2>\n    <h2>{`PUSHALL`}</h2>\n    <h2>{`PUSHF `}{`(`}{`Push Flags`}{`)`}</h2>\n    <h2>{`PUSHMM `}{`(`}{`Push Memory Map`}{`)`}</h2>\n    <h2>{`RET `}{`(`}{`Return from Call`}{`)`}</h2>\n    <h2>{`SDIV `}{`(`}{`Signed Divide`}{`)`}</h2>\n    <h2>{`SHL `}{`(`}{`Shift Left`}{`)`}</h2>\n    <h2>{`SHR `}{`(`}{`Shift Right`}{`)`}</h2>\n    <h2>{`SMOD `}{`(`}{`Signed Modulo`}{`)`}</h2>\n    <h2>{`SMUL `}{`(`}{`Signed Multiplication`}{`)`}</h2>\n    <h2>{`ST `}{`(`}{`Store`}{`)`}</h2>\n    <h2>{`SUB `}{`(`}{`Subtract`}{`)`}</h2>\n    <h2>{`SWAP`}</h2>\n    <h2>{`TEST`}</h2>\n    <h2>{`TRAP`}</h2>\n    <h2>{`XOR `}{`(`}{`Bitwise Exclusive OR`}{`)`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}