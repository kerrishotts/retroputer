{"version":3,"sources":["../../../docs/assembly-language/assembler-error-messages.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"assembler-error-messages.e966e968.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Assembler Error Messages`}</h1>\n    <h3>{`Scope {name} already declared with type {type}, but tried to change it to {type}`}</h3>\n    <p>{`This error occurs if you try to redefined a previously named scope to a different type. For example, of you have a segment called `}<inlineCode parentName=\"p\">{`code`}</inlineCode>{`, you can't also have a namespace called `}<inlineCode parentName=\"p\">{`code`}</inlineCode>{`.`}</p>\n    <h3>{`Scope {name} with already declared with base address {addr}, but tried to change it to {addr}`}</h3>\n    <p>{`Once a code or data segment has been declared, the base address can't be changed. You can `}<em parentName=\"p\">{`append`}</em>{` new code or data to the segment, which means you probably forgot the `}<inlineCode parentName=\"p\">{`.append`}</inlineCode>{` directive. `}</p>\n    <h3>{`Could not locate {identifier} in current scope chain`}</h3>\n    <p>{`The identifier couldn't be found in the current lexical scope. In general the assembler is forgiving and will perform look-ahead to locate any identifiers yet to be defined, but this only works within the current file. This means that if you are referencing identifiers in another file, that file must be imported first.`}</p>\n    <h3>{`Unexpected operator in unary expression: {operator}`}</h3>\n    <p>{`Unary expressions only support `}<inlineCode parentName=\"p\">{`!`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`.`}</p>\n    <h3>{`Unexpected operator in binary expression: {operator}`}</h3>\n    <p>{`Binary expressions only support `}<inlineCode parentName=\"p\">{`+`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`&`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`|`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`^`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<<`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`>>`}</inlineCode>{`.`}</p>\n    <h3>{`Unexpected token in expression: {token type}`}</h3>\n    <p>{`This should never happen. If it does, an internal parsing error has occurred.`}</p>\n    <h3>{`Tried to assemble an unexpected token: {token}`}</h3>\n    <p>{`This indicates a problem when calling the internal JavaScript assembler library.`}</p>\n    <h3>{`Attempted to loop beyond short range`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`LOOPS`}</inlineCode>{` instruction can only loop to instructions within `}<inlineCode parentName=\"p\">{`-128`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`+127`}</inlineCode>{` bytes from the current instruction.`}</p>\n    <h3>{`Attempted to loop beyond range`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`LOOP`}</inlineCode>{` instruction can only loop to instructions within `}<inlineCode parentName=\"p\">{`-32768`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`+32767`}</inlineCode>{` bytes from the current instruction.`}</p>\n    <h3>{`Tried to assemble an undefined AST.`}</h3>\n    <p>{`Somehow the parse tree became undefined when using the JavaScript assembler.`}</p>\n    <h3>{`Tried to assemble an invalid AST.`}</h3>\n    <p>{`You passed an incorrect AST to the JavaScript assembler.`}</p>\n    <h3>{`Cannot redefine constant {identifier}`}</h3>\n    <p>{`Once defined, constants cannot be redefined.`}</p>\n    <h3>{`Unexpected label {identifier} in {scope} scope`}</h3>\n    <p>{`Labels can only occur in code or data segments.`}</p>\n    <h3>{`Unexpected data directive in {scope} scope`}</h3>\n    <p>{`Data directives can only occur in code or data segments.`}</p>\n    <h3>{`Unexpected string directive in {scope} scope`}</h3>\n    <p>{`String directives can only occur in code or data segments.`}</p>\n    <h3>{`Unexpected code in {scope} scope`}</h3>\n    <p>{`Code can only occur in code or data segments.`}</p>\n    <h3>{`Could not locate symbol`}</h3>\n    <p>{`The assember tried to look ahead and locate the symbol, but it couldn't find a declaration.`}</p>\n    <h3>{`Bytes mismatched at {line}:{col}. Expected {bytes}, saw {bytes}`}</h3>\n    <p>{`When using the `}<inlineCode parentName=\"p\">{`{...}`}</inlineCode>{` directive to test the assembler's output, the assembler generated different bytes than what was specified.`}</p>\n    <h3>{`Non-contiguous code or data in segment {name}`}</h3>\n    <p>{`Somehow the data or code wasn't contiguous in the segment. This generally indicates an internal error of some sort.`}</p>\n    <h3>{`Literal cannot be a reserved word`}</h3>\n    <p>{`The literal in question cannot be a reserved word. This generally means you tried to use `}<inlineCode parentName=\"p\">{`loop`}</inlineCode>{` for an identifier, or something similar.`}</p>\n    <h3>{`Label cannot be a reserved word`}</h3>\n    <p>{`The label cannot be a reserved word. Using `}<inlineCode parentName=\"p\">{`loop:`}</inlineCode>{` as a label will generate this error since `}<inlineCode parentName=\"p\">{`loop`}</inlineCode>{` is an instruction and a reserved word.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}