{"version":3,"sources":["../../../docs/programming-retroputer/asm/directives.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"directives.29b11939.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Directives`}</h1>\n    <p>{`Directives tell the assembler about important information such as data, procedure definitions, and more.`}</p>\n    <h2>{`.byte`}</h2>\n    <p>{`Specifies a byte value to be placed at the current location in the segment. Typically used in data segments to define the initial values for byte-sized variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment players 0x03000 {\n    count: .byte 0x0002\n}\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.byte <value> [, <values>]\n`}</code></pre>\n    <h2>{`.byte`}{`[`}{`]`}</h2>\n    <p>{`Specifies a byte array to be placed at the current location in the segment. Typically used in data segments to define the initial values forbyte-sized arrays. Any values not listed will be initialized to zero.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment players 0x03000 {\n    lives: .byte[2] 3, 3\n}\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.byte\\\\[<size>\\\\] [<value> [, <values>]]\n`}</code></pre>\n    <h2>{`.const`}</h2>\n    <p>{`Defines an identifier with a constant value. Once defined, the constant cannot be redefined.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Constants are inlined into any assembly instructions that use them. As such, they don't consume additional memory space beyond that which the instruction itself uses.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.const MAX_PLAYERS 2\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Important`}</strong></p>\n      <p parentName=\"blockquote\">{`A constant must be defined within a `}<inlineCode parentName=\"p\">{`namespace`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`segment`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.const <identifier> <expression>\n`}</code></pre>\n    <h2>{`.define `}{`(`}{`.macro`}{`)`}</h2>\n    <p>{`Defines a macro.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Macros are inlined into any assembly instructions that use them. Be careful not to treat macros like function calls or procedures, since they will `}<em parentName=\"p\">{`duplicate`}</em>{` their contents inline.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.define LDPTR(regD, regX, var) {\n    ld regD(), addrbank(var())\n    ld regX(), addrbofs(var())\n}\n`}</code></pre>\n    <p>{`To utilize a macro, it must be `}<em parentName=\"p\">{`expanded`}</em>{`. This is `}<em parentName=\"p\">{`similar`}</em>{` to calling a function or procedure in a higher-level language, except that the contents of the macro are `}<em parentName=\"p\">{`inlined`}</em>{` at the place it is used. This means that it is faster than a function or procedure call `}{`(`}{`no `}<inlineCode parentName=\"p\">{`call`}</inlineCode>{`, no stack management`}{`)`}{`, but consumes much more memory. Use macros with care!`}</p>\n    <p>{`Expanding a macro is done by using parentheses and supplying an necessary arguments. `}<strong parentName=\"p\">{`Even if a macro expects no arguments, parentheses must be used.`}</strong></p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment data 0x03000 {\n    hello: .string \"Hello\", 0\n}\n\n.segment code 0x02000 {\n    LDPTR(D, X, data.hello)\n    call [PRINT]\n}\n`}</code></pre>\n    <p>{`In the above example, the resulting assembly looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`ld d, addrbank(data.hello)\nld x, addrbofs(data.hello)\ncall [PRINT]\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.define <identifier>([<args>]) <expression-or-block>\n.macro <identifier>([<args>]) <expression-or-block>\n`}</code></pre>\n    <h2>{`.import`}</h2>\n    <p>{`Imports a file into the current scope.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.import \"another-file.asm\"\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.import <path to file>\n`}</code></pre>\n    <h2>{`.namespace`}</h2>\n    <p>{`Defines a new namespace with the given name. In order to access any identifiers within the namespace's corresponding block, the references will need to be prefixed with the namespace name itself.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.namespace levels {\n    .const NUMBER_OF_LEVELS 20\n}\n\n.segment code 0x02000 {\n    ld a, levels.NUMBER_OF_LEVELS        # 20\n}\n`}</code></pre>\n    <p>{`Namespaces can be nested, and there is no practical limit on the number of namespaces you create.`}</p>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.namespace <name> <block>\n`}</code></pre>\n    <h2>{`.segment`}</h2>\n    <p>{`Defines a new code or data segment with the given name, starting at the given address. If you need to append to a previously defined segment, you can specify the `}<inlineCode parentName=\"p\">{`.append`}</inlineCode>{` directive in addition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment code 0x02000 {\n    ld a, data.currentPlayer\n}\n.segment data 0x03000 {\n    currentPlayer: .byte 0x00\n}\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment <name> <address expression> [.append] <block>\n`}</code></pre>\n    <h2>{`.string`}</h2>\n    <p>{`Specifies a string to be placed at the current location in the segment. Typically used in data segments to define the initial values for variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment players 0x03000 {\n    hello: .string \"Hello\", 0\n}\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.string <value> [, <values>]\n`}</code></pre>\n    <h2>{`.word`}</h2>\n    <p>{`Specifies a word value to be placed at the current location in the segment. Typically used in data segments to define the initial values for variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment players 0x03000 {\n    count: .word 0x0002\n}\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.word <value> [, <values>]\n`}</code></pre>\n    <h2>{`.word`}{`[`}{`]`}</h2>\n    <p>{`Specifies a word array to be placed at the current location in the segment. Typically used in data segments to define the initial values for word-sized arrays. Any values not listed will be initialized to zero.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.segment players 0x03000 {\n    scores: .word[2] 0x1000, 0x2000\n}\n`}</code></pre>\n    <h4>{`Grammar`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`.word\\\\[<size>\\\\] [<value> [, <values>]]\n`}</code></pre>\n    <h2></h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}