parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"AurR":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=l;var e=n(require("react")),t=require("@mdx-js/react");function n(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}const a=e=>(function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.mdx)("div",n)}),r={},i="wrapper";function l({components:e,...n}){return(0,t.mdx)(i,o({},r,n,{components:e,mdxType:"MDXLayout"}),(0,t.mdx)("h1",null,"BASIC"),(0,t.mdx)("p",null,"Retroputer comes preinstalled with a version of BASIC, short for ",(0,t.mdx)("em",{parentName:"p"},"Beginner's All-purpose Symbolic Instruction Code"),". This is a simple programming language that is easy to learn, but also provides a significant amount of power, flexibility, and functionality. While it is meant to model BASICs of the '80s and '90s, it also comes with some more modern conveniences that machines of the era often didn't have."),(0,t.mdx)("h2",null,"1.0 Saying Hello"),(0,t.mdx)("p",null,"Retroputer BASIC has two distinct operating modes. The first mode is ",(0,t.mdx)("em",{parentName:"p"},"direct")," mode (often referred to as ",(0,t.mdx)("em",{parentName:"p"},"immediate")," or ",(0,t.mdx)("em",{parentName:"p"},"calculator")," mode by other BASICs). This mode provides the ability to enter and edit programs and a way to execute commands immediately. The second mode is called ",(0,t.mdx)("em",{parentName:"p"},"program mode"),", and during this mode BASIC is busy executing a program, which means you can't directly access BASIC's commands."),(0,t.mdx)("p",null,"When Retroputer is started, you'll be greated by a pleasant startup screen informing you of the version of BASIC and how much memory is available for your program."),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{className:"language-text"}),"RETROPUTER BASIC 1.0\n--------------------\n131072 Code Bytes Free\n65536 Heap Bytes Free\n")),(0,t.mdx)("p",null,"Below this banner will be a single word: ",(0,t.mdx)("inlineCode",{parentName:"p"},"READY.")," Below this word will be a flashing white square. This is your text ",(0,t.mdx)("em",{parentName:"p"},"cursor"),", and the word above is the ",(0,t.mdx)("em",{parentName:"p"},"Ready Prompt"),". Whenever you see a Ready prompt, you know you're in direct mode and BASIC is waiting for you to tell it what to do next."),(0,t.mdx)("p",null,"When your cursor is visible on the screen and it is blinking, you can take this as a cue that the computer is waiting for you to type something. If the cursor is not visible, this usually signifies that Retroputer is busy. You can continue to type while Retroputer is working, but what you type will end up stored in a buffer and only displayed when Retroputer can turn its attention back to you."),(0,t.mdx)("p",null,"At this point, Retroputer's said \"hello!\" to you—how about you return the favor? Type the following to Retroputer. Be sure not to make a typing mistake or the response may not be quite as you'd like!"),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{className:"language-basic"}),'print "Hello!"\n')),(0,t.mdx)("p",null,"Retroputer will immediately respond with a warm greeting:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{}),"Hello!\nREADY.\n█\n")),(0,t.mdx)("p",null,"If you ",(0,t.mdx)("em",{parentName:"p"},"didn't")," see that result, you may have typed something wrong. For example, let's imagine this scenario instead (or try it out yourself):"),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{}),'prnt "Hello!"\n?SYNTAX ERROR\nREADY.\n█\n')),(0,t.mdx)("p",null,"This kind of response may seem a bit rude, but it's just BASIC's way of telling you that it didn't understand what you meant."),(0,t.mdx)("p",null,"Alternatively, if you forgot the ending quote, you might see this response:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{}),'print "Hello!\n?EXPECTED A QUOTE ERROR\nREADY.\n█\n')),(0,t.mdx)("p",null,"Here BASIC is letting you know that quotes come in pairs, and that you've forgot one somewhere. Once you understand BASIC's responses, things start to become a lot easier, and it can start to feel like you're having a conversation, although a somewhat ",(0,t.mdx)("em",{parentName:"p"},"limited")," one. After all, Retroputer is only a machine, and can only do exactly what you tell it."),(0,t.mdx)("h2",null,"1.1 Calculating"),(0,t.mdx)("p",null,"As we mentioned earlier, sometimes ",(0,t.mdx)("em",{parentName:"p"},"direct")," mode is often referred to as ",(0,t.mdx)("em",{parentName:"p"},"calculator")," mode. That's because you can tell the computer to evaluate a mathematical expression and it will give you the result. Let's try an example."),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{className:"language-basic"}),"print 2 + 2\n")),(0,t.mdx)("p",null,"Retroputer should respond with ",(0,t.mdx)("inlineCode",{parentName:"p"},"4"),". Ok, so that wasn't ",(0,t.mdx)("em",{parentName:"p"},"so")," difficult. Let's try something that would take us humans a little more time to figure out."),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{className:"language-basic"}),"print 234 * 56\n")),(0,t.mdx)("p",null,"Retroputer's response will be:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{}),"print 234 * 56\n13104\nREADY.\n█\n")),(0,t.mdx)("p",null,"Impressive! Retroputer was able to calculate the result faster than you were, I'd guess! "),(0,t.mdx)("p",null,"So far we've seen that Retroputer can add and multiply, but it also can do several other mathematical operations, including subtraction, division, exponentiation, and more. "),(0,t.mdx)("p",null,"One thing it ",(0,t.mdx)("em",{parentName:"p"},"can't")," do is divide by zero. If you try, Retroputer will definitely let you know:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",o({parentName:"pre"},{}),"?DIVISION BY ZERO ERROR\nREADY.\n█\n")))}l.isMDXComponent=!0;
},{"react":"SAdv","@mdx-js/react":"QaRW"}]},{},[], null)
//# sourceMappingURL=/README.00f9a91d.js.map