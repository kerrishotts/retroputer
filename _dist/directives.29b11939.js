parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"DV5z":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=s;var e=n(require("react")),a=require("@mdx-js/react");function n(e){return e&&e.__esModule?e:{default:e}}function t(){return(t=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}const l=e=>(function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",n)}),r={},m="wrapper";function s({components:e,...n}){return(0,a.mdx)(m,t({},r,n,{components:e,mdxType:"MDXLayout"}),(0,a.mdx)("h1",null,"Directives"),(0,a.mdx)("p",null,"Directives tell the assembler about important information such as data, procedure definitions, and more."),(0,a.mdx)("h2",null,".byte"),(0,a.mdx)("p",null,"Specifies a byte value to be placed at the current location in the segment. Typically used in data segments to define the initial values for byte-sized variables."),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".segment players 0x03000 {\n    count: .byte 0x0002\n}\n")),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".byte <value> [, <values>]\n")),(0,a.mdx)("h2",null,".byte","[","]"),(0,a.mdx)("p",null,"Specifies a byte array to be placed at the current location in the segment. Typically used in data segments to define the initial values forbyte-sized arrays. Any values not listed will be initialized to zero."),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".segment players 0x03000 {\n    lives: .byte[2] 3, 3\n}\n")),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".byte\\[<size>\\] [<value> [, <values>]]\n")),(0,a.mdx)("h2",null,".const"),(0,a.mdx)("p",null,"Defines an identifier with a constant value. Once defined, the constant cannot be redefined."),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("strong",{parentName:"p"},"Note")),(0,a.mdx)("p",{parentName:"blockquote"},"Constants are inlined into any assembly instructions that use them. As such, they don't consume additional memory space beyond that which the instruction itself uses.")),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".const MAX_PLAYERS 2\n")),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("strong",{parentName:"p"},"Important")),(0,a.mdx)("p",{parentName:"blockquote"},"A constant must be defined within a ",(0,a.mdx)("inlineCode",{parentName:"p"},"namespace")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"segment"),".")),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".const <identifier> <expression>\n")),(0,a.mdx)("h2",null,".define ","(",".macro",")"),(0,a.mdx)("p",null,"Defines a macro."),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("strong",{parentName:"p"},"Note")),(0,a.mdx)("p",{parentName:"blockquote"},"Macros are inlined into any assembly instructions that use them. Be careful not to treat macros like function calls or procedures, since they will ",(0,a.mdx)("em",{parentName:"p"},"duplicate")," their contents inline.")),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".define LDPTR(regD, regX, var) {\n    ld regD(), addrbank(var())\n    ld regX(), addrbofs(var())\n}\n")),(0,a.mdx)("p",null,"To utilize a macro, it must be ",(0,a.mdx)("em",{parentName:"p"},"expanded"),". This is ",(0,a.mdx)("em",{parentName:"p"},"similar")," to calling a function or procedure in a higher-level language, except that the contents of the macro are ",(0,a.mdx)("em",{parentName:"p"},"inlined")," at the place it is used. This means that it is faster than a function or procedure call ","(","no ",(0,a.mdx)("inlineCode",{parentName:"p"},"call"),", no stack management",")",", but consumes much more memory. Use macros with care!"),(0,a.mdx)("p",null,"Expanding a macro is done by using parentheses and supplying an necessary arguments. ",(0,a.mdx)("strong",{parentName:"p"},"Even if a macro expects no arguments, parentheses must be used.")),(0,a.mdx)("p",null,"For example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),'.segment data 0x03000 {\n    hello: .string "Hello", 0\n}\n\n.segment code 0x02000 {\n    LDPTR(D, X, data.hello)\n    call [PRINT]\n}\n')),(0,a.mdx)("p",null,"In the above example, the resulting assembly looks like this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),"ld d, addrbank(data.hello)\nld x, addrbofs(data.hello)\ncall [PRINT]\n")),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".define <identifier>([<args>]) <expression-or-block>\n.macro <identifier>([<args>]) <expression-or-block>\n")),(0,a.mdx)("h2",null,".import"),(0,a.mdx)("p",null,"Imports a file into the current scope."),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),'.import "another-file.asm"\n')),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".import <path to file>\n")),(0,a.mdx)("h2",null,".namespace"),(0,a.mdx)("p",null,"Defines a new namespace with the given name. In order to access any identifiers within the namespace's corresponding block, the references will need to be prefixed with the namespace name itself."),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".namespace levels {\n    .const NUMBER_OF_LEVELS 20\n}\n\n.segment code 0x02000 {\n    ld a, levels.NUMBER_OF_LEVELS        # 20\n}\n")),(0,a.mdx)("p",null,"Namespaces can be nested, and there is no practical limit on the number of namespaces you create."),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".namespace <name> <block>\n")),(0,a.mdx)("h2",null,".segment"),(0,a.mdx)("p",null,"Defines a new code or data segment with the given name, starting at the given address. If you need to append to a previously defined segment, you can specify the ",(0,a.mdx)("inlineCode",{parentName:"p"},".append")," directive in addition."),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".segment code 0x02000 {\n    ld a, data.currentPlayer\n}\n.segment data 0x03000 {\n    currentPlayer: .byte 0x00\n}\n")),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".segment <name> <address expression> [.append] <block>\n")),(0,a.mdx)("h2",null,".string"),(0,a.mdx)("p",null,"Specifies a string to be placed at the current location in the segment. Typically used in data segments to define the initial values for variables."),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),'.segment players 0x03000 {\n    hello: .string "Hello", 0\n}\n')),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".string <value> [, <values>]\n")),(0,a.mdx)("h2",null,".word"),(0,a.mdx)("p",null,"Specifies a word value to be placed at the current location in the segment. Typically used in data segments to define the initial values for variables."),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".segment players 0x03000 {\n    count: .word 0x0002\n}\n")),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".word <value> [, <values>]\n")),(0,a.mdx)("h2",null,".word","[","]"),(0,a.mdx)("p",null,"Specifies a word array to be placed at the current location in the segment. Typically used in data segments to define the initial values for word-sized arrays. Any values not listed will be initialized to zero."),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".segment players 0x03000 {\n    scores: .word[2] 0x1000, 0x2000\n}\n")),(0,a.mdx)("h4",null,"Grammar"),(0,a.mdx)("pre",null,(0,a.mdx)("code",t({parentName:"pre"},{className:"language-text"}),".word\\[<size>\\] [<value> [, <values>]]\n")),(0,a.mdx)("h2",null))}s.isMDXComponent=!0;
},{"react":"SAdv","@mdx-js/react":"QaRW"}]},{},[], null)
//# sourceMappingURL=/directives.29b11939.js.map