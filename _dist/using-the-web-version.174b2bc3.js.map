{"version":3,"sources":["../../../docs/using-the-web-version.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";AAsFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EArFA,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,iBAoFA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,IAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,UAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,WAhFA,MAAMA,EAAgBC,IAAQ,SAA6BC,GAElD,OADPC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,EAASC,EAAAA,KAAAA,MAAAA,KAGZG,EAAc,GAGdC,EAAY,UACH,SAASC,GAAW,WACjCC,KACGN,IAEI,OAAA,EAAC,EAAA,KAAA,EAAcG,EAAAA,GAAAA,EAAiBH,EAAhC,CAAuC,WAAYM,EAAY,QAAQ,eAC5E,EADK,EAAA,KAAA,KAAA,KAAA,0BAEL,EAFK,EAAA,KAAA,IAAA,KAAA,qQAGL,EAAG,EAAA,KAAA,IAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CAAK,WAAW,KAAQ,CAChB,IAAA,6BACA,IAAA,qCAEX,EACE,EAAA,KAAA,aAAA,MAAA,EAAA,EAAA,KAAA,IAAA,CAAG,WAAW,eAAa,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,KAA9C,UACA,EAAA,EAAA,KAAA,IAAA,CAAG,WAAW,cAFhB,qPAGE,EAAA,EAAA,KAAA,IAAA,CAAG,WAAW,cAHhB,uFAKA,EAZK,EAAA,KAAA,KAAA,KAAA,kBAaL,EAbK,EAAA,KAAA,IAAA,KAAA,8MAcL,EAdK,EAAA,KAAA,IAAA,KAAA,kDAeL,EACE,EAAA,KAAA,KAAA,MAAA,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,WADF,wJAEE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,OAFF,kEAAA,IAAA,sEAAA,IAAA,MAGE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,SAHF,mDAIE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,QAJF,mFAKE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,UALF,6GAME,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,OANF,yDAOE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,UAPF,mDAQE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,WARF,2DAAA,IAAA,6BAAA,IAAA,MASE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,iBATF,+DAWA,EA1BK,EAAA,KAAA,KAAA,KAAA,sBA2BL,EAAW,EAAA,KAAA,IAAA,KAAA,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,KAA9B,WA3BK,qLA4BL,EA5BK,EAAA,KAAA,IAAA,KAAA,iFA6BL,EACE,EAAA,KAAA,KAAA,MAAA,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,oBAA0L,qFAAA,IAAA,cAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA7M,SAA6T,UAAA,IAAA,yEAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAhV,QAAmZ,6CAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,MAA1a,WAA0d,mBAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,MAAjf,QADF,aAEE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,OAAK,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAvC,SAAoF,sBAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAvG,oBAA8O,qGAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,MAArQ,OAAiX,IAAA,IAAA,QAAA,IAAA,2DAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAApY,QAAka,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAArb,QAFF,cAGE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,OAAK,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAvC,YAHF,wEAIE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,OAAK,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAvC,QAJF,kOAKE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,OAAK,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAvC,QAA2E,cAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,MAAlG,MAAsI,YAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAzJ,oBAAwN,6BAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA3O,QAA0Q,SAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA7R,YALF,MAME,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,OAAK,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAvC,QAAwG,2CAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA3H,QANF,MAOE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,OAAK,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAvC,aAPF,wCAAA,IAAA,gBAAA,IAAA,OASA,EAtCK,EAAA,KAAA,IAAA,KAAA,8FAuCL,EACE,EAAA,KAAA,KAAA,MAAA,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,OAAK,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAvC,QAA6G,gDAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAhI,SAAyX,qCAAA,IAAA,yBAAA,IAAA,iFAAA,IAAA,+BAAA,IAAA,4BAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA5Y,QAA6b,2BAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,MAApd,SADF,MAEE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,qBAAuI,qDAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA1J,QAAqL,KAAA,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,OAChM,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAc,SAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAhD,QAA8E,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAjG,SAA+J,uCAAA,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAA9K,UAAmQ,8CAAA,IAAA,aAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,MAA1R,OAAsW,mBAAA,IAAA,0BAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,MAA7X,QADiL,MAEjL,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAc,SAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAhD,QAA8E,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAjG,QAAkL,2DAAA,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAjM,UAA+c,0PAAA,EAAA,EAAA,KAAA,aAAA,CAAY,WAAW,MAAte,OAFiL,QAIrL,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,wBAAiS,4MAAA,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAhT,MAAsZ,sFAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAAza,QANF,+IAOE,EAAA,EAAA,KAAA,KAAA,CAAI,WAAW,MAAa,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,MAA/C,SAPF,qEASA,EAhDK,EAAA,KAAA,KAAA,KAAA,kBAiDL,EAjDK,EAAA,KAAA,IAAA,KAAA,wLAAA,IAAA,yCAAA,IAAA,qQAkDL,EAlDK,EAAA,KAAA,KAAA,KAAA,oBAmDL,EAAW,EAAA,KAAA,IAAA,KAAA,QAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,KAA9B,SAAqK,iHAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,KAAxL,WAA6R,6EAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,KAAhT,QAA6W,WAAA,IAAA,uBAAA,EAAA,EAAA,KAAA,SAAA,CAAQ,WAAW,KAAhY,QAnDK,UAAA,IAAA,MAoDL,EApDK,EAAA,KAAA,KAAA,KAAA,mBAqDL,EArDK,EAAA,KAAA,KAAA,KAAA,qBAsDL,EAtDK,EAAA,KAAA,KAAA,KAAA,kBAuDL,EAvDK,EAAA,KAAA,KAAA,KAAA,qBAwDL,EAxDK,EAAA,KAAA,KAAA,KAAA,sBAyDL,EAzDK,EAAA,KAAA,KAAA,KAAA,4BA0DL,EA1DK,EAAA,KAAA,KAAA,KAAA,wBA2DL,EAAG,EAAA,KAAA,IAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CAAK,WAAW,KAAQ,CAChB,IAAA,8BACA,IAAA,qDAMfD,EAAWE,gBAAiB","file":"using-the-web-version.174b2bc3.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Using the Web Version`}</h1>\n    <p>{`The Web Version of Retroputer makes it easy to get a feel for how Retroputer works. It's a completely integrated development environment, including the ability to see the current state of the machine, the contents of memory, the I/O bus, and an assembler. `}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"./images/web-interface.png\",\n        \"alt\": \"The web version of Retroputer\"\n      }}></img></p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Retroputer's emulation speed depends upon the performance capabilities of your browser and computer processor. Code written for Retroputer assumes that it is running at roughly 1MHz and that the VGU is creating roughly 60 frames per second.`}</p>\n      <p parentName=\"blockquote\">{`If your browser does not match this performance, Retroputer may feel slow to you.`}</p>\n    </blockquote>\n    <h2>{`The Workspace`}</h2>\n    <p>{`Retroputer's workspace is a collection of dockable, resizable panels that can be maximized and restored as you desire. This allows you to change the workspace to something that suits the needs at hand.`}</p>\n    <p>{`By default, there are several panels present:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Control`}</strong>{` panel controls if the Retroputer processor and other accessories are running, as well as the various performance characteristics of the emulation.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`FPS`}</strong>{` panel indicates how often the VGU is able to generate a frame `}{`(`}{`and how well the browser is coping with frame generation in general`}{`)`}{`.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`State`}</strong>{` panel indicates the machine's current status.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Code`}</strong>{` panel allows you to enter Assembly language code and assemble it into memory.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Memory`}</strong>{` panel displays the current contents of Retroputer's RAM and ROM. It updates automatically every second.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`I/O`}</strong>{` panel displays the current readings of the I/O bus.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Screen`}</strong>{` panel renders the frame generated by the VGU.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Console`}</strong>{` panel renders any content sent to Retroputer's console `}{`(`}{`not the same as the screen`}{`)`}{`.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Documentation`}</strong>{` panel renders Retroputer's documentation within the app.`}</li>\n    </ul>\n    <h3>{`The Control Panel`}</h3>\n    <p>{`The `}<strong parentName=\"p\">{`Control`}</strong>{` panel is used to start, pause, and single-step the Retroputer's processor. It is also used to configure performance characteristics of the emulation while not single-stepping.`}</p>\n    <p>{`There are several fields available that control the execution of Retroputer:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Starting Address`}</strong>{` indicates the first instruction that will be executed when Retroputer is started `}{`(`}{`using the `}<strong parentName=\"li\">{`Start`}</strong>{` button`}{`)`}{`. It also specifies the instruction that will be pointed to when the `}<strong parentName=\"li\">{`Jump`}</strong>{` button is clicked. The default value is `}<inlineCode parentName=\"li\">{`0x0FF00`}</inlineCode>{`, which is the `}<inlineCode parentName=\"li\">{`INIT`}</inlineCode>{` vector.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Start`}</strong>{` will jump to the `}<strong parentName=\"li\">{`Starting Address`}</strong>{` and begin running the Retroputer from there. Execution continues until the machine encounters a `}<inlineCode parentName=\"li\">{`BRK`}</inlineCode>{` `}{`(`}{`break`}{`)`}{` instruction or until manually stopped by clicking the `}<strong parentName=\"li\">{`Stop`}</strong>{` or `}<strong parentName=\"li\">{`Step`}</strong>{` buttons.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Continue`}</strong>{` will continue execution from the last place before being stopped. `}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Stop`}</strong>{` will stop execution of the Retroputer processor immediately. The VGU continues to execute for a couple more frames just to ensure that you can see any output that may have been generated before the completion of a frame.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Jump`}</strong>{` will set `}<inlineCode parentName=\"li\">{`PC`}</inlineCode>{` to the `}<strong parentName=\"li\">{`Starting Address`}</strong>{` value. Most useful with `}<strong parentName=\"li\">{`Step`}</strong>{` and `}<strong parentName=\"li\">{`Continue`}</strong>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Step`}</strong>{` will execute the next instruction and `}<strong parentName=\"li\">{`stop`}</strong>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Randomize`}</strong>{` assigns random values to all of RAM `}{`(`}{`excluding ROM`}{`)`}{`.`}</li>\n    </ul>\n    <p>{`There are also several fields that control the performance characteristics of Retroputer:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Mode`}</strong>{` indicates if the emulator should execute a `}<strong parentName=\"li\">{`fixed`}</strong>{` number of instructions per slice `}{`(`}{`roughly a single frame`}{`)`}{`, or if the emulator is free to maximize the number of instructions per slice `}{`(`}{`while trying to target 60fps`}{`)`}{` – this value is called `}<strong parentName=\"li\">{`auto`}</strong>{`. The default value is `}<inlineCode parentName=\"li\">{`fixed`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Slice Granularity`}</strong>{` behaves differently depending upon the selected `}<strong parentName=\"li\">{`Mode`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`When `}<strong parentName=\"li\">{`Mode`}</strong>{` is `}<strong parentName=\"li\">{`fixed`}</strong>{`, this number of instructions will `}<em parentName=\"li\">{`always`}</em>{` be executed per slice – no more, no less. `}{`(`}{`Unless a `}<inlineCode parentName=\"li\">{`BRK`}</inlineCode>{` is encountered.`}{`)`}{` The default value is `}<inlineCode parentName=\"li\">{`4192`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`When `}<strong parentName=\"li\">{`Mode`}</strong>{` is `}<strong parentName=\"li\">{`auto`}</strong>{`, this specifies the number of instructions to execute `}<em parentName=\"li\">{`before`}</em>{` checking to see if there's additional time available in the slice to process more instructions. Because the act of checking the time itself takes time, it can be slower to check every instruction if there's still time. The default value here is `}<inlineCode parentName=\"li\">{`255`}</inlineCode>{`.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Ticks Between Raster`}</strong>{` field indicates how many processor ticks occur before the next VGU update. The default mode is to render a VGU frame all at once, but this isn't as accurate. It's more accurate to render a VGU frame `}<em parentName=\"li\">{`as`}</em>{` the processor is working, but this is significantly slower. The default value is `}<strong parentName=\"li\">{`Auto`}</strong>{`, indicating that the processor will be given as much time as possible, while also trying to generate a full frame every 60th of a second.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`Apply`}</strong>{` button applies any changes to the performance characteristics.`}</li>\n    </ul>\n    <h3>{`The FPS Panel`}</h3>\n    <p>{`The FPS panel indicates the frames-per-second that Retroputer is achieving. The first graph shows how rapidly the browser is able to apply frames from the VGU to the browser canvas `}{`(`}{`the target here should always be 60fps`}{`)`}{`. The second graph shows how many frames are being generated from the VGU. Ideally this is always the same as the first graph, but if it's lower, it can indicate that the VGU and processor emulation are taking too much time and causing slower frame output.`}</p>\n    <h3>{`The State Panel`}</h3>\n    <p>{`The `}<strong parentName=\"p\">{`State`}</strong>{` panel lets you take a look into the processor state. You can request a single update simply by clicking the `}<strong parentName=\"p\">{`Refresh`}</strong>{` button, or you can start a continuous stream of updates by clicking the `}<strong parentName=\"p\">{`Play`}</strong>{` button `}{`(`}{`which turns into a `}<strong parentName=\"p\">{`Stop`}</strong>{` button`}{`)`}{`.`}</p>\n    <h3>{`The Code Panel`}</h3>\n    <h3>{`The Memory Panel`}</h3>\n    <h3>{`The I/O Panel`}</h3>\n    <h3>{`The Screen panel`}</h3>\n    <h3>{`The Console Panel`}</h3>\n    <h3>{`The Documentation Panel`}</h3>\n    <h2>{`Starting Retroputer`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"./images/basic-greeting.png\",\n        \"alt\": \"Retroputer's Launch Screen with BASIC running\"\n      }}></img></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}