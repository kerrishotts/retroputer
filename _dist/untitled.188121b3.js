parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"fmbl":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=m;var e=t(require("react")),n=require("@mdx-js/react");function t(e){return e&&e.__esModule?e:{default:e}}function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}const o=e=>(function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.mdx)("div",t)}),r={},s="wrapper";function m({components:e,...t}){return(0,n.mdx)(s,a({},r,t,{components:e,mdxType:"MDXLayout"}),(0,n.mdx)("h1",null,"About the Assembler"),(0,n.mdx)("p",null,"The Retroputer Assembler is called ",(0,n.mdx)("inlineCode",{parentName:"p"},"BASM")," and, while not a macro assembler, can parse some constructs that feel like a high-level language. BASM generates output that Retroputer can then load into its memory and feed to the 6516 CPU to execute the desired program."),(0,n.mdx)("h3",null,"Program Structure"),(0,n.mdx)("p",null,"An assembly language program consists of a series of constant definitions, namespaces, segments, and comments. Code and data can only be defined within segments."),(0,n.mdx)("pre",null,(0,n.mdx)("code",a({parentName:"pre"},{className:"language-text"}),"#\n# Comments are allowed outside of any namespace or block\n#\n\n.namespace app {\n    .segment code 0x01000 {\n        xor a, a\n    }\n}\n\n# segments don't have to live within namespaces\n.segment kcode 0x02000 {\n    xor b, b\n}\n\n# you can have as many namespaces and segments as needed\n.namespace util {\n    .segment code 0x09000 {\n        str-length:\n            ret\n    }\n}\n")))}m.isMDXComponent=!0;
},{"react":"SAdv","@mdx-js/react":"QaRW"}]},{},[], null)
//# sourceMappingURL=/untitled.188121b3.js.map