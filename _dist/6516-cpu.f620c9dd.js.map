{"version":3,"sources":["../../../docs/technical/technical-overview/6516-central-processing-unit/6516-cpu.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"6516-cpu.f620c9dd.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Register File`}</h1>\n    <p>{`There are 24 registers available in the Retroputer CPU numbered `}<inlineCode parentName=\"p\">{`r0`}</inlineCode>{` through `}<inlineCode parentName=\"p\">{`r23`}</inlineCode>{`. These registers are either sixteen bits wide `}{`(`}{`even registers`}{`)`}{` or eight bytes wide `}{`(`}{`odd registers`}{`)`}{`. The `}<em parentName=\"p\">{`low`}</em>{` even register bytes are the same as the odd register bytes meaning that it is possible to access just the low bytes or the high bytes of a sixteen bit register.`}</p>\n    <p>{`In machine language, the access to an even register is always assumed to be a sixteen bit request. As such, it is not possible to directly access the high level bytes of an even register as if it were an eight bit register.`}</p>\n    <p>{`The odd registers are always assumed to be eight bit requests.`}</p>\n    <blockquote>\n      <h2 parentName=\"blockquote\"><strong parentName=\"h2\">{`Important`}</strong></h2>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`Changing the value of an even register will directly influence the value of the corresponding odd register and `}<em parentName=\"li\">{`vice versa`}</em>{`.`}</li>\n        <li parentName=\"ul\">{`The type of register access in an instruction opcode will determine the size of any memory request, including immediate access. For example, `}<inlineCode parentName=\"li\">{`LD A, [0x02000]`}</inlineCode>{` will request `}<em parentName=\"li\">{`two bytes`}</em>{` `}{`(`}{`one word`}{`)`}{` from memory at address location `}<inlineCode parentName=\"li\">{`0x02000`}</inlineCode>{`. `}<inlineCode parentName=\"li\">{`LD AL, [0x02000]`}</inlineCode>{` will only request one byte from the same location.`}</li>\n      </ul>\n    </blockquote>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Alias`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Index`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Encoding`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Size`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`A`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`0000`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`General purpose register, often used as the first parameter to a subroutine.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`AL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`0001`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Lower eight bits of `}<inlineCode parentName=\"td\">{`A`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`B`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`0010`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`General purpose register. Often used as the second parameter to a subroutine.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`3`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`0011`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Lower eight bits of `}<inlineCode parentName=\"td\">{`B`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`4`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`0100`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`General purpose register. Often used for counting, as part of `}<inlineCode parentName=\"td\">{`LOOP`}</inlineCode>{`s.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`CL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`5`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`0101`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Lower eight bits of `}<inlineCode parentName=\"td\">{`C`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`D`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`6`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`0110`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`General purpose register. Used by `}<strong parentName=\"td\">{`D-relative`}</strong>{` addressing.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`7`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`0111`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Lower eight bits of `}<inlineCode parentName=\"td\">{`D`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`X`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`1000`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Index register. Often used as a general purpose register, but not all instructions can operate directly on `}<inlineCode parentName=\"td\">{`X`}</inlineCode>{`. Used as an offset in `}<strong parentName=\"td\">{`absolute`}</strong>{` and `}<strong parentName=\"td\">{`indirect`}</strong>{` addressing modes.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Y`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`10`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`1010`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Index register. Works mostly the same as `}<inlineCode parentName=\"td\">{`X`}</inlineCode>{`, except the index is applied `}<em parentName=\"td\">{`after`}</em>{` the `}<strong parentName=\"td\">{`indirect`}</strong>{` address is computed.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BP`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`12`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`1100`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Base Pointer. Used to denote the bottom of a stack frame.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SP`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`14`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`1110`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Stack Pointer. Used to denote the top of the stack.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`IRQ+FLAGS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Includes the currently-processing IRQ and the flags.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`FLAGS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`17`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Indicates the current state of the various processor flags.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`PC`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`18`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Program Counter – points to the instruction about to be executed.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MM`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`20`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The Memory Map register controls the banking of pages 1–3. The default configuration is `}<inlineCode parentName=\"td\">{`74C1`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MP`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`22`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The Memory Pointer points to the next byte to be read when parsing an instruction.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}