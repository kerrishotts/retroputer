parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"WcI3":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=l;var e=a(require("react")),t=require("@mdx-js/react");function a(e){return e&&e.__esModule?e:{default:e}}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}const n=e=>(function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.mdx)("div",a)}),d={},m="wrapper";function l({components:e,...a}){return(0,t.mdx)(m,r({},d,a,{components:e,mdxType:"MDXLayout"}),(0,t.mdx)("h1",null,"Register File"),(0,t.mdx)("p",null,"There are 24 registers available in the Retroputer CPU numbered ",(0,t.mdx)("inlineCode",{parentName:"p"},"r0")," through ",(0,t.mdx)("inlineCode",{parentName:"p"},"r23"),". These registers are either sixteen bits wide ","(","even registers",")"," or eight bytes wide ","(","odd registers",")",". The ",(0,t.mdx)("em",{parentName:"p"},"low")," even register bytes are the same as the odd register bytes meaning that it is possible to access just the low bytes or the high bytes of a sixteen bit register."),(0,t.mdx)("p",null,"In machine language, the access to an even register is always assumed to be a sixteen bit request. As such, it is not possible to directly access the high level bytes of an even register as if it were an eight bit register."),(0,t.mdx)("p",null,"The odd registers are always assumed to be eight bit requests."),(0,t.mdx)("blockquote",null,(0,t.mdx)("h2",{parentName:"blockquote"},(0,t.mdx)("strong",{parentName:"h2"},"Important")),(0,t.mdx)("ul",{parentName:"blockquote"},(0,t.mdx)("li",{parentName:"ul"},"Changing the value of an even register will directly influence the value of the corresponding odd register and ",(0,t.mdx)("em",{parentName:"li"},"vice versa"),"."),(0,t.mdx)("li",{parentName:"ul"},"The type of register access in an instruction opcode will determine the size of any memory request, including immediate access. For example, ",(0,t.mdx)("inlineCode",{parentName:"li"},"LD A, [0x02000]")," will request ",(0,t.mdx)("em",{parentName:"li"},"two bytes")," ","(","one word",")"," from memory at address location ",(0,t.mdx)("inlineCode",{parentName:"li"},"0x02000"),". ",(0,t.mdx)("inlineCode",{parentName:"li"},"LD AL, [0x02000]")," will only request one byte from the same location."))),(0,t.mdx)("table",null,(0,t.mdx)("thead",{parentName:"table"},(0,t.mdx)("tr",{parentName:"thead"},(0,t.mdx)("th",r({parentName:"tr"},{align:"left"}),"Alias"),(0,t.mdx)("th",r({parentName:"tr"},{align:"left"}),"Index"),(0,t.mdx)("th",r({parentName:"tr"},{align:"left"}),"Encoding"),(0,t.mdx)("th",r({parentName:"tr"},{align:"left"}),"Size"),(0,t.mdx)("th",r({parentName:"tr"},{align:"left"}),"Description"))),(0,t.mdx)("tbody",{parentName:"table"},(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"A"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"0"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"0000")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"General purpose register, often used as the first parameter to a subroutine.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"AL"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"1"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"0001")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"8"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Lower eight bits of ",(0,t.mdx)("inlineCode",{parentName:"td"},"A"),".")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"B"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"2"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"0010")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"General purpose register. Often used as the second parameter to a subroutine.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"BL"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"3"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"0011")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"8"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Lower eight bits of ",(0,t.mdx)("inlineCode",{parentName:"td"},"B"),".")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"C"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"4"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"0100")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"General purpose register. Often used for counting, as part of ",(0,t.mdx)("inlineCode",{parentName:"td"},"LOOP"),"s.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"CL"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"5"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"0101")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"8"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Lower eight bits of ",(0,t.mdx)("inlineCode",{parentName:"td"},"C"),".")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"D"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"6"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"0110")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"General purpose register. Used by ",(0,t.mdx)("strong",{parentName:"td"},"D-relative")," addressing.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"DL"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"7"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"0111")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"8"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Lower eight bits of ",(0,t.mdx)("inlineCode",{parentName:"td"},"D"),".")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"X"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"8"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"1000")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Index register. Often used as a general purpose register, but not all instructions can operate directly on ",(0,t.mdx)("inlineCode",{parentName:"td"},"X"),". Used as an offset in ",(0,t.mdx)("strong",{parentName:"td"},"absolute")," and ",(0,t.mdx)("strong",{parentName:"td"},"indirect")," addressing modes.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Y"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"10"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"1010")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Index register. Works mostly the same as ",(0,t.mdx)("inlineCode",{parentName:"td"},"X"),", except the index is applied ",(0,t.mdx)("em",{parentName:"td"},"after")," the ",(0,t.mdx)("strong",{parentName:"td"},"indirect")," address is computed.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"BP"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"12"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"1100")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Base Pointer. Used to denote the bottom of a stack frame.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"SP"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"14"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),(0,t.mdx)("inlineCode",{parentName:"td"},"1110")),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Stack Pointer. Used to denote the top of the stack.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"IRQ+FLAGS"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"â€“"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Includes the currently-processing IRQ and the flags.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"FLAGS"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"17"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"â€“"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"8"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Indicates the current state of the various processor flags.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"PC"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"18"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"â€“"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"Program Counter â€“ points to the instruction about to be executed.")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"MM"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"20"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"â€“"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"The Memory Map register controls the banking of pages 1â€“3. The default configuration is ",(0,t.mdx)("inlineCode",{parentName:"td"},"74C1"),".")),(0,t.mdx)("tr",{parentName:"tbody"},(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"MP"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"22"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"â€“"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"16"),(0,t.mdx)("td",r({parentName:"tr"},{align:"left"}),"The Memory Pointer points to the next byte to be read when parsing an instruction.")))))}l.isMDXComponent=!0;
},{"react":"SAdv","@mdx-js/react":"QaRW"}]},{},[], null)
//# sourceMappingURL=/6516-cpu.f620c9dd.js.map