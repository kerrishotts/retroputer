{"version":3,"sources":["../../../docs/programming-retroputer/what-is-the-kernel/standard-library.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"standard-library.826c95cc.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Standard Library`}</h1>\n    <p>{`The standard library provides routines that are common to many different kinds of programs. Rather than each program supply their own, it makes sense for the kernel to do so in order to reduce memory consumption by duplication.`}</p>\n    <h2>{`I16-TO-STR`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Register`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Notes`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Parameter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`D, X`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`PTR to buffer for converted number`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Word to convert to a string `}{`(`}{`signed`}{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BH`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Padding`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Radix`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Return`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Converts the signed word in `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{` to a string `}{`(`}{`at `}<inlineCode parentName=\"p\">{`[D, X]`}</inlineCode>{`)`}{` using the specified radix `}{`(`}<inlineCode parentName=\"p\">{`BL`}</inlineCode>{`)`}{` and adding extra zeros to fill out the requested padding `}{`(`}<inlineCode parentName=\"p\">{`BH`}</inlineCode>{`)`}{`.`}</p>\n    <p>{`The target buffer `}<em parentName=\"p\">{`must`}</em>{` have sufficient space to accept the converted number, including space for a `}<inlineCode parentName=\"p\">{`NUL`}</inlineCode>{` terminator and the sign of the number.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Radix `}{`(`}{`BL`}{`)`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Space required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`18 `}{`(`}{`SIGN + 16 + NUL`}{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`10 `}{`(`}{`SIGN + 8 + NUL`}{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`10`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`7 `}{`(`}{`SIGN + 5 + NUL`}{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`6 `}{`(`}{`SIGN + 4 + NUL`}{`)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`A negative sign `}{`(`}{`\"-\"`}{`)`}{` will be rendered as the first character if `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{` is negative. Otherwise a space `}{`(`}{`\" \"`}{`)`}{` will be used to denote a positive value.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Important`}</strong></p>\n      <p parentName=\"blockquote\">{`This routine technically permits any value for radix. A radix of zero will result in a processor exception and an infinite loop. A radix of one will also result in an infinite loop. Any other radix will generate a conversion that makes `}<em parentName=\"p\">{`some`}</em>{` sort of sense, but once past a radix of 36, characters beyond \"Z\" will start to be used, resulting in visual gibberish.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`d := addrbank(buffer)\nx := addrbofs(buffer)\nc := 12345\nbh := 0\nbl := 10\ncall [U16_TO_STR]       # [D, X] => \"12345\", 0x00\n`}</code></pre>\n    <h2>{`STRCMP `}{`(`}{`TODO`}{`)`}</h2>\n    <h2>{`STR-TO-I16 `}{`(`}{`TODO`}{`)`}</h2>\n    <h2>{`STR-TO-U16 `}{`(`}{`TODO`}{`)`}</h2>\n    <h2>{`U16-TO-STR`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Register`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Notes`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Parameter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`D, X`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`PTR to buffer for converted number`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`C`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Word to convert to a string `}{`(`}{`unsigned`}{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BH`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Padding`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`BL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Radix`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Return`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`–`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Converts the unsigned word in `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{` to a string `}{`(`}{`at `}<inlineCode parentName=\"p\">{`[D, X]`}</inlineCode>{`)`}{` using the specified radix `}{`(`}<inlineCode parentName=\"p\">{`BL`}</inlineCode>{`)`}{` and adding extra zeros to fill out the requested padding `}{`(`}<inlineCode parentName=\"p\">{`BH`}</inlineCode>{`)`}{`.`}</p>\n    <p>{`The target buffer `}<em parentName=\"p\">{`must`}</em>{` have sufficient space to accept the converted number, including space for a `}<inlineCode parentName=\"p\">{`NUL`}</inlineCode>{` terminator.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Radix `}{`(`}{`BL`}{`)`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Space required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`17 `}{`(`}{`16 + NUL`}{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`8`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`9 `}{`(`}{`8 + NUL`}{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`10`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`6 `}{`(`}{`5 + NUL`}{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`5 `}{`(`}{`4 + NUL`}{`)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Important`}</strong></p>\n      <p parentName=\"blockquote\">{`This routine technically permits any value for radix. A radix of zero will result in a processor exception and an infinite loop. A radix of one will also result in an infinite loop. Any other radix will generate a conversion that makes `}<em parentName=\"p\">{`some`}</em>{` sort of sense, but once past a radix of 36, characters beyond \"Z\" will start to be used, resulting in visual gibberish.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`d := addrbank(buffer)\nx := addrbofs(buffer)\nc := 12345\nbh := 0\nbl := 10\ncall [U16_TO_STR]       # [D, X] => \"12345\", 0x00\n`}</code></pre>\n    <h2>{`UPPERCASE-IN-PLACE `}{`(`}{`TODO`}{`)`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}