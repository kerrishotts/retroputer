{"version":3,"sources":["../../../docs/programming-retroputer/basic/technical-details/tokenization.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"tokenization.e4b78fe3.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`BASIC Tokenization`}</h1>\n    <p>{`Like most BASICs of the 8 and 16-bit microcomputer era, lines of code are\ntokenized before stored in memory. For computers with a small mount of memory\nthis was useful because it often enabled significant space savings. For\ncomputers with a bit more memory (like Retroputer), some space savings can be\ntraded for performance. This can be seen in the tokenization of variables to\npre-compute variable indexes as well as the tokenization of constants to avoid\nconverting a string representation into a number at runtime.`}</p>\n    <p>{`There are several forms of code transformation and tokenization used in\nRetroputer BASIC:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Conversion to uppercase`}</li>\n      <li parentName=\"ol\">{`Removal of extra SPACEs`}</li>\n      <li parentName=\"ol\">{`Numbers in byte range are converted to BYTE tokens`}</li>\n      <li parentName=\"ol\">{`Numbers in word range are converted to WORD tokens`}</li>\n      <li parentName=\"ol\">{`Floating point numbers are converted to REAL tokens`}</li>\n      <li parentName=\"ol\">{`Strings are stored as NUL-terminated character arrays, without any QUOTEs`}</li>\n      <li parentName=\"ol\">{`Keywords are stored as a single byte with bit 7 set (0x80 and higher)`}</li>\n      <li parentName=\"ol\">{`Operators are also treated the same as keywords`}</li>\n      <li parentName=\"ol\">{`Variables have their index pre-calculated, their type condensed into the\nindex's high two bits. The length of the variable name is stored so that\nwe can quickly jump past during execution. Variable names are NOT stored\nwith NUL terminators.`}</li>\n      <li parentName=\"ol\">{`End-of-line indicator`}</li>\n    </ol>\n    <h2>{`Conversion to uppercase`}</h2>\n    <p>{`The first step of the tokenization process is to convert all non-string\ncharacters to uppercase. This simplifies keyword lookups, and also ensures that\na variable name is easier to index (no need to account for lowercase names).`}</p>\n    <p>{`Because strings must be accounted for, it's during this phase that quotes are\nchecked to ensure that all opening quotes have an ending quote. If a quote is\nfound to be missing, BASIC will raise a \"EXPECTED A QUOTE\" error. Should this\noccur when entering a line into program storage, `}<em parentName=\"p\">{`the line will not be stored`}</em>{`.`}</p>\n    <h2>{`Removal of extra SPACEs`}</h2>\n    <p>{`Whitespace in BASIC is not significant, and so any unnecessary spaces are\nremoved. This is to save on memory, but also to increase performance speed\nduring runtime (the more SPACEs must be consumed, the slower code would run).`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Removal of extra spaces has the unfortunate side-effect of losing any\nindentation of code. You can use `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` statement separators to keep indentation\nat the cost of execution speed.`}</p>\n    </blockquote>\n    <p>{`BASIC will match keywords and other tokens greedily, and so SPACEs are not\nabsolutely required. As such, SPACEs can be omitted in many places to save even\nmore memory at the expense of readibility.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: SPACEs are not removed from string literals.`}</p>\n    </blockquote>\n    <h2>{`Tokenization of Numbers`}</h2>\n    <p>{`In many early versions of BASIC, numers were stored as strings, requiring\nparsing every time they were encountered. This meant that variables were often\nfar faster than constants. While magic numbers should not be encouraged, there\nare often cases where storing `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{`, and other sentinel values make sense.`}</p>\n    <p>{`Retroputer BASIC tries to conserve as much memory as possible when tokenizing\nnumbers. If a number can be stored as a byte, it will be, for example.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Range`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Token`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Storage`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0x00-0xFF`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0xFF`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Byte`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0x100-0xFFFF`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0xFE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Word`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`32-bit value`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0xFC`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Long Word (@todo)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Otherwise...`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0xF9`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`64-bit floating point (@todo)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`This means that for small digits, the tokenized storage required will be more\nthan the single digit would require. For example, `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` takes two bytes to store\n(`}<inlineCode parentName=\"p\">{`0xFF 0x00`}</inlineCode>{`). However `}<inlineCode parentName=\"p\">{`255`}</inlineCode>{` requires one less byte (`}<inlineCode parentName=\"p\">{`0xFF 0xFF`}</inlineCode>{`). Floating\npoint values are also sometimes subject to this as well (where `}<inlineCode parentName=\"p\">{`1.5`}</inlineCode>{` takes more\nspace when tokenized).`}</p>\n    <p>{`The storage tradeoff is considered worthwhile, however, because it grants a\nlarge performance improvement during runtime. Instead of having to convert\nnumbers each time they are encountered, they are encountered in a form that can\nbe immediately used by the CPU. This improves performance considerably,\nespecially for larger numbers and floating-point numbers.`}</p>\n    <h2>{`Tokenization of String literals`}</h2>\n    <p>{`String literals are stored in a format that makes them easy to print and pass\nto other functions in the standard library (like `}<inlineCode parentName=\"p\">{`STRCMP`}</inlineCode>{`). These are stored\nas NUL-terminated character arrays, without any surrounding QUOTEs. When\nLISTed, BASIC will wrap strings with QUOTEs to reflect the original intent.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: when scanning, string literals must be scanned character by character.\nThis means that long strings take more time to parse during runtime.`}</p>\n    </blockquote>\n    <p>{`String literals are stored with token `}<inlineCode parentName=\"p\">{`0xFB`}</inlineCode>{` (Code String). This is used to\nsignify to the runtime environment that, absent any string manipulation, the\ninterpreter can use the string directly from code, thus saving space on the\ndata heap.`}</p>\n    <h2>{`Tokenization of Keywords and Operators`}</h2>\n    <p>{`All keywords and operators are condensed into a single byte token with bit 7\nset. This means that keywords and operator tokens are easily identified\nbecause they will be 0x80 or higher. This makes it easy to construct vector\ntables to speed up execution during runtime.`}</p>\n    <p>{`Retroputer BASIC, like many BASICs of the era, will match keywords that exist\nat the start of a variable name. (Some BASICs would match even in the middle of\na variable name.) This means that it's impossible to have a variable named\n`}<inlineCode parentName=\"p\">{`TOTAL`}</inlineCode>{` because Retroputer will see `}<inlineCode parentName=\"p\">{`TO`}</inlineCode>{` as a keyword. However, `}<inlineCode parentName=\"p\">{`SCORE`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`GOAT`}</inlineCode>{` are valid names, even though because they `}<em parentName=\"p\">{`contain`}</em>{` keywords (`}<inlineCode parentName=\"p\">{`OR`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`AT`}</inlineCode>{`, respectively) they don't `}<em parentName=\"p\">{`start`}</em>{` with a keyword.`}</p>\n    <p>{`Variable names in Retroputer BASIC are only significant to two characters, and\nvariables can only be of the form `}<inlineCode parentName=\"p\">{`[A-Z][A-Z0-9]*`}</inlineCode>{`. The first two chracters are\nused to calculate the variable index into variable memory (starting at\n`}<inlineCode parentName=\"p\">{`0x02000`}</inlineCode>{`). This means that every variable reference takes up four more bytes\nthan the name itself. This takes up a lot of space, but makes it trivial for\nBASIC to look up a variable quickly during runtime.`}</p>\n    <p>{`The format when stored looks like this:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0x00`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0x01`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0x02`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0x03`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0x04`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0x05...`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0xFA`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`high index & type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`low index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`length`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`char 1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`char 2...`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The type of a variable is stored in the top three bits of the index as follows:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Bits`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sigil`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`000`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Integer`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`N/A`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`001`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`$`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`010`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Floating Point number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`#`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`011`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`FN or SUB`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`N/A`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`100`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array of Integers`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`()`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`101`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array of Strings`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`$()`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`110`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array of Floating Point numbers`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`#()`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`111`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Unused`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`N/A`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`This information enables BASIC to quickly calculate the correct base in storage\nto either lookup or store a viarable value during runtime.`}</p>\n    <p>{`When LISTed, the corresponding sigil is rendered to indicate the originally\nindicated type.`}</p>\n    <h2>{`End-of-line`}</h2>\n    <p>{`A NUL byte is added to the end of each tokenized line. This is used to quickly\nidentify during runtime when the end of the line has been reached. This is a\ndifferent token from the \"End of Statement\" token, which has a slightly\ndifferent semantic meaning than does the end of the line.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}