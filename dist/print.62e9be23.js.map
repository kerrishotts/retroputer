{"version":3,"sources":["../../../docs/programming-retroputer/basic/statement-reference/print.md"],"names":["makeShortcode","name","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","file":"print.62e9be23.js","sourceRoot":"../src/www/simple","sourcesContent":["/* @jsx mdx */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react'\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`PRINT`}</h1>\n    <p>{`Prints content at the cursor location on the screen `}{`(`}{`or at a specified screen location`}{`)`}{`, or sends content to an open channel.`}</p>\n    <p>{`Forms:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`PRINT [expression [,|; expression ...][,|;]\nPRINT TO device ...\n? ...\n`}</code></pre>\n    <h2>{`Printing to the current cursor position`}</h2>\n    <p><inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{`, on its own, will print to the screen at the current cursor position and advance the cursor by the length of the data to display.`}</p>\n    <p>{`Without any parameters, `}<inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{` will simply move the cursor to the start of the next line.`}</p>\n    <p><inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{` can be used to display any number of expressions one after the other. Each expression must be separated by either a semicolon or a comma. A comma will advance the cursor to the next tab position on the line, whereas a semicolon will print items without intervening space.`}</p>\n    <p>{`A printable item can be a string, a number, a variable, or an expression that resolves to any of those types. Strings will print as-is and semicolons won't include any additional spaces between strings. Numbers reserve a space for the negative sign, so positive numbers will appear to have space between them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`PRINT \"Hello, world\"\nHello, world\nREADY.\nPRINT \"1+2=\"; 1+2\n1+2= 3\nREADY\n█\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{` will automatically advance to the start of the next line (scrolling the screen if necessary), unless you use a trailing semicolon or comma. If a semicolon is used, the cursor will be left at the end of the printed data, and if a comma is used, the cursor will advance to the next tab position.`}</p>\n    <h2>{`Printing at a specific screen position`}</h2>\n    <p><inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{` makes it easy to print content at an arbitrary location on the screen by using the `}<inlineCode parentName=\"p\">{`AT`}</inlineCode>{` modifier before any text you want to print.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`PRINT AT 10, 15; \"X\"\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`PRINT AT`}</inlineCode>{` takes a `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`column`}</inlineCode>{`, and positions the cursor there before continuing printing. Both the `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`column`}</inlineCode>{` are zero-based, so `}<inlineCode parentName=\"p\">{`0, 0`}</inlineCode>{` refers to the top left of the screen.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Important`}</strong></p>\n      <p parentName=\"blockquote\">{`Retroputer BASIC assumes you'll pass a row and column that is actually visible on the screen. It's possible to write to areas outside of the visible screen area by passing large or negative values. This can result in undefined and unexpected behavior.`}</p>\n    </blockquote>\n    <p>{`You can include as many `}<inlineCode parentName=\"p\">{`AT`}</inlineCode>{` modifiers as you want:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`PRINT AT 4, 4; \"X\"; AT 9, 9; \"Z\"\n`}</code></pre>\n    <h2>{`Printing with columns`}</h2>\n    <p><inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{` will automatically advance to the next tab stop on a line when you use the `}<inlineCode parentName=\"p\">{`,`}</inlineCode>{` separator. You can include multiple commas to advance multiple tabs, but it may be preferrable to use the `}<inlineCode parentName=\"p\">{`TAB()`}</inlineCode>{` function instead.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`PRINT TAB(3); \"Hi\"\n                        Hi\nREADY.\n█\n`}</code></pre>\n    <p>{`If you prefer to use a comma after the `}<inlineCode parentName=\"p\">{`TAB()`}</inlineCode>{` function, remember that the comma itself will be interpreted as a single tab, so you will need to reduce the parameter by one:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`PRINT TAB(2), \"Hi\"\n`}</code></pre>\n    <p>{`Using commas and `}<inlineCode parentName=\"p\">{`TAB`}</inlineCode>{` make it easy to print text in columns. Each column is eight characters wide, and will always be left aligned at the next tab stop. If a value overflows a column, the next available column is used.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`10 CLS\n20 PRINT \"Value\", \"Times 2\", \"Times 3\"\n30 A = 0\n40 PRINT A, A*2, A*3\n50 A = A + 1\n60 IF A < 13 THEN GOTO 40\nrun\n\nValue   Times 2 Times 3\n 0       0       0\n 1       2       3\n 2       4       6\n 3       6       9\n 4       8       12\n ...\n`}</code></pre>\n    <h2>{`Printing spaces`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{` command also understands the `}<inlineCode parentName=\"p\">{`SPC()`}</inlineCode>{` function. This can be used to insert an arbitrary number of spaces between items, which can be useful for advancing to a position within a line while also clearing the contents of the line.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`PRINT SPC(15); \"X\"\n`}</code></pre>\n    <p>{`As with `}<inlineCode parentName=\"p\">{`TAB`}</inlineCode>{`, a semicolon or comma must be used to separate the items. If you use a comma, the cursor will advance to the next available tab stop after the spaces are printed.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Important`}</strong></p>\n      <p parentName=\"blockquote\">{`It's possible to print a `}<em parentName=\"p\">{`large`}</em>{` number of spaces with this command. If you do so, BASIC may appear to hang while it prints out the data. There is no way to interrupt BASIC while it is printing spaces.`}</p>\n    </blockquote>\n    <h2>{`Printing Characters`}</h2>\n    <p>{`You can instruct the `}<inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{` command to print a character given the Retscii character code. This is useful for characters that aren't easily typed in (or may be impossible to type).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`PRINT CHR$(65)\nA\nREADY.\n█\n`}</code></pre>\n    <p>{`This can be used to print control strings. For example, you can change the color of the printed text to yellow by using `}<inlineCode parentName=\"p\">{`CHR$()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`PRINT CHR$(27);\"22\";CHR$(18);\"Hi!\"\n`}</code></pre>\n    <h2>{`Printing a run of characters`}</h2>\n    <p>{`It's possible to print a character several times over, similar to the `}<inlineCode parentName=\"p\">{`SPC()`}</inlineCode>{` function, but with any character.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`PRINT CHRS$ 65, 10\nAAAAAAAAAAREADY\n█\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Unlike previous examples, `}<inlineCode parentName=\"p\">{`CHRS$`}</inlineCode>{` does not immediately cause `}<inlineCode parentName=\"p\">{`PRINT`}</inlineCode>{` to advance to the next line when printing is complete.`}</p>\n    </blockquote>\n    <h2>{`Printing to a device (@todo)`}</h2>\n    <p>{`In order to print to a device, you can use use `}<inlineCode parentName=\"p\">{`PRINT TO`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`OPEN 1,8,\"hello.txt\" FOR PRINT\nPRINT TO 1;\"Hello!\"\nCLOSE 1\n`}</code></pre>\n    <p>{`Depending upon the device and file types, the `}<inlineCode parentName=\"p\">{`AT`}</inlineCode>{` modifier may have special significance.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`For random-access files, `}<inlineCode parentName=\"li\">{`AT`}</inlineCode>{` moves the file pointer to the specified location. If the provided value is beyond the end of the file, the next output will extend the file to the given size.`}</li>\n      <li parentName=\"ul\">{`For a printer, `}<inlineCode parentName=\"li\">{`AT`}</inlineCode>{` will move the print head to the specified location on the page, adjusting the carriage as necessary. The printer is assumed to be 132 characters wide by 66 lines tall.`}</li>\n      <li parentName=\"ul\">{`For all other devices, `}<inlineCode parentName=\"li\">{`AT`}</inlineCode>{` is ignored.`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"]}