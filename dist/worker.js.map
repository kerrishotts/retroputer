{
  "version": 3,
  "sources": ["../src/core/Bus.js", "../src/core/SystemBus.js", "../src/core/Memory.js", "../src/core/IOBus.js", "../src/core/ALU.js", "../src/core/FPU.js", "../src/core/Device.js", "../src/core/Controller.js", "../src/util/endianness.js", "../src/core/RegisterFile.js", "../src/isa/tasks.js", "../src/isa/opcodes.js", "../src/isa/decodeInstruction.js", "../src/core/Processor.js", "../src/util/supportsSharedArrayBuffer.js", "../src/core/Computer.js", "../src/basm/constants.js", "../src/basm/disassemble.js", "../src/core/Diagnostics.js", "../src/devices/Console.js", "../src/www/worker/BrowserConsole.js", "../src/devices/Screen.js", "../src/devices/DMA.js", "../src/devices/Keyboard.js", "../src/devices/Timers.js", "../src/roms/kernel.js", "../src/www/worker/index.js"],
  "sourcesContent": ["/*****************************************************************\n *\n * Generic Bus Class\n * -----------------\n *\n * The Generic Bus enables us to create various kinds of busses,\n * including clocks, data lines, address-selects, and more.\n */\n\nconst _size = Symbol(\"_size\");\nconst _buffer = Symbol(\"_buffer\");\nconst _value = Symbol(\"_value\");\nconst _receivers = Symbol(\"_receivers\");\nconst _mask = Symbol(\"_mask\");\n\nconst MASKS=[\n    0,\n    0xFF,\n    0xFFFF,\n    0xFFFFFF,\n    0xFFFFFFFF\n];\n\nexport class Bus {\n\n    /**\n     * @param {Number} size number of bytes the bus controls\n     */\n    constructor(size = 2, mask = 0xFFFFFFFF) {\n\n        this[_size] = size;\n        this[_mask] = mask & MASKS[size]; // lets us simulate a smaller bus width\n        /*\n        this[_buffer] = new ArrayBuffer(size);\n\n        switch (size) {\n            case 1: this[_value] = new Uint8Array(this[_buffer]); break;\n            case 2: this[_value] = new Uint16Array(this[_buffer]); break;\n            case 4: this[_value] = new Uint32Array(this[_buffer]); break;\n            default:\n                throw new Error(\"Bus must be eight, sixteen, or thirty-two bits wide.\");\n        }\n        */\n       this[_value] = 0;\n\n        this[_receivers] = [];\n    }\n\n    /**\n     * @param {Function} receiver \n     */\n    addReceiver(receiver) {\n        if (receiver) {\n            this[_receivers].push(receiver);\n        }\n    }\n\n    set value(v) {\n        //this[_value][0] = v & this[_mask];\n        this[_value] = (v < 0 ? ((~v)+1) : v) & this[_mask];\n    }\n\n    get value() {\n        //return this[_value][0];\n        return this[_value];\n    }\n\n    get size() {\n        return this[_size];\n    }\n\n    /**\n     * @param {number} v \n     * @param {boolean} [hold = false]\n     */\n    signal(v, hold = false) {\n        if (v !== undefined) {\n            this.value = v;\n        }\n\n        let curValue = this.value;\n        for (let i = this[_receivers].length - 1; i >= 0; i--) {\n            this[_receivers][i](curValue);\n        }\n\n        if (!hold) {\n            this.value = 0;\n        }\n    }\n}", "import { Bus } from \"./Bus.js\";\n\nconst MAP_SIZE = 2;\nconst MAP_MASK = 0b1111111111111111; // 16-bit memory mask\nconst ADDRESS_SIZE = 4;\nconst ADDRESS_MASK = 0b1111111111111111111; // 19-bit address bus\nconst DATA_SIZE = 2;\nconst DATA_MASK = 0b1111111111111111;\nconst COMMAND_SIZE = 1;\nconst COMMAND_MASK = 0b11;\nconst EXECUTE_SIZE = 1;\nconst EXECUTE_MASK = 0b1;\n\nconst _mapBus = Symbol(\"_mapBus\");\nconst _addressBus = Symbol(\"_addressBus\");\nconst _dataBus = Symbol(\"_dataBus\");\nconst _commandBus = Symbol(\"_commandBus\");\nconst _executeBus = Symbol(\"_executeBus\");\n\nexport const COMMANDS_MEMORY_READ_BYTE = 0b00;\nexport const COMMANDS_MEMORY_READ_WORD = 0b01;\nexport const COMMANDS_MEMORY_WRITE_BYTE = 0b10;\nexport const COMMANDS_MEMORY_WRITE_WORD = 0b11;\n\nexport class SystemBus {\n    constructor() {\n        this[_mapBus] = new Bus(MAP_SIZE, MAP_MASK);\n        this[_addressBus] = new Bus(ADDRESS_SIZE, ADDRESS_MASK);\n        this[_dataBus] = new Bus(DATA_SIZE, DATA_MASK);\n        this[_commandBus] = new Bus(COMMAND_SIZE, COMMAND_MASK);\n        this[_executeBus] = new Bus(EXECUTE_SIZE, EXECUTE_MASK);\n    }\n\n    get mapBus() {\n        return this[_mapBus];\n    }\n\n    get addressBus() {\n        return this[_addressBus];\n    }\n\n    get dataBus() {\n        return this[_dataBus];\n    }\n\n    get commandBus() {\n        return this[_commandBus]\n    }\n\n    get executeBus() {\n        return this[_executeBus]\n    }\n\n    get map() {\n        return this[_mapBus].value;\n    }\n\n    set map(v) {\n        this[_mapBus].value = v & MAP_MASK;\n    }\n\n    get command() {\n        return this[_commandBus].value;\n    }\n\n    get address() {\n        return this[_addressBus].value;\n    }\n\n    get data() {\n        return this[_dataBus].value;\n    }\n\n    set data(v) {\n        this[_dataBus].value = v;\n    }\n\n    readByte(address) {\n        this[_addressBus].value = address;\n        this[_dataBus].value = 0;\n        this[_commandBus].value = COMMANDS_MEMORY_READ_BYTE;\n        this[_executeBus].signal(1);\n        return this[_dataBus].value;\n    }\n\n    readWord(address) {\n        this[_addressBus].value = address;\n        this[_dataBus].value = 0;\n        this[_commandBus].value = COMMANDS_MEMORY_READ_WORD;\n        this[_executeBus].signal(1);\n        return this[_dataBus].value;\n    }\n\n    writeByte(address, value) {\n        this[_addressBus].value = address;\n        this[_dataBus].value = value & 0xFF;\n        this[_commandBus].value = COMMANDS_MEMORY_WRITE_BYTE;\n        this[_executeBus].signal(1);\n    }\n\n    writeWord(address, value) {\n        this[_addressBus].value = address;\n        this[_dataBus].value = value;\n        this[_commandBus].value = COMMANDS_MEMORY_WRITE_WORD;\n        this[_executeBus].signal(1);\n    }\n\n}", "/* globals SharedArrayBuffer */\n\nconst _rom = Symbol(\"_rom\");\nconst _shared = Symbol(\"_shared\");\nconst _startingAddress = Symbol(\"_startingAddress\");\nconst _endingAddress = Symbol(\"_endingAddress\");\nconst _size = Symbol(\"_size\");\nconst _buffer = Symbol(\"_buffer\");\nconst _data = Symbol(\"_data\");\nconst _systemBus = Symbol(\"_systemBus\");\n\nimport {\n  COMMANDS_MEMORY_READ_BYTE, COMMANDS_MEMORY_WRITE_BYTE,\n  COMMANDS_MEMORY_READ_WORD, COMMANDS_MEMORY_WRITE_WORD,\n  SystemBus\n} from \"./SystemBus.js\";\n\nexport class MemoryBank {\n  /**\n   * \n   * @param {Object} config \n   * @param {SystemBus} config.systemBus\n   * @param {number} [config.address = 0]\n   * @param {number} [config.size = 0]\n   * @param {boolean} [config.rom = false]\n   * @param {boolean} [config.shared = false]\n   * @param {ArrayBuffer} buffer\n   * \n   */\n  constructor({ systemBus, address = 0x00000, size = 0, rom = false, shared = false, buffer = undefined }) {\n    this[_buffer] = buffer || new (shared ? SharedArrayBuffer : ArrayBuffer)(size);\n    this[_data] = new Uint8Array(this[_buffer], buffer ? address : 0, size);\n    this[_size] = size;\n    this[_startingAddress] = address;\n    this[_endingAddress] = address + size - 1;\n    this[_shared] = shared;\n    this[_rom] = rom;\n    this[_systemBus] = systemBus;\n\n    this.signaled = this.signaled.bind(this);\n    if (systemBus) {\n      systemBus.executeBus.addReceiver(this.signaled);\n    }\n  }\n\n  get shared() {\n    return this[_shared];\n  }\n\n  get rom() {\n    return this[_rom];\n  }\n\n  get startingAddress() {\n    return this[_startingAddress];\n  }\n\n  get size() {\n    return this[_size];\n  }\n\n  get endingAddress() {\n    return this[_endingAddress];\n  }\n\n  /**\n   * @param {number} address \n   */\n  read(address) {\n    return this[_data][address & 0x3FFF];\n    //return this[_data][address - this[_startingAddress]];\n  }\n\n  /**\n   * @param {number} address \n   * @param {number} value \n   * @param {boolean} [override = false] If true, overwrites ROM\n   */\n  write(address, value, override = false) {\n    if (!this[_rom] || override) {\n      this[_data][address - this[_startingAddress]] = value;\n    }\n  }\n\n  signaled() {\n    // the system's execute line has been triggered\n    const command = this[_systemBus].command;\n    const address = this[_systemBus].address;\n    if (address >= this[_startingAddress] && address <= this[_endingAddress]) {\n      switch (command) {\n        default:\n        case COMMANDS_MEMORY_READ_BYTE:\n          this[_systemBus].data = this.read(address);\n          break;\n        case COMMANDS_MEMORY_READ_WORD:\n          this[_systemBus].data = (this.read(address) << 8) | this.read(address + 1);\n          break;\n        case COMMANDS_MEMORY_WRITE_BYTE:\n          this.write(address, this[_systemBus].data);\n          break;\n        case COMMANDS_MEMORY_WRITE_WORD:\n          const data = this[_systemBus].data;\n          const hi = (data & 0xFF00) >> 8;\n          const lo = (data & 0x00FF);\n          this.write(address, hi);\n          this.write(address + 1, lo);\n          break;\n      }\n    }\n  }\n}\n\nconst _pages = Symbol(\"_pages\");\n\nexport class Memory {\n  /**\n   * @param {Object} config\n   * @param {SystemBus} config.systemBus\n   * @param {number} [pageCount = 32]\n   * @param {number} [pageSize = 0x4000]\n   * @param {number[]} [romPages = [28, 29, 30, 31]]\n   * @param {boolean} [shared = false]\n   * @param {ArrayBuffer} [buffer = null] \n   */\n  constructor({ systemBus, pageCount = 32, pageSize = 0x4000, romPages = [28, 29, 30, 31], shared = false, buffer = null }) {\n    const pages = [];\n    this[_buffer] = buffer || new (shared ? SharedArrayBuffer : ArrayBuffer)(pageCount * pageSize);\n\n    for (let i = 0; i < pageCount; i++) {\n      pages.push(new MemoryBank({\n        systemBus,\n        address: i * pageSize,\n        size: pageSize,\n        rom: romPages.indexOf(i) > -1,\n        shared,\n        buffer: this[_buffer]\n      }));\n    }\n\n    this[_pages] = pages;\n    this[_systemBus] = systemBus;\n  }\n\n  get pages() {\n    return this[_pages];\n  }\n\n  get size() {\n    const pages = this[_pages];\n    let size = 0;\n    pages.forEach(page => size += page.size);\n    return size;\n  }\n\n  /**\n   * @param {number} address\n   */\n  pageForAddress(address) {\n    const pages = this[_pages];\n    const map = this[_systemBus].map;\n    const page = (address & 0b1111100000000000000) >> 14;\n\n    switch (page) {\n      case 1:\n        return pages[(map & 0b0000000000011111)];\n      case 2:\n        return pages[(map & 0b0000001111100000) >> 5];\n      case 3:\n        return pages[(map & 0b0111110000000000) >> 10];\n      default:\n        return pages[page];\n    }\n    /*\n        for (let i = pages.length - 1; i >= 0; i--) {\n          if (pages[i].startingAddress <= address && address <= pages[i].endingAddress) {\n            return pages[i];\n          }\n        }\n    */\n  }\n\n\n  /**\n   * @param {number} address\n   */\n  readByte(address) {\n    const page = this.pageForAddress(address);\n    return page.read(address);\n  }\n\n  readBytes(address, length) {\n    return Array.from({length}, (_, idx) => this.readByte(address + idx));\n  }\n\n  /**\n   * @param {number} address\n   */\n  readUnmappedByte(address) {\n    const page = this[_pages][(address & 0b1111100000000000000) >> 14];\n    return page.read(address);\n  }\n\n  /**\n   * @param {number} address\n   */\n  readWord(address) {\n    const page = this.pageForAddress(address);\n    return (page.read(address) << 8) + page.read(address + 1);\n  }\n\n  /**\n   * @param {number} address\n   * @param {number} value\n   * @param {boolean} [override = false] If true, override ROM\n   */\n  writeByte(address, value, override = false) {\n    const page = this.pageForAddress(address);\n    page.write(address, value, override);\n  }\n\n  writeUnmappedByte(address, value) {\n    const page = this[_pages][(address & 0b1111100000000000000) >> 14];\n    return page.write(address, value);\n  }\n\n  /**\n   * @param {number} address\n   * @param {number} value\n   * @param {boolean} [override = false] If true, override ROM\n   */\n  writeWord(address, value) {\n    const page = this.pageForAddress(address);\n    const hi = (value & 0xFF00) >> 8;\n    const lo = (value & 0x00FF);\n    page.write(address, hi);\n    page.write(address + 1, lo);\n  }\n\n  loadFromJS(bin, override = false) {\n    bin.forEach(segment => {\n      const addr = segment.addr;\n      segment.data.forEach((v, i) => {\n        this.writeByte(i + addr, v, override);\n      });\n    });\n  }\n\n  /**\n   * @param {number} sourceAddress \n   * @param {number} targetAddress \n   * @param {number} length \n   */\n  copyWithin(sourceAddress, targetAddress, length) {\n    (new Uint8Array(this[_buffer])).copyWithin(targetAddress, sourceAddress, sourceAddress + length);\n  }\n\n  /**\n   * @param {ArrayBuffer} buffer \n   * @param {number} address \n   */\n  setWithin(buffer, address) {\n    (new Uint8Array(this[_buffer])).set(buffer, address);\n  }\n\n  /**\n   * @param {ArrayBuffer} data \n   * @param {number} address \n   * @param {number} length \n   */\n  fillWithin(data, address, length) {\n    (new Uint8Array(this[_buffer])).fill(data, address, address + length);\n  }\n\n  /**\n   * @param {number} sourceAddress \n   * @param {number} targetAddress \n   * @param {number} length \n   */\n  swapWithin(sourceAddress, targetAddress, length) {\n    const source = Uint8Array.from(new Uint8Array(this[_buffer], sourceAddress, length));\n    const target = Uint8Array.from(new Uint8Array(this[_buffer], targetAddress, length));\n\n    this.setWithin(source, targetAddress);\n    this.setWithin(target, sourceAddress);\n  }\n\n  reset(withPattern = false) {\n    for (let i = 0; i < this.size; i++) {\n      this.writeUnmappedByte(i, withPattern ? (i & 3) * 0x1F : 0x00);\n    }\n  }\n}\n", "import { Bus } from \"./Bus.js\";\n\nconst _irqServiceBus = Symbol(\"_irqService\");\nconst _irqSignalBus = Symbol(\"_irqSignal\");\nconst _deviceSelectBus = Symbol(\"_deviceSelect\");\nconst _addressSelectBus = Symbol(\"_addressSeect\");\nconst _dataBus = Symbol(\"_data\");\nconst _commandBus = Symbol(\"_command\");\nconst _executeBus = Symbol(\"_execute\");\n\nexport class IOBus {\n    constructor() {\n        this[_irqServiceBus] = new Bus(2);   // four lines gives 16 IRQs\n        this[_irqSignalBus] = new Bus(1, 0x0F);    // when signaled, a device is requesting service\n        this[_deviceSelectBus] = new Bus(1, 0x0F); // Device transferring data\n        this[_addressSelectBus] = new Bus(1, 0x0F); // Address of data (per device)\n        this[_dataBus] = new Bus(1);               // Data is transferred at 8 bits\n        this[_commandBus] = new Bus(1, 0x01);      // 0 = read; 1 = write\n        this[_executeBus] = new Bus(1, 0x01);      // when signaled, execute data transfer\n    }\n\n    get irqServiceBus() { return this[_irqServiceBus]; }\n    get irqSignalBus() { return this[_irqSignalBus]; }\n    get deviceSelectBus() { return this[_deviceSelectBus]; }\n    get addressSelectBus() { return this[_addressSelectBus]; }\n    get dataBus() { return this[_dataBus]; }\n    get commandBus() { return this[_commandBus]; }\n    get executeBus() { return this[_executeBus]; }\n\n}", "import { Bus } from \"./Bus.js\";\n\nconst _op1 = Symbol(\"_op1\");\nconst _op2 = Symbol(\"_op2\");\nconst _ret = Symbol(\"_ret\");\nconst _flags = Symbol(\"_flags\");\nconst _command = Symbol(\"_command\");\nconst _execute = Symbol(\"_execute\");\n\nexport const COMMANDS = {\n    ADD: 0x01,\n    SUB: 0x02,\n    MUL: 0x03,\n    DIV: 0x04,\n    MOD: 0x05,\n    SMUL: 0x06,\n    SDIV: 0x07,\n    SMOD: 0x08,\n    NEG: 0x09,\n    SHL: 0x0A,\n    SHR: 0x0B,\n    AND: 0x0C,\n    OR: 0x0D,\n    XOR: 0x0E,\n    NOT: 0x0F,\n};\n\nexport const SIZES = {\n    BYTE: 0b00,\n    WORD: 0b01,\n    ADDR: 0b10,\n    RET_8:  0b0000000000,\n    RET_16: 0b0100000000,\n    RET_19: 0b1000000000,\n    RET_32: 0b1100000000,\n    OP1_8:  0b0000000000,\n    OP1_16: 0b0001000000,\n    OP1_19: 0b0010000000,\n    OP1_32: 0b0011000000,\n    OP2_8:  0b0000000000,\n    OP2_16: 0b0000010000,\n    OP2_19: 0b0000100000,\n    OP2_32: 0b0000110000,\n};\n\n// size of operands are stored in the high nibble of\n// a command, and represent the following\n// 00 == 8 bits\n// 01 == 16 bits\n// 10 == 19 bits\n// 11 == 32 bits\nconst signBit =        [0x00000080, 0x00008000, 0x00040000]; //, 0x080000000 ];\nconst signExtend =     [0x00FFFF80, 0x00FF8000, 0x00FC0000]; //, 0x080000000 ];\nconst signExtendMask = [0x0000007F, 0x00007FFF, 0x0003FFFF]; //, 0x07FFFFFFF ];\nconst mask =           [0x000000FF, 0x0000FFFF, 0x0007FFFF]; //, 0x0FFFFFFFF ];\nconst carryBit =       [0x00000100, 0x00010000, 0x00080000]; //, 0x100000000 ];\nconst shift =          [         8,         16,         19]; //,          32 ];\n\nfunction extendSign(v, from, to) {\n    const sign = (1 << from - 1);\n    if (v & (sign)) {\n        for (let i = to - 1; i >= from; i--) {\n            v |= 1 << i;\n        }\n    }\n    return v;\n}\n\nexport class ALU {\n    constructor() {\n        this[_op1] = new Bus(4);\n        this[_op2] = new Bus(4);\n        this[_ret] = new Bus(4);\n        this[_flags] = new Bus(1, 0x07);\n        this[_command] = new Bus(2, 0x3FF);\n        this[_execute] = new Bus(1, 0x01);\n\n        this.signaled = this.signaled.bind(this);\n        this[_execute].addReceiver(this.signaled);\n\n        this.stats = {\n            ops: 0,\n            [COMMANDS.ADD]: 0,\n            [COMMANDS.AND]: 0,\n            [COMMANDS.DIV]: 0,\n            [COMMANDS.MOD]: 0,\n            [COMMANDS.MUL]: 0,\n            [COMMANDS.NEG]: 0,\n            [COMMANDS.NOT]: 0,\n            [COMMANDS.OR]:  0,\n            [COMMANDS.SDIV]: 0,\n            [COMMANDS.SMOD]: 0,\n            [COMMANDS.SMUL]: 0,\n            [COMMANDS.SHL]: 0,\n            [COMMANDS.SHR]: 0,\n            [COMMANDS.SUB]: 0,\n            [COMMANDS.XOR]: 0\n        };\n    }\n\n    resetStats() {\n        this.stats = {\n            ops: 0,\n            [COMMANDS.ADD]: 0,\n            [COMMANDS.AND]: 0,\n            [COMMANDS.DIV]: 0,\n            [COMMANDS.MOD]: 0,\n            [COMMANDS.MUL]: 0,\n            [COMMANDS.NEG]: 0,\n            [COMMANDS.NOT]: 0,\n            [COMMANDS.OR]:  0,\n            [COMMANDS.SDIV]: 0,\n            [COMMANDS.SMOD]: 0,\n            [COMMANDS.SMUL]: 0,\n            [COMMANDS.SHL]: 0,\n            [COMMANDS.SHR]: 0,\n            [COMMANDS.SUB]: 0,\n            [COMMANDS.XOR]: 0\n        };\n    }\n\n    get op1Bus() { return this[_op1]; }\n    get op2Bus() { return this[_op2]; }\n    get retBus() { return this[_ret]; }\n    get flagsBus() { return this[_flags]; }\n    get commandBus() { return this[_command]; }\n    get executeBus() { return this[_execute]; }\n\n    signaled() { //eslint-disable-line complexity\n        const command = this.commandBus.data;\n        const op1 = this.op1Bus.data;\n        const op2 = this.op2Bus.data;\n        const sizeOfRet = (command & 0b1100000000) >> 8;\n        const sizeOfOp1 = (command & 0b0011000000) >> 6;\n        const sizeOfOp2 = (command & 0b0000110000) >> 4;\n        const op = command & 0x00F;\n        this.stats[op]++;\n        this.stats.ops++;\n\n        // get the operands and mask them based on the command size\n        let a = op1;\n        if (a < 0) { a += carryBit[sizeOfOp1]; }\n        a &= mask[sizeOfOp1];\n\n        let b = op2;\n        if (b < 0) { b += carryBit[sizeOfOp2]; }\n        b &= mask[sizeOfOp2];\n\n        const signA = (a & signBit[sizeOfOp1]) ? 1 : 0;\n        const signB = (b & signBit[sizeOfOp2]) ? 1 : 0;\n        let zero = 0;\n        let carry = 0;\n        const carryIn = (this.flagsBus.data & 0b0100) >> 2;\n        let negative = 0;\n        let overflow = 0;\n        let ret = 0;\n\n        switch (op) {\n            case COMMANDS.SUB: {\n                ret = a + (-b) + carryIn;\n                if (ret < 0) {\n                    carry = 1;\n                }\n                break;\n            }\n            case COMMANDS.ADD: ret = a + b + carryIn; break;\n            case COMMANDS.MUL: ret = a * b; break;\n            case COMMANDS.MOD:\n            case COMMANDS.DIV:\n                if (b === 0) {\n                    carry = 1;\n                    overflow = 1;\n                    negative = 1;\n                    zero = 1;\n                    ret = 0;\n                } else {\n                    if (op === COMMANDS.DIV) {\n                        ret = Math.floor(a / b);\n                    } else {\n                        ret = a % b;\n                    }\n                }\n                break;\n            case COMMANDS.AND: ret = a & b; break;\n            case COMMANDS.OR:  ret = a | b; break;\n            case COMMANDS.XOR: ret = a ^ b; break;\n            case COMMANDS.NOT: ret = ~a; break;\n            case COMMANDS.NEG: ret = -a; break;\n            case COMMANDS.SHL: ret = a << (b & 0x3F); break;\n            case COMMANDS.SHR: ret = a >> (b & 0x3F); break; \n            /*  ret = a;\n                for (let i = 0; i < (b & 0x3F); i++) {\n                    ret = ret >> 1;\n                    if (signA && carryIn) {\n                        ret |= signBit[sizeOfRet];\n                    }\n                }\n                break; */\n            default:\n        }\n\n        // normalize ret; we need it to always be positive\n        if (ret < 0) {\n            ret += carryBit[sizeOfRet];\n        }\n        negative = (ret & signBit[sizeOfRet]) ? 1 : 0;\n\n        // carry is set if the return value is larger than the value we can\n        // handle -- preserve carry, since it might have been\n        // set during subtraction\n        //carry = carry | ((ret > mask[sizeOfRet]) ? 1 : 0);\n        carry = carry | ((ret & ~mask[sizeOfRet]) ? 1 : 0);\n\n        // mask off the return value to ensure we don't transmit invalid bits\n        ret &= mask[sizeOfRet];\n\n        // overflow is set if the result of the operation is incorrect\n        // when performing signed arithmetic\n        if ((op === COMMANDS.ADD || op === COMMANDS.MUL) && signA === signB) {\n            // this is the only case in which an overflow can occur for addition\n            if (signA !== negative) {\n                // the return sign is different from one of the input signs\n                // we've overflowed.\n                overflow = 1;\n            }\n        } else if (op === COMMANDS.SUB && signA !== signB) {\n            if (signA !== negative) {\n                overflow = 1;\n            }\n        }\n\n\n        // zero is set if return is zero\n        zero = ret === 0 ? 1 : 0;\n\n        this.retBus.data = ret;\n        this.flagsBus.data = (negative << 3) | (carry << 2) | (overflow << 1) | (zero);\n\n    }\n\n}", "export class FPU {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.stack = new Float64Array(8);\n        this.flags = {\n            overflow: false,\n            underflow: false,\n            infinity: false,\n            nan: false,\n            negative: false,\n            zero: false,\n            stackException: false,\n            divideByZero: false,\n        };\n        this.SP = 0;\n    }\n\n    updateFlags() {\n        const v = this.peek();\n        this.flags.infinity = !Number.isFinite(v);\n        this.flags.nan = Number.isNaN(v);\n        this.flags.negative = v < 0;\n        this.flags.zero = v === 0;\n    }\n\n    pop() {\n        this.SP--;\n        if (this.SP < 0) {\n            this.SP = this.stack.length - 1;\n            this.flags.stackException = true;\n        }\n        this.SP = this.SP & 7;\n        return this.stack[this.SP];\n    }\n\n    peek() {\n        return this.stack[(this.SP - 1) & 7];\n    }\n\n    push(v) {\n        this.stack[this.SP] = v;\n        this.SP++;\n        if (this.SP > this.stack.length - 1) {\n            this.SP = 0;\n            this.flags.stackException = true;\n        }\n    }\n\n    pushBytes(bytes) {\n        const dataView = new DataView(this.stack.buffer);\n        for (let i = 0; i < 8; i++) {\n            dataView.setUint8(this.SP * 8 + i, bytes[i]);\n        }\n        this.SP++;\n        if (this.SP > this.stack.length - 1) {\n            this.SP = 0;\n            this.flags.stackException = true;\n        }\n    }\n\n    popBytes() {\n        this.SP--;\n        if (this.SP < 0) {\n            this.SP = this.stack.length - 1;\n            this.flags.stackException = true;\n        }\n        this.SP = this.SP & 7;\n        const dataView = new DataView(this.stack.buffer);\n        return Array.from({length: 8}, (_,i) => dataView.getUint8(this.SP*8+i));\n    }\n\n    dup() {\n        const v = this.peek();\n        this.push(v);\n    }\n\n    swap() {\n        const a = this.pop();\n        const b = this.pop();\n        this.push(a);\n        this.push(b);\n    }\n\n    int() {\n        const a = this.pop();\n        this.push(Math.round(a));\n    }\n\n    add() {\n        const b = this.pop();\n        const a = this.pop();\n        this.push(a + b);\n    }\n\n    sub() {\n        const b = this.pop();\n        const a = this.pop();\n        this.push(a - b);\n    }\n\n    mul() {\n        const b = this.pop();\n        const a = this.pop();\n        this.push(a * b);\n    }\n\n    div() {\n        const b = this.pop();\n        const a = this.pop();\n        if (b === 0) {\n            this.flags.divideByZero = true;\n            this.push(0);\n            return;\n        }\n        this.push(a / b);\n    }\n\n    mod() {\n        const b = this.pop();\n        const a = this.pop();\n        if (b === 0) {\n            this.flags.divideByZero = true;\n            this.push(0);\n            return;\n        }\n        this.push(a % b);\n    }\n\n    pow() {\n        const b = this.pop();\n        const a = this.pop();\n        this.push(Math.pow(a, b));\n    }\n\n    sqrt() {\n        const b = this.pop();\n        const a = this.pop();\n        this.push(Math.sqrt(a, b));\n    }\n\n    abs() {\n        const a = this.pop();\n        this.push(Math.abs(a));\n    }\n\n    neg() {\n        const a = this.pop();\n        this.push(-a);\n    }\n\n    sin() {\n        const a = this.pop();\n        this.push(Math.sin(a));\n    }\n    cos() {\n        const a = this.pop();\n        this.push(Math.cos(a));\n    }\n    tan() {\n        const a = this.pop();\n        this.push(Math.tan(a));\n    }\n    asin() {\n        const a = this.pop();\n        this.push(Math.asin(a));\n    }\n    acos() {\n        const a = this.pop();\n        this.push(Math.acos(a));\n    }\n    atan() {\n        const a = this.pop();\n        this.push(Math.atan(a));\n    }\n\n    log() {\n        const a = this.pop();\n        this.push(Math.log(a));\n    }\n    log2() {\n        const a = this.pop();\n        this.push(Math.log2(a));\n    }\n    log10() {\n        const a = this.pop();\n        this.push(Math.log10(a));\n    }\n\n    e() {\n        this.push(Math.E);\n    }\n\n    pi() {\n        this.push(Math.PI);\n    }\n\n    isnan() {\n        const a = this.pop();\n        if (Number.isNaN(a)) this.push(1)\n        else this.push(0);\n    }    \n\n    isinf() {\n        const a = this.pop();\n        if (Number.isFinite(a)) this.push(0)\n        else this.push(1);\n    }    \n\n    ld0() {\n        this.push(0);\n    }\n\n    ld1() {\n        this.push(1);\n    }\n\n}", "import { Bus } from \"./Bus.js\";\nimport { IOBus } from \"./IOBus.js\";\nimport { Controller } from \"./Controller.js\";\n\nexport const _controller = Symbol(\"_controller\");\nexport const _ioBus = Symbol(\"_ioBus\");\nexport const _memory = Symbol(\"_memory\");\nexport const _buffer = Symbol(\"_buffer\");\nexport const _device = Symbol(\"_device\");\nexport const _priority = Symbol(\"_priority\");\n\nconst _addrStart = Symbol(\"_addrStart\");\nconst _addrEnd = Symbol(\"_addrEnd\");\n\nexport class Device {\n    /**\n     * \n     * @param {Object} config \n     * @param {number} [config.device = 0] The device number\n     * @param {number} [config.length = 16] The number of ports this device handles\n     * @param {number} [config.priority = 15] The interrupt priority for this device\n     * @param {Controller} config.controller  The associated controller\n     * @param {Memory} config.memory The associated memory\n     * @param {Bus} config.clock The clock\n     */\n    constructor({device = 0, length = 16, priority = 15, controller, memory = undefined, clock = undefined}) {\n        this[_controller] = controller;\n        this[_ioBus] = controller.ioBus;\n        this[_memory] = memory;\n        this[_device] = device;\n        this[_priority] = priority;\n        this._length = length;\n        this[_addrStart] = device << 4;\n        this[_addrEnd] = (this[_addrStart] + length) - 1;\n\n\n        this[_buffer] = new Uint8Array(new ArrayBuffer(length << 1));\n\n        this.putOnBus = this.putOnBus.bind(this);\n        this.pullFromBus = this.pullFromBus.bind(this);\n        this._read = this._read.bind(this);\n        this._write = this._write.bind(this);\n\n        controller.register(this);\n\n        this.ioBus.executeBus.addReceiver(() => {\n            const ioBus = this[_ioBus];\n            const selectedDevice = ioBus.deviceSelectBus.value;\n            const baseAddress = selectedDevice << 4;\n            const busAddress = baseAddress + ioBus.addressSelectBus.value;\n            if (busAddress >= this[_addrStart] && busAddress <= this[_addrEnd]) {\n                const command = ioBus.commandBus.value;\n                const address = busAddress - this[_addrStart];\n                const fn = command === 0 ? this.putOnBus : this.pullFromBus;\n                if (fn) { fn(address); }\n            }\n        });\n\n        this.tick = this.tick.bind(this);\n        if (clock) {\n            clock.addReceiver(this.tick);\n        }\n\n    }\n\n    _read(address = 0) {\n        return this[_buffer][address];\n    }\n    _write(address = 0, data = 0) {\n        this[_buffer][this._length + address] = data;\n        if (this.mirrored[address]) {\n            this[_buffer][address] = data;\n        }\n    }\n\n    putOnBus(address = 0) {\n        const ioBus = this[_ioBus];\n        ioBus.dataBus.value = this._read(address);\n    }\n\n    pullFromBus(address = 0) {\n        const data = this[_ioBus].dataBus.value;\n        this._write(address, data);\n    }\n\n    get addrStart() {\n        return this[_addrStart];\n    }\n\n    get addrEnd() {\n        return this[_addrEnd];\n    }\n\n    get mirrored() {\n        return {};\n    }\n\n    get device() {\n        return this[_device];\n    }\n\n    get ioBus() {\n        return this[_ioBus];\n    }\n\n    get memory() {\n        return this[_memory];\n    }\n\n    get priority() {\n        return this[_priority];\n    }\n\n    get controller() {\n        return this[_controller];\n    }\n\n    requestService(r) {\n        this.controller.sendInterruptForDevice(this);\n    }\n\n    tick() {\n        // do nothing for now\n    }\n}", "import { Processor } from \"./Processor.js\";\nimport { Device } from \"./Device.js\";\nimport { IOBus } from \"./IOBus.js\";\nimport { Bus } from \"./Bus.js\";\n\nconst _processor = Symbol(\"_processor\");\nconst _ioBus = Symbol(\"_ioBus\");\nconst _devices = Symbol(\"_devices\");\nconst _deviceMap = Symbol(\"_deviceMap\");\n\nexport class Controller {\n    /**\n     * \n     * @param {Object} config \n     * @param {Processor} config.processor\n     * @param {IOBus} config.ioBus\n     * @param {Bus} config.Bus\n     */\n    constructor({processor, ioBus, clock}) {\n        this[_processor] = processor;\n        processor.registerController(this);\n        this[_ioBus] = ioBus;\n        this[_devices] = [];\n        this[_deviceMap] = [];\n\n        this.tick = this.tick.bind(this);\n        if (clock) {\n            clock.addReceiver(this.tick);\n        }\n    }\n\n    get ioBus() {\n        return this[_ioBus];\n    }\n\n    get processor() {\n        return this[_processor];\n    }\n\n    get devices() {\n        return this[_devices];\n    }\n\n    /**\n     * @param {Device} device \n     */\n    register(device) {\n        this[_devices].push(device);\n        this[_devices].sort((a, b) => a.priority - b.priority);\n\n        this[_deviceMap] = this[_devices].reduce(\n            (m, device) => {\n                for (let addr = device.addrStart; addr <= device.addrEnd; addr += 16) {\n                    m[addr >> 4] = device;\n                }\n                return m;\n            }, []);\n    }\n\n    pureRead(address) {\n        const deviceSelection = address >> 4;\n        const actualDevice = this[_deviceMap][deviceSelection];\n        return (actualDevice ? actualDevice._read(address - actualDevice.addrStart) : 0) || 0;\n    }\n\n    pureWrite(address, value) {\n        const deviceSelection = address >> 4;\n        const actualDevice = this[_deviceMap][deviceSelection];\n        if (actualDevice) actualDevice._write(address - actualDevice.addrStart, value);\n    }\n\n    readBytes(address = 0, length = 256) {\n        return Array.from({length}, (_, idx) => this.pureRead(address + idx));\n    }\n\n    /**\n     * @param {Device} device \n     */\n    sendInterruptForDevice(device) {\n        const ioBus = this[_ioBus];\n        ioBus.irqServiceBus.value |= (1 << device.device);\n        // on the next tick, the processor will be pinged, and it can service\n        // the highest-priority device at the time.\n    }\n\n    pingProcessor() {\n        if (this.ioBus.irqServiceBus.value !== 0) {\n            for (let device of this.devices) {\n                if (this.ioBus.irqServiceBus.value & (1 << device.device)) {\n                    this.ioBus.irqSignalBus.signal(device.device);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {number} deviceNum \n     */\n    ackInterrupt(deviceNum) {\n        this.ioBus.irqServiceBus.value &= ~(1 << deviceNum);\n        this.ioBus.irqSignalBus.value = 0;\n    }\n\n    tick() {\n        this.pingProcessor();\n    }\n\n}", "const buffer = new ArrayBuffer(2);\nconst bytes = new Uint8Array(buffer);\nconst words = new Uint16Array(buffer);\nwords[0] = 0x1234;\n\nexport const endianness = bytes[0] == 0x12 ? \"big\" : \"little\";\nexport const isBigEndian = endianness === \"big\";\nexport const isLittleEndian = endianness === \"little\";\n", "import { isBigEndian, isLittleEndian } from \"../util/endianness.js\";\nimport { SIZES } from \"./ALU.js\";\n\nconst _buffer = Symbol(\"_buffer\");\nconst _byteData = Symbol(\"_data\");\nconst _wordData = Symbol(\"_word\");\n\nconst REGISTER_COUNT = 24;\n\nexport const REGISTER_INDEX = {\n    A: 0,\n    AL: 1,\n    B: 2,\n    BL: 3,\n    C: 4,\n    CL: 5,\n    D: 6,\n    DL: 7,\n    X: 8,\n    XL: 9,\n    Y: 10,\n    YL: 11,\n    BP: 12,\n    SP: 14,\n    STATUS: 16,\n    FLAGS: 17,\n    PC: 18,\n    MM: 20,\n    MP: 22\n};\n\nexport const FLAGS_INDEX = {\n    Z: 0,  ZERO:              0, Z_SET_MASK:  0b00000001, Z_CLR_MASK:  0b11111110,\n    V: 1,  OVERFLOW:          1, V_SET_MASK:  0b00000010, V_CLR_MASK:  0b11111101,\n    C: 2,  CARRY:             2, C_SET_MASK:  0b00000100, C_CLR_MASK:  0b11111011,\n    N: 3,  NEGATIVE:          3, N_SET_MASK:  0b00001000, N_CLR_MASK:  0b11110111,\n    SS: 4, SINGLE_STEP:       4, SS_SET_MASK: 0b00010000, SS_CLR_MASK: 0b11101111,\n    IS: 5, INTERRUPT_SERVICE: 5, IS_SET_MASK: 0b00100000, IS_CLR_MASK: 0b11011111,\n    ID: 6, INTERRUPT_DISABLE: 6, ID_SET_MASK: 0b01000000, ID_CLR_MASK: 0b10111111,\n    EX: 7, EXCEPTION:         7, EX_SET_MASK: 0b10000000, EX_CLR_MASK: 0b01111111,\n};\n\nexport class RegisterFile {\n    constructor() {\n        this[_buffer] = new ArrayBuffer(REGISTER_COUNT);\n        this[_byteData] = new Uint8Array(this[_buffer]);\n        this[_wordData] = new Uint16Array(this[_buffer]);\n    }\n\n    /**\n     * @param {number} index \n     */\n    getRegister(index) {\n        //return (index & 0b1) ? this[_byteData][index] : (this[_byteData][index] << 8) | this[_byteData][index + 1];\n        if ((index & 0b1) === 0) {\n            return this[_wordData][index >> 1];\n            //return (this[_byteData][index] << 8) | this[_byteData][index+1];\n        } else {\n            return this[_byteData][index - (isLittleEndian ? 1 : 0)];\n        }\n    }\n\n    /**\n     * @param {number} index \n     */\n    getSizeOfRegister(index) {\n        return (index & 0b1) ? SIZES.BYTE : SIZES.WORD;\n    }\n\n    /**\n     * @param {number} index \n     */\n    getRegisterMask(index) {\n        //return (index & 0b1) ? 0xFF : 0xFFFF;\n        if ((index & 0b1) === 0) {\n            return 0xFFFF;\n        } else {\n            return 0xFF;\n        }\n    }\n\n    /**\n     * @param {number} index \n     * @param {number} value\n     */\n    setRegister(index, value) {\n        if ((index & 0b1) === 0) {\n            this[_wordData][index >> 1] = value & 0xFFFF;\n            /*this[_byteData][index] = (value & 0xFF00) >> 8;\n            this[_byteData][index + 1] = value & 0x00FF;*/\n        } else {\n            this[_byteData][index - (isLittleEndian ? 1 : 0)] = value;\n            //this[_byteData][index] = value;\n        }\n    }\n\n    // Registers\n    get A() { return this.getRegister(REGISTER_INDEX.A); }\n    get AL() { return this.getRegister(REGISTER_INDEX.AL); }\n    get B() { return this.getRegister(REGISTER_INDEX.B); }\n    get BL() { return this.getRegister(REGISTER_INDEX.BL); }\n    get C() { return this.getRegister(REGISTER_INDEX.C); }\n    get CL() { return this.getRegister(REGISTER_INDEX.CL); }\n    get D() { return this.getRegister(REGISTER_INDEX.D); }\n    get DL() { return this.getRegister(REGISTER_INDEX.DL); }\n    get X() { return this.getRegister(REGISTER_INDEX.X); }\n    get XL() { return this.getRegister(REGISTER_INDEX.XL); }\n    get Y() { return this.getRegister(REGISTER_INDEX.Y); }\n    get YL() { return this.getRegister(REGISTER_INDEX.YL); }\n    get BP() { return this.getRegister(REGISTER_INDEX.BP); }\n    get SP() { return this.getRegister(REGISTER_INDEX.SP); }\n    get STATUS() { return this.getRegister(REGISTER_INDEX.STATUS); }\n    get FLAGS() { return this.getRegister(REGISTER_INDEX.FLAGS); }\n    get PC() { return this.getRegister(REGISTER_INDEX.PC); }\n    get MM() { return this.getRegister(REGISTER_INDEX.MM); }\n    get MP() { return this.getRegister(REGISTER_INDEX.MP); }\n\n    set A(v) { this.setRegister(REGISTER_INDEX.A, v); }\n    set AL(v) { this.setRegister(REGISTER_INDEX.AL, v); }\n    set B(v) { this.setRegister(REGISTER_INDEX.B, v); }\n    set BL(v) { this.setRegister(REGISTER_INDEX.BL, v); }\n    set C(v) { this.setRegister(REGISTER_INDEX.C, v); }\n    set CL(v) { this.setRegister(REGISTER_INDEX.CL, v); }\n    set D(v) { this.setRegister(REGISTER_INDEX.D, v); }\n    set DL(v) { this.setRegister(REGISTER_INDEX.DL, v); }\n    set X(v) { this.setRegister(REGISTER_INDEX.X, v); }\n    set XL(v) { this.setRegister(REGISTER_INDEX.XL, v); }\n    set Y(v) { this.setRegister(REGISTER_INDEX.Y, v); }\n    set YL(v) { this.setRegister(REGISTER_INDEX.YL, v); }\n    set BP(v) { this.setRegister(REGISTER_INDEX.BP, v); }\n    set SP(v) { this.setRegister(REGISTER_INDEX.SP, v); }\n    set STATUS(v) { this.setRegister(REGISTER_INDEX.STATUS, v); }\n    set FLAGS(v) { this.setRegister(REGISTER_INDEX.FLAGS, v); }\n    set PC(v) { this.setRegister(REGISTER_INDEX.PC, v); }\n    set MM(v) { this.setRegister(REGISTER_INDEX.MM, v); }\n    set MP(v) { this.setRegister(REGISTER_INDEX.MP, v); }\n\n    // Flags\n    get ZERO()              { return (this.FLAGS & FLAGS_INDEX.Z_SET_MASK ); }\n    get CARRY()             { return (this.FLAGS & FLAGS_INDEX.C_SET_MASK ) >> FLAGS_INDEX.CARRY; }\n    get SINGLE_STEP()       { return (this.FLAGS & FLAGS_INDEX.SS_SET_MASK) >> FLAGS_INDEX.SINGLE_STEP; }\n    get INTERRUPT_SERVICE() { return (this.FLAGS & FLAGS_INDEX.IS_SET_MASK) >> FLAGS_INDEX.INTERRUPT_SERVICE; }\n    get INTERRUPT_DISABLE() { return (this.FLAGS & FLAGS_INDEX.ID_SET_MASK) >> FLAGS_INDEX.INTERRUPT_DISABLE; }\n    get EXCEPTION()         { return (this.FLAGS & FLAGS_INDEX.EX_SET_MASK) >> FLAGS_INDEX.EXCEPTION; }\n    get OVERFLOW()          { return (this.FLAGS & FLAGS_INDEX.V_SET_MASK ) >> FLAGS_INDEX.OVERFLOW; }\n    get NEGATIVE()          { return (this.FLAGS & FLAGS_INDEX.N_SET_MASK ) >> FLAGS_INDEX.NEGATIVE; }\n\n    set ZERO(v)              { this.FLAGS = ((this.FLAGS & FLAGS_INDEX.Z_CLR_MASK)  | (v && FLAGS_INDEX.Z_SET_MASK)); }\n    set CARRY(v)             { this.FLAGS = ((this.FLAGS & FLAGS_INDEX.C_CLR_MASK)  | (v && FLAGS_INDEX.C_SET_MASK)); }\n    set SINGLE_STEP(v)       { this.FLAGS = ((this.FLAGS & FLAGS_INDEX.SS_CLR_MASK) | (v && FLAGS_INDEX.SS_SET_MASK)); }\n    set INTERRUPT_SERVICE(v) { this.FLAGS = ((this.FLAGS & FLAGS_INDEX.IS_CLR_MASK) | (v && FLAGS_INDEX.IS_SET_MASK)); }\n    set INTERRUPT_DISABLE(v) { this.FLAGS = ((this.FLAGS & FLAGS_INDEX.ID_CLR_MASK) | (v && FLAGS_INDEX.ID_SET_MASK)); }\n    set EXCEPTION(v)         { this.FLAGS = ((this.FLAGS & FLAGS_INDEX.EX_CLR_MASK) | (v && FLAGS_INDEX.EX_SET_MASK)); }\n    set OVERFLOW(v)          { this.FLAGS = ((this.FLAGS & FLAGS_INDEX.V_CLR_MASK)  | (v && FLAGS_INDEX.V_SET_MASK)); }\n    set NEGATIVE(v)          { this.FLAGS = ((this.FLAGS & FLAGS_INDEX.N_CLR_MASK)  | (v && FLAGS_INDEX.N_SET_MASK)); }\n\n    toJSON() {\n        return {\n            A: this.A,\n            B: this.B,\n            C: this.C,\n            D: this.D,\n            X: this.X,\n            Y: this.Y,\n            BP: this.BP,\n            SP: this.SP,\n            STATUS: this.STATUS,\n            PC: this.PC,\n            MP: this.MP,\n            MM: this.MM,\n            FLAGS: {\n                ZERO: this.ZERO,\n                CARRY: this.CARRY,\n                SINGLE_STEP: this.SINGLE_STEP,\n                INTERRUPT_SERVICE: this.INTERRUPT_SERVICE,\n                INTERRUPT_DISABLE: this.INTERRUPT_DISABLE,\n                EXCEPTION: this.EXCEPTION,\n                OVERFLOW: this.OVERFLOW,\n                NEGATIVE: this.NEGATIVE\n            }\n        };\n    }\n}", "import { REGISTER_INDEX, FLAGS_INDEX, RegisterFile } from \"../core/RegisterFile.js\";\nimport { Memory } from \"../core/Memory.js\";\nimport { ALU, COMMANDS, SIZES } from \"../core/ALU.js\";\nimport { IOBus } from \"../core/IOBus.js\";\n\nexport const SIZE_BYTE = SIZES.BYTE;\nexport const SIZE_WORD = SIZES.WORD;\nexport const SIZE_ADDR = SIZES.ADDR;\n\n// stack sizes are stored in bits 30 and 29. Avoiding msb for perf\nexport const STACK_BYTE = 0x00000000;\nexport const STACK_WORD = 0x20000000;\nexport const STACK_ADDR = 0x40000000;\nexport const STACK_TYPE_MASK = 0x60000000;\nexport const STACK_DATA_MASK = 0x1FFFFFFF;\n\nexport const FLAGS_PUSH_TO_ALU = 0b01;\nexport const FLAGS_PULL_FROM_ALU = 0b10;\nexport const FLAGS_PUSH_AND_PULL = 0b11;\n\nconst mapSize = size =>\n    size === SIZE_BYTE ? STACK_BYTE\n  : size === SIZE_WORD ? STACK_WORD\n  : size === SIZE_ADDR ? STACK_ADDR\n  : size === STACK_BYTE ? SIZE_BYTE\n  : size === STACK_WORD ? SIZE_WORD\n  : size === STACK_ADDR ? SIZE_ADDR\n  : size;\n\n/**\n * @param {Array<Number>} stack\n * @param {number} data\n * @param {number} size\n */\nconst push = (stack, data, size) => {\n    const newSize = mapSize(size);\n    return stack.push(newSize | data);\n};\n\n/**\n * @param {Array<number>} stack\n * @returns {number}\n */\nconst pop = stack => {\n    const s0 = stack.pop() | 0;\n    const data = s0 & STACK_DATA_MASK;\n    return data;\n};\n\n/**\n * @param {Array<number>} stack\n * @returns {number[]}\n */\nconst popWithSize = stack => {\n    const s0 = stack.pop() | 0;\n    const data = s0 & STACK_DATA_MASK;\n    const stackSize = s0 & STACK_TYPE_MASK;\n    const size = mapSize(stackSize);\n    return [data, size];\n}\n\n\n// tasks comprise an opcode in the top 8 bits\n// and oeprands in the lower 24 bits.\nexport const TASK_OPCODE_MASK = 0x7F000000;\nexport const TASK_OPERAND_MASK = 0x00FFFFFF;\n\nexport const opcodeFromTask = task => task & TASK_OPCODE_MASK;\n/*\n{    let opcode = task & TASK_OPCODE_MASK;\n    if (opcode < 0) opcode += 0x100000000;\n    return opcode;\n}\n*/\nexport const operandFromTask = task => task & TASK_OPERAND_MASK;\n/**\n * @type {Object.<string, number>}\n *\n * Tasks are a 32 bit wide number consisting of an opcode in the\n * top eight bits and an optional argument in the lower 24 bits.\n */\nexport const TASKS = {\n    NOP:                      0x00000000,\n    // get and push\n    GET_REGISTER_AND_PUSH:    0x01000000,        // r -> s0\n    POP_INTO_REGISTER:        0x02000000,        // r <- s0\n    PUSH_BYTE:                0x03000000,        // b -> s0\n    PUSH_WORD:                0x04000000,        // w -> s0\n    PUSH_ADDR:                0x05000000,        // a -> s0\n    GET_BYTE_FROM_MEMORY:     0x06000000,        // [s0] -> s0\n    GET_WORD_FROM_MEMORY:     0x07000000,        // [s0] -> s0\n    POP_BYTE_INTO_MEMORY:     0x08000000,        // [s0] <- s1\n    POP_WORD_INTO_MEMORY:     0x09000000,        // [s0] <- s1\n\n    // decompose and recompose\n    DECOMPOSE_WORD_TO_BYTES:  0x10000000,      // s0 -> [s0, s1]\n    RECOMPOSE_BYTES_TO_WORD:  0x11000000,      // [s0, s1] -> s0\n    DECOMPOSE_BYTE_TO_NIBBLE: 0x12000000,     // s0 -> [s0, s1]\n    RECOMPOSE_NIBBLE_TO_BYTE: 0x13000000,     // [s0, s1] -> s0\n    DECOMPOSE_ADDR:           0x30000000,\n    RECOMPOSE_ADDR:           0x31000000,\n    GET_ADDR_FROM_MEMORY:     0x32000000,\n\n    // bit twiddling\n    SET_BIT:         0x14000000,\n    CLEAR_BIT:       0x15000000,\n\n    // decisions\n    PICK:            0x16000000,\n\n    // commands\n    TRAP:            0x17000000,\n    DUP:             0x18000000,\n    SWAP:            0x19000000,\n\n    // FLAGS\n    CLEAR_FLAG_IMM:  0x1A000000,\n    SET_FLAG_IMM:    0x1B000000,\n    TEST_FLAG_IMM:   0x1C000000,\n    PULL_FLAGS_FROM_ALU: 0x1D000000,\n    PUSH_FLAGS_TO_ALU: 0x1E000000,\n\n    // IO\n    IO_IN:           0x20000000,\n    IO_OUT:          0x21000000,\n\n    // arithmetic\n    ADD:             0x40000000,        // [s0, s1] -> s0 + s1\n    SUB:             0x42000000,\n    CMP:             0x44000000,\n    AND:             0x46000000,\n    OR:              0x48000000,\n    TEST:            0x4A000000,\n    XOR:             0x4C000000,\n    SHL:             0x50000000,\n    SHR:             0x52000000,\n    MUL:             0x60000000,\n    DIV:             0x62000000,\n    MOD:             0x64000000,\n    SMUL:            0x70000000,\n    SDIV:            0x72000000,\n    SMOD:            0x74000000,\n};\n/**\n * @typedef {Number} Task\n * @name Task\n */\n\n/**\n * @typedef {Array.<number>} StackItem\n * @name StackItem\n */\n\n/**\n * @typedef {StackItem[]} Stack\n * @name Stack\n */\n\n/**\n * @typedef {Function} TASK_FN({stack: Stack, registerFile: RegisterFile, alu: ALU, memory: Memory, args: Array})\n * @name TASK_FN\n */\n\n\n\n\n/**\n * @type {Object.<Number, TASK_FN>}\n */\nexport const TASK_FNS = new Array(256).fill(() => 0);\n[\n    [TASKS.NOP, () => 0],\n    [TASKS.GET_REGISTER_AND_PUSH, ({ stack, registerFile, arg }) => {\n        push(stack, registerFile.getRegister(arg), registerFile.getSizeOfRegister(arg));\n    }],\n    [TASKS.POP_INTO_REGISTER, ({ stack, registerFile, arg }) => {\n        registerFile.setRegister(arg, pop(stack));\n    }],\n    [TASKS.PUSH_BYTE, ({ stack, arg }) => {\n        push(stack, arg, SIZE_BYTE);\n    }],\n    [TASKS.PUSH_WORD, ({ stack, arg }) => {\n        push(stack, arg, SIZE_WORD);\n    }],\n    [TASKS.PUSH_ADDR, ({ stack, arg }) => {\n        push(stack, arg, SIZE_ADDR);\n    }],\n    [TASKS.GET_BYTE_FROM_MEMORY, ({ stack, memory }) => {\n        push(stack, memory.readByte(pop(stack)), SIZE_BYTE);\n    }],\n    [TASKS.GET_WORD_FROM_MEMORY, ({ stack, memory }) => {\n        push(stack, memory.readWord(pop(stack)), SIZE_WORD);\n    }],\n    [TASKS.GET_ADDR_FROM_MEMORY, ({ stack, memory }) => {\n        const addr = pop(stack);\n        push(stack, memory.readWord(addr), SIZE_WORD);\n        push(stack, memory.readWord(addr+2), SIZE_WORD);\n    }],\n    [TASKS.POP_BYTE_INTO_MEMORY, ({ stack, memory }) => {\n        const byte = pop(stack);     // s0\n        const addr = pop(stack);     // s1\n        memory.writeByte(addr, byte);\n    }],\n    [TASKS.POP_WORD_INTO_MEMORY, ({ stack, memory }) => {\n        const word = pop(stack);     // s0\n        const addr = pop(stack);     // s1\n        memory.writeWord(addr, word);\n    }],\n    [TASKS.DECOMPOSE_WORD_TO_BYTES, ({ stack }) => {\n        const word = pop(stack);     // s0\n        push(stack, (word & 0xFF00) >> 8, SIZE_BYTE);            // a = hi\n        push(stack, (word & 0x00FF), SIZE_BYTE);                 // b = lo\n    }],\n    [TASKS.RECOMPOSE_BYTES_TO_WORD, ({ stack }) => {\n        const s0 = pop(stack);                                    // b = lo\n        const s1 = pop(stack);                                    // a = hi\n        push(stack, (s1 << 8) | s0, SIZE_WORD);\n    }],\n    [TASKS.DECOMPOSE_BYTE_TO_NIBBLE, ({ stack }) => {\n        const byte = pop(stack);                                  // s0\n        push(stack, (byte & 0xF0) >> 4, SIZE_BYTE);              // a = hi\n        push(stack, (byte & 0x0F), SIZE_BYTE);                   // b = lo\n    }],\n    [TASKS.RECOMPOSE_NIBBLE_TO_BYTE, ({ stack }) => {\n        const s0 = pop(stack);                                    // b = lo\n        const s1 = pop(stack);                                    // a = hi\n        push(stack, (s1 << 4) | s0, SIZE_BYTE);\n    }],\n    [TASKS.DECOMPOSE_ADDR, ({ stack }) => {\n        const addr = pop(stack);\n        push (stack, (addr >> 3), SIZE_WORD);\n        push (stack, (addr & 0x7), SIZE_WORD);\n    }],\n    [TASKS.RECOMPOSE_ADDR, ({ stack }) => {\n        const lo = pop(stack);\n        const hi = pop(stack);\n        push (stack, ((hi << 3) + lo), SIZE_ADDR);\n    }],\n    [TASKS.TRAP, ({ stack, ioBus }) => {\n        const s0 = pop(stack) & 0x0F;                             // pop trap number\n        ioBus.irqServiceBus.value = s0;\n        ioBus.irqSignalBus.signal();                                // send command\n    }],\n    [TASKS.IO_IN, ({ stack, ioBus}) => {\n        const s0 = pop(stack) & 0xFF;                             // pop off the port #\n        ioBus.deviceSelectBus.value = (s0 & 0xF0) >> 4;           // top four bits represent the device\n        ioBus.addressSelectBus.value = (s0 & 0x0F);               // bottom four represent the address\n        ioBus.commandBus.value = 0;                               // READ from bus\n        ioBus.executeBus.signal();                                // send command\n        push(stack, ioBus.dataBus.value, SIZE_BYTE);              // put the result on the stack\n    }],\n    [TASKS.IO_OUT, ({ stack, ioBus}) => {\n        const s0 = pop(stack) & 0xFF;                             // pop off the data\n        const s1 = pop(stack) & 0xFF;                             // pop off the port #\n        ioBus.deviceSelectBus.value = (s1 & 0xF0) >> 4;           // top four bits represent the device\n        ioBus.addressSelectBus.value = (s1 & 0x0F);               // bottom four represent the address\n        ioBus.dataBus.value = s0;                                 // put the data on the bus\n        ioBus.commandBus.value = 1;                               // WRITE from bus\n        ioBus.executeBus.signal();                                // send command\n    }],\n    [TASKS.DUP, ({ stack }) => {\n        const s0 = stack.pop();   // use pop() to preserve type info\n        stack.push(s0);\n        stack.push(s0);\n    }],\n    [TASKS.SWAP, ({ stack}) => {\n        const s0 = stack.pop();\n        const s1 = stack.pop();\n        stack.push(s0);\n        stack.push(s1);\n    }],\n    [TASKS.SET_BIT, ({ stack, arg }) => {\n        const bit = 0b1 << arg;\n        stack.push(stack.pop() | bit); // technically lets us set the upper bits, bot oh well\n    }],\n    [TASKS.CLEAR_BIT, ({ stack, arg }) => {\n        const bit = ~(0b1 << arg);\n        stack.push(stack.pop() & bit);\n    }],\n    [TASKS.PICK, ({ stack}) => {\n        const s0 = pop(stack);\n        const s1 = stack.pop();\n        const s2 = stack.pop();\n        stack.push(s0 !== 0 ? s2 : s1);\n        /*if (s0 !== 0) {\n            stack.push(s2);\n        } else {\n            stack.push(s1);\n        }*/\n    }],\n    [TASKS.SET_FLAG_IMM, ({ arg, registerFile }) => {\n        const flags = registerFile.FLAGS;\n        const bit = 0b1 << arg;\n        registerFile.FLAGS = flags | bit;\n    }],\n    [TASKS.CLEAR_FLAG_IMM, ({ arg, registerFile }) => {\n        const flags = registerFile.FLAGS;\n        const bit = ~(0b1 << arg);\n        registerFile.FLAGS = flags & bit;\n    }],\n    [TASKS.TEST_FLAG_IMM, ({ stack, arg, registerFile }) => {\n        const flags = registerFile.FLAGS;\n        const bit = 0b1 << arg;\n        push(stack, (((flags & bit) >> arg) > 0) ? 1 : 0, SIZE_BYTE);\n    }],\n    [TASKS.PULL_FLAGS_FROM_ALU, ({ arg, alu, registerFile }) => {\n        registerFile.FLAGS = (registerFile.FLAGS & 0xF0) | ( alu.flagsBus.data & arg );\n    }],\n    [TASKS.PUSH_FLAGS_TO_ALU, ({ arg, alu, registerFile }) => {\n        alu.flagsBus.data = (registerFile.FLAGS & 0x0F) & arg;\n    }],\n].forEach(([command, fn]) => {\n    const idx = command >>> 24;\n    TASK_FNS[idx] = fn;\n});\n\nconst makeArithOp = (command, eatReturn) => {\n    return ({ arg, stack, alu, registerFile }) => {\n        const [s0, sz0] = popWithSize(stack);                   // s1, op2, b\n        const [s1, sz1] = popWithSize(stack);                   // s0, op1, a\n        //const retSize = Math.max(sz0, sz1);\n        const retSize = sz1 > sz0 ? sz1 : sz0; //Math.max(sz0, sz1);\n        alu.op1Bus.data = s1;\n        alu.op2Bus.data = s0;\n        alu.commandBus.data = (retSize << 8) | (sz1 << 6) | (sz0 << 4) | command;\n        alu.flagsBus.data = (arg & FLAGS_PUSH_TO_ALU) ? (registerFile.FLAGS & 0xF) : 0;\n        alu.executeBus.signal();\n        if (arg & FLAGS_PULL_FROM_ALU) {\n            registerFile.FLAGS = (registerFile.FLAGS & 0xF0) | alu.flagsBus.data;\n            // set exception when dividing by zero\n            if (command === COMMANDS.SDIV || command === COMMANDS.DIV ||\n                command === COMMANDS.SMOD || command === COMMANDS.MOD) {\n                if (s0 === 0) {\n                    registerFile.EXCEPTION = 1;\n                }\n            }\n        }\n        const ret = alu.retBus.data;\n        if (!eatReturn) push(stack, ret, retSize);\n    };\n};\n\nObject.entries(TASKS).forEach(([k, v]) => {\n    if (v >= 0x40000000) {\n        let eatReturn = false;\n        // this is an ALU op\n        if (k.startsWith(\"CMP\")) {\n            k = k.replace(\"CMP\", \"SUB\")\n            eatReturn = true;\n        }\n        const op = k.split(\"_\")[0];\n        const command = COMMANDS[op];\n        //TASK_FNS.set(v, makeArithOp(command, eatReturn));\n        TASK_FNS[v >>> 24] = makeArithOp(command, eatReturn);\n    }\n});\n\nconst taskToHex = n => n.toString(16).padStart(8, \"0\");\n\nconst TASK_MAP = new Map(Object.entries(TASKS).map(([k, v]) => [v, k]));\n\nexport const mapTask = task => {\n    const opcode = opcodeFromTask(task);\n    const operand = operandFromTask(task);\n    const opcodeName = TASK_MAP.get(opcode);\n    return `${taskToHex(task)} => ${taskToHex(opcode)}(${opcodeName}) ${taskToHex(operand)}`;\n}\n\nexport const executeTask = (task, { stack, alu, registerFile, ioBus, memory }) => {\n    const opcode = opcodeFromTask(task);\n    const operand = operandFromTask(task);\n    //if (TASK_FNS.has(opcode)) {\n        //TASK_FNS.get(opcode)({ arg: operand, stack, alu, registerFile, ioBus, memory });\n        TASK_FNS[opcode >>> 24]({ arg: operand, stack, alu, registerFile, ioBus, memory });\n    //} else {\n        //throw new Error(`Could not execute task ${mapTask(task)}`);\n    //}\n};\n", "import { TASKS, mapTask, FLAGS_PULL_FROM_ALU, FLAGS_PUSH_AND_PULL, FLAGS_PUSH_TO_ALU } from \"./tasks.js\";\n\nimport { REGISTER_INDEX, FLAGS_INDEX, RegisterFile } from \"../core/RegisterFile.js\";\nimport { Memory } from \"../core/Memory.js\";\nimport { ALU, COMMANDS, SIZES } from \"../core/ALU.js\";\nimport { IOBus } from \"../core/IOBus.js\";\n\nconst taskCache = new Map();\nconst equivCache = new Map();\n\nconst SIZE_BYTE = SIZES.BYTE;\nconst SIZE_WORD = SIZES.WORD;\nconst SIZE_ADDR = SIZES.ADDR;\n\nexport function _constructArgs(instruction, operands) {\n    const args = {};\n    const argLocations = Object.entries(operands);\n    let i, l, arg, msb, lsb, x, bit, v;\n    for (i = 0, l = argLocations.length; i < l; i++) {\n        [arg, [msb, lsb]] = argLocations[i];\n        v = 0;\n        for (x = msb; x >= lsb; x--) {\n            bit = (instruction & (1 << x)) ? 1 : 0;\n            v = (v << 1) | bit;\n        }\n        args[arg] = v;\n    }\n    return args;\n}\n\nexport function decodeToTasks(instruction, { operands, decode }) {\n    const cachedInst = taskCache.get(instruction);\n    if (cachedInst) return cachedInst;\n    /*if (taskCache.has(instruction)) {\n        return taskCache.get(instruction);\n    }*/\n    const args = _constructArgs(instruction, operands);\n    const tasks = decode(args);\n    taskCache.set(instruction, tasks);\n    return tasks;\n}\n\nexport function decodeToTaskEquiv(instruction, { operands, equiv }) {\n    const cachedInst = equivCache.get(instruction);\n    let args, fn;\n    if (cachedInst) {\n        args = cachedInst.args;\n        fn = cachedInst.fn;\n    } else {\n        args = _constructArgs(instruction, operands);\n        fn = equiv.bind(undefined, args);\n        equivCache.set(instruction, {args, fn});\n    }\n    return fn;\n}\n\nexport function decode(instruction, opcode, useEquiv = true) {\n    if (opcode.equiv && useEquiv) return decodeToTaskEquiv(instruction,opcode);\n    return decodeToTasks(instruction, opcode);\n}\n\nconst aluOp = ({alu, registerFile, command, op0, sz0, op1, sz1, flagHandling}) => {\n    const retSize = sz1 > sz0 ? sz1 : sz0;\n    alu.op1Bus.data = op0;\n    alu.op2Bus.data = op1;\n    alu.commandBus.data = (retSize << 8) | (sz0 << 6) | (sz1 << 4) | command;\n    alu.flagsBus.data = (flagHandling & FLAGS_PUSH_TO_ALU) ? (registerFile.FLAGS & 0xF) : 0;\n    alu.executeBus.signal();\n    if (flagHandling & FLAGS_PULL_FROM_ALU) {\n        registerFile.FLAGS = (registerFile.FLAGS & 0xF0) | alu.flagsBus.data;\n        // set exception when dividing by zero\n        if (command === COMMANDS.SDIV || command === COMMANDS.DIV ||\n            command === COMMANDS.SMOD || command === COMMANDS.MOD) {\n            if (op1 === 0) {\n                registerFile.EXCEPTION = 1;\n            }\n        }\n    }\n    return alu.retBus.data;\n}\n\nexport const OPCODES = {};\n\n[ \n    [ \"fclr\", \"Clears Floating Point Unit\", \"0000_0000\", {}, (_, {fpu}) => fpu.init() ],\n    [ \"fadd\", \"Add two FP numbers together\", \"0001_0000\", {}, (_, {fpu}) => fpu.add() ],\n    [ \"fsub\", \"Subtract two FP numbers\", \"0001_0001\", {}, (_, {fpu}) => fpu.sub() ],\n    [ \"fcmp\", \"Compare two FP numbers\", \"0001_0010\", {}, (_, {fpu}) => fpu.sub() ],\n    [ \"fmul\", \"Multiply two FP numbers\", \"0001_0011\", {}, (_, {fpu}) => fpu.mul() ],\n    [ \"fmod\", \"Return modulo of two FP numbers\", \"0001_0100\", {}, (_, {fpu}) => fpu.mod() ],\n    [ \"fdiv\", \"Divide two FP numbers\", \"0001_0101\", {}, (_, {fpu}) => fpu.div() ],\n    [ \"fpow\", \"Raise to power\", \"0001_0110\", {}, (_, {fpu}) => fpu.pow() ],\n    [ \"fsqrt\",\"Square Root\", \"0001_0111\", {}, (_, {fpu}) => fpu.sqrt() ],\n    [ \"fneg\", \"Negate FP Number\", \"0001_1000\", {}, (_, {fpu}) => fpu.neg() ],\n    [ \"fexc\", \"Exchange top two FP numbers\", \"0001_1001\", {}, (_, {fpu}) => fpu.swap() ],\n    [ \"fint\", \"Convert FP number to integer\", \"0001_1010\", {}, (_, {fpu}) => fpu.int() ],\n    [ \"fabs\", \"Absolute Value of FP Number\", \"0001_1011\", {}, (_, {fpu}) => fpu.abs() ],\n    [ \"fsin\", \"Sine\", \"0010_0000\", {}, (_, {fpu}) => fpu.sin() ],\n    [ \"fcos\", \"Cosine\", \"0010_0001\", {}, (_, {fpu}) => fpu.cos() ],\n    [ \"ftan\", \"Tangent\", \"0010_0010\", {}, (_, {fpu}) => fpu.tan() ],\n    [ \"fasin\",\"Arc Sine\", \"0010_0100\", {}, (_, {fpu}) => fpu.asin() ],\n    [ \"facos\",\"Arc Cosine\", \"0010_0101\", {}, (_, {fpu}) => fpu.acos() ],\n    [ \"fatan\",\"Arc Tangent\", \"0010_0110\", {}, (_, {fpu}) => fpu.atan() ],\n    [ \"fisnan\",\"Check if FP Number is NaN\", \"0011_0000\", {}, (_, {fpu}) => fpu.isnan() ],\n    [ \"fisinf\",\"Check if FP Number is Infinte\", \"0011_0001\", {}, (_, {fpu}) => fpu.isinf() ],\n    [ \"flog2\",\"Perform Log 2\", \"0011_0010\", {}, (_, {fpu}) => fpu.log2() ],\n    [ \"flog10\",\"Perform Log 10\", \"0011_0011\", {}, (_, {fpu}) => fpu.log10() ],\n    [ \"fld0\", \"Load zero constant\", \"0111_0000\", {}, (_, {fpu}) => fpu.ld0() ],\n    [ \"fld1\", \"Load one constant\", \"0111_0001\", {}, (_, {fpu}) => fpu.ld1() ],\n    [ \"flde\", \"Load e constant\", \"0111_0010\", {}, (_, {fpu}) => fpu.e() ],\n    [ \"fldpi\",\"Load pi constant\", \"0111_0011\", {}, (_, {fpu}) => fpu.pi() ],\n    [ \"fldr\",\"Load from register\", \"1000_0000\", {r: [3, 0]}, ({r}, {registerFile, fpu}) => fpu.push(registerFile.getRegister(r)) ],\n    [ \"fldm\",\"Load from memory\", \"1000_0001\", {b: [7, 4], r: [3, 0]}, \n        ({b,r}, {memory, registerFile, fpu}) => {\n            const addr = (registerFile.getRegister(b) << 3) + registerFile.getRegister(r);\n            fpu.pushBytes([memory.readByte(addr+0), memory.readByte(addr+1), \n                           memory.readByte(addr+2), memory.readByte(addr+3),\n                           memory.readByte(addr+4), memory.readByte(addr+5),\n                           memory.readByte(addr+6), memory.readByte(addr+7)]);\n        }],\n    [ \"fldim\",\"Load from memory, indirect\", \"1000_0010\", {b: [7, 4], r: [3, 0]}, \n        ({b,r}, {memory, registerFile, fpu}) => {\n            let addr = (registerFile.getRegister(b) << 3) + registerFile.getRegister(r);\n            const bank = memory.readWord(addr);\n            const offs = memory.readWord(addr+2);\n            addr = (bank << 3) + offs;\n            fpu.pushBytes([memory.readByte(addr+0), memory.readByte(addr+1), \n                           memory.readByte(addr+2), memory.readByte(addr+3),\n                           memory.readByte(addr+4), memory.readByte(addr+5),\n                           memory.readByte(addr+6), memory.readByte(addr+7)]);\n        }],\n    [ \"fstr\",\"Store to register\", \"1000_0100\", {r: [3, 0]}, ({r}, {registerFile, fpu}) => registerFile.setRegister(r, fpu.pop()) ],\n    [ \"fstm\",\"Store to memory\", \"1000_0101\", {b: [7, 4], r: [3, 0]}, \n        ({b,r}, {memory, registerFile, fpu}) => {\n            const bytes = fpu.popBytes();\n            const addr = (registerFile.getRegister(b) << 3) + registerFile.getRegister(r);\n            for (let i = 0; i < 8; i++) \n                memory.writeByte(addr+i, bytes[i]);\n        }],\n    [ \"fstim\",\"Store to memory, indirect\", \"1000_0110\", {b: [7, 4], r: [3, 0]}, \n        ({b,r}, {memory, registerFile, fpu}) => {\n            const bytes = fpu.popBytes();\n            let addr = (registerFile.getRegister(b) << 3) + registerFile.getRegister(r);\n            const bank = memory.readWord(addr);\n            const offs = memory.readWord(addr+2);\n            addr = (bank << 3) + offs;\n            for (let i = 0; i < 8; i++) \n                memory.writeByte(addr+i, bytes[i]);\n        }],\n].forEach(([asm, description, pattern, operands, equiv]) => {\n    OPCODES[asm] = {\n        asm,\n        pattern: `1010_1110 ${pattern}`,\n        operands,\n        description,\n        flags: \"xdshncvz\",\n        equiv\n    }\n});\n\n\nOPCODES[\"nop\"] = {\n    asm: \"nop\",\n    pattern: \"0000_0000\",\n    operands: {},\n    description: \"Performs no operation\",\n    flags: \"xdshncvz\",\n    equiv: () => {},\n    decode: () => [\n        TASKS.NOP\n    ]\n};\n\n//FIXME: halt is currently doing the same thing as BRK\nOPCODES[\"halt\"] = {\n    asm: \"halt\",\n    pattern: \"0011_1110\",\n    operands: {},\n    description: \"Halts the processor until an interrupt occurs\",\n    flags: \"xdshncvz\",\n    equiv: (_, {registerFile}) => registerFile.SINGLE_STEP = 1,\n    decode: () => [\n        TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP\n    ]\n};\n\n//FIXME: wait is currently doing the same thing as BRK\nOPCODES[\"wait\"] = {\n    asm: \"wait $r\",\n    pattern: \"1010_1111 bbbb_bbbb\",\n    operands: {b: [7, 0]},\n    description: \"[TODO] Waits until a specific interrupt occurs\",\n    flags: \"xdshncvz\",\n    equiv: (_, {registerFile}) => registerFile.SINGLE_STEP = 1,\n    decode: ({b = 0} = {}) => [\n        TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP\n    ]\n};\n\nOPCODES[\"brk\"] = {\n    asm: \"brk\",\n    pattern: \"0011_1111\",\n    operands: {},\n    description: \"Halts the processor if a debugger is attached\",\n    flags: \"xdshncvz\",\n    equiv: (_, {registerFile}) => {\n        registerFile.SINGLE_STEP = 1;\n        registerFile.INTERRUPT_DISABLE = 1;\n    },\n    decode: () => [\n        TASKS.SET_FLAG_IMM | FLAGS_INDEX.INTERRUPT_DISABLE,\n        TASKS.SET_FLAG_IMM | FLAGS_INDEX.SINGLE_STEP\n    ]\n};\n\nOPCODES[\"not\"] = {\n    asm: \"not $r\",\n    pattern: \"0000_1001 0000_rrrr\",\n    operands: { r: [3, 0] },\n    description: \"!reg\",\n    flags: \"xdshNcvZ\",\n    equiv: ({r}, {alu, registerFile}) => {\n        const mask = (r & 1) ? 0xFF : 0xFFFF; \n        const sign = (r & 1) ? 0x80 : 0x8000;\n        const v = (~registerFile.getRegister(r)) & mask;\n        registerFile.setRegister(r, v);\n        registerFile.NEGATIVE = (v & sign) ? 1 : 0;\n        registerFile.ZERO = v === 0 ? 1 : 0;\n        /*registerFile.setRegister(r,aluOp({alu, registerFile, \n            command: COMMANDS.XOR, \n            op0: registerFile.getRegister(r), sz0: ((r & 0x01) ? SIZE_BYTE : SIZE_WORD), \n            op1: ((r & 0x01) ? 0xFF : 0xFFFF), sz1: ((r & 0x01) ? SIZE_BYTE : SIZE_WORD),\n            flagHandling: FLAGS_PULL_FROM_ALU}));*/\n    },\n    decode: ({ r = 0 } = {}) => [\n        TASKS.GET_REGISTER_AND_PUSH | r, // a, op1\n        ((r & 0x01) ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | ((r & 0x01) ? 0xFF : 0xFFFF), // b, op2\n        TASKS.XOR | FLAGS_PULL_FROM_ALU,\n        TASKS.POP_INTO_REGISTER | r\n    ]\n};\n\nOPCODES[\"neg\"] = {\n    asm: \"neg $r\",\n    pattern: \"0000_1001 0001_rrrr\",\n    operands: { r: [3, 0] },\n    description: \"-1 * reg\",\n    flags: \"xdshNcvZ\",\n    equiv: ({r}, {alu, registerFile}) => {\n        const mask = (r & 1) ? 0xFF : 0xFFFF; \n        const sign = (r & 1) ? 0x80 : 0x8000;\n        const v = (-registerFile.getRegister(r)) & mask;\n        registerFile.setRegister(r, v);\n        registerFile.NEGATIVE = (v & sign) ? 1 : 0;\n        registerFile.ZERO = v === 0 ? 1 : 0;\n    },\n    decode: ({ r = 0 } = {}) => [\n        TASKS.GET_REGISTER_AND_PUSH | r, // a\n        ((r & 0x01) ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | ((r & 0x01) ? 0xFF : 0xFFFF), // b\n        TASKS.XOR,\n        ((r & 0x01) ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | 0x01,\n        TASKS.ADD | FLAGS_PULL_FROM_ALU,\n        TASKS.POP_INTO_REGISTER | r\n    ]\n};\n\nOPCODES[\"exc\"] = {\n    asm: \"exc $r\",\n    pattern: \"0000_1001 0010_rrrr\",\n    operands: { r: [3, 0] },\n    description: \"Swaps high and low regions of the register\",\n    flags: \"xdshNcvZ\",\n    equiv: ({r}, {alu, registerFile}) => {\n        const mask = (r & 1) ? 0xFF : 0xFFFF; \n        const sign = (r & 1) ? 0x80 : 0x8000;\n        let v = registerFile.getRegister(r);\n        if (r & 1) {\n            // eight bit register; swap nibbles\n            v = ((v & 0x0F) << 4) | ((v & 0xF0) >> 4);\n        } else {\n            // word register; swap bytes\n            v = ((v & 0x00FF) << 8) | ((v & 0xFF00) >> 8);\n        }\n        registerFile.setRegister(r, v);\n        registerFile.NEGATIVE = (v & sign) ? 1 : 0;\n        registerFile.ZERO = v === 0 ? 1 : 0;\n    },\n    decode: ({ r = 0 } = {}) => [\n        TASKS.GET_REGISTER_AND_PUSH | r,\n        ((r & 0x01) ? TASKS.DECOMPOSE_BYTE_TO_NIBBLE : TASKS.DECOMPOSE_WORD_TO_BYTES),\n        TASKS.PUSH_WORD | ((r & 0x01) ? 4 : 8),\n        TASKS.SHL,\n        TASKS.OR | FLAGS_PULL_FROM_ALU,\n        TASKS.POP_INTO_REGISTER | r\n    ]\n};\n\nOPCODES[\"swap_ds\"] = {\n    asm: \"swap $d, $s\",\n    pattern: \"0000_1110 dddd_ssss\",\n    operands: { s: [3, 0], d: [7, 4] },\n    description: \"Swaps register values\",\n    flags: \"xdshncvz\",\n    equiv: ({d, s}, {registerFile}) => {\n        const dV = registerFile.getRegister(d);\n        const sV = registerFile.getRegister(s);\n        registerFile.setRegister(d, sV);\n        registerFile.setRegister(s, dV);\n    },\n    decode: ({ d = 0, s = 0 } = {}) => [\n        TASKS.GET_REGISTER_AND_PUSH | d,\n        TASKS.GET_REGISTER_AND_PUSH | s,\n        TASKS.POP_INTO_REGISTER | d,\n        TASKS.POP_INTO_REGISTER | s\n    ]\n};\n\nOPCODES[\"mov_ds\"] = {\n    asm: \"mov $d, $s\",\n    pattern: \"0000_1111 dddd_ssss\",\n    operands: { s: [3, 0], d: [7, 4] },\n    description: \"Moves value of source to dest\",\n    flags: \"xdshncvz\",\n    equiv: ({d,s}, {registerFile}) => {\n        const sV = registerFile.getRegister(s);\n        registerFile.setRegister(d, sV);\n    },\n    decode: ({ d = 0, s = 0 } = {}) => [\n        TASKS.GET_REGISTER_AND_PUSH | s,\n        TASKS.POP_INTO_REGISTER | d\n    ]\n};\n\n// some opcodes can be generated based on a recurring pattern.\n// no sense in typing those over and over, so let's do it automatically.\n\n// inc and dec are just add and subtract in disguise. It's no\n// faster to use them, but they are convenient from a typing\n// perspective\n[\n    [\"inc\", TASKS.ADD, `1100_rrrr`, COMMANDS.ADD],\n    [\"dec\", TASKS.SUB, `1101_rrrr`, COMMANDS.SUB]\n].forEach(([opcode, task, pattern, command]) => {\n    OPCODES[`${opcode}_r`] = {\n        asm: `${opcode} $r`,\n        pattern,\n        operands: { r: [3, 0] },\n    description: `${opcode}rements register`,\n    flags: \"xdshNCVZ\",\n        equiv: ({r}, {registerFile, alu}) => {\n            registerFile.setRegister(r,aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(r), sz0: ((r & 0x01) ? SIZE_BYTE : SIZE_WORD), \n                op1: 1,                           sz1: ((r & 0x01) ? SIZE_BYTE : SIZE_WORD),\n                flagHandling: FLAGS_PULL_FROM_ALU}));\n        },\n        decode: ({ r = 0 } = {}) => [\n            // clear carry bit; inc & dec should never be affected\n            //TASKS.CLEAR_FLAG_IMM | FLAGS_INDEX.CARRY,\n            // now do the real work\n            TASKS.GET_REGISTER_AND_PUSH | r,\n            ((r & 0b1) ? TASKS.PUSH_BYTE : TASKS.PUSH_WORD) | 1,\n            task | FLAGS_PULL_FROM_ALU,\n            TASKS.POP_INTO_REGISTER | r\n        ]\n    }\n});\n\n// set and clear flag\n[\n    [\"set\", TASKS.SET_FLAG_IMM, `1011_0fff`],\n    [\"clr\", TASKS.CLEAR_FLAG_IMM, `1011_1fff`]\n].forEach(([opcode, task, pattern]) => {\n    OPCODES[`${opcode}_f`] = {\n        asm: `${opcode} $f`,\n        pattern,\n        operands: { f: [2, 0] },\n        description: `${opcode}s specified flag`,\n        flags: \"XDSHNCVZ\",\n        equiv: task === TASKS.SET_FLAG_IMM ? (({f}, {registerFile}) => registerFile.FLAGS |= 1 << f)\n                                           : (({f}, {registerFile}) => registerFile.FLAGS &= ~(1 << f)),\n        decode: ({ f = 0 } = {}) => [\n            task | f,\n        ]\n    }\n});\n\n// add, sub, cmp, and, or, test, xor\n[\n    [\"add\", TASKS.ADD, \"0000_0001\", \"0100_1dd1\", \"0100_1dd0\", COMMANDS.ADD, FLAGS_PUSH_AND_PULL, true],\n    [\"sub\", TASKS.SUB, \"0000_0010\", \"0101_0dd1\", \"0101_0dd0\", COMMANDS.SUB, FLAGS_PUSH_AND_PULL, true],\n    [\"cmp\", TASKS.CMP, \"0000_0011\", \"0101_1dd1\", \"0101_1dd0\", COMMANDS.SUB, FLAGS_PULL_FROM_ALU, false],\n    [\"and\", TASKS.AND, \"0000_0100\", \"0110_0dd1\", \"0110_0dd0\", COMMANDS.AND, FLAGS_PUSH_AND_PULL, true],\n    [\"or\", TASKS.OR, \"0000_0101\", \"0110_1dd1\", \"0110_1dd0\", COMMANDS.OR, FLAGS_PUSH_AND_PULL, true],\n    [\"test\", TASKS.AND, \"0000_0110\", \"0111_0dd1\", \"0111_0dd0\", COMMANDS.AND, FLAGS_PULL_FROM_ALU, false],\n    [\"xor\", TASKS.XOR, \"0000_0111\", \"0111_1dd1\", \"0111_1dd0\", COMMANDS.XOR, FLAGS_PUSH_AND_PULL, true],\n].forEach(([opcode, task, ds, db, dw, command, flagHandling, storeReturn], idx) => {\n    OPCODES[`${opcode}_ds`] = {\n        asm: `${opcode} $d, $s`,\n        pattern: `${ds} dddd_ssss`,\n        operands: { s: [3, 0], d: [7, 4] },\n        description: `${opcode}s dest and source, storing result in dest`,\n        flags: idx < 3 ? \"xdshNCVZ\" : \"xdshNcvZ\",\n        equiv: (!storeReturn) ? (({d,s}, {registerFile, alu}) => {\n            aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(d), sz0: ((d & 0x01) ? SIZE_BYTE : SIZE_WORD), \n                op1: registerFile.getRegister(s), sz1: ((s & 0x01) ? SIZE_BYTE : SIZE_WORD),\n                flagHandling});\n        }) : (({d,s}, {registerFile, alu}) => {\n            registerFile.setRegister(d,aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(d), sz0: ((d & 0x01) ? SIZE_BYTE : SIZE_WORD), \n                op1: registerFile.getRegister(s), sz1: ((s & 0x01) ? SIZE_BYTE : SIZE_WORD),\n                flagHandling}));\n        }),\n        decode: (\n            (!storeReturn)\n                ? ({ d = 0, s = 0 } = {}) => [\n                    TASKS.GET_REGISTER_AND_PUSH | d, // a\n                    TASKS.GET_REGISTER_AND_PUSH | s, // b\n                    task | FLAGS_PULL_FROM_ALU\n                ]\n                : ({ d = 0, s = 0 } = {}) => [\n                    TASKS.GET_REGISTER_AND_PUSH | d, // a\n                    TASKS.GET_REGISTER_AND_PUSH | s, // b\n                    task | FLAGS_PUSH_AND_PULL,\n                    (TASKS.POP_INTO_REGISTER | d)\n                ]\n        )\n    };\n    OPCODES[`${opcode}_db`] = {\n        asm: `${opcode} $d, $b`,\n        pattern: `${db} bbbb_bbbb`,\n        operands: { d: [10, 9], b: [7, 0] },\n        description: `${opcode}s dest and imm8, storing result in dest`,\n        flags: idx < 3 ? \"xdshNCVZ\" : \"xdshNcvZ\",\n        equiv: (!storeReturn) ? (({d,b}, {registerFile, alu}) => {\n            aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(d*2+1), sz0:               SIZE_BYTE             , \n                op1: b                              , sz1:               SIZE_BYTE             ,\n                flagHandling});\n        }) : (({d,b}, {registerFile, alu}) => {\n            registerFile.setRegister(d*2+1,aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(d*2+1), sz0:               SIZE_BYTE             , \n                op1: b                              , sz1:               SIZE_BYTE             ,\n                flagHandling}));\n        }),\n        decode: (\n            (!storeReturn)\n                ? ({ d = 0, b = 0 } = {}) => [\n                    TASKS.GET_REGISTER_AND_PUSH | ((d << 1) | 1), // a\n                    TASKS.PUSH_BYTE | b, //b\n                    task | FLAGS_PULL_FROM_ALU\n                ]\n                : ({ d = 0, b = 0 } = {}) => [\n                    TASKS.GET_REGISTER_AND_PUSH | ((d << 1) | 1), // a\n                    TASKS.PUSH_BYTE | b, //b\n                    task | FLAGS_PUSH_AND_PULL,\n                    (TASKS.POP_INTO_REGISTER | ((d << 1) | 1))\n                ]\n        )\n    };\n    OPCODES[`${opcode}_dw`] = {\n        asm: `${opcode} $d, $w`,\n        pattern: `${dw} wwww_wwww wwww_wwww`,\n        operands: { d: [18, 17], w: [15, 0] },\n        description: `${opcode}s dest and imm16, storing result in dest`,\n        flags: idx < 3 ? \"xdshNCVZ\" : \"xdshNcvZ\",\n        equiv: (!storeReturn) ? (({d,w}, {registerFile, alu}) => {\n            aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(d*2), sz0:               SIZE_WORD             , \n                op1: w                            , sz1:               SIZE_WORD             ,\n                flagHandling});\n        }) : (({d,w}, {registerFile, alu}) => {\n            registerFile.setRegister(d*2,aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(d*2), sz0:               SIZE_WORD             , \n                op1: w                            , sz1:               SIZE_WORD             ,\n                flagHandling}));\n        }),\n        decode: (\n            (!storeReturn)\n                ? ({ d = 0, w = 0 } = {}) => [\n                    TASKS.GET_REGISTER_AND_PUSH | (d << 1), // a\n                    TASKS.PUSH_WORD | w, // b\n                    task | FLAGS_PULL_FROM_ALU\n                ]\n                : ({ d = 0, w = 0 } = {}) => [\n                    TASKS.GET_REGISTER_AND_PUSH | (d << 1), // a\n                    TASKS.PUSH_WORD | w, // b\n                    task | FLAGS_PUSH_AND_PULL,\n                    (TASKS.POP_INTO_REGISTER | (d << 1))\n                ]\n        )\n    };\n});\n\n// trap\nOPCODES[\"trap_b\"] = {\n    asm: \"trap $b\",\n    pattern: \"0000_1000 bbbb_bbbb\",\n    operands: { b: [7, 0] },\n    description: \"Executes the specified trap\",\n    flags: \"xdshncvz\",\n    equiv: ({r}, {registerFile, memory}) => {\n        OPCODES[\"br_call_f\"].equiv({w: 1, i: 1, m: 1, a: b}, {registerFile, memory});\n    },\n    decode: ({ b = 0 } = {}) => [\n        ...OPCODES[\"br_call_f\"].decode({w: 1, i: 1, m: 1, a: b})\n    ]\n};\n\n// FIXME: does not work!\nOPCODES[\"trap_r\"] = {\n    asm: \"trap $r\",\n    pattern: \"0100_0rrr\",\n    operands: { r: [2, 0] },\n    description: \"[TODO] Executes the specified trap in the given register\",\n    flags: \"xdshncvz\",\n    equiv: ({r}, {registerFile, memory}) => {},\n    decode: ({ r = 0 } = {}) => [\n        TASKS.NOP\n    ]\n};\n\n// enter\nOPCODES[\"enter_n\"] = {\n    asm: \"enter $n\",\n    pattern: \"0011_1000 nnnn_nnnn\",\n    operands: { n: [7, 0] },\n    description: \"Enters a stack frame\",\n    flags: \"xdshncvz\",\n    equiv: ({n}, {registerFile, memory}) => {\n        OPCODES[\"push_r\"].equiv({r: REGISTER_INDEX.BP}, {registerFile, memory});\n        OPCODES[\"mov_ds\"].equiv({d: REGISTER_INDEX.BP, s: REGISTER_INDEX.SP}, {registerFile, memory});\n        registerFile.SP -= n;\n    },\n    decode: ({ n = 0} = {}) => [\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.BP}),\n        ...OPCODES[\"mov_ds\"].decode({d: REGISTER_INDEX.BP, s: REGISTER_INDEX.SP}),\n        TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,\n        TASKS.PUSH_WORD | n,\n        TASKS.SUB,\n        TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP\n    ]\n};\n// exit\nOPCODES[\"exit_n\"] = {\n    asm: \"exit $n\",\n    pattern: \"0011_1001 nnnn_nnnn\",\n    operands: { n: [7, 0] },\n    description: \"Leaves a stack frame\",\n    flags: \"xdshncvz\",\n    equiv: ({n}, {registerFile, memory}) => {\n        registerFile.SP += n;\n        OPCODES[\"pop_r\"].equiv({r: REGISTER_INDEX.BP}, {registerFile, memory});\n    },\n    decode: ({ n = 0} = {}) => [\n        TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,\n        TASKS.PUSH_WORD | n,\n        TASKS.ADD,\n        TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.BP})\n    ]\n};\n\n// ds variants of shl, shr, mul, div, mod, smul, sdiv, smod\n[\n    [\"shl\", TASKS.SHL, \"0000_1011 dddd_ssss\", COMMANDS.SHL],\n    [\"shr\", TASKS.SHR, \"0000_1101 dddd_ssss\", COMMANDS.SHR],\n    [\"mul\", TASKS.MUL, \"1010_1000 dddd_ssss\", COMMANDS.MUL],\n    [\"div\", TASKS.DIV, \"1010_1001 dddd_ssss\", COMMANDS.DIV],\n    [\"mod\", TASKS.MOD, \"1010_1010 dddd_ssss\", COMMANDS.MOD],\n    [\"smul\", TASKS.SMUL, \"1010_1011 dddd_ssss\", COMMANDS.SMUL],\n    [\"sdiv\", TASKS.SDIV, \"1010_1100 dddd_ssss\", COMMANDS.SDIV],\n    [\"smod\", TASKS.SMOD, \"1010_1101 dddd_ssss\", COMMANDS.SMOD]\n].forEach(([opcode, task, pattern, command], idx) => {\n    OPCODES[`${opcode}_ds`] = {\n        asm: `${opcode} $d, $s`,\n        pattern,\n        operands: { s: [3, 0], d: [7, 4] },\n        description: `${opcode} dest and source, storing result in dest`,\n        flags: idx < 2 ? \"xdshNCvZ\" : (opcode.indexOf(\"mul\") > -1 ? \"x\" : \"X\") + \"dshNCVZ\",\n        equiv: (({d=0,s=0}={}, {registerFile, alu}) => {\n            registerFile.setRegister(d,aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(d), sz0: ((d & 0x01) ? SIZE_BYTE : SIZE_WORD), \n                op1: registerFile.getRegister(s), sz1: ((s & 0x01) ? SIZE_BYTE : SIZE_WORD),\n                flagHandling: FLAGS_PUSH_AND_PULL}));\n        }),\n        decode: ({ d = 0, s = 0 } = {}) => [\n            TASKS.GET_REGISTER_AND_PUSH | d, // a\n            TASKS.GET_REGISTER_AND_PUSH | s, // b\n            task | FLAGS_PUSH_AND_PULL,\n            TASKS.POP_INTO_REGISTER | d\n        ]\n    }\n});\n\n// rn variants of shl, shr\n[\n    [\"shl\", TASKS.SHL, \"0000_1010 rrrr_nnnn\", COMMANDS.SHL],\n    [\"shr\", TASKS.SHR, \"0000_1100 rrrr_nnnn\", COMMANDS.SHR]\n].forEach(([opcode, task, pattern, command]) => {\n    OPCODES[`${opcode}_rn`] = {\n        asm: `${opcode} $r, $n`,\n        pattern,\n        operands: { n: [3, 0], r: [7, 4] },\n        description: `${opcode} reg by specified bits`,\n        flags: \"xdshNCvZ\",\n        equiv: (({r,n}, {registerFile, alu}) => {\n            registerFile.setRegister(r,aluOp({alu, registerFile, \n                command, \n                op0: registerFile.getRegister(r), sz0: ((r & 0x01) ? SIZE_BYTE : SIZE_WORD), \n                op1: n                          , sz1:               SIZE_BYTE             ,\n                flagHandling: FLAGS_PUSH_AND_PULL}));\n        }),\n        decode: ({ r = 0, n = 0 } = {}) => [\n            TASKS.GET_REGISTER_AND_PUSH | r, // a\n            TASKS.PUSH_BYTE | n, // b\n            task | FLAGS_PUSH_AND_PULL,\n            TASKS.POP_INTO_REGISTER | r\n        ]\n    }\n});\n\nOPCODES[\"in_rp\"] = {\n    asm: \"in $r, $p\",\n    pattern: \"0011_0000 rrrr_0000 pppppppp\",\n    operands: { r: [15, 12], p: [7, 0] },\n    description: \"Reads a value from port and stores in reg\",\n    flags: \"xdshncvz\",\n    equiv: ({r, p}, {registerFile, ioBus}) => {\n        ioBus.deviceSelectBus.value = (p & 0xF0) >> 4;           // top four bits represent the device\n        ioBus.addressSelectBus.value = (p & 0x0F);               // bottom four represent the address\n        ioBus.commandBus.value = 0;                              // READ from bus\n        ioBus.executeBus.signal();                               // send command\n        registerFile.setRegister(r, ioBus.dataBus.value);\n    },\n    decode: ({ r = 0, p = 0 } = {}) => [\n        TASKS.PUSH_BYTE | p,\n        TASKS.IO_IN,\n        TASKS.POP_INTO_REGISTER | r\n    ]\n};\n\nOPCODES[\"out_rp\"] = {\n    asm: \"out $r, $p\",\n    pattern: \"0011_0001 rrrr_0000 pppppppp\",\n    operands: { r: [15, 12], p: [7, 0] },\n    description: \"Writes value in reg to port\",\n    flags: \"xdshncvz\",\n    equiv: ({r, p}, {registerFile, ioBus}) => {\n        ioBus.deviceSelectBus.value = (p & 0xF0) >> 4;            // top four bits represent the device\n        ioBus.addressSelectBus.value = (p & 0x0F);                // bottom four represent the address\n        ioBus.dataBus.value = registerFile.getRegister(r);        // put the data on the bus\n        ioBus.commandBus.value = 1;                               // WRITE from bus\n        ioBus.executeBus.signal();                                // send command\n    },\n    decode: ({ r = 0, p = 0 } = {}) => [\n        TASKS.PUSH_BYTE | p,\n        TASKS.GET_REGISTER_AND_PUSH | r,\n        TASKS.IO_OUT,\n    ]\n};\n\n\n\n// LD dw\nOPCODES[\"ld_dw\"] = {\n    asm: \"ld $d, $w\",\n    pattern: \"0001_ddd0 0000_0000 wwww_wwww wwww_wwww\",\n    operands: { d: [27, 25], w: [15, 0] },\n    description: \"Loads an immediate word into dest\",\n    flags: \"xdshncvz\",\n    equiv: ({d, w}, {registerFile}) => {\n        registerFile.setRegister(d * 2, w);\n    },\n    decode: ({ d = 0, w = 0 } = {}) => [\n        TASKS.PUSH_WORD | w,\n        TASKS.POP_INTO_REGISTER | (d << 1)\n    ]\n};\n\n// LD db\nOPCODES[\"ld_db\"] = {\n    asm: \"ld $d, $b\",\n    pattern: \"0001_ddd1 0000_0000 bbbb_bbbb\",\n    operands: { d: [19, 17], b: [7, 0] },\n    description: \"Loads an immediate byte into dest\",\n    flags: \"xdshncvz\",\n    equiv: ({d, b}, {registerFile}) => {\n        registerFile.setRegister(d * 2 + 1, b);\n    },\n    decode: ({ d = 0, b = 0 } = {}) => [\n        TASKS.PUSH_BYTE | b,\n        TASKS.POP_INTO_REGISTER | ((d << 1) | 1)\n    ]\n};\n\nconst calcAddress = ({m,i,x,y,a},{registerFile,memory}) => {\n    let addr = a;\n    // m: 0b01 === address, 0b10 === BP, 0b11 ==== D\n    // i: 0b0 === absolute; 0b1 === indirect\n    // if we're BP or D, we need that register added to the address on the stack\n    if (m === 2) addr = (addr + registerFile.BP) & 0xFFFF;\n    if (m === 3) addr = (addr + (registerFile.D << 3));\n    // if indexing by x, do so\n    if (x === 1) addr += registerFile.X;\n    // if indirect, we need memory at location\n    if (i === 1) addr = (memory.readWord(addr) << 3) + memory.readWord(addr+2)\n    // index by y\n    if (y === 1) addr += registerFile.Y;\n    return addr & 0x7FFFF;\n}\n\nconst addressingTasks = ({ m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [\n    // m: 0b01 === address, 0b10 === BP, 0b11 ==== D\n    // i: 0b0 === absolute; 0b1 === indirect\n    // if we're BP or D, we need that register added to the address on the stack\n    ...(m === 2 ? [\n        TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.BP,\n        TASKS.ADD,\n        TASKS.PUSH_WORD | 0xFFFF,\n        TASKS.AND\n    ] : m === 3 ? [\n        TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.D,\n        TASKS.PUSH_WORD | 0,\n        TASKS.RECOMPOSE_ADDR,\n        TASKS.ADD,\n    ] : []),\n    // if indexing by x, do so\n    ...(x === 1 ? [\n        TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.X,\n        // TODO: scale?\n        TASKS.ADD\n    ] : []),\n    // if indirect, we need memory at location\n    ...(i === 1 ? [\n        TASKS.GET_ADDR_FROM_MEMORY,\n        TASKS.RECOMPOSE_ADDR\n        //TASKS.PUSH_ADDR | (a & 0x70000),\n        //TASKS.OR\n    ] : []),\n    // index by y\n    ...(y === 1 ? [\n        TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.Y,\n        // TODO: scale?\n        TASKS.ADD\n    ] : []),\n];\n\n// LD; 12 cycles worst case.  3 in the best.\nOPCODES[\"ld\"] = {\n    asm: \"ld $d, $a $x $y $m:$i\",\n    pattern: \"0001_dddd mmix_yaaa aaaa_aaaa aaaa_aaaa\",\n    operands: { d: [27, 24], m: [23, 22], i: [21, 21], x: [20, 20], y: [19, 19], a: [18, 0] },\n    description: \"Loads a value from memory\",\n    flags: \"xdshncvz\",\n    equiv: ({d,m,i,x,y,a}, {registerFile, memory}) => {\n        if (d & 0x01) registerFile.setRegister(d, memory.readByte(calcAddress({m, i, x, y, a}, {registerFile, memory})))\n        else          registerFile.setRegister(d, memory.readWord(calcAddress({m, i, x, y, a}, {registerFile, memory})));\n    },\n    decode: ({ d = 0, m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [\n        TASKS.PUSH_ADDR | a,\n        ...addressingTasks({ m, i, x, y, a }),\n        // get the desired data from memory\n        ((d & 0x01)\n            ? TASKS.GET_BYTE_FROM_MEMORY\n            : TASKS.GET_WORD_FROM_MEMORY),\n        // and load it\n        TASKS.POP_INTO_REGISTER | d\n    ]\n}\n\n// ST; 12 cycles worst case.  3 in the best.\nOPCODES[\"st\"] = {\n    asm: \"st $a, $s $x $y $m:$i\",\n    pattern: \"0010_ssss mmix_yaaa aaaa_aaaa aaaa_aaaa\",\n    operands: { s: [27, 24], m: [23, 22], i: [21, 21], x: [20, 20], y: [19, 19], a: [18, 0] },\n    description: \"Stores a value to memory\",\n    flags: \"xdshncvz\",\n    equiv: ({s,m,i,x,y,a}, {registerFile, memory}) => {\n        const data = registerFile.getRegister(s);\n        if (s & 0x01) memory.writeByte(calcAddress({m, i, x, y, a}, {registerFile, memory}), data)\n        else          memory.writeWord(calcAddress({m, i, x, y, a}, {registerFile, memory}), data);\n    },\n    decode: ({ s = 0, m = 0, i = 0, x = 0, y = 0, a = 0 } = {}) => [\n        TASKS.PUSH_ADDR | a,\n        ...addressingTasks({ m, i, x, y, a }),\n        // get byte/word to push to memory\n        TASKS.GET_REGISTER_AND_PUSH | s,\n        // get the desired data from memory\n        ((s & 0x01)\n            ? TASKS.POP_BYTE_INTO_MEMORY\n            : TASKS.POP_WORD_INTO_MEMORY),\n    ]\n};\n\n\nOPCODES[\"push_r\"] = {\n    asm: `push $r`,\n    pattern: \"1110_rrrr\",\n    operands: { r: [3, 0] },\n    description: \"Push the register on stack\",\n    flags: \"xdshncvz\",\n    equiv: ({r}, {registerFile, memory}) => {\n        registerFile.SP -= (r & 0b1 ? 1 : 2);\n        if (r & 0b1) memory.writeByte(registerFile.SP, registerFile.getRegister(r))\n        else         memory.writeWord(registerFile.SP, registerFile.getRegister(r));\n    },\n    decode: ({ r = 0 } = {}) => [\n        TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,\n        TASKS.PUSH_WORD | ((r & 0b1) ? 1 : 2),\n        TASKS.SUB,\n        TASKS.DUP,\n        TASKS.GET_REGISTER_AND_PUSH | r,\n        ((r & 0b1)\n            ? TASKS.POP_BYTE_INTO_MEMORY\n            : TASKS.POP_WORD_INTO_MEMORY),\n        TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,\n    ]\n};\nOPCODES[\"pop_r\"] = {\n    asm: `pop $r`,\n    pattern: \"1111_rrrr\",\n    operands: { r: [3, 0] },\n    description: \"Pop top of stack into register\",\n    flags: \"xdshncvz\",\n    equiv: ({r}, {registerFile, memory}) => {\n        let data;\n        if (r & 0b1) data = memory.readByte(registerFile.SP)\n        else         data = memory.readWord(registerFile.SP);\n        registerFile.SP += (r & 0b1 ? 1 : 2);\n        registerFile.setRegister(r, data);\n    },\n    decode: ({ r = 0 } = {}) => [\n        TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,\n        TASKS.DUP,\n        TASKS.PUSH_WORD | ((r & 0b1) ? 1 : 2),\n        TASKS.ADD,\n        TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,\n        ((r & 0b1)\n            ? TASKS.GET_BYTE_FROM_MEMORY\n            : TASKS.GET_WORD_FROM_MEMORY),\n        TASKS.POP_INTO_REGISTER | r,\n    ]\n};\n\nOPCODES[\"pushall\"] = {\n    asm: `pushall`,\n    pattern: \"1010_0000\",\n    operands: {},\n    description: \"Pushes SP, A, B, C, D, X, Y, and BP\",\n    flags: \"xdshncvz\",\n    equiv: ({}, {registerFile, memory}) => {\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.SP}, {registerFile, memory});\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.A}, {registerFile, memory});\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.B}, {registerFile, memory});\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.C}, {registerFile, memory});\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.D}, {registerFile, memory});\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.X}, {registerFile, memory});\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.Y}, {registerFile, memory});\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.BP}, {registerFile, memory});\n    },\n    decode: () => [\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.SP}),\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.A}),\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.B}),\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.C}),\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.D}),\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.X}),\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.Y}),\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.BP})\n    ]\n};\nOPCODES[\"popall\"] = {\n    asm: `popall`,\n    pattern: \"1010_0001\",\n    operands: {},\n    description: \"Reverse of pushall\",\n    flags: \"xdshncvz\",\n    equiv: ({}, {registerFile, memory}) => {\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.BP}, {registerFile, memory});\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.Y}, {registerFile, memory});\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.X}, {registerFile, memory});\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.D}, {registerFile, memory});\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.C}, {registerFile, memory});\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.B}, {registerFile, memory});\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.A}, {registerFile, memory});\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.SP}, {registerFile, memory});\n    },\n    decode: () => [\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.BP}),\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.Y}),\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.X}),\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.D}),\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.C}),\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.B}),\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.A}),\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.SP})\n    ]\n};\n\n\nOPCODES[\"pushf\"] = {\n    asm: `pushf`,\n    pattern: \"1010_0010\",\n    operands: {},\n    description: \"Push flags onto stack\",\n    flags: \"xdshncvz\",\n    equiv: ({}, {registerFile, memory}) => {\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.STATUS}, {registerFile, memory});\n    },\n    decode: () => [\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.STATUS})\n    ]\n};\n\nOPCODES[\"popf\"] = {\n    asm: `popf`,\n    pattern: \"1010_0011\",\n    operands: {},\n    description: \"Pops flags from stack\",\n    flags: \"XDSHNCVZ\",\n    equiv: ({}, {registerFile, memory}) => {\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.STATUS}, {registerFile, memory});\n    },\n    decode: () => [\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.STATUS})\n    ]\n};\n\nOPCODES[\"pushmm\"] = {\n    asm: `pushmm`,\n    pattern: \"1010_0100\",\n    operands: {},\n    description: \"Push memory map register to stack\",\n    flags: \"xdshncvz\",\n    equiv: ({}, {registerFile, memory}) => {\n        OPCODES.push_r.equiv({r: REGISTER_INDEX.MM}, {registerFile, memory});\n    },\n    decode: () => [\n        ...OPCODES[\"push_r\"].decode({r: REGISTER_INDEX.MM})\n    ]\n};\n\nOPCODES[\"popmm\"] = {\n    asm: `popmm`,\n    pattern: \"1010_0101\",\n    operands: {},\n    description: \"Pops value on stack into memory map register\",\n    flags: \"xdshncvz\",\n    equiv: ({}, {registerFile, memory}) => {\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.MM}, {registerFile, memory});\n    },\n    decode: () => [\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.MM})\n    ]\n};\n\nOPCODES[\"ret\"] = {\n    asm: `ret`,\n    pattern: \"1010_0111\",\n    operands: {},\n    description: \"Return from subroutine\",\n    flags: \"xdshncvz\",\n    equiv: ({}, {registerFile, memory}) => {\n        OPCODES.pop_r.equiv({r: REGISTER_INDEX.PC}, {registerFile, memory});\n    },\n    decode: () => [\n        ...OPCODES[\"pop_r\"].decode({r: REGISTER_INDEX.PC})\n    ]\n};\n\n[\n    [\"brs_calls_f\", \"1001_nfff mmix_yuw1 aaaa_aaaa\", 8],\n    [\"br_call_f\", \"1001_nfff mmix_yuw0 aaaa_aaaa aaaa_aaaa\", 0]\n].forEach(([opcode, pattern, offset]) => {\n    OPCODES[opcode] = {\n        asm: `${opcode} $n $f $m $i $x $y $u $w $a`,\n        pattern,\n        operands: {\n            n: [27 - offset, 27 - offset],\n            f: [26 - offset, 24 - offset],\n            m: [23 - offset, 22 - offset],\n            i: [21 - offset, 21 - offset],\n            x: [20 - offset, 20 - offset],\n            y: [19 - offset, 19 - offset],\n            u: [18 - offset, 18 - offset],\n            w: [17 - offset, 17 - offset],\n            s: [16 - offset, 16 - offset],\n            a: [15 - offset, 0]\n        },\n        description: \"Conditional branch/call to address (U=unconditional; N=Not; W=Call)\",\n        flags: \"xdshncvz\",\n        equiv: ({ n, f, m, i, x, y, u, w, s, a}, {registerFile, memory}) => {\n            // value to use if branch is taken\n            // m: 0b00 === relative, 0b01 === address,\n            //    0b10 === BP, 0b11 ==== D\n            // i: 0b0 === absolute; 0b1 === indirect\n            // if w is 1, we're a CALL\n            if (w === 1) OPCODES[\"push_r\"].equiv({r: REGISTER_INDEX. PC}, {registerFile, memory}); \n            // make sure the address is sign extended\n            let addr = (s === 0) ? a : (((a & 0x80) > 0 ? 0xFF00 : 0) | a);\n            // need this relative address turned into\n            // an absolute one, thanks!\n            if (m === 0) addr = (addr + registerFile.PC) & 0x0FFFF;\n            addr = calcAddress({m, i, x, y, a: addr}, {registerFile, memory});\n            if (m !== 0) addr = memory.readWord(addr);\n            if (u === 1) {\n                switch (f) {\n                    case 0b000:\n                        // unconditional, so don't check any flags\n                        // as such, the address is currently on the stack\n                        registerFile.PC = addr;\n                        break;\n                    case 0b010:\n                        // lt (N != V) or blo (C=1)\n                        if ((n === 0 && registerFile.NEGATIVE !== registerFile.OVERFLOW) \n                         || (n === 1 && registerFile.CARRY))    \n                            registerFile.PC = addr;\n                        break;\n                    case 0b011:\n                        // lte (N != V or Z=0) or ble (C=1 or Z=1)\n                        if ((n === 0 && ((registerFile.NEGATIVE !== registerFile.OVERFLOW) || registerFile.ZERO)) \n                         || (n === 1 &&  (registerFile.CARRY                               || registerFile.ZERO)))\n                            registerFile.PC = addr;\n                        break;\n                    case 0b100:\n                        // gt (N=V and Z=0) or abv (C=0 and Z=0)\n                        if ((n === 0 && (registerFile.NEGATIVE === registerFile.OVERFLOW) && !registerFile.ZERO)\n                         || (n === 1 && (!registerFile.CARRY && !registerFile.ZERO))) \n                            registerFile.PC = addr;\n                        break;\n                    case 0b101:\n                        // gte (N=V or Z=1) or abe (C=0 or Z=1)\n                        if ((n === 0 && (registerFile.NEGATIVE === registerFile.OVERFLOW) && registerFile.ZERO)\n                         || (n === 1 && (!registerFile.CARRY || registerFile.ZERO)))\n                            registerFile.PC = addr;\n                        break;\n                }\n            } else {\n                    let flagValue = (registerFile.FLAGS & (1<<f)) ? 1 : 0;\n                    if (n === 1) flagValue = 1 - flagValue;\n                    if (flagValue === 1) registerFile.PC = addr;\n            }\n        },\n        decode: ({ n = 0, f = 0, m = 0, i = 0, x = 0, y = 0, u = 0, w = 0, s = 0, a = 0 } = {}) => [\n            // value to use if branch is taken\n            // m: 0b00 === relative, 0b01 === address,\n            //    0b10 === BP, 0b11 ==== D\n            // i: 0b0 === absolute; 0b1 === indirect\n            // if w is 1, we're a CALL\n            ...(w === 1 ? [\n                TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.SP,\n                TASKS.PUSH_WORD | 2,\n                TASKS.SUB,\n                TASKS.DUP, // will leave SP on the stack after\n                // we pop it back into the register file\n                TASKS.POP_INTO_REGISTER | REGISTER_INDEX.SP,\n                TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,\n                TASKS.POP_WORD_INTO_MEMORY,\n            ] : []),\n            ...(s === 0 ? [\n                TASKS.PUSH_WORD | a\n            ] : [\n                    // make sure the address is sign extended\n                    TASKS.PUSH_WORD | (((a & 0x80) > 0 ? 0xFF00 : 0) | a)\n                ]),\n            ...(m === 0 ? [\n                // need this relative address turned into\n                // an absolute one, thanks!\n                TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,\n                TASKS.ADD\n            ] : []),\n            ...addressingTasks({ m, i, x, y, a }),\n            ...(m !== 0 ? [\n                    TASKS.GET_WORD_FROM_MEMORY\n            ] : []),\n            ...(u === 1 ? [\n                // unconditional, so don't check any flags\n                // as such, the address is currently on the stack\n                TASKS.POP_INTO_REGISTER | REGISTER_INDEX.PC,\n            ] : [\n                    // we have to test to see if we branch\n                    // value to use if branch isn't taken\n                    TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.PC,\n                    // if we're checking with NOT, SWAP!\n                    (n === 1 ? TASKS.SWAP : TASKS.NOP),\n                    // check flags to see which branch we should take\n                    TASKS.TEST_FLAG_IMM | f,\n                    //TASKS.GET_REGISTER_AND_PUSH | REGISTER_INDEX.FLAGS,\n                    //TASKS.PUSH_BYTE | (0b1 << f),\n                    //TASKS.AND,\n                    // if s0 is non-zero, we branch to the desired address\n                    TASKS.PICK,\n                    TASKS.POP_INTO_REGISTER | REGISTER_INDEX.PC\n                ])\n        ]\n    }\n});\n\n[\n    [\"loops_r\", \"1000_rrrr mmix_y..1 aaaa_aaaa\", 8],\n    [\"loop_r\", \"1000_rrrr mmix_y..0 aaaa_aaaa aaaa_aaaa\", 0],\n].forEach(\n    ([opcode, pattern, offset]) => {\n        OPCODES[opcode] = {\n            asm: `${opcode} $r $m $i $x $y $a`,\n            pattern,\n            operands: {\n                r: [27 - offset, 24 - offset],\n                m: [23 - offset, 22 - offset],\n                i: [21 - offset, 21 - offset],\n                x: [20 - offset, 20 - offset],\n                y: [19 - offset, 19 - offset],\n                s: [16 - offset, 16 - offset],\n                a: [15 - offset, 0]\n            },\n            description: \"Decrements register and branches if carry is not set\",\n            flags: \"xdshncvz\",\n            equiv: (opcode === \"loops_r\") \n                   ? ({ r, m, i, x, y, s, a}, {registerFile, memory, alu}) => {\n                    OPCODES[\"dec_r\"].equiv({r}, {registerFile, memory, alu}),\n                    OPCODES[\"brs_calls_f\"].equiv({n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a}, {registerFile, memory})\n                   }\n                   : ({ r, m, i, x, y, s, a}, {registerFile, memory, alu}) => {\n                    OPCODES[\"dec_r\"].equiv({r}, {registerFile, memory, alu}),\n                    OPCODES[\"br_call_f\"].equiv({n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a}, {registerFile, memory})\n                   },\n            decode: (\n                // LOOP(s) DECrements the selected register\n                // then, if CARRY is set, it branches to the\n                // desired address\n                (opcode === \"loops_r\")\n                ? ({ r = 0, m = 0, i = 0, x = 0, y = 0, s = 0, a = 0} = {}) => [\n                    ...OPCODES[\"dec_r\"].decode({r}),\n                    ...OPCODES[\"brs_calls_f\"].decode({n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a})\n                ] : ({ r = 0, m = 0, i = 0, x = 0, y = 0, s = 0, a = 0} = {}) => [\n                    ...OPCODES[\"dec_r\"].decode({r}),\n                    ...OPCODES[\"br_call_f\"].decode({n: 1, f: FLAGS_INDEX.CARRY, m, i, x, y, s, a})]\n            )\n        };\n    }\n);", "import { OPCODES, decodeToTasks, decode } from \"./opcodes.js\";\n\nexport const INVALID_INSTRUCTION = {\n    size: 0,\n    tasks: null\n};\n\nexport const INVALID_DECODE = {\n    size: 0,\n    opcode: null,\n    instruction: 0\n};\n\n\nconst opMap = [\n    null,      // size 0 insts don't exist\n    new Map(), // size 1 instructions\n    new Map(), // size 2\n    new Map(), // size 3\n    new Map()  // size 4\n];\n\n/**\n * @export\n * @param {number[]} bytes\n * @returns {*}\n */\nfunction _decodeInstruction(bytes) {\n    let complete = false;\n    let instruction = 0;\n    let byte = 0;\n    let size = 0\n    let idx = 0;\n    let opcode;\n    let op, p1;\n\n    while (!complete) {\n        byte = bytes[idx];\n        idx += 1;\n        if (byte === undefined) {\n            return INVALID_DECODE; // definitely not a valid instruction\n        }\n        instruction = (instruction << 8) | byte;\n        size = idx;\n        if (size > 4) {\n            return INVALID_DECODE; // no longer a valid instruction\n        }\n\n        op = (instruction >> ((size - 1) << 3)) & 0xFF;\n\n        if (size === 1) {\n            // one byte, single variant instructions\n            if (op === 0x00) { opcode = OPCODES.nop; }\n            if (op === 0x3E) { opcode = OPCODES.halt; }\n            if (op === 0x3F) { opcode = OPCODES.brk; }\n            if (op === 0xA0) { opcode = OPCODES.pushall; }\n            if (op === 0xA1) { opcode = OPCODES.popall; }\n            if (op === 0xA2) { opcode = OPCODES.pushf; }\n            if (op === 0xA3) { opcode = OPCODES.popf; }\n            if (op === 0xA4) { opcode = OPCODES.pushmm; }\n            if (op === 0xA5) { opcode = OPCODES.popmm; }\n            if (op === 0xA7) { opcode = OPCODES.ret; }\n\n            // one byte, operand instructions\n            if (op >= 0x40 && op <= 0x47) { opcode = OPCODES.trap_r; }\n            if (op >= 0xB0 && op <= 0xB7) { opcode = OPCODES.set_f; }\n            if (op >= 0xB8 && op <= 0xBF) { opcode = OPCODES.clr_f; }\n            if (op >= 0xC0 && op <= 0xCF) { opcode = OPCODES.inc_r; }\n            if (op >= 0xD0 && op <= 0xDF) { opcode = OPCODES.dec_r; }\n            if (op >= 0xE0 && op <= 0xEF) { opcode = OPCODES.push_r; }\n            if (op >= 0xF0 && op <= 0xFF) { opcode = OPCODES.pop_r; }\n        }\n\n        p1 = size > 1 ? ((instruction >> ((size - 2) << 3)) & 0xFF) : 0;\n\n        if (size === 2) {\n            if (op === 0x01) { opcode = OPCODES.add_ds; }\n            if (op === 0x02) { opcode = OPCODES.sub_ds; }\n            if (op === 0x03) { opcode = OPCODES.cmp_ds; }\n            if (op === 0x04) { opcode = OPCODES.and_ds; }\n            if (op === 0x05) { opcode = OPCODES.or_ds; }\n            if (op === 0x06) { opcode = OPCODES.test_ds; }\n            if (op === 0x07) { opcode = OPCODES.xor_ds; }\n            if (op === 0x08) { opcode = OPCODES.trap_b; }\n            if (op === 0x09) {\n                if (p1 >= 0x00 && p1 <= 0x0F) { opcode = OPCODES.not; }\n                if (p1 >= 0x10 && p1 <= 0x1F) { opcode = OPCODES.neg; }\n                if (p1 >= 0x20 && p1 <= 0x2F) { opcode = OPCODES.exc; }\n            }\n            if (op === 0x0A) { opcode = OPCODES.shl_rn; }\n            if (op === 0x0B) { opcode = OPCODES.shl_ds; }\n            if (op === 0x0C) { opcode = OPCODES.shr_rn; }\n            if (op === 0x0D) { opcode = OPCODES.shr_ds; }\n            if (op === 0x0E) { opcode = OPCODES.swap_ds; }\n            if (op === 0x0F) { opcode = OPCODES.mov_ds; }\n            if (op === 0x38) { opcode = OPCODES.enter_n; }\n            if (op === 0x39) { opcode = OPCODES.exit_n; }\n            if (op === 0xA8) { opcode = OPCODES.mul_ds; }\n            if (op === 0xA9) { opcode = OPCODES.div_ds; }\n            if (op === 0xAA) { opcode = OPCODES.mod_ds; }\n            if (op === 0xAB) { opcode = OPCODES.smul_ds; }\n            if (op === 0xAC) { opcode = OPCODES.sdiv_ds; }\n            if (op === 0xAD) { opcode = OPCODES.smod_ds; }\n            if (op === 0xAE) { \n                switch (p1) {\n                    case 0x00: opcode = OPCODES.fclr; break;\n                    case 0x10: opcode = OPCODES.fadd; break;\n                    case 0x11: opcode = OPCODES.fsub; break;\n                    case 0x12: opcode = OPCODES.fcmp; break;\n                    case 0x13: opcode = OPCODES.fmul; break;\n                    case 0x14: opcode = OPCODES.fmod; break;\n                    case 0x15: opcode = OPCODES.fdiv; break;\n                    case 0x16: opcode = OPCODES.fpow; break;\n                    case 0x17: opcode = OPCODES.fsqrt; break;\n                    case 0x18: opcode = OPCODES.fneg; break;\n                    case 0x19: opcode = OPCODES.fexc; break;\n                    case 0x1A: opcode = OPCODES.fint; break;\n                    case 0x1B: opcode = OPCODES.fabs; break;\n                    case 0x20: opcode = OPCODES.fsin; break;\n                    case 0x21: opcode = OPCODES.fcos; break;\n                    case 0x22: opcode = OPCODES.ftan; break;\n                    case 0x24: opcode = OPCODES.fasin; break;\n                    case 0x25: opcode = OPCODES.facos; break;\n                    case 0x26: opcode = OPCODES.fatan; break;\n                    case 0x30: opcode = OPCODES.fisnan; break;\n                    case 0x31: opcode = OPCODES.fisinf; break;\n                    case 0x32: opcode = OPCODES.flog2; break;\n                    case 0x33: opcode = OPCODES.flog10; break;\n                    case 0x70: opcode = OPCODES.fld0; break;\n                    case 0x71: opcode = OPCODES.fld1; break;\n                    case 0x72: opcode = OPCODES.flde; break;\n                    case 0x73: opcode = OPCODES.fldpi; break;\n                    default: \n                }\n            }\n            if (op === 0xAF) { opcode = OPCODES.wait; }\n            if (op >= 0x48 && op <= 0x4F && (op & 1) === 1) { opcode = OPCODES.add_db; }\n            if (op >= 0x50 && op <= 0x57 && (op & 1) === 1) { opcode = OPCODES.sub_db; }\n            if (op >= 0x58 && op <= 0x5F && (op & 1) === 1) { opcode = OPCODES.cmp_db; }\n            if (op >= 0x60 && op <= 0x67 && (op & 1) === 1) { opcode = OPCODES.and_db; }\n            if (op >= 0x68 && op <= 0x6F && (op & 1) === 1) { opcode = OPCODES.or_db; }\n            if (op >= 0x70 && op <= 0x77 && (op & 1) === 1) { opcode = OPCODES.test_db; }\n            if (op >= 0x78 && op <= 0x7F && (op & 1) === 1) { opcode = OPCODES.xor_db; }\n        }\n\n        if (size === 3) {\n            if (op >= 0x48 && op <= 0x4F && (op & 1) === 0) { opcode = OPCODES.add_dw; }\n            if (op >= 0x50 && op <= 0x57 && (op & 1) === 0) { opcode = OPCODES.sub_dw; }\n            if (op >= 0x58 && op <= 0x5F && (op & 1) === 0) { opcode = OPCODES.cmp_dw; }\n            if (op >= 0x60 && op <= 0x67 && (op & 1) === 0) { opcode = OPCODES.and_dw; }\n            if (op >= 0x68 && op <= 0x6F && (op & 1) === 0) { opcode = OPCODES.or_dw; }\n            if (op >= 0x70 && op <= 0x77 && (op & 1) === 0) { opcode = OPCODES.test_dw; }\n            if (op >= 0x78 && op <= 0x7F && (op & 1) === 0) { opcode = OPCODES.xor_dw; }\n            if (op >= 0x10 && op <= 0x1F && (op & 1) === 1 && p1 === 0x00) { opcode = OPCODES.ld_db; }\n            if (op === 0x30) { opcode = OPCODES.in_rp; }\n            if (op === 0x31) { opcode = OPCODES.out_rp; }\n            if ( op >= 0x80 && op <= 0x8F && (p1 & 1) === 1) { opcode = OPCODES.loops_r; }\n            if ( op >= 0x90 && op <= 0x9F && (p1 & 1) === 1) { opcode = OPCODES.brs_calls_f; }\n            if (op === 0xAE) { \n                switch (p1) {\n                    case 0x80: opcode = OPCODES.fldr; break;\n                    case 0x81: opcode = OPCODES.fldm; break;\n                    case 0x82: opcode = OPCODES.fldim; break;\n                    case 0x84: opcode = OPCODES.fstr; break;\n                    case 0x85: opcode = OPCODES.fstm; break;\n                    case 0x86: opcode = OPCODES.fstim; break;\n                    default:\n                }\n            }\n        }\n\n        if (size === 4) {\n            if (op >= 0x10 && op <= 0x1F && (op & 1) === 0 && p1 === 0x00) { opcode = OPCODES.ld_dw; }\n            if (op >= 0x10 && op <= 0x1F /*&& (op & 1) === 0*/ && p1 != 0x00) { opcode = OPCODES.ld; }\n            if (op >= 0x20 && op <= 0x2F ) { opcode = OPCODES.st; }\n            if ( op >= 0x80 && op <= 0x8F && (p1 & 1) === 0) { opcode = OPCODES.loop_r; }\n            if ( op >= 0x90 && op <= 0x9F && (p1 & 1) === 0) { opcode = OPCODES.br_call_f; }\n        }\n\n        complete = opcode !== undefined;\n\n    }\n    if (!complete) {\n        return INVALID_DECODE;\n    }\n    return { size, opcode, instruction };\n    //return { size, tasks: decodeToTasks(instruction, opcode) };\n\n}\n\n// decode size 1 instructions\nfor (let b = 0; b < 256; b++) {\n    const r = _decodeInstruction([b]);\n    if (r !== INVALID_DECODE) {\n        opMap[r.size].set(b, r.opcode);\n    }\n}\n// decode size 2 instructions and above\nfor (let b = 0; b < 256; b++) {\n    for (let bb = 0; bb < 256; bb++) {\n        const op = (b << 8) | bb;\n        // size 2\n        let r = _decodeInstruction([b, bb]);\n        if (r !== INVALID_DECODE) { opMap[2].set(op, r.opcode); }\n        // size 3\n        r = _decodeInstruction([b, bb, 0x00]);\n        if (r !== INVALID_DECODE) { opMap[3].set(op, r.opcode); }\n        // size 4\n        r = _decodeInstruction([b, bb, 0x00, 0x00]);\n        if (r !== INVALID_DECODE) { opMap[4].set(op, r.opcode); }\n    }\n}\n\nexport const necessaryBytesForInstruction = bytes => {\n    let op = 0, idx = 0;\n    const len = bytes.length;\n    if (len === 0) return -1;\n\n    op = bytes[idx++];\n    if (opMap[1].has(op)) return 1;\n    if (idx >= len) return -1;\n\n    op = (op << 8) | bytes[idx++];\n    if (opMap[2].has(op)) return 2;\n    if (idx >= len) return -1;\n\n    idx++;\n    if (opMap[3].has(op)) return 3;\n    if (idx >= len) return -1;\n\n    idx++;\n    if (opMap[4].has(op)) return 4;\n    if (idx >= len) return -1;\n\n    return -1;\n}\n\nconst __decodeInstruction = bytes => {\n    let op = 0, idx = 0;\n    let opcode = null, instruction = 0;\n    const len = bytes.length;\n    if (len === 0) return INVALID_DECODE;\n\n    op = bytes[idx++];\n    instruction = op;\n    // check size 1\n    if (opcode = opMap[1].get(op)) return { size: 1, opcode, instruction };\n    if (idx >= len) return INVALID_DECODE;\n\n    op = (op << 8) | bytes[idx++];\n    instruction = op;\n    if (opcode = opMap[2].get(op)) return { size: 2, opcode, instruction };\n    if (idx >= len) return INVALID_DECODE;\n\n    instruction = (instruction << 8) | bytes[idx++];\n    if (opcode = opMap[3].get(op)) return { size: 3, opcode, instruction };\n    if (idx >= len) return INVALID_DECODE;\n\n    instruction = (instruction << 8) | bytes[idx++];\n    if (opcode = opMap[4].get(op)) return { size: 4, opcode, instruction };\n    if (idx >= len) return INVALID_DECODE;\n\n    return INVALID_DECODE;\n}\n\nexport const decodeInstruction = (bytes, useEquiv = true) => {\n    const r = __decodeInstruction(bytes);\n    if (r !== INVALID_DECODE) {\n        return { size: r.size, tasks: decode(r.instruction, r.opcode, useEquiv) };\n    }\n    return INVALID_INSTRUCTION;\n}\n", "import { ALU } from \"./ALU.js\";\nimport { FPU } from \"./FPU.js\";\nimport { Memory } from \"./Memory.js\";\nimport { Bus } from \"./Bus.js\";\nimport { SystemBus } from \"./SystemBus.js\";\nimport { IOBus } from \"./IOBus.js\";\nimport { Controller } from \"./Controller.js\";\nimport { RegisterFile } from \"./RegisterFile.js\";\nimport { decodeInstruction, necessaryBytesForInstruction } from \"../isa/decodeInstruction.js\";\nimport { executeTask } from \"../isa/tasks.js\";\n\nconst _alu = Symbol(\"_alu\");\nconst _fpu = Symbol(\"_fpu\");\nconst _registerFile = Symbol(\"_registerFile\");\n\nconst _controller = Symbol(\"_controller\");\nconst _memory = Symbol(\"_memory\");\nconst _systemBus = Symbol(\"_systemBus\");\nconst _ioBus = Symbol(\"_ioBus\");\nconst _clock = Symbol(\"_clock\");\nconst _debug = Symbol(\"_debug\");\n\nconst _taskQueue = Symbol(\"_taskQueue\");\nconst _stack = Symbol(\"_stack\");\nconst _cache = Symbol(\"_cache\")\n\nconst _pendingServiceRequest = Symbol(\"_pendingServiceRequest\");\n\nconst MAX_CACHE = 32;\nconst MAX_TASKS = 256;\n\nexport class Processor {\n\n    /**\n     * @param {Object} config  options\n     * @param {Memory} config.memory\n     * @param {SystemBus} config.systemBus\n     * @param {Controller} config.controller\n     * @param {Bus} config.clock\n     * @param {Bus} [config.debug=null]\n     */\n    constructor({memory, systemBus, ioBus, clock, debug = null} = {}) {\n        this[_alu] = new ALU();\n        this[_fpu] = new FPU();\n        this[_registerFile] = new RegisterFile();\n\n        this[_memory] = memory;\n        this[_systemBus] = systemBus;\n        this[_systemBus].map = this[_registerFile].MM;\n        this[_ioBus] = ioBus;\n        this[_clock] = clock;\n        this[_debug] = debug;\n\n        this[_pendingServiceRequest] = -1;\n\n        this[_stack] = []; //new Stack(8, 4);\n\n        this[_taskQueue] = [];\n        this[_cache] = [];\n\n        this.useEquiv = true;\n\n        this.tick = this.tick.bind(this);\n        this.clock.addReceiver(this.tick);\n\n        this.serviceDevices = this.serviceDevices.bind(this);\n        ioBus.irqSignalBus.addReceiver(this.serviceDevices);\n\n        this.stats = {\n            ticks: 0,\n            insts: 0,\n            misses: 0,\n            decodes: 0,\n            reads: 0,\n            tasks: 0\n        };\n\n        this._context = {\n            stack: this[_stack],\n            registerFile: this[_registerFile],\n            alu: this[_alu],\n            fpu: this[_fpu],\n            memory: this[_memory],\n            ioBus: this[_ioBus]\n        };\n\n        this.reset();\n    }\n\n    reset() {\n        this[_stack] = []; //new Stack(8, 4);\n        this[_taskQueue] = [];\n        this[_cache] = [];\n        this[_pendingServiceRequest] = -1;\n        this[_registerFile].PC = 0x0FF00;\n        this[_registerFile].MP = 0x0FF00;\n        this[_registerFile].BP = 0x02000;\n        this[_registerFile].SP = 0x02000;\n        this[_registerFile].MM = 0b0111110001000001; // page 3 = page 31, page 2 = page 2, page 1 = page 1\n        this.registers.SINGLE_STEP = 0;\n        this.registers.INTERRUPT_DISABLE = 1;\n    }\n\n    resetStats() {\n        this.stats.ticks = 0;\n        this.stats.insts = 0;\n        this.stats.misses = 0;\n        this.stats.decodes = 0;\n        this.stats.reads = 0;\n        this.stats.tasks = 0;\n    }\n\n    /**\n     * @type {ALU}\n     * @readonly\n     * @memberof Processor\n     */\n    get alu() { return this[_alu]; }\n\n    get fpu() { return this[_fpu]; }\n\n    /**\n     * @type {RegisterFile}\n     * @readonly\n     * @memberof Processor\n     */\n    get registers() { return this[_registerFile]; }\n\n    /**\n     * @type {Memory}\n     * @readonly\n     * @memberof Processor\n     */\n    get memory() { return this[_memory]; }\n\n    /**\n     * @type {SystemBus}\n     * @readonly\n     * @memberof Processor\n     */\n    get systemBus() { return this[_systemBus]; }\n\n    /**\n     * @type {IOBus}\n     * @readonly\n     * @memberof Processor\n     */\n    get ioBus() { return this[_ioBus]; }\n\n    /**\n     * @type {Controller}\n     * @readonly\n     */\n    get controller() { return this[_controller]; }\n\n    /**\n     * @type {Bus}\n     * @readonly\n     * @memberof Processor\n     */\n    get clock() { return this[_clock]; }\n\n    /**\n     * @type {Bus}\n     * @readonly\n     * @memoberOf Processor\n     */\n    get debug() { return this[_debug]; }\n\n    get internalState() {\n        return {\n            pc: this.registers.PC,\n            mp: this.registers.MP,\n            cache: this[_cache],\n            stack: this[_stack],\n            tasks: this[_taskQueue],\n            stats: this.stats\n        };\n    }\n\n    /**\n     * @param {Controller} controller \n     */\n    registerController(controller) {\n        this[_controller] = controller;\n    }\n\n    /**\n     * Injects bytes into the fetch cache\n     *\n     * @param {number} byte byte to inject\n     * @returns {void}\n     * @memberof Processor\n     */\n    inject(addr, byte) {\n        const cache = this[_cache];\n        cache.push(byte);\n        this.stats.reads++;\n    }\n\n    /**\n     * Forces a jump to the specified address\n     * @param {number} addr the address to jump to\n     * @param {boolean} [call=false] if true, acts as a call\n     */\n    jump(addr, call = false) {\n        // throw away the prefetch and task queue\n        this[_cache] = [];\n        this[_taskQueue] = [];\n\n        this.stats.misses++;\n\n        // if it's a call, simulate the push\n        if (call) {\n            this.registers.SP -= 2;\n            this.memory.writeWord(this.registers.SP, this.registers.PC);\n        }\n\n        // set the address\n        this.registers.PC = addr;\n        this.registers.MP = addr;\n    }\n\n    _fetch() {\n        const memory = this.memory;\n        let mp = this.registers.MP;\n        let bytes = [ memory.readByte(mp++) ];\n        let nbfi = necessaryBytesForInstruction(bytes);\n\n        while ( (nbfi < 0 || bytes.length < nbfi) && bytes.length < 5 ) {\n            bytes.push(memory.readByte(mp++));\n            nbfi = necessaryBytesForInstruction(bytes);\n        }\n\n        if (nbfi < 0) {\n            // couldn't fetch a valid instruction. We'll try again\n            // with the next byte\n            mp = this.registers.MP + 1;\n        }\n\n        this[_cache] = bytes; \n        this.registers.PC = mp;\n        this.registers.MP = mp;\n    }\n\n    _decode() {\n        const cache = this[_cache];\n        const {tasks} = decodeInstruction(cache, this.useEquiv);\n        if (tasks) {\n            this.stats.decodes++;\n            this[_taskQueue] = tasks;\n        } else {\n            this[_taskQueue] = [];\n        }\n\n    }\n\n    _execute() {\n        const tasks = this[_taskQueue];\n        let pc = this.registers.PC;\n        let mp = this.registers.MP;\n        let mm = this.registers.MM;\n        let jump = false;\n\n        // assert MM on the system bus in case it's changed\n        this[_systemBus].map = this[_registerFile].MM;\n\n        this.stats.insts++;\n\n        if (Array.isArray(tasks)) {\n            for (let i = 0, l = tasks.length; i < l; i++) {\n                this.stats.tasks++;\n                executeTask(tasks[i], this._context);\n            }\n        } else {\n            this.stats.tasks++;\n            tasks(this._context); \n        }\n\n        if (this.registers.PC !== pc) {\n            // JUMP!\n            jump = true;\n            this.stats.misses++;\n            pc = this.registers.PC;\n            mp = this.registers.PC;\n        }\n\n        if (this.debug) {\n            // see if we've asserted the SINGLE STEP line AND\n            // the INTERRUPT DISABLE line\n            // if so, we see if PC has changed\n            // send a signal on the debug line when\n            // we've encountered a BRK or are in single step\n            // mode.\n            if (this.registers.SINGLE_STEP && this.registers.INTERRUPT_DISABLE) {\n                this.debug.signal();\n            }\n        }\n\n        this.registers.PC = pc;\n        this.registers.MP = mp;\n        this[_cache] = [];\n        this[_taskQueue] = [];\n    }\n\n    serviceDevices() {\n        const ioBus = this.ioBus;\n        if (ioBus.irqServiceBus.value !== 0 && !this.registers.INTERRUPT_DISABLE) {\n            const whichDevice = ioBus.irqSignalBus.value;\n            if (this[_pendingServiceRequest] > -1 && this[_pendingServiceRequest] !== whichDevice) {\n                throw new Error(\"Multiple services at the same time!\");\n            }\n            this[_pendingServiceRequest] = whichDevice;\n        }\n    }\n\n    _reallyServiceDevices() {\n        const whichDevice = this[_pendingServiceRequest];\n        if (whichDevice < 0) return;\n        this[_pendingServiceRequest] = -1;\n\n        const trapToTrigger = 0x80 | (whichDevice << 3);\n        const trapVectorLookup = trapToTrigger << 1;\n        const trapTarget = this.memory.readWord(trapVectorLookup);\n        if (!this.registers.INTERRUPT_DISABLE) this.registers.SINGLE_STEP = 0;\n        this.registers.STATUS = (this.registers.STATUS & 0x00FF) | (trapToTrigger << 8);\n        this.jump(trapTarget, true);\n        this.controller.ackInterrupt(whichDevice);\n\n    }\n\n    tick() {\n        this.stats.ticks++;\n        if (this.registers.SINGLE_STEP && !this.registers.INTERRUPT_DISABLE) {\n            // in HALT mode\n            this._reallyServiceDevices();\n            return;\n        }\n        this._fetch();\n        this._decode();\n        this._execute();\n        this._reallyServiceDevices();\n    }\n}", "export default typeof SharedArrayBuffer !== \"undefined\";", "import { Memory } from \"../core/Memory.js\";\nimport { SystemBus } from \"../core/SystemBus.js\";\nimport { Bus } from \"../core/Bus.js\";\nimport { IOBus } from \"../core/IOBus.js\";\nimport { Processor } from \"../core/Processor.js\";\nimport { Controller } from \"../core/Controller.js\";\n\nimport supportsSharedArrayBuffer from \"../util/supportsSharedArrayBuffer.js\";\n\nexport const TIMING_METHODS = {\n    AUTO: 0,\n    INTERVAL: 1,\n    TIMEOUT: 2,\n    RAF: 3,\n    BLOCKING: 4,\n    FIXED: 5,\n    SENTINEL: 6\n};\n\nexport const SHARED_MEMORY = {\n    AUTO: 0,\n    NOT_SHARED: 1,\n    SHARED: 2\n};\n\nconst detectedTimingMethod = typeof requestAnimationFrame !== \"undefined\"\n    ? TIMING_METHODS.RAF\n    : TIMING_METHODS.TIMEOUT;\n\nconst _clock = Symbol(\"_clock\");\nconst _processor = Symbol(\"_processor\");\nconst _memory = Symbol(\"_memory\");\nconst _ioBus = Symbol(\"_ioBus\");\nconst _systemBus = Symbol(\"_systemBus\");\nconst _controller = Symbol(\"_controller\");\nconst _debug = Symbol(\"_debug\");\nconst _stopSignal = Symbol(\"_stopSignal\");\nconst _runID = Symbol(\"_runID\");\nconst _sentinel = Symbol(\"_sentinel\");\n\nexport class Computer {\n    /**\n     * @param {Object} config\n     * @param {Performance} config.performance the performance class to use\n     * @param {boolean} [config.debug=false] if true, slice stops on single step mode\n     * @param {number} [config.sliceTime=16] the amount of time to run, per slice\n     * @param {number} [config.sliceGranularity=4095] the granularity when checking for slice timing\n     * @param {number} [config.timingMethod=0] the timing method to use\n     * @param {SharedArrayBuffer} [config.sentinel] a shared array buffer for timing method Sentinel\n     */\n    constructor({ performance, \n        debug = false, \n        sliceTime = 16, \n        sliceGranularity = 0x0FFF, \n        timingMethod = TIMING_METHODS.AUTO, \n        shared = SHARED_MEMORY.AUTO, \n        stats,\n        sentinel\n    } = {}) {\n\n        const clock = new Bus(1, 0b1);\n        const systemBus = new SystemBus();\n\n        let realShared = false;\n        switch (shared) {\n            case SHARED_MEMORY.AUTO:\n                realShared = supportsSharedArrayBuffer;\n                break;\n            case SHARED_MEMORY.SHARED:\n                realShared = true;\n                break;\n            default:\n            case SHARED_MEMORY.NOT_SHARED:\n                realShared = false;\n                break;\n        }\n\n        const memory = new Memory({ systemBus, shared: realShared });\n        const ioBus = new IOBus();\n        const debugLine = debug ? new Bus(1, 0b1) : null;\n        const processor = new Processor({ memory, systemBus, ioBus, clock, debug: debugLine });\n        const controller = new Controller({processor: processor, ioBus, clock});\n\n        this.stats = {\n            time: 0,\n            ticks: 0,\n            slices: 0,\n            timeThisSlice: 0,\n            ticksThisSlice: 0,\n            ticksLastSlice: 0,\n            processorStats: { ... processor.stats },\n            processorStatsLastSlice: { ... processor.stats},\n            processorStatsThisSecond: { ... processor.stats },\n            processorStatsLastSecond: { ... processor.stats },\n            aluStats: { ... processor.alu.stats },\n            aluStatsLastSlice: { ... processor.alu.stats },\n            aluStatsThisSecond: { ... processor.alu.stats },\n            aluStatsLastSecond: { ... processor.alu.stats },\n            timeSinceLastSecond: 0,\n        };\n\n        this._stats = stats;\n\n        this[_stopSignal] = false;\n        if (debugLine) {\n            debugLine.addReceiver(() => {\n                // stop any interval-based execution\n                this[_stopSignal] = true; // <-- kill any executing routines.\n                this.stop();\n            });\n        }\n\n\n        this[_clock] = clock;\n        this[_systemBus] = systemBus;\n        this[_memory] = memory;\n        this[_ioBus] = ioBus;\n        this[_debug] = debugLine;\n        this[_processor] = processor;\n        this[_controller] = controller;\n        this[_sentinel] = sentinel ? new Uint8Array(sentinel) : null;\n\n\n        this._options = {\n            sliceTime,\n            sliceGranularity,\n            timingMethod: timingMethod === TIMING_METHODS.AUTO ? detectedTimingMethod : timingMethod,\n            performance\n        };\n\n        /* private */\n        this[_runID] = null;\n    }\n\n    /**\n     * @type {Bus}\n     */\n    get clock() {\n        return this[_clock];\n    }\n\n    /**\n     * @type {SystemBus}\n     */\n    get systemBus() {\n        return this[_systemBus];\n    }\n\n    /**\n     * @type {Memory}\n     */\n    get memory() {\n        return this[_memory];\n    }\n\n    /**\n     * @type {IOBus}\n     */\n    get ioBus() {\n        return this[_ioBus];\n    }\n\n    /**\n     * @type {Controller}\n     */\n    get controller() {\n        return this[_controller];\n    }\n\n    /**\n     * @type {Bus}\n     */\n    get debugLine() {\n        return this[_debug];\n    }\n\n    /**\n     * @type {Processor}\n     */\n    get processor() {\n        return this[_processor];\n    }\n\n    reset() {\n        this.memory.reset(true);\n        this.processor.reset();\n    }\n\n    /**\n     * Step the computer by sending a tick.\n     *\n     * NOTE: This is **not** the same as single-stepping an instruction. An instruction\n     * may in fact require multiple\n     */\n    tick() {\n        this.stats.ticksThisSlice++;\n        this.clock.signal();\n    }\n\n    /**\n     * Attempt to step the computer by a single instruction\n     * This can only be done if the computer has been initialized in debug mode\n     * If it hasn't been, we'll do the same thing as a clock signal (task step)\n     */\n    step() {\n        if (this.debug) {\n            if (this.running) this.stop();\n            this.processor.registers.INTERRUPT_DISABLE = 1;\n            this.processor.registers.SINGLE_STEP = 1;\n            this.runSlice();\n            this._stopSignal = false;\n        } else {\n            this.tick();  // without the debug signal, we can't effectively single step\n            this._updateStatsAfterSlice();\n        }\n    }\n\n    /**\n     * Run the computer in slice mode until the desired timeout has been passed\n     * If the computer is in debug mode, a BRK instruction will trigger single-step mode\n     * and stop execution early. If the computer is already in single step mode,\n     * only a single instruction will execute\n     */\n    runSlice() {\n        if (this._stats) this._stats.begin();\n        const { sliceTime: timeout, sliceGranularity: granularity, performance, timingMethod} = this._options;\n        this[_stopSignal] = false;       // clear any stop signal for this slice\n        this.stats.slices++;\n        const start = performance.now();\n        if (timingMethod === TIMING_METHODS.SENTINEL) {\n            while (!this[_stopSignal]) {\n                this.tick();\n                // check for a sentinel\n                if (Atomics.load(this[_sentinel], 0) !== 0) {\n                    Atomics.store(this[_sentinel], 0, 0); // clear the sentinel\n                    break;\n                }\n            }\n        }\n        else if (timeout > 0 && timingMethod !== TIMING_METHODS.BLOCKING) {\n            let now = start;\n            let slice = now;\n            let delta = 0;\n            let c = 0;\n            if (timingMethod === TIMING_METHODS.FIXED) {\n                let ticks = 0;\n                while (!this[_stopSignal] && (ticks++ <= granularity)) {\n                    this.tick();\n                }\n            } else {\n                while (!this[_stopSignal]) {\n                    this.tick();\n                    if (c++ >= granularity) {\n                        c = 0;\n                        slice = now;\n                        now = performance.now();\n                        delta = now - slice;\n                        if ((now + delta) >= (start + timeout)) {\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n            while (!this[_stopSignal]) {\n                this.tick();\n            }\n        }\n        if (this[_stopSignal]) {\n            this.stop();\n        }\n        const end = performance.now();\n        const totalTime = end - start;\n        this.stats.timeThisSlice = totalTime;\n        this.stats.time += totalTime;\n        this._updateStatsAfterSlice();\n        if (this._stats) this._stats.end();\n        return totalTime;             // used for next slice timing\n    }\n\n    /**\n     * Run the computer indefinitely using the configured timing method.\n     */\n    run() {\n        const {timingMethod, sliceTime} = this._options;\n        const realTimingMethod = timingMethod === TIMING_METHODS.FIXED ? detectedTimingMethod : timingMethod;\n\n        if (this.running) this.stop();\n\n        switch (realTimingMethod) {\n            case TIMING_METHODS.SENTINEL: {\n                this[_runID] = setTimeout((function slice() {\n                    this.runSlice();\n                    if (this.running) {\n                        this[_runID] = setTimeout(slice.bind(this), 0);\n                    }\n                }).bind(this), 0);\n                break;\n            }\n            case TIMING_METHODS.TIMEOUT: {\n                this[_runID] = setTimeout((function slice() {\n                    const timeTaken = this.runSlice();\n                    if (this.running) {\n                        this[_runID] = setTimeout(slice.bind(this), sliceTime - timeTaken);\n                    }\n                }).bind(this), 0 );     // may as well start as soon as possible\n                break;\n            }\n            case TIMING_METHODS.RAF: {\n                this[_runID] = requestAnimationFrame((function slice() {\n                    const timeTaken = this.runSlice();\n                    if (this.running) {\n                        this[_runID] = requestAnimationFrame(slice.bind(this));\n                    }\n                }).bind(this));\n                break;\n            }\n            case TIMING_METHODS.BLOCKING: {\n                this[_runID] = 1; // convince this.running we're really running\n                this.runSlice();\n                break;\n            }\n            case TIMING_METHODS.INTERVAL:\n            default: {\n                this[_runID] = setInterval(() => {\n                    this.runSlice();\n                }, sliceTime + 1); // give it time to breathe\n            }\n        }\n    }\n    stop() {\n        const {timingMethod} = this._options;\n        const realTimingMethod = timingMethod === TIMING_METHODS.FIXED ? detectedTimingMethod : timingMethod;\n        this[_stopSignal] = true;        // stop any running slice\n        if (this[_runID]) {\n            switch (realTimingMethod) {\n                case TIMING_METHODS.SENTINEL:\n                case TIMING_METHODS.BLOCKING:\n                    break;\n                case TIMING_METHODS.TIMEOUT: {\n                    clearTimeout(this[_runID]);\n                    break;\n                }\n                case TIMING_METHODS.RAF: {\n                    cancelAnimationFrame(this[_runID]);\n                    break;\n                }\n                case TIMING_METHODS.INTERVAL:\n                default: {\n                    clearInterval(this[_runID]);\n                }\n            }\n        }\n        this[_runID] = null;\n    }\n    get running() {\n        return this[_runID] !== null;\n    }\n\n    get stepping() {\n        return this.processor.registers.SINGLE_STEP;\n    }\n\n    get options() {\n        return this._options;\n    }\n\n    set options(options) {\n        const running = this.running;\n        this.stop();\n        this._options = options;\n        if (running) {\n            this.run();\n        }\n    }\n\n    _updateStatsAfterSlice() {\n        this.stats.ticksLastSlice = this.stats.ticksThisSlice;\n        this.stats.ticks += this.stats.ticksThisSlice;\n        this.stats.ticksThisSlice = 0;\n        this.stats.timeSinceLastSecond += this.stats.timeThisSlice;\n        \n        // update processor stats\n        for (let [k, v] of Object.entries(this.processor.stats)) {\n            this.stats.processorStats[k] += v;\n            this.stats.processorStatsThisSecond[k] += v;\n        }\n        this.stats.processorStatsLastSlice = { ... this.processor.stats };\n\n        // update alu stats\n        for (let [k, v] of Object.entries(this.processor.alu.stats)) {\n            this.stats.aluStats[k] += v;\n            this.stats.aluStatsThisSecond[k] += v;\n        }\n        this.stats.aluStatsLastSlice = { ... this.processor.alu.stats };\n\n        if (this.stats.timeSinceLastSecond >= 1000) {\n            this.stats.processorStatsLastSecond = { ... this.stats.processorStatsThisSecond };\n            for (let [k, v] of Object.entries(this.processor.stats)) {\n                this.stats.processorStatsThisSecond[k] = 0;\n            }\n            this.stats.aluStatsLastSecond = { ... this.stats.aluStatsThisSecond };\n            for (let [k, v] of Object.entries(this.processor.alu.stats)) {\n                this.stats.aluStatsThisSecond[k] = 0;\n            }\n            this.stats.timeSinceLastSecond -= 1000;\n        }\n\n        this.processor.resetStats();\n        this.processor.alu.resetStats();\n    }\n}", "export const REGISTERS = {\n    A: 0,\n    AL: 1,\n    B: 2,\n    BL: 3,\n    C: 4,\n    CL: 5,\n    D: 6,\n    DL: 7,\n    X: 8,\n    XL: 9,\n    Y: 10,\n    YL: 11,\n    BP: 12,\n    BPL: 13,\n    SP: 14,\n    SPL: 15\n};\n\nexport const REGISTER_NAMES = Object.entries(REGISTERS).reduce((o, [k, v]) => (o[v] = k, o), {});\n\nexport const FLAGS = {\n    ZERO: 0,\n    OVERFLOW: 1,\n    CARRY: 2,\n    NEGATIVE: 3,\n    SINGLE_STEP: 4,\n    INTERRUPT_SERVICE: 5,\n    INTERRUPT_DISABLE: 6,\n    EXCEPTION: 7,\n};\nexport const FLAG_NAMES = [ \"Z\", \"V\", \"C\", \"N\", \"SS\", \"IS\", \"ID\", \"EX\" ];\n\nexport const OPCODES = {\n    NOP: \"nop\",\n    ADD: \"add\",\n    AND: \"and\",\n    CMP: \"cmp\",\n    SUB: \"sub\",\n    OR:  \"or\",\n    TEST:\"test\",\n    XOR: \"xor\",\n    TRAP:\"trap\",\n    NOT: \"not\",\n    NEG: \"neg\",\n    EXC: \"exc\",\n    SHL: \"shl\",\n    SHR: \"shr\",\n    SWAP: \"swap\",\n    MOV: \"mov\",\n    LD: \"ld\",\n    ST: \"st\",\n    INC: \"inc\",\n    IN: \"in\",\n    OUT: \"out\",\n    ENTER: \"enter\",\n    EXIT: \"exit\",\n    BRK: \"brk\",\n    LOOP: \"loop\", LOOPS: \"loops\",\n    BR: \"br\", BRS: \"brs\",\n    CALL: \"call\", CALLS: \"calls\",\n    PUSHALL: \"pushall\",\n    POPALL: \"popall\",\n    PUSHF: \"pushf\",\n    POPF: \"popf\",\n    PUSHMM: \"pushmm\",\n    POPMM: \"popmm\",\n    PUSH: \"push\",\n    POP: \"pop\",\n    RET: \"ret\",\n    MUL: \"mul\",\n    MOD: \"mod\",\n    DIV: \"div\",\n    SMUL: \"smul\",\n    SMOD: \"smod\",\n    SDIV: \"sdiv\",\n    SET: \"set\",\n    CLR: \"clr\",\n    DEC: \"dec\",\n    HALT: \"halt\",\n    WAIT: \"wait\",\n        FCLR:   \"fclr\",\n        FLDR:   \"fldr\",\n        FLDM:   \"fldm\",\n        FLDIM:  \"fldim\",\n        FSTR:   \"fstr\",\n        FSTM:   \"fstm\",\n        FSTIM:  \"fstim\",\n        FADD:   \"fadd\",\n        FSUB:   \"fsub\",\n        FCMP:   \"fcmp\",\n        FMUL:   \"fmul\",\n        FDIV:   \"fdiv\",\n        FMOD:   \"fmod\",\n        FPOW:   \"fpow\",\n        FSQRT:  \"fsqrt\",\n        FABS:   \"fabs\",\n        FSIN:   \"fsin\",\n        FCOS:   \"fcos\",\n        FTAN:   \"ftan\",\n        FASIN:  \"fasin\",\n        FACOS:  \"facos\",\n        FATAN:  \"fatan\",\n        FNEG:   \"fneg\",\n        FEXC:   \"fexc\",\n        FINT:   \"fint\",\n        FISNAN: \"fisnan\",\n        FISINF: \"fisinf\",\n        FLOG2:  \"flog2\",\n        FLOG10: \"flog10\",\n        FLD0:   \"fld0\",\n        FLD1:   \"fld1\",\n        FLDE:   \"flde\",\n        FLDPI:  \"fldpi\",\n};\n\nexport const DIRECTIVES = {\n    SEGMENT: \".segment\",\n    BYTE: \".byte\",\n    WORD: \".word\",\n    STRING: \".string\",\n    APPEND: \".append\",\n    CONST: \".const\",\n    IMPORT: \".import\",\n    MACRO: \".macro\",\n    DEFINE: \".define\",\n};\n\nexport const TOKENS = {\n    COMMENT: \"comment\",\n    STRING: \"string\",\n    INTEGER: \"integer\",\n    IDENTIFIER: \"identifier\",\n    REGISTER: \"register\",\n    FLAG: \"flag\",\n    EXPRESSION: \"expression\",\n    BINARY_EXPRESSION: \"binary.expression\",\n    UNARY_EXPRESSION: \"unary.expression\",\n    INSTRUCTION: \"instruction\",\n    SEGMENT_DIRECTIVE: \"directive.segment\",\n    NAMESPACE_DIRECTIVE: \"directive.namespace\",\n    CONST_DIRECTIVE: \"directive.const\",\n    IMPORT_DIRECTIVE: \"directive.import\",\n    BYTE_DIRECTIVE: \"directive.byte\",\n    WORD_DIRECTIVE: \"directive.word\",\n    STRING_DIRECTIVE: \"directive.string\",\n    LABEL: \"label\",\n    MEMORY: \"memory\",\n    BLOCK: \"block\",\n    FUNCTION: \"function\",\n    MACRO_DIRECTIVE: \"directive.macro\",\n    MACRO_EXPANSION: \"expand.macro\",\n    CONDITIONAL: \"conditional\"\n};\n\nexport const MODES = {\n    IMMEDIATE: 0b00,\n    ABSOLUTE: 0b01,\n    BP: 0b10,\n    D: 0b11\n};", "import { REGISTER_NAMES, FLAG_NAMES, OPCODES } from \"./constants.js\";\n\nconst toNum = (n, width, base) => \n    ((n < 0) ? \"-\" : \"\") +\n    (base === 16 ? \"0x\" : base === 2 ? \"0b\" : \"\") + \n    (Math.abs(n) || 0).toString(base).padStart(base === 16 ? width : base === 2 ? width*8 : 0, \"0\")\n    .toUpperCase();\n\nconst address = ( {size, instruction, opcode, base} = {} ) => {\n    const modeByte = size === 3 ? (instruction & 0x0000FF00) >>> 8 : (instruction & 0x00FF0000) >>> 16;\n    const reg = size === 3 ? (instruction & 0x000F0000) >>> 16 : (instruction & 0x0F000000) >>> 24;\n    const flg = size === 3 ? (instruction & 0x00070000) >>> 16 : (instruction & 0x07000000) >>> 24;\n    const cond = size === 3 ? (instruction & 0x000F0000) >>> 16 : (instruction & 0x0F000000) >>> 24;\n    const negate = !!(size === 3 ? (instruction & 0x00080000) : (instruction & 0x08000000));\n    const indirect =     !!(modeByte & 0b00100000);\n    const indexByX =     !!(modeByte & 0b00010000);\n    const indexByY =     !!(modeByte & 0b00001000);\n    const addressingMode = (modeByte & 0b11000000) >> 6;\n    const short =        !!(modeByte & 0b00000001);\n    const which =        !!(modeByte & 0b00000010);\n    const always =       !!(modeByte & 0b00000100);\n    const canBeRelative = !(opcode === OPCODES.LD || opcode === OPCODES.ST );\n    const usesFlags = opcode === OPCODES.BR || opcode === OPCODES.BRS || opcode === OPCODES.CALL || opcode === OPCODES.CALLS;\n    const isLoadOrStore = opcode === OPCODES.LD || opcode === OPCODES.ST;\n    let v = size === 3 ? (instruction & 0x000000FF) : (instruction & 0x0000FFFF);\n    if (isLoadOrStore) v |= size === 3 ? (instruction & 0x00000700) : (instruction & 0x00070000);\n\n    const relV19 = -(v & 0x40000) + (v & 0x3FFFF);\n    const relV16 = -(v & 0x8000) + (v & 0x7FFF);\n    const relV8 = -(v & 0x80) + (v & 0x7F);\n\n    let out = `${opcode}`;\n    if (usesFlags) {\n        if (!always) {\n            out = `${out} ${negate ? \"!\" : \"\"}${FLAG_NAMES[flg]},`;\n        } else {\n            switch (cond) {\n                case 0b0000:\n                    break;\n                case 0b0010:\n                    out = `${out} .lt,`; break;\n                case 0b0011:\n                    out = `${out} .lte,`; break;\n                case 0b0100:\n                    out = `${out} .gt,`; break;\n                case 0b0101:\n                    out = `${out} .gte,`; break;\n                case 0b1010:\n                    out = `${out} .blo,`; break;\n                case 0b1011:\n                    out = `${out} .ble,`; break;\n                case 0b1100:\n                    out = `${out} .abv,`; break;\n                case 0b1101:\n                    out = `${out} .abe,`; break;\n                default:\n                    out = `${out} .???,`;\n            }\n        }\n    }  else {\n        if (opcode === OPCODES.LD || opcode === OPCODES.LOOP || opcode === OPCODES.LOOPS) {\n            out = `${out} ${REGISTER_NAMES[reg]},`;\n        }\n    }\n    switch (addressingMode) {\n        case 0b00:\n            if (indirect) {\n                out = `${out} ?${toNum(v, (size - 2) * 2, base)}?`;\n            } else {\n                if (opcode === OPCODES.CALLS || opcode === OPCODES.BRS) out = `${out} ${toNum(relV8, (size - 2) * 2, base)} `;\n                else if (opcode === OPCODES.CALL || opcode === OPCODES.BR) out = `${out} ${toNum(relV16, (size - 2) * 2, base)} `;\n                else out = `${out} ${toNum(v, (size - 2) * 2, base)} `;\n            }\n            break;\n        case 0b01:\n            if (indirect) {\n                out = `${out} <${toNum(v, (size - 2) * 2, base)}>`;\n            } else {\n                out = `${out} [${toNum(v, (size - 2) * 2, base)}]`;\n            }\n            break;\n        case 0b10:\n            if (indirect) {\n                out = `${out} <BP+${toNum(relV19, (size - 2) * 2, base)}>`;\n            } else {\n                out = `${out} [BP+${toNum(relV19, (size - 2) * 2, base)}]`;\n            }\n            break;\n        case 0b11:\n            if (indirect) {\n                out = `${out} <D+${toNum(v, (size - 2) * 2, base)}>`;\n            } else {\n                out = `${out} [D+${toNum(v, (size - 2) * 2, base)}]`;\n            }\n            break;\n    }\n    if (indexByX) {\n        out = `${out.substr(0, out.length - 1)}, X${out.substr(out.length - 1)}`;\n    }\n    if (indexByY) {\n        if (!indirect) {\n            out = `${out.substr(0, out.length - 1)}, Y${out.substr(out.length - 1)}`;\n        } else out = `${out}, Y`;\n    }\n    if (!usesFlags) {\n        if (opcode === OPCODES.ST) {\n            out = `${out}, ${REGISTER_NAMES[reg]}`;\n        }\n    }\n\n    return out;\n}\n\nexport function disassemble(bytes, { base = 16 } = {}) {\n    let complete = false;\n    let instruction = 0;\n    let byte = 0;\n    let size = 0\n    let idx = 0;\n    let code;\n    let op, p1;\n\n    while (!complete && idx < bytes.length) {\n        byte = bytes[idx];\n        idx += 1;\n        if (byte === undefined) { return null; }\n        instruction = (instruction << 8) | byte;\n        size = idx;\n        if (size > 4) { return null; }\n\n        op = (instruction >> ((size - 1) << 3)) & 0xFF;\n\n        if (size === 1) {\n            // one byte, single variant instructions\n            if (op === 0x00) { code = `${OPCODES.NOP}`; }\n            if (op === 0x3E) { code = `${OPCODES.HALT}`; }\n            if (op === 0x3F) { code = `${OPCODES.BRK}`; }\n            if (op === 0xA0) { code = `${OPCODES.PUSHALL}`; }\n            if (op === 0xA1) { code = `${OPCODES.POPALL}`; }\n            if (op === 0xA2) { code = `${OPCODES.PUSHF}`; }\n            if (op === 0xA3) { code = `${OPCODES.POPF}`; }\n            if (op === 0xA4) { code = `${OPCODES.PUSHMM}`; }\n            if (op === 0xA5) { code = `${OPCODES.POPMM}`; }\n            if (op === 0xA7) { code = `${OPCODES.RET}`; }\n\n            // one byte, operand instructions\n            if (op >= 0x40 && op <= 0x47) { code = `${OPCODES.TRAP} ${REGISTER_NAMES[op & 0x07]}`; }\n            if (op >= 0xB0 && op <= 0xB7) { code = `${OPCODES.SET} ${FLAG_NAMES[op & 0x07]}`; }\n            if (op >= 0xB8 && op <= 0xBF) { code = `${OPCODES.CLR} ${FLAG_NAMES[op & 0x07]}`; }\n            if (op >= 0xC0 && op <= 0xCF) { code = `${OPCODES.INC} ${REGISTER_NAMES[op & 0x0F]}`; }\n            if (op >= 0xD0 && op <= 0xDF) { code = `${OPCODES.DEC} ${REGISTER_NAMES[op & 0x0F]}`; }\n            if (op >= 0xE0 && op <= 0xEF) { code = `${OPCODES.PUSH} ${REGISTER_NAMES[op & 0x0F]}`; }\n            if (op >= 0xF0 && op <= 0xFF) { code = `${OPCODES.POP} ${REGISTER_NAMES[op & 0x0F]}`; }\n        }\n\n        p1 = size > 1 ? ((instruction >> ((size - 2) << 3)) & 0xFF) : 0;\n\n        if (size === 2) {\n            if (op === 0x01) { code = `${OPCODES.ADD} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x02) { code = `${OPCODES.SUB} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x03) { code = `${OPCODES.CMP} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x04) { code = `${OPCODES.AND} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x05) { code = `${OPCODES.OR} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x06) { code = `${OPCODES.TEST} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x07) { code = `${OPCODES.XOR} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x08) { code = `${OPCODES.TRAP} ${toNum(p1, 2, base)}`; }\n            if (op === 0x09) {\n                if (p1 >= 0x00 && p1 <= 0x0F) { code = `${OPCODES.NOT} ${REGISTER_NAMES[(p1 & 0x0F)]}`; }\n                if (p1 >= 0x10 && p1 <= 0x1F) { code = `${OPCODES.NEG} ${REGISTER_NAMES[(p1 & 0x0F)]}`; }\n                if (p1 >= 0x20 && p1 <= 0x2F) { code = `${OPCODES.EXC} ${REGISTER_NAMES[(p1 & 0x0F)]}`; }\n            }\n            if (op === 0x0A) { code = `${OPCODES.SHL} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${toNum(p1 & 0x0F, 2, base)}`; }\n            if (op === 0x0B) { code = `${OPCODES.SHL} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x0C) { code = `${OPCODES.SHR} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${toNum(p1 & 0x0F, 2, base)}`; }\n            if (op === 0x0D) { code = `${OPCODES.SHR} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x0E) { code = `${OPCODES.SWAP} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x0F) { code = `${OPCODES.MOV} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0x38) { code = `${OPCODES.ENTER} ${toNum(p1, 2, base)}`; }\n            if (op === 0x39) { code = `${OPCODES.EXIT} ${toNum(p1, 2, base)}`; }\n            if (op === 0xA8) { code = `${OPCODES.MUL} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0xA9) { code = `${OPCODES.DIV} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0xAA) { code = `${OPCODES.MOD} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0xAB) { code = `${OPCODES.SMUL} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0xAC) { code = `${OPCODES.SDIV} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0xAD) { code = `${OPCODES.SMOD} ${REGISTER_NAMES[(p1 & 0xF0) >> 4]}, ${REGISTER_NAMES[p1 & 0x0F]}`; }\n            if (op === 0xAE) { \n                switch (p1) {\n                    case 0x00: code = `${OPCODES.FCLR}`; break;\n                    case 0x10: code = `${OPCODES.FADD}`; break;\n                    case 0x11: code = `${OPCODES.FSUB}`; break;\n                    case 0x12: code = `${OPCODES.FCMP}`; break;\n                    case 0x13: code = `${OPCODES.FMUL}`; break;\n                    case 0x14: code = `${OPCODES.FMOD}`; break;\n                    case 0x15: code = `${OPCODES.FDIV}`; break;\n                    case 0x16: code = `${OPCODES.FPOW}`; break;\n                    case 0x17: code = `${OPCODES.FSQRT}`; break;\n                    case 0x18: code = `${OPCODES.FNEG}`; break;\n                    case 0x19: code = `${OPCODES.FEXC}`; break;\n                    case 0x1A: code = `${OPCODES.FINT}`; break;\n                    case 0x1B: code = `${OPCODES.FABS}`; break;\n                    case 0x20: code = `${OPCODES.FSIN}`; break;\n                    case 0x21: code = `${OPCODES.FCOS}`; break;\n                    case 0x22: code = `${OPCODES.FTAN}`; break;\n                    case 0x24: code = `${OPCODES.FASIN}`; break;\n                    case 0x25: code = `${OPCODES.FACOS}`; break;\n                    case 0x26: code = `${OPCODES.FATAN}`; break;\n                    case 0x30: code = `${OPCODES.FISNAN}`; break;\n                    case 0x31: code = `${OPCODES.FISINF}`; break;\n                    case 0x32: code = `${OPCODES.FLOG2}`; break;\n                    case 0x33: code = `${OPCODES.FLOG10}`; break;\n                    case 0x70: code = `${OPCODES.FLD0}`; break;\n                    case 0x71: code = `${OPCODES.FLD1}`; break;\n                    case 0x72: code = `${OPCODES.FLDE}`; break;\n                    case 0x73: code = `${OPCODES.FLDPI}`; break;\n                }\n            }\n            if (op >= 0x48 && op <= 0x4F && (op & 1) === 1) { code = `${OPCODES.ADD} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1, 2, base)}`; }\n            if (op >= 0x50 && op <= 0x57 && (op & 1) === 1) { code = `${OPCODES.SUB} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1, 2, base)}`; }\n            if (op >= 0x58 && op <= 0x5F && (op & 1) === 1) { code = `${OPCODES.CMP} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1, 2, base)}`; }\n            if (op >= 0x60 && op <= 0x67 && (op & 1) === 1) { code = `${OPCODES.AND} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1, 2, base)}`; }\n            if (op >= 0x68 && op <= 0x6F && (op & 1) === 1) { code = `${OPCODES.OR} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1, 2, base)}`; }\n            if (op >= 0x70 && op <= 0x77 && (op & 1) === 1) { code = `${OPCODES.TEST} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1, 2, base)}`; }\n            if (op >= 0x78 && op <= 0x7F && (op & 1) === 1) { code = `${OPCODES.XOR} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1, 2, base)}`; }\n        }\n        const p2 = size > 2 ? ((instruction >> ((size - 3) << 3)) & 0xFF) : 0;\n\n        if (size === 3) {\n            if (op >= 0x48 && op <= 0x4F && (op & 1) === 0) { code = `${OPCODES.ADD} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1 << 8 | p2, 4, base)}`; }\n            if (op >= 0x50 && op <= 0x57 && (op & 1) === 0) { code = `${OPCODES.SUB} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1 << 8 | p2, 4, base)}`; }\n            if (op >= 0x58 && op <= 0x5F && (op & 1) === 0) { code = `${OPCODES.CMP} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1 << 8 | p2, 4, base)}`; }\n            if (op >= 0x60 && op <= 0x67 && (op & 1) === 0) { code = `${OPCODES.AND} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1 << 8 | p2, 4, base)}`; }\n            if (op >= 0x68 && op <= 0x6F && (op & 1) === 0) { code = `${OPCODES.OR} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1 << 8 | p2, 4, base)}`; }\n            if (op >= 0x70 && op <= 0x77 && (op & 1) === 0) { code = `${OPCODES.TEST} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p1 << 8 | p2, 4, base)}`; }\n            if (op >= 0x78 && op <= 0x7F && (op & 1) === 0) { code = `${OPCODES.XOR} ${REGISTER_NAMES[op & 0x07]}, ${toNum(p2 << 8 | p2, 4, base)}`; }\n            if (op >= 0x10 && op <= 0x1F && (op & 1) === 1 && p1 === 0x00) { code = address({size, instruction, base, opcode: OPCODES.LD}); }\n            if (op === 0x30) { code = `${OPCODES.IN} ${REGISTER_NAMES[p1 >>> 4]}, ${toNum(p2, 2, base)}`; }\n            if (op === 0x31) { code = `${OPCODES.OUT} ${toNum(p2, 2, base)}, ${REGISTER_NAMES[p1 >>> 4]}`; }\n            if ( op >= 0x80 && op <= 0x8F && (p1 & 1) === 1) { code = address({size, instruction, base,  opcode: OPCODES.LOOPS}); }\n            if ( op >= 0x90 && op <= 0x9F && (p1 & 1) === 1) { code = address({size, instruction, base, opcode: (p1 & 0b10) ? OPCODES.CALLS : OPCODES.BRS}); }\n            if (op === 0xAE) {\n                switch (p1) {\n                    case 0x80: code = `${OPCODES.FLDR} ${REGISTER_NAMES[p2 & 0x0F]}`; break;\n                    case 0x81: code = `${OPCODES.FLDM} [${REGISTER_NAMES[(p2 & 0xF0) >> 4]}, ${REGISTER_NAMES[p2 & 0x0F]}]`; break;\n                    case 0x82: code = `${OPCODES.FLDIM} <${REGISTER_NAMES[(p2 & 0xF0) >> 4]}, ${REGISTER_NAMES[p2 & 0x0F]}>`; break;\n                    case 0x84: code = `${OPCODES.FSTR} ${REGISTER_NAMES[p2 & 0x0F]}`; break;\n                    case 0x85: code = `${OPCODES.FSTM} [${REGISTER_NAMES[(p2 & 0xF0) >> 4]}, ${REGISTER_NAMES[p2 & 0x0F]}]`; break;\n                    case 0x86: code = `${OPCODES.FSTIM} <${REGISTER_NAMES[(p2 & 0xF0) >> 4]}, ${REGISTER_NAMES[p2 & 0x0F]}>`; break;\n                    default: \n                        code = `???`;\n                }\n            }\n        }\n\n        const p3 = size > 3 ? ((instruction >> ((size - 4) << 3)) & 0xFF) : 0;\n\n        if (size === 4) {\n            if (op >= 0x10 && op <= 0x1F && (op & 1) === 0 && p1 === 0x00) { code = address({size, instruction, base, opcode: OPCODES.LD}); }\n            if (op >= 0x10 && op <= 0x1F /*&& (op & 1) === 0*/ && p1 != 0x00) { code = address({size, instruction, base, opcode: OPCODES.LD}); }\n            if (op >= 0x20 && op <= 0x2F ) { code = address({size, instruction, base, opcode: OPCODES.ST}); }\n            if ( op >= 0x80 && op <= 0x8F && (p1 & 1) === 0) { code = address({size, instruction, base, opcode: OPCODES.LOOP}); }\n            if ( op >= 0x90 && op <= 0x9F && (p1 & 1) === 0) { code = address({size, instruction, base, opcode: (p1 & 0b10) ? OPCODES.CALL : OPCODES.BR}); }\n        }\n\n        complete = code !== undefined;\n\n    }\n    if (!complete) { return null; }\n    return { size, code, instruction };\n}\n\nexport function disassembleAll(bytes, { base = 16, addr} = {}) {\n    const arr = bytes.map(i => i);\n    let out = \"\";\n    let offset = 0;\n    while (arr.length > 0) {\n        let result, idx = 1, code = \"\", size = 0;\n        do {\n            const tryBytes = arr.slice(0, idx + 1);\n            result = disassemble(tryBytes, base);\n            idx++;\n        } while (result === null && idx < arr.length && idx < 5 );\n        if (result) {\n            size = result.size;\n            code = result.code;\n        } else {\n            code = \"???\";\n            size = 1;\n        }\n        const used = arr.splice(0, size);\n        out += (addr !== undefined ? toNum(addr + offset, 5, 16).substr(2) + \": \" : \"\") + \n            used.map(b => toNum(b, 2, 16).substr(2)).join(\" \").padEnd(11, \" \") + \n            \"    \" + \n            code + \n            \"\\n\";\n        offset += size;\n    }\n    return out;\n}\n", "import { Computer, TIMING_METHODS } from \"./Computer.js\";\nimport { mapTask, TASKS } from \"../isa/tasks.js\";\nimport { disassembleAll } from \"../basm/disassemble.js\";\n\n/* Utility methods that are common for rendering statistics and diagnostics */\nexport const toHex = (n, padding=4) => (n||0).toString(16).padStart(padding, \"0\").toUpperCase();\nexport const toHex2 = n => toHex(n, 2);\nexport const toHex4 = n => toHex(n, 4);\nexport const toHex5 = n => toHex(n, 5);\nexport const toHex8 = n => toHex(n, 8);\n\nexport const round = (n, places = 0) => {\n    const multiplier = 10 ** places;\n    const v = Math.round(n * multiplier) / multiplier;\n    return v;\n}\n\nexport const numToString = (n, { padWhole = 0, padDecimal = 2, padSign = 0 } = {}) => {\n    const [ whole, decimal ] = Math.abs(n).toString().split(\".\");\n    const neg = n < 0;\n    return `${(neg ? \"-\" : \"\").padStart(padSign)}${whole.padStart(padWhole, \"0\")}${padDecimal ? \".\" : \"\"}${(decimal || \"\").padEnd(padDecimal, \"0\")}`;\n}\n\nexport const STATE = {\n    PAUSED: \"paused\",\n    RUNNING: \"running\",\n    STEPPING: \"stepping\"\n};\n\nexport class Diagnostics {\n    /**\n     * @param {Computer} computer\n     */\n    constructor(computer) {\n        this.computer = computer;\n    }\n\n    get state() {\n        let curState = STATE.PAUSED;\n        if (this.computer.running) {\n            curState = STATE.RUNNING;\n        }\n        if (this.computer.stepping && this.computer.debug) {\n            curState = STATE.STEPPING;\n        }\n        return curState;\n    }\n\n    dumpRegisters() {\n        return [\n            this.computer.processor.registers.A,\n            this.computer.processor.registers.B,\n            this.computer.processor.registers.C,\n            this.computer.processor.registers.D,\n            this.computer.processor.registers.X,\n            this.computer.processor.registers.Y,\n            this.computer.processor.registers.BP,\n            this.computer.processor.registers.SP,\n            this.computer.processor.registers.STATUS,\n            this.computer.processor.registers.PC,\n            this.computer.processor.registers.MP,\n            this.computer.processor.registers.MM\n        ];\n    }\n\n    dumpFPU() {\n        return [...this.computer.processor.fpu.stack,\n                   this.computer.processor.fpu.SP];\n    }\n\n    dumpFlags() {\n        const reg = this.computer.processor.registers;\n        return {\n            N: reg.NEGATIVE,\n            V: reg.OVERFLOW,\n            Z: reg.ZERO,\n            C: reg.CARRY,\n            EX: reg.EXCEPTION,\n            ID: reg.INTERRUPT_DISABLE,\n            IS: reg.INTERRUPT_SERVICE,\n            SS: reg.SINGLE_STEP\n        };\n    }\n\n    dumpMemory({start = 0, length = 256, width = 16} = {}) {\n        const numRows = Math.ceil(length / width);\n        const numCols = width;\n        return Array.from({length: numRows}, (_, row) => [\n            ...Array.from({length: numCols}, (_, col) => this.computer.memory.readByte(start + ((row * width) + col)))\n        ]);\n    }\n\n    disassembleMemory({start = 0, length = 16} = {}) {\n        return disassembleAll(Array.from({length}, (_, idx) => this.computer.memory.readByte(start + idx)), {addr: start});\n    }\n\n    dumpInstructionCache() {\n        return this.computer.processor.internalState.cache;\n    }\n\n    dumpTaskQueue({mapped = false} = {}) {\n        //return this.computer.processor.internalState.tasks.map(([pc, task]) => [pc, mapped ? mapTask(task) : task]);\n        return this.computer.processor.internalState.tasks.reduce((acc, cur, idx) => {\n            const which = idx % 2; // if which is 0, processing PC. Otherwise task.\n            if (which === 0) {\n                acc.push([cur, undefined]);\n            } else {\n                const last = acc.pop();\n                last[1] = mapped ? mapTask(cur) : cur;\n                acc.push(last)\n            }\n            return acc;\n        }, []);\n    }\n\n    dumpTaskStack() {\n        return this.computer.processor.internalState.stack;\n    }\n\n    dumpStatistics() {\n        return {\n            ticks: numToString(this.computer.stats.processorStats.ticks, {padDecimal: 0}),\n            tasks: numToString(this.computer.stats.processorStats.tasks, {padDecimal: 0}),\n            insts: numToString(this.computer.stats.processorStats.insts, {padDecimal: 0}),\n            aluOps: numToString(this.computer.stats.aluStats.ops, {padDecimal: 0}),\n            slices: numToString(this.computer.stats.slices, {padDecimal: 0}),\n            microOpsPerSlice: numToString(this.computer.stats.processorStatsLastSlice.tasks, {padDecimal: 0}),\n            instsPerSlice: numToString(this.computer.stats.processorStatsLastSlice.insts, {padDecimal: 0}),\n            totalTime: numToString(round(this.computer.stats.time, 0), {padDecimal: 0}),\n            timeThisSlice: numToString(round(this.computer.stats.timeThisSlice, 0), {padDecimal: 0}),\n            MMOPs: numToString(round((this.computer.stats.processorStatsLastSecond.tasks / 1000000), 4), {padDecimal: 4}),\n            MIPs: numToString(round((this.computer.stats.processorStatsLastSecond.insts / 1000000), 4), {padDecimal: 4}),\n            MAOPs: numToString(round((this.computer.stats.aluStatsLastSecond.ops / 1000000), 4), {padDecimal: 4}),\n            microOpsPerInst: numToString(round(this.computer.stats.processorStatsLastSlice.insts !== 0 ? \n                ((this.computer.stats.processorStatsLastSlice.tasks / \n                    this.computer.stats.processorStatsLastSlice.insts)) : 0, 4), {padDecimal: 4}),\n        };\n    }\n\n    resetStatistics() {\n        this.computer.stats.slices = 0;\n        this.computer.stats.time = 0;\n        this.computer.processor.stats.ticks = 0;\n        this.computer.processor.stats.tasks = 0;\n        this.computer.processor.stats.insts = 0;\n        this.computer.processor.alu.stats.ops = 0;\n    }\n\n}", "import { Device, _buffer } from \"../core/Device.js\";\n\nconst SVC_CON_RCVD = 0;\nconst SVC_CON_SENT = 1;\nconst SVC_CON_ACK = 2;\n\nconst ADR_CTRL = 0;\nconst ADR_RECV = 1;\nconst ADR_SEND = 2;\nconst ADR_ACK = 3;\n\nconst MASK_CTRL_WRITE = 0b10;\nconst MASK_CTRL_READ = 0b01;\n\nconst DATA_ACK = 1;\n\nexport class ConsoleDevice extends Device {\n    _put(ch) {\n        // log it out\n        if (typeof process !== \"undefined\") {\n            process.stdout.write(ch);\n        } else {\n            console.log(ch);\n        }\n    }\n    pullFromBus(address) {\n        super.pullFromBus(address);\n        const isWrite = (address === ADR_CTRL) && (this._read(ADR_CTRL) & MASK_CTRL_WRITE) !== 0;\n        if (isWrite) {\n            // something's been put in our buffer on the SEND line\n            const ch = this._read(ADR_SEND);\n            this._put(String.fromCharCode(ch));\n\n            // ACK\n            this._write(ADR_ACK, DATA_ACK);\n            //this.requestService(SVC_CON_ACK);\n        }\n    }\n    get mirrored() {\n        return {\n            [ADR_CTRL]: true,\n            [ADR_SEND]: true,\n            [ADR_RECV]: true,\n            [ADR_ACK]: true\n        };\n    }\n}", "import { ConsoleDevice } from \"../../devices/Console.js\";\n\nexport class BrowserConsole extends ConsoleDevice {\n    constructor(opts) {\n        super(opts);\n        this._output = \"\";\n    }\n    _put(ch) {\n        this._output += ch;\n        if (ch === \"\\n\") {\n            console.log(this._output);\n            this._output = \"\";\n        }\n    }\n}", "import { Device } from \"../core/Device.js\";\n\n/******************************************************************************\n *\n * Display Generator\n *\n * The display supports a 640x480 canvas, of which 512x384 is addressable by\n * the user. Depending on the mode, the addressable area is either 256x192 or\n * 512x384px.\n *\n * Supported Modes:\n *  0 - Tiles (32 x 24, equivalent to 256 x 192, 256 colors)\n *  1 - Tiles (64 x 48, equivalent to 512 x 384, 256 colors)\n *  2 - HiRes (256 x 192, 256 colors, 8 bpp)\n *  3 - HiRes (512 x 192, 4 colors, 2 bpp)\n *\n */\n\n/*\n * Known issues\n * ------------\n * \n * All:\n * - Sprites can wrap around on the right side\n * - Border can't be made transparent\n * \n * Fast mode:\n * - \n * \n * Accurate Mode 2:\n * - Sprites take too long (ineffecient draw)\n * - Y crop is not respected\n * \n * Questions:\n * - Should sprite dimensions be +1? 0x0 makes little sense!\n * - Should Border width be extended? Can still see 8th pixel?\n */\n\nconst PALETTE_PAGE  = 0x00; // ???_ppppp\nconst BG_COLOR      = 0x01;\nconst LAYER_SEL     = 0x02; // Change this to select which layer to read from/write to\nconst LAYER_SRC     = 0x03; // v_zz_ppppp\nconst LAYER_CFG     = 0x04; // ss_l_ttttt\nconst LAYER_BG      = 0x05;\nconst LAYER_FG      = 0x06;\nconst LAYER_XOFFSET = 0x07;\nconst LAYER_YOFFSET = 0x08;\nconst LAYER_XCROP   = 0x09;\nconst LAYER_YCROP   = 0x0A;\nconst LAYER_MODE    = 0x0B; // ?????_mm; mode\nconst SPRITE_SEL    = 0x0C;\nconst SPRITE_SRC    = 0x0D; // v_zz_ppppp\nconst SPRITE_IDX    = 0x0E; // * 64 bytes\nconst SPRITE_CFG    = 0x0F; // ss_?_ttttt\nconst SPRITE_DIM    = 0x10; // hhhh_wwww\nconst SPRITE_BG     = 0x11;\nconst SPRITE_FG     = 0x12;\nconst SPRITE_X_HI   = 0x13;\nconst SPRITE_X_LO   = 0x14;\nconst SPRITE_Y_HI   = 0x15;\nconst SPRITE_Y_LO   = 0x16;\n/*    OPEN_FOR_EXP  = 0x17; */\n/*    OPEN_FOR_EXP  = 0x18; */\nconst SPRITE_COL_HI = 0x19; // collision high\nconst SPRITE_COL_LO = 0x1A; // collision lo\nconst BORDER_COLOR  = 0x1B;\nconst BORDER_CFG    = 0x1C; // v_?_yyy_xxx\nconst TRAP_ON_RASTER= 0x1D;\nconst CURRENT_RASTER= 0x1E;\nconst RESET_WAIT    = 0x1F;\n\nconst VSYNC_TRAP    = 0x88;\n\nconst TARGET_FPS = 60;\nconst SCREEN_COLUMNS = 640;\nconst SCREEN_ROWS = 480;\nconst ADDRESSABLE_COLUMNS = 512;\nconst ADDRESSABLE_ROWS = 384;\nconst TILE_COLUMNS = 64;\nconst TILE_ROWS = 48;\nconst BORDER_WIDTH = (SCREEN_COLUMNS - ADDRESSABLE_COLUMNS) / 2;\nconst BORDER_HEIGHT = (SCREEN_ROWS - ADDRESSABLE_ROWS) / 2;\nconst MS_PER_SEC = 1000;\nconst SAMPLES = 10;\n\nconst MODES = {\n    FAST: 1,\n    SLOW: 2\n};\n\nconst MIRROR_MAP = {\n    [PALETTE_PAGE]: true,\n    [BG_COLOR]: true,\n    [LAYER_SEL]: true,\n    [SPRITE_SEL]: true,\n    [SPRITE_COL_HI]: true,\n    [SPRITE_COL_LO]: true,\n    [BORDER_COLOR]: true,\n    [BORDER_CFG]: true,\n    [TRAP_ON_RASTER]: true,\n    [CURRENT_RASTER]: true,\n    [RESET_WAIT]: true,\n};\n\n\nexport class Screen extends Device {\n    constructor({device = 1, length = 32, controller, memory = undefined, clock = undefined, performance, stats}) {\n        super({device, length, controller, memory, clock});\n\n        this._baseDevice = device;\n        this._raster = 0;\n        this._column = 0;\n        this._delta  = 0;\n        this._wait   = false;\n        this._mode   = MODES.SLOW;\n\n        this._performance = performance;\n        this._ticksPerRaster = 8; /* good enough guess */\n        this._ticksSinceRaster = 0;\n        this._ticksPerSecond = 248000; /* guess; will revise */\n        this._ticksThisSecond = 0;\n        this._ticksLastSecond = 0;\n\n        this._adjustPerformance = true;\n\n        this._lastPerformance = performance.now();\n        this._startTime = this._lastPerformance;\n\n        this._stats = stats;\n\n        // the frame is composed of RGBA bytes for 640 x 480 pixels\n        this._frame = new Uint8Array(new ArrayBuffer(SCREEN_ROWS * SCREEN_COLUMNS * 4));\n\n        // used for less accurate emulation mode...\n        this._pixelFrame = new Uint8Array(new ArrayBuffer(SCREEN_ROWS * SCREEN_COLUMNS));\n\n        // internal configuration\n        this._cfg = {};\n\n        this._spritesByLayer = [ [], [], [], [] ];\n\n        this.reset();\n\n    }\n\n    get adjustPerformance() {\n        return this._adjustPerformance;\n    }\n    set adjustPerformance(v) {\n        this._adjustPerformance = v;\n    }\n\n    get frame() {\n        return this._frame;\n    }\n\n    get transferrableFrame() {\n        const _frame = this._frame;\n        this._frame = new Uint8Array(new ArrayBuffer(SCREEN_ROWS * SCREEN_COLUMNS * 4));\n        return _frame;\n    }\n\n    get ticksBetweenRasterLines() {\n        return this._ticksPerRaster;\n    }\n    set ticksBetweenRasterLines(v) {\n        this._ticksPerRaster = Number(v);\n    }\n\n    get mode() {\n        return this._mode;\n    }\n\n    set mode(v) {\n        this._mode = v;\n    }\n\n    reset() {\n        this._write(PALETTE_PAGE, 29);\n        this._write(BG_COLOR, 9);\n        this._write(BORDER_CFG, 0x80);\n        this._write(BORDER_COLOR, 0x80);\n        this._write(TRAP_ON_RASTER, 0x00);\n        this._write(CURRENT_RASTER, 0x00);\n        this._write(RESET_WAIT, 0);\n        this._cfg = {\n            layers: Array.from({length: 4}, (_, idx) => ({\n                src: (idx === 0 ? 0x80 : 0x00) | (idx + 4), // v_zz_ppppp / visible / z-order / page\n                cfg: 28, // ss_l_ttttt - scale / line-spacing / tile\n                bg: 0,\n                fg: 0xFF,\n                mode: 0, //screen mode\n                visible: (idx === 0 ? 1 : 0),\n                zIndex: idx,\n                page: idx + 4,\n                scale: 0,\n                tilePage: 28,\n                yOffset: 0,\n                xOffset: 0,\n                yWindow: 0,\n                xWindow: 0,\n                lineSpacing: 0\n            })),\n            sprites: Array.from({length: 16}, () => ({\n                src: 0,\n                idx: 0,\n                page: 0,\n                zIndex: 0,\n                tilePage: 28,\n                dimensions: 0, // hhhh_wwww; up to 16x16 tiles\n                height: 0,\n                width: 0,\n                bg: 0,\n                fg: 0,\n                x: 0, // x-position\n                y: 0, // y-position\n                scale: 0, // yyyy_xxxx - scale in each direction (multiples; 0 = 1px)\n                visible: 0,\n                collided: 0, \n            }))\n        }\n    }\n\n    _read(address = 0) {\n        const r = super._read(address);\n        if (address > LAYER_SEL && address < SPRITE_SEL) {\n            const layer = this._cfg.layers[this._read(LAYER_SEL) & 0x3];\n            switch (address) {\n                case LAYER_SRC: return layer.src;\n                case LAYER_CFG: return layer.cfg;\n                case LAYER_BG:  return layer.bg;\n                case LAYER_FG:  return layer.fg;\n                case LAYER_XOFFSET: return layer.xOffset;\n                case LAYER_YOFFSET: return layer.yOffset;\n                case LAYER_XCROP: return layer.xWindow;\n                case LAYER_YCROP: return layer.yWindow;\n                case LAYER_MODE: return layer.mode;\n            }\n        }\n        if (address > SPRITE_SEL && address < SPRITE_COL_HI) {\n            const sprite = this._cfg.sprites[this._read(SPRITE_SEL) & 0xF];\n            switch (address) {\n                case SPRITE_SRC: return sprite.src;\n                case SPRITE_CFG: return sprite.cfg;\n                case SPRITE_IDX: return sprite.idx;\n                case SPRITE_DIM: return sprite.dimensions;\n                case SPRITE_FG: return sprite.fg;\n                case SPRITE_BG: return sprite.bg;\n                case SPRITE_X_HI: return (sprite.x & 0xFF00) >>> 8;\n                case SPRITE_X_LO: return (sprite.x & 0x00FF);\n                case SPRITE_Y_HI: return (sprite.y & 0xFF00) >>> 8;\n                case SPRITE_Y_LO: return (sprite.y & 0x00FF);\n            }\n        }\n        return r;\n    }\n    _write(address = 0, data = 0) {\n        super._write(address, data);\n        if (address > LAYER_SEL && address < SPRITE_SEL) {\n            const layer = this._cfg.layers[this._read(LAYER_SEL) & 0x3];\n            switch (address) {\n                case LAYER_SRC: {\n                    layer.src = data;\n                    layer.visible = (layer.src & 0x80) >>> 7;\n                    layer.zIndex = (layer.src & 0b01100000) >>> 5;\n                    layer.page = (layer.src & 0b00011111);\n                    return;\n                }\n                case LAYER_CFG: {\n                    layer.cfg = data;\n                    layer.scale    = (layer.cfg & 0b11000000) >> 6;\n                    layer.lineSpacing = (layer.cfg & 0b00100000) >> 5;\n                    layer.tilePage = (layer.cfg & 0b00011111);\n                    return;\n                }\n                case LAYER_BG:  return layer.bg = data;\n                case LAYER_FG:  return layer.fg = data;\n                case LAYER_XOFFSET: return layer.xOffset = data;\n                case LAYER_YOFFSET: return layer.yOffset = data;\n                case LAYER_XCROP: return layer.xWindow = data;\n                case LAYER_YCROP: return layer.yWindow = data;\n                case LAYER_MODE: return layer.mode = data & 0b11;\n            }\n        }\n        if (address > SPRITE_SEL && address < SPRITE_COL_HI) {\n            const sprite = this._cfg.sprites[this._read(SPRITE_SEL) & 0xF];\n            switch (address) {\n                case SPRITE_SRC: {\n                    sprite.src = data;\n                    sprite.visible = (sprite.src & 0x80) >>> 7;\n                    sprite.zIndex = (sprite.src & 0b01100000) >>> 5;\n                    sprite.page = (sprite.src & 0b00011111);\n                    return;\n                }\n                case SPRITE_CFG: {\n                    sprite.cfg = data;\n                    sprite.scale    = (sprite.cfg & 0b11000000) >>> 6;\n                    sprite.tilePage = (sprite.cfg & 0b00011111);\n                    return;\n                }\n                case SPRITE_IDX: return sprite.idx = data;\n                case SPRITE_DIM: {\n                    sprite.dimensions = data;\n                    sprite.height = (sprite.dimensions & 0xF0) >>> 4;\n                    sprite.width = (sprite.dimensions & 0x0F);\n                    return;\n                }\n                case SPRITE_FG: return sprite.fg = data;\n                case SPRITE_BG: return sprite.bg = data;\n                case SPRITE_X_HI: return sprite.x = (sprite.x & 0x00FF) | (data << 8);\n                case SPRITE_X_LO: return sprite.x = (sprite.x & 0xFF00) | data;\n                case SPRITE_Y_HI: return sprite.y = (sprite.y & 0x00FF) | (data << 8);\n                case SPRITE_Y_LO: return sprite.y = (sprite.y & 0xFF00) | data;\n            }\n        }\n    }\n\n    pullFromBus(address) {\n        super.pullFromBus(address);\n        /*const selectedDevice = (this.ioBus.deviceSelectBus.value - this._baseDevice) << 4;\n        const port = address | selectedDevice;*/\n        switch(address) {\n            case RESET_WAIT:\n                return this.resetWait();\n        }\n    }\n\n    get mirrored() {\n        return MIRROR_MAP;\n    }\n\n    resetWait() {\n        this._wait = false;\n        if (this._stats) this._stats.begin();\n        //this._ticksSinceRaster = 0;\n    }\n\n    tick() {\n        super.tick();\n        this._ticksThisSecond++;\n\n        if (this._mode === MODES.FAST) {\n            this._ticksSinceRaster++;\n            if (this._wait) {\n                if (this._ticksSinceRaster > this._ticksPerRaster) {\n                    this._ticksSinceRaster = 0; //-= this._ticksPerRaster;\n                    this._raster++;\n                    if (this._raster > 480) this._raster = 480;\n                }\n                this._write(CURRENT_RASTER, this._raster >> 1);\n                return;\n            }\n            this._spritesByLayer = this._getSprites();\n            this._generateScreen();\n            this._raster = 0;\n            this._wait = true;\n            this.requestService();\n            this._write(CURRENT_RASTER, this._raster >> 1);\n            this._adjustRasterSpeed();\n        } else {\n            if (this._wait) return;\n            this._ticksSinceRaster++;\n            if (this._raster === 0) {\n                if (this._stats) this._stats.begin();\n            }\n            if (this._ticksSinceRaster >= this._ticksPerRaster) {\n                this._ticksSinceRaster = 0 /*-= this._ticksPerRaster*/;\n                    this._generateRasterLine2();\n                    this._raster++;\n                    if (this._raster > SCREEN_ROWS) {\n                        if (this._stats) this._stats.end();\n                        this._raster = 0;\n                        this._wait = true;\n                        this._spritesByLayer = this._getSprites();\n                    }\n                    if (this._raster === (this._read(TRAP_ON_RASTER) << 1)) {\n                        this.requestService();\n                    }\n                this._write(CURRENT_RASTER, this._raster >> 1);\n                this._adjustRasterSpeed();\n            }\n        }\n    }\n\n    _getLayers() {\n        return this._cfg.layers;\n    }\n\n    _getSprites() {\n        const spritesByLayer = [ [], [], [], [] ];\n        const sprites = this._cfg.sprites;\n        for (let i = 0; i < 16; i++) {\n            const sprite = sprites[i];\n            if (sprite.visible === 1) \n                sprite.pageAddr = (sprite.page << 14) + (sprite.idx << 8);\n                sprite.tilePageAddr = sprite.tilePage << 14;\n                sprite.xOffset = sprite.x - (sprite.x > 32767 ? 65536 : 0);\n                sprite.yOffset = sprite.y - (sprite.y > 32767 ? 65536 : 0);\n                sprite.maxWidth = sprite.width << 3;\n                sprite.maxHeight = sprite.height << 3;\n                spritesByLayer[sprite.zIndex & 0x3].push(sprite);\n        }\n        return spritesByLayer;\n    }\n    _drawPixelOnRaster(x, y, scale, tilePixel, currentRaster) {\n        for (let sY = (1 << scale) - 1; sY >= 0; sY--) {\n            if ((y + sY) === currentRaster) {\n                for (let sX = (1 << scale) - 1; sX >= 0; sX--) {\n                    const offset = (y + sY) * SCREEN_COLUMNS + (x + sX);\n                    this._pixelFrame[offset] = tilePixel;\n                }\n            }\n        }\n        return;\n    }\n    _drawPixel(x, y, scale, tilePixel) {\n        // v1\n        for (let sY = (1 << scale) - 1; sY >= 0; sY--) {\n            for (let sX = (1 << scale) - 1; sX >= 0; sX--) {\n                const offset = (y + sY) * SCREEN_COLUMNS + (x + sX);\n                this._pixelFrame[offset] = tilePixel;\n            }\n        }\n        return;\n\n        // with fill\n        /*\n        const size = 1 << scale;\n        for (let sY = size - 1; sY >= 0; sY--) {\n            const offset = (y + sY) * SCREEN_COLUMNS + (x);\n            this._pixelFrame.fill(tilePixel, offset, offset + size);\n        }\n        */\n        /* //hybrid\n        const size = 1 << scale;\n        for (let sY = (1 << scale) - 1; sY >= 0; sY--) {\n            let offset = (y + sY) * SCREEN_COLUMNS + (x);\n            for (let sX = (1 << scale) - 1; sX >= 0; sX--, offset++) {\n                this._pixelFrame[offset] = tilePixel;\n            }\n        }\n        */\n    }\n\n    _generateScreen() {\n        if (this._stats) this._stats.begin();\n        // if we want, we can render the whole screen at once. This isn't as \"true\" to\n        // the spirit of Retroputer's lower-level screen generator, but in _most_ cases\n        // it's close enough. It's also WAY more performant.\n        const palettePage = this._read(PALETTE_PAGE);\n        const paletteAddr = palettePage << 14;\n        const bgColor = this._read(BG_COLOR);\n        const borderCfg = this._read(BORDER_CFG);\n        const borderColor = (borderCfg & 0b10000000) ? this._read(BORDER_COLOR) : bgColor;\n        const extraBorderWidth  = (borderCfg & 0b00000111) << 1; // border width is * 2\n        const extraBorderHeight = (borderCfg & 0b00111000) >> 2; // same for height\n        const trapOnRaster = this._read(TRAP_ON_RASTER);\n        const currentRaster = this._raster;\n        const layers = this._getLayers();\n        let spritesByLayer = this._spritesByLayer;\n\n        // draw the background\n        this._pixelFrame.fill(bgColor);\n\n\n        // draw each layer and attendant sprites\n        for (let layerIdx = 0; layerIdx < 4; layerIdx++) {\n            const layer = layers[layerIdx];\n            const sprites = spritesByLayer[layerIdx];\n            if (layer.visible) {\n                const pageAddr = layer.page << 14;\n                const tilePageAddr = layer.tilePage << 14;\n                const halfWidth = (layer.mode & 1) === 0;\n                const maxWidth = (SCREEN_COLUMNS - (BORDER_WIDTH << 1)) >> halfWidth;\n                const maxHeight = (SCREEN_ROWS - (BORDER_HEIGHT << 1)) >> halfWidth;\n\n                const xOffset = layer.xOffset - ((layer.xOffset > 127) << 8) << halfWidth;\n                const yOffset = layer.yOffset - ((layer.yOffset > 127) << 8) << halfWidth;\n\n                const xLeftCrop = layer.xWindow << halfWidth;\n                const xRightCrop = maxWidth - xLeftCrop;\n                const yTopCrop = layer.yWindow << halfWidth;\n                const yBottomCrop = maxHeight - yTopCrop;\n                const scale = (layer.scale + 1) - (layer.mode & 1);\n\n                if (layer.mode >= 2) {\n                    // hi-res modes\n                    // TODO: Mode 3 (512x384)\n                    // TODO: Cropping\n                    // BUG?: Scaling might overwrite unexpected places?\n                    const rows = ADDRESSABLE_ROWS / (2 - (layer.mode & 1));\n                    const cols = ADDRESSABLE_COLUMNS / (2 - (layer.mode & 1));\n                    const firstVisibleRow = (layer.yWindow) // << (scale - 1));\n                    const lastVisibleRow = rows - (layer.yWindow) // << (scale - 1)));\n                    const firstVisibleColumn = (layer.xWindow) // << (scale - 1));\n                    const lastVisibleColumn = cols - (layer.xWindow) // << (scale -1 ));\n\n                    for (let row = lastVisibleRow - 1; row >= firstVisibleRow; row--) {\n                        for (let col = lastVisibleColumn - 1; col >= firstVisibleColumn; col--) {\n                            const x = BORDER_WIDTH + ((col) << scale) + xOffset;\n                            const y = BORDER_HEIGHT + ((row) << scale) + yOffset;\n                            if (x >= 0 && y >= 0 && x < SCREEN_COLUMNS && y < SCREEN_ROWS) {\n                                let tilePixel = this.memory.readUnmappedByte(pageAddr + (row << 8) + col);\n                                if (tilePixel === 0x00) tilePixel = layer.bg;\n                                if (tilePixel === 0xFF) tilePixel = layer.fg;\n                                if (tilePixel !== 0) this._drawPixel(x, y, scale, tilePixel);\n                            }\n                        }\n                    }\n                } else {\n                    // text modes\n                    const rows = 24 * (layer.mode + 1);\n                    const cols = 32 * (layer.mode + 1);\n                    const firstVisibleRow = (layer.yWindow) // << (scale - 1));\n                    const lastVisibleRow = rows - (layer.yWindow) // << (scale - 1)));\n                    const firstVisibleColumn = (layer.xWindow) // << (scale - 1));\n                    const lastVisibleColumn = cols - (layer.xWindow) // << (scale -1 ));\n                    const lineSpacing = layer.lineSpacing;\n                    const rowMultiplier = 8 + lineSpacing;\n                    const rowHeight = rowMultiplier - 1;\n                    let tilePos;\n                    let tile;\n                    let tileFgColor;\n                    let tileBgColor;\n                    let row, _y, y;\n                    let col, _x, x;\n                    let tilePixel;\n                    let layerFg = layer.fg;\n                    let layerBg = layer.bg;\n                    for (row = lastVisibleRow- 1; row >= firstVisibleRow; row--) {\n                        for (col = lastVisibleColumn - 1; col >= firstVisibleColumn; col--) {\n                            tilePos = (row << (5 + (layer.mode !== 0))) + col;\n                            tile = this.memory.readUnmappedByte(pageAddr + tilePos)\n                            tileFgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 0x1000);\n                            tileBgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 0x2000);\n                            for (_y = rowHeight; _y >= 0; _y--) {\n                                for (_x = 7; _x >= 0; _x--) {\n                                    x = BORDER_WIDTH + (((col * 8) + _x) << scale) + xOffset;\n                                    y = BORDER_HEIGHT + (((row * rowMultiplier) + _y) << scale) + yOffset;\n                                    if (x >= 0 && y >= 0 && x < SCREEN_COLUMNS && y < SCREEN_ROWS) {\n                                        tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (_y << 3) + _x);\n                                        if (_y > 7) {\n                                            if (tile < 128) { tilePixel = 0; } // let graphics characters connect, but not alpha chars\n                                            else { tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (7 << 3) + _x); }\n                                        }\n\n                                        tilePixel = (tilePixel < 1 ? tileBgColor : tilePixel < 0xFF ? tilePixel : tileFgColor);\n                                        //if (tilePixel === 0x00) tilePixel = tileBgColor;\n                                        //if (tilePixel === 0xFF) tilePixel = tileFgColor;\n                                        tilePixel = (tilePixel < 1 ? layerBg : tilePixel < 0xFF ? tilePixel : layerFg);\n                                        //if (tilePixel === 0x00) tilePixel = layerBg;\n                                        //if (tilePixel === 0xFF) tilePixel = layerFg;\n                                        if (tilePixel !== 0) this._drawPixel(x, y, scale, tilePixel);\n                                    }\n                                }\n                            }\n                            \n                        }\n                    }\n\n                } \n            }\n            for (let spriteIdx = sprites.length - 1; spriteIdx >= 0; spriteIdx--) {\n                const sprite = sprites[spriteIdx];\n                if (sprite.visible) {\n                    const rows = sprite.height;\n                    const cols = sprite.width;\n                    let row, y, _y;\n                    let col, x, _x;\n                    let tilePos, tile, tileFgColor, tileBgColor, scale;\n                    let tilePixel;\n                    let spriteBg = sprite.bg;\n                    let spriteFg = sprite.fg;\n                    for (row = rows - 1; row >= 0; row--) {\n                        for (col = cols - 1; col >= 0; col--) {\n                            tilePos = (row * cols) + col;\n                            tile = this.memory.readUnmappedByte(sprite.pageAddr + tilePos)\n                            tileFgColor = this.memory.readUnmappedByte(sprite.pageAddr + tilePos + 0x40);\n                            tileBgColor = this.memory.readUnmappedByte(sprite.pageAddr + tilePos + 0x80);\n                            scale = sprite.scale;\n                            for (_y = 7; _y >= 0; _y--) {\n                                y = (((row * 8) + _y) << scale) + sprite.yOffset;\n                                for (_x = 7; _x >= 0; _x--) {\n                                    x = (((col * 8) + _x) << scale) + sprite.xOffset;\n                                    tilePixel = this.memory.readUnmappedByte(sprite.tilePageAddr + (tile << 6) + (_y << 3) + _x);\n\n                                    tilePixel = (tilePixel < 1 ? tileBgColor : tilePixel < 0xFF ? tilePixel : tileFgColor);\n                                    tilePixel = (tilePixel < 1 ? spriteBg : tilePixel < 0xFF ? tilePixel : spriteFg);\n                                    /*if (tilePixel === 0x00) tilePixel = tileBgColor;\n                                    if (tilePixel === 0xFF) tilePixel = tileFgColor;\n                                    if (tilePixel === 0x00) tilePixel = spriteBg;\n                                    if (tilePixel === 0xFF) tilePixel = spriteFg;\n                                    */\n                                    if (tilePixel !== 0) this._drawPixel(x, y, scale, tilePixel);\n                                }\n                            }\n                            \n                        }\n                    }\n                    \n                }\n            }\n        }\n\n\n        // at the end, convert to 24-bit color\n        for (let y = SCREEN_ROWS - 1; y >= 0; y--) {\n            for (let x = SCREEN_COLUMNS - 1; x >= 0; x--) {\n                const offset = y * SCREEN_COLUMNS + x;\n                const curPixelColor = (y < BORDER_HEIGHT + extraBorderHeight) ||\n                                      (y >= SCREEN_ROWS - (BORDER_HEIGHT + extraBorderHeight)) ||\n                                      (x < BORDER_WIDTH + extraBorderWidth) ||\n                                      (x >= SCREEN_COLUMNS - (BORDER_WIDTH + extraBorderWidth)) ?\n                                      borderColor : this._pixelFrame[offset];\n                const paletteOffset = curPixelColor << 2;\n                const r = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 0);\n                const g = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 1);\n                const b = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 2);\n\n                const frameOffset = offset * 4;\n                this._frame[frameOffset + 0] = r;\n                this._frame[frameOffset + 1] = g;\n                this._frame[frameOffset + 2] = b;\n                this._frame[frameOffset + 3] = 0xFF;\n            }\n        }\n        if (this._stats) this._stats.end();\n    }\n    _generateRasterLine2() {\n        //if (this._stats) this._stats.begin();\n        // if we want, we can render the whole screen at once. This isn't as \"true\" to\n        // the spirit of Retroputer's lower-level screen generator, but in _most_ cases\n        // it's close enough. It's also WAY more performant.\n        const palettePage = this._read(PALETTE_PAGE);\n        const paletteAddr = palettePage << 14;\n        const bgColor = this._read(BG_COLOR);\n        const borderCfg = this._read(BORDER_CFG);\n        const borderColor = (borderCfg & 0b10000000) ? this._read(BORDER_COLOR) : bgColor;\n        const extraBorderWidth  = (borderCfg & 0b00000111) << 1; // border width is * 2\n        const extraBorderHeight = (borderCfg & 0b00111000) >> 2; // same for height\n        const trapOnRaster = this._read(TRAP_ON_RASTER);\n        const currentRaster = this._raster;\n        const layers = this._getLayers();\n        let spritesByLayer = this._spritesByLayer;\n\n        // draw the background\n        if (currentRaster === 0) this._pixelFrame.fill(bgColor);\n\n\n        // draw each layer and attendant sprites\n        for (let layerIdx = 0; layerIdx < 4; layerIdx++) {\n            const layer = layers[layerIdx];\n            const sprites = spritesByLayer[layerIdx];\n            if (layer.visible) {\n                const pageAddr = layer.page << 14;\n                const tilePageAddr = layer.tilePage << 14;\n                const halfWidth = (layer.mode & 1) === 0;\n                const maxWidth = (SCREEN_COLUMNS - (BORDER_WIDTH << 1)) >> halfWidth;\n                const maxHeight = (SCREEN_ROWS - (BORDER_HEIGHT << 1)) >> halfWidth;\n\n                const xOffset = layer.xOffset - ((layer.xOffset > 127) << 8) << halfWidth;\n                const yOffset = layer.yOffset - ((layer.yOffset > 127) << 8) << halfWidth;\n\n                const xLeftCrop = layer.xWindow << halfWidth;\n                const xRightCrop = maxWidth - xLeftCrop;\n                const yTopCrop = layer.yWindow << halfWidth;\n                const yBottomCrop = maxHeight - yTopCrop;\n                const scale = (layer.scale + 1) - (layer.mode & 1);\n\n                if (layer.mode >= 2) {\n                    // hi-res modes\n                    // TODO: Mode 3 (512x384)\n                    // TODO: Cropping\n                    // BUG?: Scaling might overwrite unexpected places?\n                    const rows = ADDRESSABLE_ROWS / (2 - (layer.mode & 1));\n                    const cols = ADDRESSABLE_COLUMNS / (2 - (layer.mode & 1));\n                    const firstVisibleRow = (layer.yWindow) // << (scale - 1));\n                    const lastVisibleRow = rows - (layer.yWindow) // << (scale - 1)));\n                    const firstVisibleColumn = (layer.xWindow) // << (scale - 1));\n                    const lastVisibleColumn = cols - (layer.xWindow) // << (scale -1 ));\n\n                    //for (let row = lastVisibleRow - 1; row >= firstVisibleRow; row--) {\n                    let row = currentRaster;\n                        for (let col = lastVisibleColumn - 1; col >= firstVisibleColumn; col--) {\n                            const x = BORDER_WIDTH + ((col) << scale) + xOffset;\n                            const y = BORDER_HEIGHT + ((row) << scale) + yOffset;\n                            if (x >= 0 && y >= 0 && x < SCREEN_COLUMNS && y < SCREEN_ROWS) {\n                                let tilePixel = this.memory.readUnmappedByte(pageAddr + (row << 8) + col);\n                                if (tilePixel === 0x00) tilePixel = layer.bg;\n                                if (tilePixel === 0xFF) tilePixel = layer.fg;\n                                if (tilePixel !== 0) this._drawPixel(x, y, scale, tilePixel);\n                            }\n                        }\n                    //}\n                } else {\n                    // text modes\n                    const rows = 24 * (layer.mode + 1);\n                    const cols = 32 * (layer.mode + 1);\n                    const firstVisibleRow = (layer.yWindow) // << (scale - 1));\n                    const lastVisibleRow = rows - (layer.yWindow) // << (scale - 1)));\n                    const firstVisibleColumn = (layer.xWindow) // << (scale - 1));\n                    const lastVisibleColumn = cols - (layer.xWindow) // << (scale -1 ));\n                    const lineSpacing = layer.lineSpacing;\n                    const rowMultiplier = 8 + lineSpacing;\n                    const rowHeight = rowMultiplier - 1;\n                    //for (let row = lastVisibleRow- 1; row >= firstVisibleRow; row--) {\n                    //let row = (currentRaster / rowMultiplier);\n                    let row = Math.floor(currentRaster / rowMultiplier);\n                        for (let col = lastVisibleColumn - 1; col >= firstVisibleColumn; col--) {\n                            const tilePos = (row << (5 + (layer.mode !== 0))) + col;\n                            const tile = this.memory.readUnmappedByte(pageAddr + tilePos)\n                            const tileFgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 0x1000);\n                            const tileBgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 0x2000);\n                            let _y = currentRaster % rowMultiplier;\n                            //for (let _y = rowHeight; _y >= 0; _y--) {\n                                const y = BORDER_HEIGHT + (((row * rowMultiplier) + _y) << scale) + yOffset;\n                                //console.log(y, currentRaster);\n                                for (let _x = 7; _x >= 0; _x--) {\n                                    const x = BORDER_WIDTH + (((col * 8) + _x) << scale) + xOffset;\n                                    const offset = y * SCREEN_COLUMNS + x;\n                                    if (x >= 0 && y >= 0 && x < SCREEN_COLUMNS && y < SCREEN_ROWS) {\n                                        let tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (_y << 3) + _x);\n                                        if (_y > 7) {\n                                            if (tile < 128) { tilePixel = 0; } // let graphics characters connect, but not alpha chars\n                                            else { tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (7 << 3) + _x); }\n                                        }\n\n                                        if (tilePixel === 0x00) tilePixel = tileBgColor;\n                                        if (tilePixel === 0xFF) tilePixel = tileFgColor;\n                                        if (tilePixel === 0x00) tilePixel = layer.bg;\n                                        if (tilePixel === 0xFF) tilePixel = layer.fg;\n                                        if (tilePixel !== 0) this._drawPixel(x, y, scale, tilePixel);\n                                    }\n                            //    }\n                           }\n                            \n                        }\n                    //}\n\n                } \n            }\n            for (let spriteIdx = sprites.length - 1; spriteIdx >= 0; spriteIdx--) {\n                const sprite = sprites[spriteIdx];\n                if (sprite.visible) {\n                    const rows = sprite.height;\n                    const cols = sprite.width;\n                    const scale = sprite.scale;\n                    if (currentRaster < sprite.yOffset) continue;\n                    if (currentRaster > sprite.yOffset + (rows * 8) << scale) continue;\n                    for (let row = rows - 1; row >= 0; row--) {\n                        for (let col = cols - 1; col >= 0; col--) {\n                            const tilePos = (row * cols) + col;\n                            const tile = this.memory.readUnmappedByte(sprite.pageAddr + tilePos)\n                            const tileFgColor = this.memory.readUnmappedByte(sprite.pageAddr + tilePos + 0x40);\n                            const tileBgColor = this.memory.readUnmappedByte(sprite.pageAddr + tilePos + 0x80);\n                            for (let _y = 7; _y >= 0; _y--) {\n                                const y = (((row * 8) + _y) << scale) + sprite.yOffset;\n                                //if (y !== currentRaster) continue;\n                                for (let _x = 7; _x >= 0; _x--) {\n                                    const x = (((col * 8) + _x) << scale) + sprite.xOffset;\n                                    let tilePixel = this.memory.readUnmappedByte(sprite.tilePageAddr + (tile << 6) + (_y << 3) + _x);\n\n                                    tilePixel = (tilePixel < 1 ? tileBgColor : tilePixel < 0xFF ? tilePixel : tileFgColor);\n                                    tilePixel = (tilePixel < 1 ? sprite.bg : tilePixel < 0xFF ? tilePixel : sprite.fg);\n                                    /*if (tilePixel === 0x00) tilePixel = tileBgColor;\n                                    if (tilePixel === 0xFF) tilePixel = tileFgColor;\n                                    if (tilePixel === 0x00) tilePixel = sprite.bg;\n                                    if (tilePixel === 0xFF) tilePixel = sprite.fg;\n                                    */\n                                    if (tilePixel !== 0) this._drawPixelOnRaster(x, y, scale, tilePixel, currentRaster);\n                                }\n                            }\n                            \n                        }\n                    }\n                    \n                }\n            }\n        }\n\n\n        // at the end, convert to 24-bit color\n        //for (let y = SCREEN_ROWS - 1; y >= 0; y--) {\n        let y = currentRaster;\n            for (let x = SCREEN_COLUMNS - 1; x >= 0; x--) {\n                const offset = y * SCREEN_COLUMNS + x;\n                const curPixelColor = (y < BORDER_HEIGHT + extraBorderHeight) ||\n                                      (y >= SCREEN_ROWS - (BORDER_HEIGHT + extraBorderHeight)) ||\n                                      (x < BORDER_WIDTH + extraBorderWidth) ||\n                                      (x >= SCREEN_COLUMNS - (BORDER_WIDTH + extraBorderWidth)) ?\n                                      borderColor : this._pixelFrame[offset];\n                const paletteOffset = curPixelColor << 2;\n                const r = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 0);\n                const g = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 1);\n                const b = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 2);\n\n                const frameOffset = offset * 4;\n                this._frame[frameOffset + 0] = r;\n                this._frame[frameOffset + 1] = g;\n                this._frame[frameOffset + 2] = b;\n                this._frame[frameOffset + 3] = 0xFF;\n            }\n        //}\n        //if (this._stats) this._stats.end();\n    }\n\n    _generateRasterLine() {\n        // load in the configuration settings from our ports\n        const palettePage = this._read(PALETTE_PAGE);\n        const paletteAddr = palettePage << 14;\n        const bgColor = this._read(BG_COLOR);\n        const borderCfg = this._read(BORDER_CFG);\n        const borderColor = (borderCfg & 0b10000000) ? this._read(BORDER_COLOR) : bgColor;\n        const extraBorderWidth  = (borderCfg & 0b00000111) << 1; // border width is * 2\n        const extraBorderHeight = (borderCfg & 0b00111000) >> 2; // same for height\n        const trapOnRaster = this._read(TRAP_ON_RASTER);\n        const currentRaster = this._raster;\n        const layers = this._getLayers();\n        let spritesByLayer = this._spritesByLayer;\n\n        const y = currentRaster;\n        let i = 0, j = 0, l = 0;\n        let curPixelColor = 0, tempPixelColor = 0;\n        let r = 0, g = 0, b = 0, paletteOffset, frameOffset;\n        let layer;\n        let charCol, charColX, charRow, charRowY, tilePos, tile, tilePixel, tileFgColor, tileBgColor;\n        let aX, aY;\n        let pageAddr, tilePageAddr;\n        let halfWidth;\n        let whichBit;\n        let lineHeight, lineSpacing, rowMultiplier;\n        let maxWidth = 0, maxHeight = 0;\n        let xOffset = 0, yOffset = 0;\n        let xLeftCrop = 0, xRightCrop = 0;\n        let yTopCrop = 0, yBottomCrop = 0;\n        let sprites = [];\n        let sprite;\n\n        for (let x = 0; x < SCREEN_COLUMNS; x++) {\n            if ((x < BORDER_WIDTH + extraBorderWidth) || (x >= ADDRESSABLE_COLUMNS + BORDER_WIDTH - extraBorderWidth)) {\n                curPixelColor = borderColor;\n            } else if ((y < BORDER_HEIGHT + extraBorderHeight) || (y >= ADDRESSABLE_ROWS + BORDER_HEIGHT - extraBorderHeight)) {\n                curPixelColor = borderColor;\n            } else {\n                curPixelColor = bgColor;\n\n                for (i = 0; i < 4; i++) {\n                    layer = layers[i];\n                    if (layer.visible === 1) {\n                        pageAddr = layer.page << 14;\n                        tilePageAddr = layer.tilePage << 14;\n                        halfWidth = (layer.mode & 1) === 0;\n                        lineSpacing = layer.lineSpacing;\n                        lineHeight = 8 + lineSpacing;\n                        rowMultiplier = lineHeight - 1;\n\n                        maxWidth = (SCREEN_COLUMNS - (BORDER_WIDTH << 1)) >> halfWidth;\n                        maxHeight = (SCREEN_ROWS - (BORDER_HEIGHT << 1)) >> halfWidth;\n\n                        xOffset = layer.xOffset - ((layer.xOffset > 127) << 8) << halfWidth;\n                        yOffset = layer.yOffset - ((layer.yOffset > 127) << 8) << halfWidth;\n\n                        xLeftCrop = layer.xWindow << halfWidth;\n                        xRightCrop = maxWidth - xLeftCrop;\n                        yTopCrop = layer.yWindow << halfWidth;\n                        yBottomCrop = maxHeight - yTopCrop;\n\n                        aX = ((x - BORDER_WIDTH) - xOffset) >> halfWidth >> layer.scale;\n                        aY = ((y - BORDER_HEIGHT) - yOffset) >> halfWidth >> layer.scale;\n\n                        if (aX < xLeftCrop || aX >= xRightCrop) tempPixelColor = 0\n                        else if (aY < yTopCrop || aY >= yBottomCrop) tempPixelColor = 0\n                        else if (layer.mode >= 2) {\n                            tempPixelColor = this.memory.readUnmappedByte(pageAddr + (aY << 8) + aX);\n                        } else {\n                            charCol = aX >>> 3;\n                            charColX = aX & 0x07;\n                            charRow = aY / lineHeight; //aY >>> 3;\n                            charRowY = aY % lineHeight; // & 0x07;\n                            tilePos = (charRow << (5 + (layer.mode !== 0))) + charCol;\n                            tile = this.memory.readUnmappedByte(pageAddr + tilePos)\n                            tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (charRowY << 3) + charColX);\n                            if (charRowY > 7) {\n                                if (tile < 128) { tilePixel = 0; } // let graphics characters connect, but not alpha chars\n                                else { tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (7 << 3) + charColX); }\n                            }\n                            tileFgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 0x1000);\n                            tileBgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 0x2000);\n\n                            if (tilePixel === 0x00) tempPixelColor = tileBgColor;\n                            else if (tilePixel === 0xFF) tempPixelColor = tileFgColor;\n                            else tempPixelColor = tilePixel;\n                            if (tempPixelColor === 0x00) tempPixelColor = layer.bg\n                            else if (tempPixelColor === 0xFF) tempPixelColor = layer.fg;\n                        }\n                        curPixelColor = tempPixelColor !== 0 ? tempPixelColor : curPixelColor;\n                    }\n                    sprites = spritesByLayer[i];\n                    for (j = 0, l = sprites.length; j < l; j++) {\n                        sprite = sprites[j];\n                        if (sprite.visible === 1) {\n                            pageAddr = sprite.pageAddr; //(sprite.page << 14) + (sprite.idx << 8);\n                            tilePageAddr = sprite.tilePageAddr; //sprite.tilePage << 14;\n                            xOffset = sprite.xOffset; //sprite.x - (sprite.x > 32767 ? 65536 : 0);\n                            yOffset = sprite.yOffset; //sprite.y - (sprite.y > 32767 ? 65536 : 0);\n                            maxWidth = sprite.maxWidth; //sprite.width << 3;\n                            maxHeight = sprite.maxHeight; //sprite.height << 3;\n\n                            aX = (x - xOffset) >> sprite.scale;\n                            aY = (y - yOffset) >> sprite.scale;\n\n\n                            tempPixelColor = 0;\n                            if ((aX >= 0 && aX < maxWidth) && (aY >= 0 && aY < maxHeight)) {\n                                charCol = aX >>> 3;\n                                charColX = aX & 0x07;\n                                charRow = aY >>> 3;\n                                charRowY = aY & 0x07;\n                                tilePos = (charRow * sprite.width) + charCol;\n                                tile = this.memory.readUnmappedByte(pageAddr + tilePos)\n                                tilePixel = this.memory.readUnmappedByte(tilePageAddr + (tile << 6) + (charRowY << 3) + charColX);\n                                tileFgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 0x0040);\n                                tileBgColor = this.memory.readUnmappedByte(pageAddr + tilePos + 0x0080);\n                                if (tilePixel === 0x00) tempPixelColor = tileBgColor;\n                                else if (tilePixel === 0xFF) tempPixelColor = tileFgColor;\n                                else tempPixelColor = tilePixel;\n                                if (tempPixelColor === 0x00) tempPixelColor = sprite.bg\n                                else if (tempPixelColor === 0xFF) tempPixelColor = sprite.fg;\n                            }\n                            curPixelColor = tempPixelColor !== 0 ? tempPixelColor : curPixelColor;\n                        }\n                    }\n                }\n            }\n\n            paletteOffset = curPixelColor << 2;\n            r = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 0);\n            g = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 1);\n            b = this.memory.readUnmappedByte(paletteAddr + paletteOffset + 2);\n\n            frameOffset = (((y << 9) + (y << 7)) + x) << 2;\n            this._frame[frameOffset + 0] = r;\n            this._frame[frameOffset + 1] = g;\n            this._frame[frameOffset + 2] = b;\n            this._frame[frameOffset + 3] = 0xFF;\n        }\n    }\n\n    _adjustRasterSpeed() {\n        const now = this._performance.now();\n        if (now >= this._lastPerformance + MS_PER_SEC) {\n            const delta = (now - this._lastPerformance) / MS_PER_SEC;\n            this._lastPerformance = now;\n\n            //const numSeconds = (now - this._startTime) / MS_PER_SEC;\n            //this._ticksPerSecond = ((this._ticksPerSecond * SAMPLES) + this._ticksThisSecond) / (SAMPLES + 1);\n            this._ticksPerSecond = (this._ticksLastSecond + (this._ticksThisSecond / delta)) / 2;\n\n            if (this.adjustPerformance) {\n                this._ticksPerRaster = Math.floor(this._ticksPerSecond / (TARGET_FPS * SCREEN_ROWS)) /// 2;\n            }\n            this._ticksLastSecond = this._ticksThisSecond / delta;\n            this._ticksThisSecond = 0;\n        }\n    }\n}", "import { Device } from \"../core/Device.js\";\n\nconst SOURCE_ADDRESS = 0x00;\nconst TARGET_ADDRESS = 0x04;\nconst LENGTH = 0x08;\nconst MODE = 0x0C;\nconst FILL = 0x0D;\nconst SKIP = 0x0A;\nconst TIMES = 0x0E;\n\nconst MODE_COPY = 0x01;\nconst MODE_SWAP = 0x02;\nconst MODE_FILL = 0x04;\n\nconst MIRROR_MAP = {\n    [SOURCE_ADDRESS + 0]: true,\n    [SOURCE_ADDRESS + 1]: true,\n    [SOURCE_ADDRESS + 2]: true,\n    [TARGET_ADDRESS + 0]: true,\n    [TARGET_ADDRESS + 1]: true,\n    [TARGET_ADDRESS + 2]: true,\n    [LENGTH + 0]: true,\n    [LENGTH + 1]: true,\n    [MODE]: true,\n    [FILL]: true,\n    [SKIP]: true,\n    [SKIP+1]: true,\n    [TIMES]: true,\n    [TIMES+1]: true\n};\n\nexport class DMA extends Device {\n    constructor({device = 13, length = 16, controller, memory = undefined, clock = undefined}) {\n        super({device, length, controller, memory, clock});\n    }\n\n    pullFromBus(address) {\n        super.pullFromBus(address);\n        if (address === MODE) {\n            let source = ((this._read(SOURCE_ADDRESS + 0) << 16) |\n                            (this._read(SOURCE_ADDRESS + 1) <<  8) |\n                            (this._read(SOURCE_ADDRESS + 2))) & 0x7FFFF;\n            let target = ((this._read(TARGET_ADDRESS + 0) << 16) |\n                            (this._read(TARGET_ADDRESS + 1) <<  8) |\n                            (this._read(TARGET_ADDRESS + 2))) & 0x7FFFF;\n            const length = ((this._read(LENGTH + 0) << 8) |\n                            (this._read(LENGTH + 1))) & 0xFFFF;\n            const fill = this._read(FILL);\n            const skip = ((this._read(SKIP) << 8) | this._read(SKIP+1)) & 0xFFFF;\n            let times = ((this._read(TIMES) << 8) | this._read(TIMES+1)) & 0xFFFF;\n            const mode = this._read(MODE);\n            do {\n                switch (mode) {\n                    case MODE_COPY:\n                        this.memory.copyWithin(source, target, length); \n                        break;\n                    case MODE_SWAP:\n                        this.memory.swapWithin(source, target, length);\n                        break;\n                    case MODE_FILL:\n                        this.memory.fillWithin(fill, source, length);\n                        break;\n                }\n                times--;\n                source += skip;\n                target += skip;\n            } while (times > 0);\n        }\n    }\n\n    get mirrored() {\n        return MIRROR_MAP;\n    }\n}", "import { Device, _buffer } from \"../core/Device.js\";\n\nconst PORT_KEY_PRESSED      = 0x00;\nconst PORT_BUFFER_REMAINING = 0x01;\nconst PORT_ROW_0_QUAD_0     = 0x02;\nconst PORT_ROW_0_QUAD_1     = 0x03;\nconst PORT_ROW_1_QUAD_0     = 0x04;\nconst PORT_ROW_1_QUAD_1     = 0x05;\nconst PORT_ROW_2_QUAD_0     = 0x06;\nconst PORT_ROW_2_QUAD_1     = 0x07;\nconst PORT_ROW_3_QUAD_0     = 0x08;\nconst PORT_ROW_3_QUAD_1     = 0x09;\nconst PORT_ROW_4_QUAD_0     = 0x0A;\nconst PORT_ROW_4_QUAD_1     = 0x0B;\n\nconst MIRROR_MAP = {\n    [PORT_KEY_PRESSED]: true,\n    [PORT_BUFFER_REMAINING]: true,\n    [PORT_ROW_0_QUAD_0]: true,\n    [PORT_ROW_0_QUAD_1]: true,\n    [PORT_ROW_1_QUAD_0]: true,\n    [PORT_ROW_1_QUAD_1]: true,\n    [PORT_ROW_2_QUAD_0]: true,\n    [PORT_ROW_2_QUAD_1]: true,\n    [PORT_ROW_3_QUAD_0]: true,\n    [PORT_ROW_3_QUAD_1]: true,\n    [PORT_ROW_4_QUAD_0]: true,\n    [PORT_ROW_4_QUAD_1]: true,\n};\n\nconst NUL =  0;\nconst BRK =  3;\nconst BEL =  7;\nconst BS  =  8;\nconst TAB =  9;\nconst LF  = 10;\n\nconst FF  = 12;\nconst CR  = 13;\n\nconst ARR = 16;\nconst ARL = 17;\nconst F1  = 18;\nconst F2  = 19;\nconst F3  = 20;\nconst F4  = 21;\nconst F5  = 22;\nconst F6  = 23;\nconst F7  = 24;\nconst F8  = 25;\nconst F9  = 26;\nconst F10 = 27;\nconst DEL = 29;\nconst ARU = 30;\nconst ARD = 31;\n\nexport const KEYBOARD_MAP = [\n    /* Key        Unshifted Shf   GrU   GrS Ctl */\n    [ [\"Backquote\",    \"`\", \"~\", 0xFF, 0x8E,  0], \n      [[\"Digit1\", \"Numpad1\"],       \"1\", \"!\", 0xE4, 0x86, 0x1C], \n      [[\"Digit2\", \"Numpad2\"],       \"2\", \"@\", 0xE5, 0x87, 0x1D], \n      [[\"Digit3\", \"Numpad3\"],       \"3\", \"#\", 0xFB, 0x88, 0x1E],      \n      [[\"Digit4\", \"Numpad4\"],       \"4\", \"$\", 0xF0, 0x98, 0x1F], \n      [[\"Digit5\", \"Numpad5\"],       \"5\", \"%\", 0xF1, 0xA8,  0], \n      [[\"Digit6\", \"Numpad6\"],       \"6\", \"^\", 0xF2, 0x96,  0], \n      [[\"Digit7\", \"Numpad7\"],       \"7\", \"&\", 0xF3, 0x97,  0], \n      [[\"Digit8\", \"Numpad8\", \"NumpadMultiply\"],       \"8\", \"*\", 0xF4, 0xA6,  0], \n      [[\"Digit9\", \"Numpad9\"],       \"9\", \"(\", 0xF5, 0xA7,  0], \n      [[\"Digit0\", \"Numpad0\"],       \"0\", \")\", 0xF6, 0x9E, 0x1B], \n      [[\"Minus\", \"NumpadSubtract\"],        \"-\", \"_\", 0xED, 0x93,  0],       \n      [[\"Equal\", \"NumpadEqual\", \"NumpadAdd\"],        \"=\", \"+\", 0xEB, 0x95,  0], \n      [\"Backspace\",     BS, DEL, 0x7F,  DEL, FF], \n      [\"F1\",            F1,  F1,   F1,   F1, F1], \n      [\"F2\",            F2,  F2,   F2,   F2, F2]],\n    [ [\"Tab\",          TAB, TAB,    0,    0,  0], \n      [\"KeyQ\",         \"q\", \"Q\", 0xDA, 0xD5, \"Q\".charCodeAt(0) - 64], \n      [\"KeyW\",         \"w\", \"W\", 0xC2, 0xD1, \"W\".charCodeAt(0) - 64], \n      [\"KeyE\",         \"e\", \"E\", 0xBF, 0xB8, \"E\".charCodeAt(0) - 64],        \n      [\"KeyR\",         \"r\", \"R\", 0xC9, 0xD6, \"R\".charCodeAt(0) - 64], \n      [\"KeyT\",         \"t\", \"T\", 0xCB, 0xD2, \"T\".charCodeAt(0) - 64], \n      [\"KeyY\",         \"y\", \"Y\", 0xBB, 0xB7, \"Y\".charCodeAt(0) - 64], \n      [\"KeyU\",         \"u\", \"U\", 0xE9, 0xE3, \"U\".charCodeAt(0) - 64],\n      [\"KeyI\",         \"i\", \"I\", 0xDF, 0xC4, \"I\".charCodeAt(0) - 64], \n      [\"KeyO\",         \"o\", \"O\", 0xE8, 0xE2, \"O\".charCodeAt(0) - 64], \n      [\"KeyP\",         \"p\", \"P\", 0xB2, 0x83, \"P\".charCodeAt(0) - 64], \n      [\"BracketLeft\",  \"[\", \"{\", 0xEC, 0x85,  0], \n      [\"BracketRight\", \"]\", \"}\", 0xEA, 0x84,  0], \n      [\"Backslash\",   \"\\\\\", \"|\", 0xEF, 0xA4,  0], \n      [\"F3\",            F3,  F3,   F3,   F3, F3], \n      [\"F4\",            F4,  F4,   F4,   F4, F4]],\n    [ [\"CapsLock\",       0,   0,    0,    0,  0], \n      [\"KeyA\",         \"a\", \"A\", 0xC3, 0xC6, \"A\".charCodeAt(0) - 64], \n      [\"KeyS\",         \"s\", \"S\", 0xC5, 0xD8, \"S\".charCodeAt(0) - 64], \n      [\"KeyD\",         \"d\", \"D\", 0xB4, 0xB5, \"D\".charCodeAt(0) - 64],\n      [\"KeyF\",         \"f\", \"F\", 0xCC, 0xC7, \"F\".charCodeAt(0) - 64], \n      [\"KeyG\",         \"g\", \"G\", 0xCE, 0xD7, \"G\".charCodeAt(0) - 64], \n      [\"KeyH\",         \"h\", \"H\", 0xB9, 0xB6, \"H\".charCodeAt(0) - 64], \n      [\"KeyJ\",         \"j\", \"J\", 0xDD, 0xB3, \"J\".charCodeAt(0) - 64], \n      [\"KeyK\",         \"k\", \"K\", 0xDB, 0x9F, \"K\".charCodeAt(0) - 64], \n      [\"KeyL\",         \"l\", \"L\", 0xDE, 0xBA, \"L\".charCodeAt(0) - 64], \n      [\"Semicolon\",    \";\", \":\", 0xB0, 0xA3,  0], \n      [\"Quote\",        `'`, `\"`, 0xB1, 0xA5,  0],\n      undefined,                                  \n      [[\"Enter\", \"NumpadEnter\"],         CR,  CR,  CR,   CR,  CR], \n      [\"F5\",            F5,  F5,  F5,   F5,  F5], \n      [\"F6\",            F6,  F6,  F6,   F6,  F6]],\n    [ [\"ShiftLeft\",      0,   0,    0,    0,  0], \n      [\"KeyZ\",         \"z\", \"Z\", 0xC0, 0xD4, \"Z\".charCodeAt(0) - 64], \n      [\"KeyX\",         \"x\", \"X\", 0xC1, 0xCF, \"X\".charCodeAt(0) - 64], \n      [\"KeyC\",         \"c\", \"C\", 0xD9, 0xBE, \"C\".charCodeAt(0) - 64],\n      [\"KeyV\",         \"v\", \"V\", 0xC8, 0xD3, \"V\".charCodeAt(0) - 64], \n      [\"KeyB\",         \"b\", \"B\", 0xCA, 0xD0, \"B\".charCodeAt(0) - 64], \n      [\"KeyN\",         \"n\", \"N\", 0xBC, 0xBD, \"N\".charCodeAt(0) - 64], \n      [\"KeyM\",         \"m\", \"M\", 0xE7, 0xE1, \"M\".charCodeAt(0) - 64],\n      [\"Comma\",        \",\", \"<\", 0xDC, 0xCD,  0], \n      [[\"Period\", \"NumpadDecimal\"],       \".\", \">\", 0xE6, 0xE0,  0], \n      [[\"Slash\", \"NumpadDivide\"],        \"/\", \"?\", 0xEE, 0x8F,  0], \n      undefined,\n      [\"ArrowUp\",      ARU, ARU,  ARU,  ARU,ARU], \n      [\"ShiftRight\",     0,   0,    0,    0,  0], \n      [\"F7\",            F7,  F7,   F7,   F7, F7], \n      [\"F8\",            F8,  F8,   F8,   F8, F8]],\n    [ [[\"MetaLeft\", \"MetaRight\"],       0,   0,    0,    0,  0], \n      [[\"AltLeft\", \"AltRight\"],        0,   0,    0,    0,  0], \n      [[\"ControlLeft\", \"ControlRight\"],    0,   0,    0,    0,  0], \n      undefined,\n      undefined,                                  \n      undefined,                \n      undefined,               \n      undefined,\n      [\"Space\",         32,  32,   32,   32, 32], \n      undefined,                \n      undefined,               \n      [\"ArrowLeft\",    ARL, ARL,  ARL,  ARL,ARL],\n      [\"ArrowDown\",    ARD, ARD,  ARD,  ARD,ARD], \n      [\"ArrowRight\",   ARR, ARR,  ARR,  ARR,ARR], \n      [\"F9\",            F9,  F9,   F9,   F9, F9], \n      [\"F10\",          F10, F10,  F10,  F10,F10]]\n];\n\n\nconst KEYCODE_MAP = {};\nKEYBOARD_MAP.map((keys, row) => keys && keys.map((data, col) => {\n    if (data) {\n        const [key, unshifted, shifted, gru, grs, ctl] = data;\n        const tmp = { addr: (row * 16 + col), unshifted, shifted, gru, grs, ctl };\n        if (typeof tmp.unshifted === \"string\") tmp.unshifted = tmp.unshifted.charCodeAt(0);\n        if (typeof tmp.shifted === \"string\") tmp.shifted = tmp.shifted.charCodeAt(0);\n        if (typeof tmp.gru === \"string\") tmp.gru = tmp.gru.charCodeAt(0);\n        if (typeof tmp.grs === \"string\") tmp.grs = tmp.grs.charCodeAt(0);\n        if (typeof tmp.ctl === \"string\") tmp.ctl = tmp.ctl.charCodeAt(0);\n        if (Array.isArray(key)) {\n            for (let theKey of key) {\n                KEYCODE_MAP[theKey] = tmp;\n            }\n        } else {\n            KEYCODE_MAP[key] = tmp;\n        }\n    }\n}));\n\nfunction mapKeyCode(code) {\n    const data = KEYCODE_MAP[code];\n    if (data) {\n        const addr = data.addr;\n        if (addr !== undefined) {\n            const bit  =   addr & 0b00000111; // the low three bits define which bit should be toggled\n            const quad = (addr & 0b11111000) >> 3; // the high bits define the quadrant\n            const mask = ~(1 << bit);\n\n            return { mask, bit, port: quad + 0x02, data };\n        }\n        return {};\n    }\n    return {};\n}\n\nexport class Keyboard extends Device {\n    constructor({device = 3, length = 16, controller, memory = undefined, clock = undefined}) {\n        super({device, length, controller, memory, clock});\n\n        this._buffer = \"\";\n    }\n\n    get isShifted() {\n        return (this._read(PORT_ROW_3_QUAD_0) & 1) || (this._read(PORT_ROW_3_QUAD_1) & 32);\n\n    }\n\n    get isGr() {\n        return !!(this._read(PORT_ROW_4_QUAD_0) & 2);\n\n    }\n\n    get isCtl() {\n        return !!(this._read(PORT_ROW_4_QUAD_0) & 4);\n    }\n\n    setRawKey(row, col) {\n        const bit  = col & 0b00000111;\n        const port = 2 + ((((row * 16) + col) & 0b11111000) >> 3);\n        const mask = ~(1 << bit);\n        const cur = this._read(port);\n        this._write(port, (cur & mask) | (1 << bit));\n    }\n\n    clearRawKey(row, col) {\n        const bit  = col & 0b00000111;\n        const port = 2 + ((((row * 16) + col) & 0b11111000) >> 3);\n        const mask = ~(1 << bit);\n        const cur = this._read(port);\n        this._write(port, (cur & mask));\n    }\n\n    getRawKey(row, col) {\n        const bit  = col & 0b00000111;\n        const port = 2 + ((((row * 16) + col) & 0b11111000) >> 3);\n        const mask = ~(1 << bit);\n        const cur = this._read(port);\n        return (cur & (1<< bit)) ? 1 : 0;\n    }\n\n    keyPressed(which) {\n        this._buffer += String.fromCharCode(which);\n        this.requestService();\n    }\n    keyDown(which) {\n        const { mask, port, bit, data } = mapKeyCode(which);\n        if (port !== undefined) {\n            const cur = this._read(port);\n            this._write(port, (cur & mask) | (1 << bit)); // set the bit to indicate something is pressed\n        }\n        if (data) {\n            const isShifted = (this._read(PORT_ROW_3_QUAD_0) & 1) || (this._read(PORT_ROW_3_QUAD_1) & 32);\n            const isGr = !!(this._read(PORT_ROW_4_QUAD_0) & 2);\n            const isCtl = !!(this._read(PORT_ROW_4_QUAD_0) & 4);\n\n            let key;\n\n            if ( isCtl)              { this.keyPressed(data.ctl); return; }\n            if (!isGr && !isShifted) { this.keyPressed(data.unshifted); return; }\n            if (!isGr &&  isShifted) { this.keyPressed(data.shifted); return; }\n            if ( isGr && !isShifted) { this.keyPressed(data.gru); return; }\n            if ( isGr &&  isShifted) { this.keyPressed(data.grs); return; }\n        }\n        this.requestService();\n    }\n    keyUp(which) {\n        const { mask, port, data } = mapKeyCode(which);\n        if (port !== undefined) {\n            const cur = this._read(port);\n            this._write(port, (cur & mask)); // clear the bit to indicate key is not pressed\n        }\n        this.requestService();\n    }\n\n    _read(address = 0) {\n        let data = super._read(address);\n\n        if (address === PORT_KEY_PRESSED) {\n            data = this._buffer.charCodeAt(0);\n        }\n        if (address === PORT_BUFFER_REMAINING) {\n            data = 255 - Math.min(this._buffer.length, 255);\n        }\n\n        return data;\n    }\n\n    putOnBus(address = 0) {\n        super.putOnBus(address);\n        if (address === PORT_KEY_PRESSED) {\n            // reading the buffer shifts out the buffer\n            this._buffer = this._buffer.substr(1);\n        }\n    }\n\n    get mirrored() {\n        return MIRROR_MAP;\n    }\n}", "import { Device, _buffer } from \"../core/Device.js\";\n\nconst PORT_RTC_HOURS       = 0x00;\nconst PORT_RTC_MINUTES     = 0x01;\nconst PORT_RTC_SECONDS     = 0x02;\nconst PORT_RTC_HUNDREDTHS  = 0x03;\nconst PORT_TIMER_0_HIGH    = 0x04;\nconst PORT_TIMER_0_LOW     = 0x05;\nconst PORT_TIMER_1_HIGH    = 0x06;\nconst PORT_TIMER_1_LOW     = 0x07;\nconst PORT_TIMER_2_HIGH    = 0x08;\nconst PORT_TIMER_2_LOW     = 0x09;\nconst PORT_TIMER_3_HIGH    = 0x0A;\nconst PORT_TIMER_3_LOW     = 0x0B;\nconst PORT_RANDOM_HIGH     = 0x0C;\nconst PORT_RANDOM_LOW      = 0x0D;\nconst PORT_TIMER_MODES     = 0x0E;\nconst PORT_RESET           = 0x0F;\n\nconst MIRROR_MAP = {\n    [PORT_RTC_HOURS]: true,\n    [PORT_RTC_MINUTES]: true,\n    [PORT_RTC_SECONDS]: true,\n    [PORT_RTC_HUNDREDTHS]: true,\n    [PORT_TIMER_0_HIGH]: true,\n    [PORT_TIMER_0_LOW]: true,\n    [PORT_TIMER_1_HIGH]: true,\n    [PORT_TIMER_1_LOW]: true,\n    [PORT_TIMER_2_HIGH]: true,\n    [PORT_TIMER_2_LOW]: true,\n    [PORT_TIMER_3_HIGH]: true,\n    [PORT_TIMER_3_LOW]: true,\n    [PORT_TIMER_MODES]: true,\n    [PORT_RANDOM_HIGH]: true,\n    [PORT_RANDOM_LOW]: true,\n    [PORT_RESET]: true\n};\n\nconst TIMER_MODES = {\n    DISABLED: 0,\n    ONE_SHOT: 1,\n    MULTI_SHOT: 2,\n    RANDOM: 3\n};\n\nexport class Timers extends Device {\n    constructor({device = 0, length = 16, controller, memory = undefined, clock = undefined, performance}) {\n        super({device, length, controller, memory, clock});\n\n        this._timers = Array.from({length: 5}, (_, idx) => ({\n            mode: (idx < 4) ? TIMER_MODES.DISABLED : TIMER_MODES.RANDOM,\n            cur: 0,\n            dur: 0,\n            start: 0,\n            read: undefined\n        }));\n\n        this._performance = performance;\n        this._lastTime = performance.now();\n        this._tickSkip = 0;\n    }\n\n    tick() {\n        super.tick();\n        if (this._tickSkip > 0) {\n            this._tickSkip--;\n            return;\n        }\n        this._tickSkip = 100;\n\n        const now = this._performance.now();\n        const then = this._lastTime;\n        const delta = now - then;\n        //if (delta < 1) return;\n        this._lastTime = now;\n\n        for (let i = 0; i < this._timers.length; i++) {\n            const timer = this._timers[i];\n            switch (timer.mode) {\n                case TIMER_MODES.ONE_SHOT:\n                    if (timer.cur < timer.dur) {\n                        timer.cur = timer.cur + delta;\n                    } else {\n                        timer.read = timer.cur;\n                        timer.cur = 0;\n                        timer.dur = 0;\n                        this.requestService();\n                    }\n                    break;\n                case TIMER_MODES.MULTI_SHOT:\n                    timer.cur = timer.cur + delta;\n                    if (timer.cur >= timer.dur) {\n                        timer.read = timer.cur;\n                        timer.cur -= timer.dur;\n                        this.requestService();\n                    }\n                    break;\n                case TIMER_MODES.RANDOM:\n                    timer.cur = Math.floor(Math.random() * 65536);\n                    if (timer.read === undefined) {\n                        timer.read = timer.cur;\n                    }\n                    break;\n            }\n        }\n    }\n\n    _write(address = 0, data) {\n        super._write(address, data);\n        switch (address) {\n            case PORT_RANDOM_HIGH:\n            case PORT_TIMER_3_HIGH:\n            case PORT_TIMER_2_HIGH:\n            case PORT_TIMER_1_HIGH:\n            case PORT_TIMER_0_HIGH:\n                this._timers[(address - 4) >> 1].dur = (this[_buffer][address] << 8) | (this[_buffer][address + 1]);\n                this._timers[(address - 4) >> 1].cur = 0; //this._timers[(address - 4) >> 1].dur;\n                break;\n            case PORT_TIMER_MODES:\n                this._timers[0].mode = (data & 0b00000011);\n                this._timers[1].mode = (data & 0b00001100) >> 2;\n                this._timers[2].mode = (data & 0b00110000) >> 4;\n                this._timers[3].mode = (data & 0b11000000) >> 6;\n                break;\n        }\n    }\n\n    _read(address = 0) {\n        let data = super._read(address);\n\n        switch (address) {\n            case PORT_RTC_HOURS: \n                data = (new Date).getHours();\n                break;\n            case PORT_RTC_MINUTES:\n                data = (new Date).getMinutes();\n                break;\n            case PORT_RTC_SECONDS:\n                data = (new Date).getSeconds();\n                break;\n            case PORT_RTC_HUNDREDTHS:\n                data = Math.floor((new Date).getMilliseconds() / 10);\n                break;\n            case PORT_RANDOM_HIGH:\n            case PORT_TIMER_3_HIGH:\n            case PORT_TIMER_2_HIGH:\n            case PORT_TIMER_1_HIGH:\n            case PORT_TIMER_0_HIGH:\n                data = this._timers[(address - 4) >> 1].read;\n                if (data === undefined) data = Math.floor(this._timers[(address - 4) >> 1].cur);\n                data = (data & 0xFF00) >> 8;\n                break;\n            case PORT_RANDOM_LOW:\n            case PORT_TIMER_3_LOW:\n            case PORT_TIMER_2_LOW:\n            case PORT_TIMER_1_LOW:\n            case PORT_TIMER_0_LOW:\n                data = this._timers[(address - 4) >> 1].read;\n                if (data === undefined) data = Math.floor(this._timers[(address - 4) >> 1].cur);\n                data = (data & 0x00FF);\n                break;\n        }\n\n        return data;\n    }\n\n    putOnBus(address = 0) {\n        super.putOnBus(address);\n        switch(address) {\n            case PORT_RANDOM_LOW:\n            case PORT_TIMER_3_LOW:\n            case PORT_TIMER_2_LOW:\n            case PORT_TIMER_1_LOW:\n            case PORT_TIMER_0_LOW:\n                const data = this._timers[(address - 4) >> 1].read;\n                if (data !== undefined) this._timers[(address - 4) >> 1].read = undefined;\n                break;\n            \n        }\n    }\n\n    get mirrored() {\n        return MIRROR_MAP;\n    }\n}", "export default [{addr: 0, data: [\r\n /*00000*/ 0xa7,0xa7,\r\n]},\r\n{addr: 4352, data: [\r\n /*01100*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*01110*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n]},\r\n{addr: 45056, data: [\r\n /*0b000*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b010*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b020*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b030*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b040*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b050*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b060*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b070*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b080*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b090*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b0a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b0b0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b0c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b0d0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b0e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b0f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b100*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b110*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b120*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b130*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b140*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b150*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b160*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b170*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b180*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b190*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b1a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b1b0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b1c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b1d0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b1e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b1f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b200*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b210*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b220*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b230*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b240*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b250*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b260*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b270*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b280*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b290*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b2a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b2b0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b2c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b2d0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b2e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b2f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b300*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b310*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b320*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b330*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b340*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b350*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b360*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b370*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b380*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b390*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b3a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b3b0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b3c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b3d0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b3e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b3f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b400*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b410*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b420*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b430*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b440*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b450*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b460*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b470*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*0b480*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x17,0x16,0x16,0x17,0x16,\r\n /*0b490*/ 0x13,0x15,0x17,0x25,0x40,0xb4,0x9d,0x14,0x00,0x00,0x00,0x30,0x50,0x00,0xa7,0x25,\r\n /*0b4a0*/ 0x40,0xb4,0xa5,0x31,0x10,0x00,0xa7,\r\n]},\r\n{addr: 458752, data: [\r\n /*70000*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70010*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70020*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70030*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70040*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0x00,\r\n /*70050*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0x00,\r\n /*70060*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,\r\n /*70070*/ 0xff,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*70080*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70090*/ 0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*700a0*/ 0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0x00,\r\n /*700b0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*700c0*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*700d0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*700e0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*700f0*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,\r\n /*70100*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*70110*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70120*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*70130*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70140*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*70150*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*70160*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*70170*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70180*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*70190*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*701a0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*701b0*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*701c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*701d0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*701e0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*701f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70200*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*70210*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*70220*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*70230*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*70240*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70250*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,\r\n /*70260*/ 0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70270*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70280*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*70290*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,\r\n /*702a0*/ 0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*702b0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*702c0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*702d0*/ 0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0x00,\r\n /*702e0*/ 0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*702f0*/ 0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70300*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70310*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70320*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70330*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70340*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*70350*/ 0x00,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,\r\n /*70360*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70370*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*70380*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0x00,\r\n /*70390*/ 0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x00,\r\n /*703a0*/ 0x00,0x00,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,\r\n /*703b0*/ 0xff,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*703c0*/ 0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,\r\n /*703d0*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0x00,\r\n /*703e0*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,\r\n /*703f0*/ 0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70400*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70410*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*70420*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*70430*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70440*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*70450*/ 0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*70460*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*70470*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*70480*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*70490*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*704a0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*704b0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*704c0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*704d0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*704e0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*704f0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70500*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,\r\n /*70510*/ 0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70520*/ 0x00,0x00,0x00,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*70530*/ 0x00,0x00,0x00,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70540*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70550*/ 0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*70560*/ 0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70570*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70580*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70590*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*705a0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*705b0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*705c0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*705d0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*705e0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*705f0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70600*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*70610*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70620*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70630*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70640*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70650*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70660*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70670*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70680*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*70690*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*706a0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*706b0*/ 0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*706c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,\r\n /*706d0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*706e0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*706f0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70700*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*70710*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*70720*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70730*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70740*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,\r\n /*70750*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*70760*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70770*/ 0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70780*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70790*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*707a0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*707b0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*707c0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*707d0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*707e0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*707f0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70800*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70810*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70820*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70830*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70840*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70850*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70860*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70870*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70880*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*70890*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*708a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*708b0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*708c0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*708d0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*708e0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*708f0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70900*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70910*/ 0xff,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*70920*/ 0x00,0x00,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*70930*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,\r\n /*70940*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70950*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70960*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70970*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70980*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*70990*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0x00,\r\n /*709a0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*709b0*/ 0x00,0xff,0xff,0xff,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*709c0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*709d0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*709e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*709f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70a00*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70a10*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70a20*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70a30*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70a40*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70a50*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*70a60*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70a70*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70a80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70a90*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*70aa0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70ab0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70ac0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70ad0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70ae0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70af0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70b00*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70b10*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70b20*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70b30*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70b40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70b50*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70b60*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70b70*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70b80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70b90*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70ba0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70bb0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70bc0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70bd0*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70be0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*70bf0*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70c00*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70c10*/ 0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*70c20*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70c30*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70c40*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*70c50*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70c60*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70c70*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70c80*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70c90*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*70ca0*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70cb0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70cc0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*70cd0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*70ce0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70cf0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70d00*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*70d10*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*70d20*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*70d30*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70d40*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70d50*/ 0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70d60*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70d70*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70d80*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*70d90*/ 0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70da0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70db0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70dc0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70dd0*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70de0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70df0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70e00*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70e10*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*70e20*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70e30*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70e40*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*70e50*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*70e60*/ 0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*70e70*/ 0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70e80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70e90*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70ea0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70eb0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70ec0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70ed0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70ee0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*70ef0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70f00*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*70f10*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70f20*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*70f30*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70f40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70f50*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70f60*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70f70*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70f80*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70f90*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*70fa0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*70fb0*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70fc0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*70fd0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*70fe0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*70ff0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71000*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*71010*/ 0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*71020*/ 0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0x00,\r\n /*71030*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*71040*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*71050*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*71060*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71070*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71080*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71090*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*710a0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*710b0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*710c0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*710d0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*710e0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*710f0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71100*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71110*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71120*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71130*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71140*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71150*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*71160*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71170*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71180*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71190*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*711a0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*711b0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*711c0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*711d0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*711e0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*711f0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71200*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71210*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*71220*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71230*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71240*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71250*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71260*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71270*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71280*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71290*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*712a0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*712b0*/ 0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*712c0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*712d0*/ 0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*712e0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*712f0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71300*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71310*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71320*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71330*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71340*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0x00,\r\n /*71350*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*71360*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71370*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71380*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*71390*/ 0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0x00,\r\n /*713a0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*713b0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*713c0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*713d0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*713e0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*713f0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71400*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71410*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*71420*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71430*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71440*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71450*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71460*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,\r\n /*71470*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71480*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71490*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*714a0*/ 0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*714b0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*714c0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*714d0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*714e0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*714f0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71500*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71510*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71520*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71530*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71540*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71550*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71560*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71570*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71580*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71590*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*715a0*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*715b0*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*715c0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*715d0*/ 0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*715e0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*715f0*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71600*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71610*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*71620*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71630*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71640*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*71650*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*71660*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71670*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71680*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71690*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*716a0*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*716b0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*716c0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*716d0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*716e0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*716f0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*71700*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*71710*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71720*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71730*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71740*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71750*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71760*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71770*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*71780*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*71790*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*717a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*717b0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*717c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*717d0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*717e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*717f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*71800*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71810*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71820*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71830*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71840*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71850*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71860*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71870*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71880*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71890*/ 0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*718a0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*718b0*/ 0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*718c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*718d0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*718e0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*718f0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71900*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71910*/ 0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*71920*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*71930*/ 0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71940*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71950*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71960*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71970*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71980*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*71990*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*719a0*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*719b0*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*719c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*719d0*/ 0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*719e0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*719f0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*71a00*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71a10*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71a20*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71a30*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71a40*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71a50*/ 0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71a60*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71a70*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71a80*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71a90*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71aa0*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71ab0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*71ac0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71ad0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71ae0*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71af0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71b00*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71b10*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71b20*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71b30*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71b40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71b50*/ 0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*71b60*/ 0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*71b70*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71b80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71b90*/ 0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*71ba0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71bb0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71bc0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71bd0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71be0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71bf0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71c00*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71c10*/ 0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*71c20*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*71c30*/ 0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71c40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71c50*/ 0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*71c60*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*71c70*/ 0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71c80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71c90*/ 0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*71ca0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71cb0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71cc0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71cd0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71ce0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71cf0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71d00*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*71d10*/ 0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*71d20*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,\r\n /*71d30*/ 0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71d40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71d50*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71d60*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*71d70*/ 0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71d80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71d90*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71da0*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*71db0*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71dc0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71dd0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,\r\n /*71de0*/ 0xff,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*71df0*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71e00*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71e10*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*71e20*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*71e30*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71e40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71e50*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71e60*/ 0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,\r\n /*71e70*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*71e80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71e90*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71ea0*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*71eb0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71ec0*/ 0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*71ed0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*71ee0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*71ef0*/ 0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71f00*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71f10*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71f20*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71f30*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*71f40*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71f50*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71f60*/ 0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*71f70*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71f80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71f90*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*71fa0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71fb0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*71fc0*/ 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*71fd0*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71fe0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*71ff0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72000*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72010*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72020*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72030*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72040*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72050*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72060*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72070*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72080*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72090*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*720a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*720b0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*720c0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*720d0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*720e0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*720f0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72100*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72110*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72120*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72130*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72140*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72150*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72160*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72170*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72180*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72190*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*721a0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*721b0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*721c0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*721d0*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*721e0*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*721f0*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*72200*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72210*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72220*/ 0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72230*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72240*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72250*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72260*/ 0x00,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72270*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72280*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72290*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*722a0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*722b0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*722c0*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*722d0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*722e0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*722f0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72300*/ 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72310*/ 0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*72320*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*72330*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72340*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72350*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72360*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72370*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72380*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,\r\n /*72390*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,\r\n /*723a0*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*723b0*/ 0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*723c0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*723d0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*723e0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*723f0*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72400*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72410*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72420*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72430*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72440*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72450*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72460*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72470*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72480*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72490*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*724a0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*724b0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*724c0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*724d0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*724e0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*724f0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72500*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*72510*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72520*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72530*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*72540*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72550*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72560*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72570*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72580*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*72590*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*725a0*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*725b0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*725c0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*725d0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*725e0*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,\r\n /*725f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,\r\n /*72600*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0xff,\r\n /*72610*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0xff,\r\n /*72620*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0xff,\r\n /*72630*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0xff,\r\n /*72640*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72650*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72660*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72670*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72680*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72690*/ 0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0x00,0xff,0x00,0x00,0xff,0xff,\r\n /*726a0*/ 0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*726b0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*726c0*/ 0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*726d0*/ 0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,\r\n /*726e0*/ 0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*726f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72700*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72710*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0x00,\r\n /*72720*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,\r\n /*72730*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72740*/ 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72750*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72760*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72770*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72780*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,\r\n /*72790*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*727a0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,\r\n /*727b0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*727c0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,\r\n /*727d0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*727e0*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,\r\n /*727f0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72800*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72810*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72820*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72830*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72840*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72850*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72860*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72870*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72880*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72890*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*728a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*728b0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*728c0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*728d0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*728e0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*728f0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72900*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72910*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72920*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72930*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72940*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72950*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72960*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72970*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72980*/ 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72990*/ 0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*729a0*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*729b0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*729c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*729d0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*729e0*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*729f0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72a00*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72a10*/ 0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72a20*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72a30*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72a40*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72a50*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0x00,0xff,0xff,\r\n /*72a60*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72a70*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72a80*/ 0xff,0xff,0x00,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*72a90*/ 0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*72aa0*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0x00,0x00,\r\n /*72ab0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72ac0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72ad0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72ae0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72af0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72b00*/ 0x00,0x00,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72b10*/ 0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,\r\n /*72b20*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0xff,\r\n /*72b30*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*72b40*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72b50*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72b60*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72b70*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72b80*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72b90*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72ba0*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72bb0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72bc0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*72bd0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72be0*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72bf0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72c00*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*72c10*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*72c20*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*72c30*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*72c40*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*72c50*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72c60*/ 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,\r\n /*72c70*/ 0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,\r\n /*72c80*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,\r\n /*72c90*/ 0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*72ca0*/ 0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,\r\n /*72cb0*/ 0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,\r\n /*72cc0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72cd0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72ce0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72cf0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72d00*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72d10*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72d20*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72d30*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72d40*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72d50*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72d60*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72d70*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72d80*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72d90*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72da0*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72db0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72dc0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72dd0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*72de0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72df0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72e00*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72e10*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72e20*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72e30*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72e40*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72e50*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*72e60*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72e70*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72e80*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72e90*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72ea0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72eb0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72ec0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*72ed0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*72ee0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72ef0*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72f00*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72f10*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*72f20*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*72f30*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72f40*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*72f50*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*72f60*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72f70*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72f80*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72f90*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72fa0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72fb0*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72fc0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*72fd0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*72fe0*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*72ff0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73000*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73010*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*73020*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73030*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73040*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73050*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73060*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73070*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73080*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73090*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*730a0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*730b0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*730c0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*730d0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*730e0*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*730f0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73100*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73110*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73120*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73130*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73140*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73150*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73160*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73170*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73180*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*73190*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*731a0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*731b0*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*731c0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*731d0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*731e0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*731f0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*73200*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*73210*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*73220*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73230*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73240*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73250*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*73260*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*73270*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*73280*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*73290*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*732a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*732b0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*732c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*732d0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*732e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*732f0*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*73300*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*73310*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*73320*/ 0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*73330*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*73340*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73350*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73360*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73370*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73380*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*73390*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*733a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*733b0*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*733c0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*733d0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*733e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*733f0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73400*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*73410*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73420*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73430*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73440*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73450*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73460*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73470*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73480*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73490*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*734a0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*734b0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*734c0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*734d0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*734e0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*734f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73500*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*73510*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73520*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*73530*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73540*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*73550*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73560*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*73570*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73580*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73590*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*735a0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*735b0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*735c0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*735d0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*735e0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*735f0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*73600*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73610*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73620*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73630*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73640*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73650*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*73660*/ 0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73670*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73680*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73690*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,\r\n /*736a0*/ 0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*736b0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*736c0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*736d0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*736e0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*736f0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73700*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73710*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73720*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73730*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73740*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73750*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73760*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73770*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73780*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73790*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*737a0*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*737b0*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*737c0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*737d0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*737e0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*737f0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73800*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73810*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73820*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73830*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73840*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73850*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73860*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73870*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73880*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73890*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*738a0*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*738b0*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*738c0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*738d0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*738e0*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*738f0*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73900*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73910*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73920*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73930*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73940*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73950*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73960*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73970*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73980*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73990*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*739a0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*739b0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*739c0*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*739d0*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*739e0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*739f0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73a00*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73a10*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73a20*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73a30*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73a40*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73a50*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73a60*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73a70*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73a80*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73a90*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73aa0*/ 0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73ab0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73ac0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73ad0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*73ae0*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*73af0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73b00*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73b10*/ 0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73b20*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73b30*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73b40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73b50*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,\r\n /*73b60*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,\r\n /*73b70*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73b80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,\r\n /*73b90*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,\r\n /*73ba0*/ 0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73bb0*/ 0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73bc0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,\r\n /*73bd0*/ 0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*73be0*/ 0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*73bf0*/ 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*73c00*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73c10*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73c20*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73c30*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73c40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73c50*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73c60*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73c70*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73c80*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73c90*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*73ca0*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*73cb0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73cc0*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*73cd0*/ 0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*73ce0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,\r\n /*73cf0*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73d00*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73d10*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73d20*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73d30*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73d40*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*73d50*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,\r\n /*73d60*/ 0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*73d70*/ 0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73d80*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73d90*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*73da0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*73db0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73dc0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73dd0*/ 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73de0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,\r\n /*73df0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73e00*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73e10*/ 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73e20*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,\r\n /*73e30*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\r\n /*73e40*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73e50*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73e60*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73e70*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73e80*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73e90*/ 0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,\r\n /*73ea0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73eb0*/ 0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,\r\n /*73ec0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73ed0*/ 0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,\r\n /*73ee0*/ 0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,\r\n /*73ef0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73f00*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,\r\n /*73f10*/ 0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,\r\n /*73f20*/ 0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,\r\n /*73f30*/ 0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73f40*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73f50*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73f60*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,\r\n /*73f70*/ 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73f80*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,\r\n /*73f90*/ 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73fa0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73fb0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,\r\n /*73fc0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,\r\n /*73fd0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,\r\n /*73fe0*/ 0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0x00,\r\n /*73ff0*/ 0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xff,0xff,\r\n]},\r\n{addr: 475136, data: [\r\n /*74000*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x00,0x3f,0x00,0x00,0x00,0x3f,0x3f,0x00,\r\n /*74010*/ 0x3f,0x00,0x00,0x00,0x3f,0x00,0x3f,0x00,0x3f,0x3f,0x00,0x00,0x3f,0x3f,0x3f,0x00,\r\n /*74020*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x7f,0x00,0x00,0x00,0x7f,0x7f,0x00,\r\n /*74030*/ 0x7f,0x00,0x00,0x00,0x7f,0x00,0x7f,0x00,0x7f,0x7f,0x00,0x00,0x7f,0x7f,0x7f,0x00,\r\n /*74040*/ 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0xff,0x00,\r\n /*74050*/ 0xff,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0x00,\r\n /*74060*/ 0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x00,0x20,0x20,0x20,0x00,0x30,0x30,0x30,0x00,\r\n /*74070*/ 0x40,0x40,0x40,0x00,0x50,0x50,0x50,0x00,0x60,0x60,0x60,0x00,0x70,0x70,0x70,0x00,\r\n /*74080*/ 0x80,0x80,0x80,0x00,0x90,0x90,0x90,0x00,0xa0,0xa0,0xa0,0x00,0xb0,0xb0,0xb0,0x00,\r\n /*74090*/ 0xc0,0xc0,0xc0,0x00,0xd0,0xd0,0xd0,0x00,0xe0,0xe0,0xe0,0x00,0xf0,0xf0,0xf0,0x00,\r\n /*740a0*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0x99,0x00,\r\n /*740b0*/ 0x00,0x00,0xcc,0x00,0x00,0x00,0xff,0x00,0x00,0x33,0x00,0x00,0x00,0x33,0x33,0x00,\r\n /*740c0*/ 0x00,0x33,0x66,0x00,0x00,0x33,0x99,0x00,0x00,0x33,0xcc,0x00,0x00,0x33,0xff,0x00,\r\n /*740d0*/ 0x00,0x66,0x00,0x00,0x00,0x66,0x33,0x00,0x00,0x66,0x66,0x00,0x00,0x66,0x99,0x00,\r\n /*740e0*/ 0x00,0x66,0xcc,0x00,0x00,0x66,0xff,0x00,0x00,0x99,0x00,0x00,0x00,0x99,0x33,0x00,\r\n /*740f0*/ 0x00,0x99,0x66,0x00,0x00,0x99,0x99,0x00,0x00,0x99,0xcc,0x00,0x00,0x99,0xff,0x00,\r\n /*74100*/ 0x00,0xcc,0x00,0x00,0x00,0xcc,0x33,0x00,0x00,0xcc,0x66,0x00,0x00,0xcc,0x99,0x00,\r\n /*74110*/ 0x00,0xcc,0xcc,0x00,0x00,0xcc,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x33,0x00,\r\n /*74120*/ 0x00,0xff,0x66,0x00,0x00,0xff,0x99,0x00,0x00,0xff,0xcc,0x00,0x00,0xff,0xff,0x00,\r\n /*74130*/ 0x33,0x00,0x00,0x00,0x33,0x00,0x33,0x00,0x33,0x00,0x66,0x00,0x33,0x00,0x99,0x00,\r\n /*74140*/ 0x33,0x00,0xcc,0x00,0x33,0x00,0xff,0x00,0x33,0x33,0x00,0x00,0x33,0x33,0x33,0x00,\r\n /*74150*/ 0x33,0x33,0x66,0x00,0x33,0x33,0x99,0x00,0x33,0x33,0xcc,0x00,0x33,0x33,0xff,0x00,\r\n /*74160*/ 0x33,0x66,0x00,0x00,0x33,0x66,0x33,0x00,0x33,0x66,0x66,0x00,0x33,0x66,0x99,0x00,\r\n /*74170*/ 0x33,0x66,0xcc,0x00,0x33,0x66,0xff,0x00,0x33,0x99,0x00,0x00,0x33,0x99,0x33,0x00,\r\n /*74180*/ 0x33,0x99,0x66,0x00,0x33,0x99,0x99,0x00,0x33,0x99,0xcc,0x00,0x33,0x99,0xff,0x00,\r\n /*74190*/ 0x33,0xcc,0x00,0x00,0x33,0xcc,0x33,0x00,0x33,0xcc,0x66,0x00,0x33,0xcc,0x99,0x00,\r\n /*741a0*/ 0x33,0xcc,0xcc,0x00,0x33,0xcc,0xff,0x00,0x33,0xff,0x00,0x00,0x33,0xff,0x33,0x00,\r\n /*741b0*/ 0x33,0xff,0x66,0x00,0x33,0xff,0x99,0x00,0x33,0xff,0xcc,0x00,0x33,0xff,0xff,0x00,\r\n /*741c0*/ 0x66,0x00,0x00,0x00,0x66,0x00,0x33,0x00,0x66,0x00,0x66,0x00,0x66,0x00,0x99,0x00,\r\n /*741d0*/ 0x66,0x00,0xcc,0x00,0x66,0x00,0xff,0x00,0x66,0x33,0x00,0x00,0x66,0x33,0x33,0x00,\r\n /*741e0*/ 0x66,0x33,0x66,0x00,0x66,0x33,0x99,0x00,0x66,0x33,0xcc,0x00,0x66,0x33,0xff,0x00,\r\n /*741f0*/ 0x66,0x66,0x00,0x00,0x66,0x66,0x33,0x00,0x66,0x66,0x66,0x00,0x66,0x66,0x99,0x00,\r\n /*74200*/ 0x66,0x66,0xcc,0x00,0x66,0x66,0xff,0x00,0x66,0x99,0x00,0x00,0x66,0x99,0x33,0x00,\r\n /*74210*/ 0x66,0x99,0x66,0x00,0x66,0x99,0x99,0x00,0x66,0x99,0xcc,0x00,0x66,0x99,0xff,0x00,\r\n /*74220*/ 0x66,0xcc,0x00,0x00,0x66,0xcc,0x33,0x00,0x66,0xcc,0x66,0x00,0x66,0xcc,0x99,0x00,\r\n /*74230*/ 0x66,0xcc,0xcc,0x00,0x66,0xcc,0xff,0x00,0x66,0xff,0x00,0x00,0x66,0xff,0x33,0x00,\r\n /*74240*/ 0x66,0xff,0x66,0x00,0x66,0xff,0x99,0x00,0x66,0xff,0xcc,0x00,0x66,0xff,0xff,0x00,\r\n /*74250*/ 0x99,0x00,0x00,0x00,0x99,0x00,0x33,0x00,0x99,0x00,0x66,0x00,0x99,0x00,0x99,0x00,\r\n /*74260*/ 0x99,0x00,0xcc,0x00,0x99,0x00,0xff,0x00,0x99,0x33,0x00,0x00,0x99,0x33,0x33,0x00,\r\n /*74270*/ 0x99,0x33,0x66,0x00,0x99,0x33,0x99,0x00,0x99,0x33,0xcc,0x00,0x99,0x33,0xff,0x00,\r\n /*74280*/ 0x99,0x66,0x00,0x00,0x99,0x66,0x33,0x00,0x99,0x66,0x66,0x00,0x99,0x66,0x99,0x00,\r\n /*74290*/ 0x99,0x66,0xcc,0x00,0x99,0x66,0xff,0x00,0x99,0x99,0x00,0x00,0x99,0x99,0x33,0x00,\r\n /*742a0*/ 0x99,0x99,0x66,0x00,0x99,0x99,0x99,0x00,0x99,0x99,0xcc,0x00,0x99,0x99,0xff,0x00,\r\n /*742b0*/ 0x99,0xcc,0x00,0x00,0x99,0xcc,0x33,0x00,0x99,0xcc,0x66,0x00,0x99,0xcc,0x99,0x00,\r\n /*742c0*/ 0x99,0xcc,0xcc,0x00,0x99,0xcc,0xff,0x00,0x99,0xff,0x00,0x00,0x99,0xff,0x33,0x00,\r\n /*742d0*/ 0x99,0xff,0x66,0x00,0x99,0xff,0x99,0x00,0x99,0xff,0xcc,0x00,0x99,0xff,0xff,0x00,\r\n /*742e0*/ 0xcc,0x00,0x00,0x00,0xcc,0x00,0x33,0x00,0xcc,0x00,0x66,0x00,0xcc,0x00,0x99,0x00,\r\n /*742f0*/ 0xcc,0x00,0xcc,0x00,0xcc,0x00,0xff,0x00,0xcc,0x33,0x00,0x00,0xcc,0x33,0x33,0x00,\r\n /*74300*/ 0xcc,0x33,0x66,0x00,0xcc,0x33,0x99,0x00,0xcc,0x33,0xcc,0x00,0xcc,0x33,0xff,0x00,\r\n /*74310*/ 0xcc,0x66,0x00,0x00,0xcc,0x66,0x33,0x00,0xcc,0x66,0x66,0x00,0xcc,0x66,0x99,0x00,\r\n /*74320*/ 0xcc,0x66,0xcc,0x00,0xcc,0x66,0xff,0x00,0xcc,0x99,0x00,0x00,0xcc,0x99,0x33,0x00,\r\n /*74330*/ 0xcc,0x99,0x66,0x00,0xcc,0x99,0x99,0x00,0xcc,0x99,0xcc,0x00,0xcc,0x99,0xff,0x00,\r\n /*74340*/ 0xcc,0xcc,0x00,0x00,0xcc,0xcc,0x33,0x00,0xcc,0xcc,0x66,0x00,0xcc,0xcc,0x99,0x00,\r\n /*74350*/ 0xcc,0xcc,0xcc,0x00,0xcc,0xcc,0xff,0x00,0xcc,0xff,0x00,0x00,0xcc,0xff,0x33,0x00,\r\n /*74360*/ 0xcc,0xff,0x66,0x00,0xcc,0xff,0x99,0x00,0xcc,0xff,0xcc,0x00,0xcc,0xff,0xff,0x00,\r\n /*74370*/ 0xff,0x00,0x00,0x00,0xff,0x00,0x33,0x00,0xff,0x00,0x66,0x00,0xff,0x00,0x99,0x00,\r\n /*74380*/ 0xff,0x00,0xcc,0x00,0xff,0x00,0xff,0x00,0xff,0x33,0x00,0x00,0xff,0x33,0x33,0x00,\r\n /*74390*/ 0xff,0x33,0x66,0x00,0xff,0x33,0x99,0x00,0xff,0x33,0xcc,0x00,0xff,0x33,0xff,0x00,\r\n /*743a0*/ 0xff,0x66,0x00,0x00,0xff,0x66,0x33,0x00,0xff,0x66,0x66,0x00,0xff,0x66,0x99,0x00,\r\n /*743b0*/ 0xff,0x66,0xcc,0x00,0xff,0x66,0xff,0x00,0xff,0x99,0x00,0x00,0xff,0x99,0x33,0x00,\r\n /*743c0*/ 0xff,0x99,0x66,0x00,0xff,0x99,0x99,0x00,0xff,0x99,0xcc,0x00,0xff,0x99,0xff,0x00,\r\n /*743d0*/ 0xff,0xcc,0x00,0x00,0xff,0xcc,0x33,0x00,0xff,0xcc,0x66,0x00,0xff,0xcc,0x99,0x00,\r\n /*743e0*/ 0xff,0xcc,0xcc,0x00,0xff,0xcc,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x33,0x00,\r\n /*743f0*/ 0xff,0xff,0x66,0x00,0xff,0xff,0x99,0x00,0xff,0xff,0xcc,0x00,0xff,0xff,0xff,0x00,\r\n]},\r\n{addr: 491520, data: [\r\n /*78000*/ 0x05,0x15,0x20,0x0f,0xff,0x03,0xff,0x04,0x00,0x00,0xff,0x00,0xa4,0x00,0x00,0x13,\r\n /*78010*/ 0x13,0xff,0x00,0x20,0x00,0x12,0x00,0x00,0x05,0x15,0x20,0xff,0xff,0x04,0x12,0x20,\r\n /*78020*/ 0x05,0x18,0x20,0xff,0xff,0x04,0x10,0x00,0x06,0x2a,0x40,0xff,0xff,0x05,0x09,0x20,\r\n /*78030*/ 0x06,0x30,0x40,0xff,0xff,0x05,0x08,0x00,\r\n]},\r\n{addr: 499712, data: [\r\n /*7a000*/ 0x0c,0x1b,0x31,0x37,0x12,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,\r\n /*7a010*/ 0x0d,0x1b,0x31,0x38,0x12,0xdb,0xe3,0xdc,0xe8,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0x1b,\r\n /*7a020*/ 0x32,0x35,0x35,0x12,0x20,0x20,0x52,0x45,0x54,0x52,0x4f,0x50,0x55,0x54,0x45,0x52,\r\n /*7a030*/ 0x20,0x42,0x41,0x53,0x49,0x43,0x20,0x31,0x2e,0x30,0x1b,0x31,0x39,0x12,0xdb,0xde,\r\n /*7a040*/ 0xdb,0xde,0xdb,0xdb,0xdb,0xdb,0xdb,0x1b,0x32,0x35,0x35,0x12,0x20,0x20,0x20,0x2d,\r\n /*7a050*/ 0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,0x2d,\r\n /*7a060*/ 0x2d,0x2d,0x2d,0x1b,0x32,0x30,0x12,0xdb,0xe3,0xdc,0xe8,0xdb,0xdb,0xdb,0xdb,0x1b,\r\n /*7a070*/ 0x32,0x35,0x35,0x12,0x0d,0x1b,0x32,0x31,0x12,0xdb,0xde,0xdb,0xdd,0xdb,0xdb,0xdb,\r\n /*7a080*/ 0x1b,0x32,0x35,0x35,0x12,0x20,0x20,0x20,0x31,0x33,0x31,0x30,0x37,0x32,0x20,0x43,\r\n /*7a090*/ 0x6f,0x64,0x65,0x20,0x42,0x79,0x74,0x65,0x73,0x20,0x46,0x72,0x65,0x65,0x1b,0x32,\r\n /*7a0a0*/ 0x32,0x12,0xdb,0xde,0xdb,0xdd,0xdb,0xdb,0x1b,0x32,0x35,0x35,0x12,0x20,0x20,0x20,\r\n /*7a0b0*/ 0x20,0x20,0x36,0x35,0x35,0x33,0x36,0x20,0x48,0x65,0x61,0x70,0x20,0x42,0x79,0x74,\r\n /*7a0c0*/ 0x65,0x73,0x20,0x46,0x72,0x65,0x65,0x1b,0x32,0x33,0x12,0xdb,0xdb,0xdb,0xdb,0xdb,\r\n /*7a0d0*/ 0x1b,0x32,0x35,0x35,0x12,0x0d,0x00,0x0d,0x52,0x45,0x41,0x44,0x59,0x2e,0x0d,0x00,\r\n /*7a0e0*/ 0x53,0x59,0x4e,0x54,0x41,0x58,0x00,0x54,0x59,0x50,0x45,0x20,0x4d,0x49,0x53,0x4d,\r\n /*7a0f0*/ 0x41,0x54,0x43,0x48,0x00,0x55,0x4e,0x44,0x45,0x46,0x49,0x4e,0x45,0x44,0x20,0x53,\r\n /*7a100*/ 0x55,0x42,0x52,0x4f,0x55,0x54,0x49,0x4e,0x45,0x00,0x55,0x4e,0x44,0x45,0x46,0x49,\r\n /*7a110*/ 0x4e,0x45,0x44,0x20,0x46,0x55,0x4e,0x43,0x54,0x49,0x4f,0x4e,0x00,0x55,0x4e,0x44,\r\n /*7a120*/ 0x45,0x46,0x49,0x4e,0x45,0x44,0x20,0x53,0x54,0x41,0x54,0x45,0x4d,0x45,0x4e,0x54,\r\n /*7a130*/ 0x00,0x49,0x4e,0x53,0x55,0x46,0x46,0x49,0x43,0x49,0x45,0x4e,0x54,0x20,0x41,0x52,\r\n /*7a140*/ 0x47,0x55,0x4d,0x45,0x4e,0x54,0x53,0x00,0x54,0x4f,0x4f,0x20,0x4d,0x41,0x4e,0x59,\r\n /*7a150*/ 0x20,0x41,0x52,0x47,0x55,0x4d,0x45,0x4e,0x54,0x53,0x00,0x43,0x41,0x4e,0x27,0x54,\r\n /*7a160*/ 0x20,0x43,0x4f,0x4e,0x54,0x49,0x4e,0x55,0x45,0x00,0x4f,0x55,0x54,0x20,0x4f,0x46,\r\n /*7a170*/ 0x20,0x44,0x41,0x54,0x41,0x00,0x44,0x45,0x46,0x46,0x4e,0x20,0x57,0x49,0x54,0x48,\r\n /*7a180*/ 0x4f,0x55,0x54,0x20,0x45,0x4e,0x44,0x46,0x4e,0x00,0x44,0x45,0x46,0x53,0x55,0x42,\r\n /*7a190*/ 0x20,0x57,0x49,0x54,0x48,0x4f,0x55,0x54,0x20,0x45,0x4e,0x44,0x53,0x55,0x42,0x00,\r\n /*7a1a0*/ 0x4e,0x4f,0x54,0x20,0x45,0x4e,0x4f,0x55,0x47,0x48,0x20,0x4d,0x45,0x4d,0x4f,0x52,\r\n /*7a1b0*/ 0x59,0x00,0x4f,0x55,0x54,0x20,0x4f,0x46,0x20,0x4d,0x45,0x4d,0x4f,0x52,0x59,0x00,\r\n /*7a1c0*/ 0x49,0x4e,0x56,0x41,0x4c,0x49,0x44,0x20,0x51,0x55,0x41,0x4e,0x54,0x49,0x54,0x59,\r\n /*7a1d0*/ 0x00,0x44,0x4f,0x20,0x57,0x49,0x54,0x48,0x4f,0x55,0x54,0x20,0x4c,0x4f,0x4f,0x50,\r\n /*7a1e0*/ 0x00,0x4d,0x49,0x53,0x4d,0x41,0x54,0x43,0x48,0x45,0x44,0x20,0x4e,0x45,0x58,0x54,\r\n /*7a1f0*/ 0x00,0x49,0x46,0x20,0x57,0x49,0x54,0x48,0x4f,0x55,0x54,0x20,0x45,0x4e,0x44,0x49,\r\n /*7a200*/ 0x46,0x00,0x45,0x4c,0x53,0x45,0x20,0x57,0x49,0x54,0x48,0x4f,0x55,0x54,0x20,0x49,\r\n /*7a210*/ 0x46,0x00,0x45,0x4e,0x44,0x49,0x46,0x20,0x57,0x49,0x54,0x48,0x4f,0x55,0x54,0x20,\r\n /*7a220*/ 0x49,0x46,0x00,0x45,0x4c,0x53,0x45,0x49,0x46,0x20,0x57,0x49,0x54,0x48,0x4f,0x55,\r\n /*7a230*/ 0x54,0x20,0x49,0x46,0x00,0x46,0x49,0x4c,0x45,0x20,0x4e,0x4f,0x54,0x20,0x46,0x4f,\r\n /*7a240*/ 0x55,0x4e,0x44,0x00,0x52,0x45,0x54,0x55,0x52,0x4e,0x20,0x57,0x49,0x54,0x48,0x4f,\r\n /*7a250*/ 0x55,0x54,0x20,0x43,0x41,0x4c,0x4c,0x20,0x4f,0x52,0x20,0x47,0x4f,0x53,0x55,0x42,\r\n /*7a260*/ 0x00,0x4f,0x55,0x54,0x20,0x4f,0x46,0x20,0x44,0x49,0x53,0x4b,0x20,0x53,0x50,0x41,\r\n /*7a270*/ 0x43,0x45,0x00,0x46,0x49,0x4c,0x45,0x20,0x45,0x58,0x49,0x53,0x54,0x53,0x00,0x53,\r\n /*7a280*/ 0x54,0x4f,0x50,0x50,0x45,0x44,0x00,0x53,0x54,0x52,0x49,0x4e,0x47,0x20,0x54,0x4f,\r\n /*7a290*/ 0x4f,0x20,0x4c,0x4f,0x4e,0x47,0x00,0x4c,0x49,0x4e,0x45,0x20,0x54,0x4f,0x4f,0x20,\r\n /*7a2a0*/ 0x4c,0x4f,0x4e,0x47,0x00,0x4e,0x45,0x58,0x54,0x20,0x57,0x49,0x54,0x48,0x4f,0x55,\r\n /*7a2b0*/ 0x54,0x20,0x46,0x4f,0x52,0x00,0x57,0x48,0x49,0x4c,0x45,0x20,0x57,0x49,0x54,0x48,\r\n /*7a2c0*/ 0x4f,0x55,0x54,0x20,0x4c,0x4f,0x4f,0x50,0x00,0x55,0x4e,0x54,0x49,0x4c,0x20,0x57,\r\n /*7a2d0*/ 0x49,0x54,0x48,0x4f,0x55,0x54,0x20,0x4c,0x4f,0x4f,0x50,0x00,0x4c,0x4f,0x4f,0x50,\r\n /*7a2e0*/ 0x20,0x57,0x49,0x54,0x48,0x4f,0x55,0x54,0x20,0x44,0x4f,0x00,0x45,0x58,0x50,0x52,\r\n /*7a2f0*/ 0x45,0x53,0x53,0x49,0x4f,0x4e,0x20,0x54,0x4f,0x4f,0x20,0x43,0x4f,0x4d,0x50,0x4c,\r\n /*7a300*/ 0x45,0x58,0x00,0x53,0x54,0x41,0x43,0x4b,0x20,0x4f,0x56,0x45,0x52,0x46,0x4c,0x4f,\r\n /*7a310*/ 0x57,0x00,0x45,0x58,0x50,0x45,0x43,0x54,0x45,0x44,0x20,0x41,0x20,0x51,0x55,0x4f,\r\n /*7a320*/ 0x54,0x45,0x00,0x45,0x58,0x50,0x45,0x43,0x54,0x45,0x44,0x20,0x4c,0x45,0x46,0x54,\r\n /*7a330*/ 0x20,0x50,0x41,0x52,0x45,0x4e,0x00,0x45,0x58,0x50,0x45,0x43,0x54,0x45,0x44,0x20,\r\n /*7a340*/ 0x52,0x49,0x47,0x48,0x54,0x20,0x50,0x41,0x52,0x45,0x4e,0x00,0x45,0x58,0x50,0x45,\r\n /*7a350*/ 0x43,0x54,0x45,0x44,0x20,0x4c,0x45,0x46,0x54,0x20,0x42,0x52,0x41,0x43,0x4b,0x45,\r\n /*7a360*/ 0x54,0x00,0x45,0x58,0x50,0x45,0x43,0x54,0x45,0x44,0x20,0x52,0x49,0x47,0x48,0x54,\r\n /*7a370*/ 0x20,0x42,0x52,0x41,0x43,0x4b,0x45,0x54,0x00,0x4e,0x4f,0x54,0x20,0x49,0x4d,0x50,\r\n /*7a380*/ 0x4c,0x45,0x4d,0x45,0x4e,0x54,0x45,0x44,0x00,0x0d,0x3f,0x00,0x20,0x45,0x52,0x52,\r\n /*7a390*/ 0x4f,0x52,0x00,0x0d,0x20,0x41,0x54,0x20,0x4c,0x49,0x4e,0x45,0x20,0x00,0xa0,0xe0,\r\n /*7a3a0*/ 0xa0,0xe7,0xa0,0xf5,0xa1,0x0a,0xa1,0x1d,0xa1,0x31,0xa1,0x48,0xa1,0x5b,0xa1,0x6a,\r\n /*7a3b0*/ 0xa1,0x76,0xa1,0x8a,0xa1,0xa0,0xa1,0xb2,0xa1,0xc0,0xa1,0xd1,0xa1,0xe1,0xa1,0xf1,\r\n /*7a3c0*/ 0xa2,0x02,0xa2,0x12,0xa2,0x23,0xa2,0x35,0xa2,0x44,0xa2,0x61,0xa2,0x73,0xa2,0x7f,\r\n /*7a3d0*/ 0xa2,0x87,0xa2,0x97,0xa2,0xa5,0xa2,0xb6,0xa2,0xc9,0xa2,0xdc,0xa2,0xec,0xa3,0x03,\r\n /*7a3e0*/ 0xa3,0x12,0xa3,0x23,0xa3,0x37,0xa3,0x4c,0xa3,0x62,0xa3,0x79,0xa3,0x89,0xa3,0x8c,\r\n /*7a3f0*/ 0xa3,0x93,0x41,0x42,0x53,0x00,0x80,0x41,0x4e,0x44,0x00,0x81,0x41,0x53,0x43,0x00,\r\n /*7a400*/ 0x82,0x41,0x53,0x4d,0x00,0x83,0x41,0x54,0x4e,0x00,0x84,0x41,0x54,0x00,0x85,0x43,\r\n /*7a410*/ 0x41,0x4c,0x4c,0x00,0x86,0x43,0x41,0x54,0x41,0x4c,0x4f,0x47,0x00,0x87,0x43,0x48,\r\n /*7a420*/ 0x52,0x53,0x24,0x00,0x88,0x43,0x48,0x52,0x24,0x00,0x89,0x43,0x49,0x52,0x43,0x4c,\r\n /*7a430*/ 0x45,0x00,0x8a,0x43,0x4c,0x53,0x00,0x8b,0x43,0x4c,0x4f,0x53,0x45,0x00,0x8c,0x43,\r\n /*7a440*/ 0x4f,0x4e,0x54,0x49,0x4e,0x55,0x45,0x00,0x8d,0x43,0x4f,0x4e,0x54,0x00,0x8d,0x43,\r\n /*7a450*/ 0x4f,0x4c,0x4f,0x52,0x00,0x8e,0x43,0x4f,0x50,0x59,0x00,0x8f,0x43,0x4f,0x53,0x00,\r\n /*7a460*/ 0x90,0x44,0x41,0x54,0x41,0x00,0x91,0x44,0x45,0x46,0x00,0x92,0x44,0x49,0x4d,0x00,\r\n /*7a470*/ 0x93,0x44,0x4f,0x00,0x94,0x44,0x52,0x41,0x57,0x00,0x95,0x45,0x4c,0x53,0x45,0x00,\r\n /*7a480*/ 0x96,0x45,0x4e,0x44,0x00,0x97,0x45,0x58,0x50,0x00,0x98,0x46,0x49,0x4c,0x4c,0x00,\r\n /*7a490*/ 0x99,0x46,0x4e,0x00,0x9a,0x46,0x4f,0x52,0x00,0x9b,0x46,0x52,0x4f,0x4d,0x00,0x9c,\r\n /*7a4a0*/ 0x47,0x4f,0x53,0x55,0x42,0x00,0x9d,0x47,0x4f,0x54,0x4f,0x00,0x9e,0x48,0x45,0x58,\r\n /*7a4b0*/ 0x24,0x00,0x9f,0x49,0x46,0x00,0xa0,0x49,0x4e,0x50,0x55,0x54,0x00,0xa1,0x49,0x4e,\r\n /*7a4c0*/ 0x54,0x00,0xa2,0x49,0x4e,0x00,0xa3,0x4b,0x45,0x59,0x24,0x00,0xa4,0x4c,0x41,0x59,\r\n /*7a4d0*/ 0x45,0x52,0x00,0xa5,0x4c,0x45,0x46,0x54,0x24,0x00,0xa6,0x4c,0x45,0x4e,0x00,0xa7,\r\n /*7a4e0*/ 0x4c,0x45,0x54,0x00,0xa8,0x4c,0x49,0x4e,0x45,0x00,0xa9,0x4c,0x49,0x53,0x54,0x00,\r\n /*7a4f0*/ 0xaa,0x4c,0x4f,0x41,0x44,0x00,0xab,0x4c,0x4f,0x43,0x41,0x4c,0x00,0xac,0x4c,0x4f,\r\n /*7a500*/ 0x47,0x00,0xad,0x4c,0x4f,0x4f,0x50,0x00,0xae,0x4c,0x4f,0x57,0x45,0x52,0x24,0x00,\r\n /*7a510*/ 0xaf,0x4d,0x45,0x4d,0x00,0xb0,0x4d,0x49,0x44,0x24,0x00,0xb1,0x4d,0x4f,0x44,0x45,\r\n /*7a520*/ 0x00,0xb2,0x4d,0x4f,0x55,0x53,0x45,0x00,0xb3,0x4e,0x45,0x57,0x00,0xb4,0x4e,0x45,\r\n /*7a530*/ 0x58,0x54,0x00,0xb5,0x4e,0x4f,0x54,0x00,0xb6,0x4f,0x46,0x46,0x00,0xb7,0x4f,0x4e,\r\n /*7a540*/ 0x00,0xb8,0x4f,0x50,0x45,0x4e,0x00,0xb9,0x4f,0x52,0x00,0xba,0x4f,0x55,0x54,0x00,\r\n /*7a550*/ 0xbb,0x50,0x45,0x45,0x4b,0x00,0xbc,0x50,0x4c,0x41,0x59,0x00,0xbd,0x50,0x4f,0x49,\r\n /*7a560*/ 0x4e,0x54,0x00,0xbe,0x50,0x4f,0x4b,0x45,0x00,0xbf,0x50,0x52,0x49,0x4e,0x54,0x00,\r\n /*7a570*/ 0xc0,0x3f,0x00,0xc0,0x52,0x45,0x41,0x44,0x00,0xc1,0x52,0x45,0x43,0x54,0x00,0xc2,\r\n /*7a580*/ 0x52,0x45,0x4d,0x00,0xc3,0x27,0x00,0xc3,0x52,0x45,0x54,0x55,0x52,0x4e,0x00,0xc4,\r\n /*7a590*/ 0x52,0x49,0x47,0x48,0x54,0x24,0x00,0xc5,0x52,0x4e,0x44,0x00,0xc6,0x52,0x45,0x4e,\r\n /*7a5a0*/ 0x41,0x4d,0x45,0x00,0xc7,0x52,0x45,0x4d,0x4f,0x56,0x45,0x00,0xc8,0x52,0x45,0x53,\r\n /*7a5b0*/ 0x54,0x4f,0x52,0x45,0x00,0xc9,0x52,0x55,0x4e,0x00,0xca,0x53,0x41,0x56,0x45,0x00,\r\n /*7a5c0*/ 0xcb,0x53,0x43,0x52,0x45,0x45,0x4e,0x00,0xcc,0x53,0x47,0x4e,0x00,0xcd,0x53,0x49,\r\n /*7a5d0*/ 0x4e,0x00,0xce,0x53,0x49,0x5a,0x45,0x00,0xcf,0x53,0x4f,0x55,0x52,0x43,0x45,0x00,\r\n /*7a5e0*/ 0xd0,0x53,0x50,0x43,0x00,0xd1,0x53,0x50,0x52,0x41,0x54,0x54,0x52,0x00,0xd2,0x53,\r\n /*7a5f0*/ 0x50,0x52,0x49,0x54,0x45,0x00,0xd3,0x53,0x51,0x52,0x00,0xd4,0x53,0x54,0x41,0x54,\r\n /*7a600*/ 0x55,0x53,0x00,0xd5,0x53,0x54,0x45,0x50,0x00,0xd6,0x53,0x54,0x49,0x43,0x4b,0x00,\r\n /*7a610*/ 0xd7,0x53,0x54,0x4f,0x50,0x00,0xd8,0x53,0x54,0x52,0x24,0x00,0xd9,0x53,0x55,0x42,\r\n /*7a620*/ 0x00,0xda,0x53,0x57,0x41,0x50,0x00,0xdb,0x54,0x41,0x42,0x00,0xdc,0x54,0x41,0x4e,\r\n /*7a630*/ 0x00,0xdd,0x54,0x48,0x45,0x4e,0x00,0xde,0x54,0x49,0x4c,0x45,0x53,0x45,0x54,0x00,\r\n /*7a640*/ 0xdf,0x54,0x49,0x4d,0x45,0x00,0xe0,0x54,0x4f,0x00,0xe1,0x55,0x4e,0x54,0x49,0x4c,\r\n /*7a650*/ 0x00,0xe2,0x55,0x50,0x50,0x45,0x52,0x24,0x00,0xe3,0x55,0x53,0x52,0x00,0xe4,0x56,\r\n /*7a660*/ 0x41,0x4c,0x00,0xe5,0x57,0x48,0x49,0x4c,0x45,0x00,0xe6,0x2b,0x00,0xe7,0x2d,0x00,\r\n /*7a670*/ 0xe8,0x2d,0x00,0xe9,0x2a,0x00,0xea,0x2f,0x00,0xeb,0x25,0x00,0xec,0x5e,0x00,0xed,\r\n /*7a680*/ 0x3c,0x3e,0x00,0xee,0x21,0x3d,0x00,0xee,0x3c,0x3d,0x00,0xef,0x3d,0x3c,0x00,0xef,\r\n /*7a690*/ 0x3e,0x3d,0x00,0xf0,0x3d,0x3e,0x00,0xf0,0x3c,0x00,0xf1,0x3e,0x00,0xf2,0x3d,0x00,\r\n /*7a6a0*/ 0xf3,0x28,0x00,0xf4,0x29,0x00,0xf5,0x2c,0x00,0xf6,0x3b,0x00,0xf7,0x3a,0x00,0xf8,\r\n /*7a6b0*/ 0x00,0xa3,0xf2,0x00,0x01,0xa3,0xf7,0x00,0x04,0xa3,0xfc,0x00,0x01,0xa4,0x01,0x00,\r\n /*7a6c0*/ 0x02,0xa4,0x06,0x00,0x01,0xa4,0x0b,0x00,0x02,0xa4,0x0f,0x00,0x02,0xa4,0x15,0x00,\r\n /*7a6d0*/ 0x02,0xa4,0x1e,0x00,0x01,0xa4,0x25,0x00,0x01,0xa4,0x2b,0x00,0x02,0xa4,0x33,0x00,\r\n /*7a6e0*/ 0x02,0xa4,0x38,0x00,0x02,0xa4,0x3f,0x00,0x02,0xa4,0x4f,0x00,0x02,0xa4,0x56,0x00,\r\n /*7a6f0*/ 0x02,0xa4,0x5c,0x00,0x01,0xa4,0x61,0x00,0x02,0xa4,0x67,0x40,0x02,0xa4,0x6c,0x00,\r\n /*7a700*/ 0x02,0xa4,0x71,0x40,0x02,0xa4,0x75,0x00,0x02,0xa4,0x7b,0xc0,0x02,0xa4,0x81,0x80,\r\n /*7a710*/ 0x02,0xa4,0x86,0x00,0x01,0xa4,0x8b,0x00,0x02,0xa4,0x91,0x00,0x02,0xa4,0x95,0x40,\r\n /*7a720*/ 0x02,0xa4,0x9a,0x00,0x02,0xa4,0xa0,0x00,0x02,0xa4,0xa7,0x00,0x02,0xa4,0xad,0x00,\r\n /*7a730*/ 0x01,0xa4,0xb3,0x00,0x02,0xa4,0xb7,0x00,0x02,0xa4,0xbe,0x00,0x01,0xa4,0xc3,0x00,\r\n /*7a740*/ 0x01,0xa4,0xc7,0x00,0x01,0xa4,0xcd,0x00,0x02,0xa4,0xd4,0x00,0x01,0xa4,0xdb,0x00,\r\n /*7a750*/ 0x01,0xa4,0xe0,0x00,0x02,0xa4,0xe5,0x00,0x02,0xa4,0xeb,0x00,0x02,0xa4,0xf1,0x00,\r\n /*7a760*/ 0x02,0xa4,0xf7,0x00,0x02,0xa4,0xfe,0x00,0x01,0xa5,0x03,0x80,0x02,0xa5,0x09,0x00,\r\n /*7a770*/ 0x01,0xa5,0x11,0x00,0x02,0xa5,0x16,0x00,0x01,0xa5,0x1c,0x00,0x02,0xa5,0x22,0x00,\r\n /*7a780*/ 0x01,0xa5,0x29,0x00,0x02,0xa5,0x2e,0x80,0x02,0xa5,0x34,0x00,0x04,0xa5,0x39,0x00,\r\n /*7a790*/ 0x02,0xa5,0x3e,0x00,0x02,0xa5,0x42,0x00,0x02,0xa5,0x48,0x00,0x04,0xa5,0x4c,0x00,\r\n /*7a7a0*/ 0x02,0xa5,0x51,0x00,0x01,0xa5,0x57,0x00,0x02,0xa5,0x5d,0x00,0x02,0xa5,0x64,0x00,\r\n /*7a7b0*/ 0x02,0xa5,0x6a,0x00,0x02,0xa5,0x74,0x00,0x02,0xa5,0x7a,0x00,0x02,0xa5,0x80,0x00,\r\n /*7a7c0*/ 0x02,0xa5,0x88,0x00,0x02,0xa5,0x90,0x00,0x01,0xa5,0x98,0x00,0x01,0xa5,0x9d,0x00,\r\n /*7a7d0*/ 0x02,0xa5,0xa5,0x00,0x02,0xa5,0xad,0x00,0x02,0xa5,0xb6,0x00,0x02,0xa5,0xbb,0x00,\r\n /*7a7e0*/ 0x02,0xa5,0xc1,0x00,0x02,0xa5,0xc9,0x00,0x01,0xa5,0xce,0x00,0x01,0xa5,0xd3,0x00,\r\n /*7a7f0*/ 0x02,0xa5,0xd9,0x00,0x02,0xa5,0xe1,0x00,0x01,0xa5,0xe6,0x00,0x01,0xa5,0xef,0x00,\r\n /*7a800*/ 0x02,0xa5,0xf7,0x00,0x01,0xa5,0xfc,0x00,0x01,0xa6,0x04,0x00,0x02,0xa6,0x0a,0x00,\r\n /*7a810*/ 0x01,0xa6,0x11,0x00,0x02,0xa6,0x17,0x00,0x01,0xa6,0x1d,0x00,0x02,0xa6,0x22,0x00,\r\n /*7a820*/ 0x02,0xa6,0x28,0x00,0x01,0xa6,0x2d,0x00,0x01,0xa6,0x32,0x60,0x02,0xa6,0x38,0x00,\r\n /*7a830*/ 0x02,0xa6,0x41,0x00,0x01,0xa6,0x47,0x00,0x02,0xa6,0x4b,0x00,0x02,0xa6,0x52,0x00,\r\n /*7a840*/ 0x01,0xa6,0x5a,0x00,0x01,0xa6,0x5f,0x00,0x01,0xa6,0x64,0x00,0x02,0xa6,0x6b,0x00,\r\n /*7a850*/ 0x04,0xa6,0x6e,0x00,0x04,0xa6,0x71,0x00,0x04,0xa6,0x74,0x00,0x04,0xa6,0x77,0x00,\r\n /*7a860*/ 0x04,0xa6,0x7a,0x00,0x04,0xa6,0x7d,0x00,0x04,0xa6,0x80,0x00,0x04,0xa6,0x88,0x00,\r\n /*7a870*/ 0x04,0xa6,0x90,0x00,0x04,0xa6,0x98,0x00,0x04,0xa6,0x9b,0x00,0x04,0xa6,0x9e,0x00,\r\n /*7a880*/ 0x04,0xa6,0xa1,0x00,0x08,0xa6,0xa4,0x00,0x08,0xa6,0xa7,0x00,0x08,0xa6,0xaa,0x00,\r\n /*7a890*/ 0x08,0xa6,0xad,0x00,0x08,0xa3,0xf2,0x00,0x06,0x00,0x00,0x00,0x00,0xa4,0x0f,0x00,\r\n /*7a8a0*/ 0x0b,0xa4,0x61,0x00,0x05,0xa4,0x7b,0x00,0x03,0xa4,0x8b,0x00,0x04,0xa4,0xa0,0x00,\r\n /*7a8b0*/ 0x02,0xa4,0xad,0x00,0x01,0xa4,0xb3,0x00,0x04,0x00,0x00,0x00,0x00,0xa4,0xc7,0x00,\r\n /*7a8c0*/ 0x01,0xa4,0xcd,0x00,0x0b,0xa5,0x11,0x00,0x04,0xa5,0x29,0x00,0x03,0xa5,0x39,0x00,\r\n /*7a8d0*/ 0x05,0xa5,0x51,0x00,0x05,0x00,0x00,0x00,0x00,0xa5,0x74,0x00,0x0a,0xa5,0xbb,0x00,\r\n /*7a8e0*/ 0x11,0xa6,0x28,0x00,0x06,0xa6,0x4b,0x00,0x03,0xa6,0x5f,0x00,0x01,0xa6,0x64,0x00,\r\n /*7a8f0*/ 0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa6,0x6b,0x00,\r\n /*7a900*/ 0x12,\r\n]},\r\n{addr: 507904, data: [\r\n /*7c000*/ 0x1a,0x00,0x00,0x16,0x16,0x00,0xe0,0x00,0x18,0x00,0x80,0x00,0x11,0xd8,0x00,0x00,\r\n /*7c010*/ 0x16,0x00,0x00,0x00,0x18,0x00,0x11,0x00,0x21,0xd8,0x00,0x00,0xda,0x9a,0x00,0xff,\r\n /*7c020*/ 0xe3,0x11,0x00,0x1d,0x31,0x10,0x10,0x11,0x00,0x09,0x31,0x10,0x11,0x11,0x00,0x80,\r\n /*7c030*/ 0x31,0x10,0x2b,0x11,0x00,0x80,0x31,0x10,0x2c,0x11,0x00,0x00,0x31,0x10,0x2d,0x11,\r\n /*7c040*/ 0x00,0x00,0x31,0x10,0x12,0x31,0x10,0x17,0x31,0x10,0x18,0x31,0x10,0x19,0x31,0x10,\r\n /*7c050*/ 0x1a,0x31,0x10,0x1b,0x11,0x00,0x84,0x31,0x10,0x13,0x11,0x00,0x3c,0x31,0x10,0x14,\r\n /*7c060*/ 0x11,0x40,0x11,0x12,0x31,0x10,0x15,0x11,0x40,0x11,0x11,0x31,0x10,0x16,0x11,0x00,\r\n /*7c070*/ 0x00,0x21,0x40,0x11,0x18,0x11,0x00,0x00,0x21,0x40,0x11,0x17,0x11,0x40,0x11,0x0c,\r\n /*7c080*/ 0x21,0x40,0x10,0x00,0x11,0x00,0xff,0x21,0x40,0x10,0x40,0x11,0x00,0x00,0x21,0x40,\r\n /*7c090*/ 0x10,0x80,0x11,0x00,0x0f,0x31,0x10,0x1c,0x11,0x00,0xe0,0x31,0x10,0x1d,0x11,0x00,\r\n /*7c0a0*/ 0x10,0x31,0x10,0x1e,0x11,0x00,0x5c,0x31,0x10,0x1f,0x11,0x00,0x11,0x31,0x10,0x20,\r\n /*7c0b0*/ 0x11,0x40,0x11,0x0b,0x31,0x10,0x21,0x11,0x40,0x11,0x0a,0x31,0x10,0x22,0x90,0x07,\r\n /*7c0c0*/ 0x18,0x90,0x07,0x48,0xa7,0xe0,0x11,0x00,0x01,0x21,0x40,0x11,0x0d,0xf0,0xa7,0xe0,\r\n /*7c0d0*/ 0x11,0x00,0x00,0x21,0x40,0x11,0x0d,0xf0,0xa7,0xe8,0xe0,0xe6,0x16,0x40,0x11,0x13,\r\n /*7c0e0*/ 0x18,0x40,0x11,0x03,0x11,0x00,0x00,0x21,0xd0,0x00,0x00,0x11,0x40,0x11,0x11,0x21,\r\n /*7c0f0*/ 0xd0,0x10,0x00,0x11,0x40,0x11,0x12,0x21,0xd0,0x20,0x00,0xd8,0x9a,0x00,0xff,0xe4,\r\n /*7c100*/ 0x16,0x00,0x00,0x00,0x90,0x06,0x00,0xb0,0xf6,0xf0,0xf8,0xa7,0xe0,0x10,0x00,0xc1,\r\n /*7c110*/ 0x17,0x20,0x40,0x01,0x10,0xf0,0xa7,0xb6,0x90,0x07,0x05,0x90,0x07,0x71,0xbe,0xa7,\r\n /*7c120*/ 0xe0,0xe2,0xe4,0xe6,0xa2,0x30,0x10,0x1c,0xe1,0x11,0x00,0x0f,0x31,0x10,0x1c,0x30,\r\n /*7c130*/ 0x10,0x1d,0x13,0x40,0x11,0x0d,0x15,0x40,0x11,0x0e,0x04,0x35,0x0a,0x37,0x61,0x11,\r\n /*7c140*/ 0x05,0x13,0x31,0x10,0x1d,0x11,0x40,0x11,0x0b,0x31,0x10,0x21,0x11,0x40,0x11,0x0a,\r\n /*7c150*/ 0x31,0x10,0x22,0x10,0x00,0x00,0x00,0x11,0x40,0x11,0x08,0x17,0x40,0x11,0x15,0xa8,\r\n /*7c160*/ 0x07,0x48,0x00,0x30,0x31,0x10,0x26,0x09,0x20,0x31,0x10,0x25,0x17,0x40,0x11,0x07,\r\n /*7c170*/ 0x10,0x00,0x00,0x00,0x11,0x40,0x11,0x09,0x0b,0x07,0x48,0x00,0x40,0x31,0x10,0x24,\r\n /*7c180*/ 0x09,0x20,0x31,0x10,0x23,0xf1,0x31,0x10,0x1c,0xa3,0xf6,0xf4,0xf2,0xf0,0xa7,0xe0,\r\n /*7c190*/ 0xe2,0xa2,0x11,0x40,0x11,0x10,0xd1,0x92,0x00,0x00,0x04,0x90,0x04,0x00,0x11,0x11,\r\n /*7c1a0*/ 0x40,0x11,0x0e,0x13,0x00,0x01,0x07,0x13,0x21,0x40,0x11,0x0e,0x11,0x40,0x11,0x0f,\r\n /*7c1b0*/ 0x21,0x40,0x11,0x10,0xa3,0xf2,0xf0,0xa7,0x27,0x40,0x11,0x09,0x09,0x26,0x27,0x40,\r\n /*7c1c0*/ 0x11,0x08,0x09,0x26,0xe0,0x11,0x00,0x01,0x21,0x40,0x11,0x0e,0x11,0x40,0x11,0x0f,\r\n /*7c1d0*/ 0x21,0x40,0x11,0x10,0xf0,0xa7,0x17,0x40,0x11,0x08,0x09,0x26,0x17,0x40,0x11,0x09,\r\n /*7c1e0*/ 0xa7,0xe0,0xa2,0x90,0x06,0xff,0xef,0x09,0x26,0x0f,0x87,0x11,0x40,0x11,0x00,0x0b,\r\n /*7c1f0*/ 0x81,0x09,0x26,0x05,0x87,0x16,0x40,0x11,0x13,0xa3,0xf0,0xa7,0xe0,0x0f,0x68,0x11,\r\n /*7c200*/ 0x40,0x11,0x00,0x0b,0x61,0x09,0x26,0x11,0x40,0x11,0x02,0xd1,0x04,0x81,0x0f,0x79,\r\n /*7c210*/ 0xf0,0xa7,0x90,0x06,0xff,0xcb,0x17,0xd0,0x00,0x00,0xa7,0xe0,0x90,0x06,0xff,0xc1,\r\n /*7c220*/ 0xd8,0x11,0xd0,0x00,0x00,0x59,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x04,0x90,\r\n /*7c230*/ 0x04,0x00,0x05,0xd8,0x9b,0x00,0xff,0xe9,0xc8,0xf0,0xa7,0xe0,0x90,0x06,0xff,0xa1,\r\n /*7c240*/ 0x11,0xd0,0x00,0x00,0x59,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x04,0x90,0x04,\r\n /*7c250*/ 0x00,0x05,0xc8,0x9b,0x00,0xff,0xe9,0xd8,0xf0,0xa7,0xe0,0xe8,0xe6,0xe2,0xea,0xa2,\r\n /*7c260*/ 0x30,0x70,0x38,0x77,0x01,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x18,0xe4,0x30,0x70,\r\n /*7c270*/ 0x03,0x15,0x00,0x19,0x01,0x75,0x15,0x00,0x64,0xaa,0x75,0x30,0x50,0x03,0x03,0x75,\r\n /*7c280*/ 0x98,0x00,0xff,0xf7,0xf4,0x16,0x40,0x11,0x13,0x07,0xaa,0x1b,0x40,0x11,0x02,0x18,\r\n /*7c290*/ 0x00,0x00,0x00,0x12,0x40,0x11,0x05,0x02,0x2a,0xba,0x11,0xd8,0x00,0x00,0x21,0xd0,\r\n /*7c2a0*/ 0x00,0x00,0x11,0xd8,0x10,0x00,0x21,0xd0,0x10,0x00,0x11,0xd8,0x20,0x00,0x21,0xd0,\r\n /*7c2b0*/ 0x20,0x00,0xc8,0x0f,0x08,0x03,0x02,0x98,0x00,0xff,0xdf,0xa3,0xfa,0xf2,0xf6,0xf8,\r\n /*7c2c0*/ 0xf0,0xa7,0xe6,0xe4,0xe0,0xa2,0x90,0x06,0xff,0x0c,0x09,0x26,0xd7,0x93,0x00,0x00,\r\n /*7c2d0*/ 0x04,0x90,0x04,0x00,0x01,0xc7,0x09,0x26,0x90,0x06,0xfe,0xdc,0xa3,0xf0,0xf4,0xf6,\r\n /*7c2e0*/ 0xa7,0xe6,0xe4,0xe0,0xa2,0x90,0x06,0xfe,0xed,0xd7,0x93,0x00,0x00,0x04,0x90,0x04,\r\n /*7c2f0*/ 0x00,0x1a,0x17,0x40,0x11,0x02,0xd7,0x09,0x26,0xd7,0x93,0x00,0x00,0x04,0x90,0x04,\r\n /*7c300*/ 0x00,0x08,0xc7,0x09,0x26,0x17,0x00,0x00,0x09,0x26,0x09,0x26,0x90,0x06,0xfe,0xa8,\r\n /*7c310*/ 0xa3,0xf0,0xf4,0xf6,0xa7,0xe6,0xe4,0xe0,0xa2,0x90,0x06,0xfe,0xb9,0x09,0x26,0x0f,\r\n /*7c320*/ 0x57,0x09,0x26,0xc7,0x11,0x40,0x11,0x02,0x03,0x71,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7c330*/ 0x00,0x04,0x17,0x00,0x00,0xc5,0x11,0x40,0x11,0x01,0x03,0x51,0x90,0x00,0x00,0x04,\r\n /*7c340*/ 0x90,0x04,0x00,0x05,0xd5,0x90,0x06,0xff,0x11,0x09,0x26,0x0f,0x75,0x09,0x26,0x90,\r\n /*7c350*/ 0x06,0xfe,0x65,0xa3,0xf0,0xf4,0xf6,0xa7,0xe6,0xe4,0xe0,0xa2,0x90,0x06,0xfe,0x76,\r\n /*7c360*/ 0x09,0x26,0xc7,0x11,0x40,0x11,0x01,0x03,0x71,0x90,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7c370*/ 0x05,0xd7,0x90,0x06,0xfe,0xe4,0x09,0x26,0x90,0x06,0xfe,0x3c,0xa3,0xf0,0xf4,0xf6,\r\n /*7c380*/ 0xa7,0xe6,0xe4,0xe0,0xa2,0x90,0x06,0xfe,0x4d,0x09,0x26,0x0f,0x57,0x09,0x26,0x17,\r\n /*7c390*/ 0x00,0x00,0xc5,0x11,0x40,0x11,0x01,0x03,0x51,0x90,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7c3a0*/ 0x05,0xd5,0x90,0x06,0xfe,0xb4,0x09,0x26,0x0f,0x75,0x09,0x26,0x90,0x06,0xfe,0x08,\r\n /*7c3b0*/ 0xa3,0xf0,0xf4,0xf6,0xa7,0xe6,0xea,0xe0,0xa2,0x90,0x06,0xff,0x24,0x90,0x06,0xfe,\r\n /*7c3c0*/ 0x20,0x0f,0xa8,0x90,0x06,0xfe,0x74,0x03,0x8a,0x93,0x00,0x00,0x1f,0x11,0xc8,0x00,\r\n /*7c3d0*/ 0x01,0x21,0xc8,0x00,0x00,0x11,0xc8,0x10,0x01,0x21,0xc8,0x10,0x00,0x11,0xc8,0x20,\r\n /*7c3e0*/ 0x01,0x21,0xc8,0x20,0x00,0xca,0x03,0x8a,0x9b,0x00,0xff,0xe1,0xa3,0xf0,0xfa,0xf6,\r\n /*7c3f0*/ 0xa7,0xa7,0xa2,0xe0,0x11,0x00,0x04,0x21,0x40,0x11,0x17,0x11,0x00,0x00,0x21,0x40,\r\n /*7c400*/ 0x11,0x18,0xf0,0xa3,0xa7,0xa2,0xe0,0x11,0x00,0x00,0x21,0x40,0x11,0x17,0xf0,0xa3,\r\n /*7c410*/ 0xa7,0x27,0x40,0x11,0x0a,0x27,0x40,0x11,0x11,0xa7,0x17,0x40,0x11,0x11,0xa7,0xa2,\r\n /*7c420*/ 0xe0,0x11,0x40,0x11,0x18,0x21,0x40,0x11,0x0a,0x21,0x40,0x11,0x11,0xf0,0xa3,0xa7,\r\n /*7c430*/ 0x27,0x40,0x11,0x12,0xa7,0x17,0x40,0x11,0x12,0xa7,0xa2,0xe0,0x11,0x40,0x11,0x18,\r\n /*7c440*/ 0x21,0x40,0x11,0x12,0xf0,0xa3,0xa7,0xa2,0xe6,0x90,0x06,0xfe,0xc8,0x90,0x06,0xfd,\r\n /*7c450*/ 0x85,0x67,0x07,0x98,0x00,0xff,0xf2,0xf6,0xa3,0xa7,0xc3,0xf1,0xc3,0xf1,0xc3,0xf1,\r\n /*7c460*/ 0xc3,0xf1,0xc3,0xf1,0xc3,0xf1,0xc3,0xf1,0xc3,0xf1,0xc3,0xb5,0xc4,0x47,0xc3,0x58,\r\n /*7c470*/ 0xc3,0xf1,0xc0,0xd9,0xc3,0x81,0xc3,0xf1,0xc3,0xf1,0xc3,0x15,0xc2,0xe1,0xc4,0x1f,\r\n /*7c480*/ 0xc4,0x3a,0xc3,0xf1,0xc3,0xf1,0xc3,0xf1,0xc3,0xf1,0xc0,0xd9,0xc3,0xf1,0xc4,0x05,\r\n /*7c490*/ 0xc3,0xf2,0xc3,0xf1,0xc3,0xf1,0xc2,0xc2,0xc3,0x58,0xe0,0xe2,0xe8,0xe6,0xea,0xa2,\r\n /*7c4a0*/ 0x0f,0x17,0x13,0x40,0x11,0x17,0x5b,0x80,0x90,0x01,0x3c,0x5b,0x02,0x90,0x01,0x37,\r\n /*7c4b0*/ 0x5b,0x04,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x27,0x59,0x20,0x92,0x00,0x00,0x04,\r\n /*7c4c0*/ 0x90,0x04,0x00,0x08,0x90,0x06,0xff,0x3d,0x90,0x04,0x00,0x1f,0x13,0x40,0x11,0x18,\r\n /*7c4d0*/ 0x19,0x00,0x0a,0xa8,0x39,0x51,0x30,0x01,0x31,0x23,0x40,0x11,0x18,0x90,0x04,0x00,\r\n /*7c4e0*/ 0x3a,0x59,0x20,0x92,0x00,0x00,0x04,0x90,0x04,0x00,0x14,0x16,0x00,0xf8,0x8b,0x18,\r\n /*7c4f0*/ 0x00,0x00,0x02,0x0f,0xa1,0x0a,0xa1,0x90,0xde,0x00,0x00,0x90,0x04,0x00,0x1c,0x90,\r\n /*7c500*/ 0x06,0xfc,0xde,0x21,0xd0,0x00,0x00,0x11,0x40,0x11,0x11,0x21,0xd0,0x10,0x00,0x11,\r\n /*7c510*/ 0x40,0x11,0x12,0x21,0xd0,0x20,0x00,0x90,0x06,0xfd,0xfa,0xa3,0xfa,0xf6,0xf8,0xf2,\r\n /*7c520*/ 0xf0,0xa7,0xa2,0x30,0x70,0x30,0x5f,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x0a,\r\n /*7c530*/ 0x3e,0x30,0x70,0x30,0x5f,0x00,0x90,0x00,0xff,0xf6,0xa3,0xa7,0xa2,0xe8,0xe0,0x11,\r\n /*7c540*/ 0xd0,0x00,0x00,0x59,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x13,0x0e,0x06,0x90,\r\n /*7c550*/ 0x06,0xff,0x47,0x0e,0x06,0xc8,0x11,0xd0,0x00,0x00,0x59,0x00,0x90,0x04,0xff,0xe5,\r\n /*7c560*/ 0xf0,0xf8,0xa3,0xa7,0xa2,0xe0,0x11,0x00,0x80,0x21,0x40,0x11,0x17,0x90,0x06,0xff,\r\n /*7c570*/ 0xcb,0x11,0x00,0x00,0x21,0x40,0x11,0x17,0xf0,0xa3,0xa7,0xa2,0xe0,0xe2,0xea,0x38,\r\n /*7c580*/ 0x00,0xe8,0xe6,0x90,0x06,0xfb,0x3e,0x90,0x06,0xff,0x97,0x5f,0x0d,0x90,0x00,0x00,\r\n /*7c590*/ 0x2e,0x90,0x06,0xff,0x05,0x5f,0x22,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x1c,0x11,\r\n /*7c5a0*/ 0x40,0x11,0x17,0x59,0x02,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x11,0x00,0x00,\r\n /*7c5b0*/ 0x90,0x04,0x00,0x03,0x11,0x00,0x02,0x21,0x40,0x11,0x17,0x90,0x04,0xff,0xc8,0x90,\r\n /*7c5c0*/ 0x06,0xfb,0x0c,0x11,0x00,0x00,0x21,0x40,0x11,0x17,0x90,0x06,0xfc,0x6d,0x0f,0x28,\r\n /*7c5d0*/ 0x90,0x06,0xfc,0x47,0x02,0x28,0xc2,0xe8,0xe6,0x5a,0x00,0x00,0x90,0x00,0x00,0x04,\r\n /*7c5e0*/ 0x90,0x04,0x00,0x0c,0x14,0x00,0x00,0x00,0x25,0xa7,0xff,0xfc,0x90,0x04,0x00,0x32,\r\n /*7c5f0*/ 0x03,0x42,0x93,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x14,0x00,0xff,0xff,0x90,0x04,\r\n /*7c600*/ 0x00,0x20,0x0f,0x42,0xe4,0x1a,0x00,0x00,0x00,0x15,0xaf,0xff,0xf8,0x25,0xaf,0xff,\r\n /*7c610*/ 0xfc,0xca,0xd2,0x5a,0x00,0x00,0x98,0x00,0xff,0xef,0x15,0x00,0x00,0x25,0xaf,0xff,\r\n /*7c620*/ 0xfc,0xf4,0x39,0x08,0xfa,0xf2,0xf0,0xa3,0xa7,\r\n]},\r\n{addr: 509481, data: [\r\n /*7c629*/ 0x38,0x11,0xa2,0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0x1a,0x00,0x00,0x00,0x0f,0x04,0x0f,\r\n /*7c639*/ 0x40,0xaa,0x03,0xba,0x48,0x00,0x30,0x58,0x00,0x3a,0x9b,0x00,0x00,0x04,0x90,0x04,\r\n /*7c649*/ 0x00,0x03,0x48,0x00,0x07,0x21,0x8f,0xff,0xef,0xca,0x0f,0x04,0xa9,0x03,0x58,0x00,\r\n /*7c659*/ 0x00,0x98,0x00,0xff,0xda,0x09,0x22,0x03,0xb3,0x93,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7c669*/ 0x0e,0x11,0x00,0x30,0x21,0x8f,0xff,0xef,0xca,0x03,0xb3,0x93,0x00,0xff,0xf5,0xda,\r\n /*7c679*/ 0x11,0x8f,0xff,0xef,0x21,0xd0,0x00,0x00,0xc8,0xda,0x9a,0x00,0xff,0xf2,0x11,0x00,\r\n /*7c689*/ 0x00,0x21,0xd0,0x00,0x00,0xfa,0xf8,0xf6,0xf4,0xf2,0xf0,0xa3,0x39,0x11,0xa7,0xa2,\r\n /*7c699*/ 0xe0,0x5c,0x00,0x00,0x93,0x00,0x00,0x04,0x90,0x04,0x00,0x09,0x11,0x00,0x2d,0x09,\r\n /*7c6a9*/ 0x14,0x90,0x04,0x00,0x03,0x11,0x00,0x20,0x21,0xd0,0x00,0x00,0xc8,0x90,0x06,0xff,\r\n /*7c6b9*/ 0x6f,0xd8,0xf0,0xa3,0xa7,0x38,0x00,0xe0,0xe2,0xe6,0xea,0xa2,0x90,0x00,0x00,0x04,\r\n /*7c6c9*/ 0x90,0x04,0x00,0x07,0x13,0x00,0x00,0x90,0x04,0x00,0x03,0x13,0x00,0x01,0x1a,0x00,\r\n /*7c6d9*/ 0x00,0x00,0x15,0xd8,0x00,0x00,0x11,0xa8,0x00,0x04,0x5b,0x01,0x90,0x00,0x00,0x04,\r\n /*7c6e9*/ 0x90,0x04,0x00,0x05,0x5d,0x00,0x90,0x01,0x2b,0x03,0x51,0x90,0x00,0x00,0x04,0x90,\r\n /*7c6f9*/ 0x04,0x00,0x09,0x5d,0x00,0x90,0x01,0x1c,0xca,0x90,0x05,0xd6,0x93,0x00,0x00,0x04,\r\n /*7c709*/ 0x90,0x04,0x00,0x0a,0xa3,0xb3,0xb8,0x90,0x05,0x0d,0x90,0x04,0x00,0x06,0xa3,0xbb,\r\n /*7c719*/ 0xb8,0x90,0x05,0x03,0xa3,0xbb,0xb0,0x0f,0x4a,0xfa,0xf6,0xf2,0xf0,0x39,0x00,0xa7,\r\n /*7c729*/ 0x38,0x00,0xea,0xa2,0x1a,0xd0,0x00,0x00,0xda,0x92,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7c739*/ 0x07,0xa3,0xb3,0xb2,0xb7,0x90,0x05,0x13,0xca,0xea,0x0a,0xa1,0x14,0xd8,0x00,0x00,\r\n /*7c749*/ 0xfa,0xa3,0x90,0x01,0x06,0xda,0x2a,0xd0,0x00,0x00,0xbf,0xfa,0x39,0x00,0xa7,0x38,\r\n /*7c759*/ 0x00,0xea,0x1a,0xd0,0x00,0x00,0xea,0x0a,0xa1,0xe8,0xc8,0xc8,0x24,0xd8,0x00,0x00,\r\n /*7c769*/ 0xf8,0xfa,0xca,0x2a,0xd0,0x00,0x00,0xfa,0x39,0x00,0xa7,0x38,0x00,0xea,0x1a,0x00,\r\n /*7c779*/ 0x00,0x02,0x24,0xd8,0x00,0x00,0x1a,0x00,0x00,0x04,0x2a,0xd0,0x00,0x00,0xfa,0x39,\r\n /*7c789*/ 0x00,0xa7,0x38,0x00,0xea,0x1a,0x00,0x00,0x02,0x14,0xd8,0x00,0x00,0x1a,0xd0,0x00,\r\n /*7c799*/ 0x00,0xba,0x02,0x4a,0xfa,0x39,0x00,0xa7,0x38,0x00,0xea,0xe2,0xe0,0x1a,0x00,0x00,\r\n /*7c7a9*/ 0x02,0x12,0xd8,0x00,0x00,0x10,0xd0,0x00,0x00,0x01,0x04,0x03,0x02,0x9b,0x00,0x00,\r\n /*7c7b9*/ 0x04,0x90,0x04,0x00,0x0d,0xb7,0x16,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x90,0x04,\r\n /*7c7c9*/ 0x00,0x0c,0xbf,0x12,0xd0,0x00,0x00,0x20,0xd0,0x00,0x00,0xba,0x01,0x82,0xf0,0xf2,\r\n /*7c7d9*/ 0xfa,0x39,0x00,0xa7,\r\n]},\r\n{addr: 512000, data: [\r\n /*7d000*/ 0x90,0x06,0x1e,0xd6,0x90,0x06,0x1e,0xf8,0x90,0x06,0x1f,0xc1,0x3f,0x38,0x00,0xe6,\r\n /*7d010*/ 0xbf,0x30,0x70,0x38,0x77,0x08,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x0e,0x30,0x70,\r\n /*7d020*/ 0x3a,0x77,0x04,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x01,0xb7,0xf6,0x39,0x00,0xa7,\r\n /*7d030*/ 0x38,0x0a,0xe6,0xe2,0xe8,0xea,0xa2,0x5f,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7d040*/ 0x6b,0x0f,0xa7,0x16,0x00,0xf4,0x71,0x18,0x00,0x00,0x01,0x90,0x46,0xfe,0x28,0x16,\r\n /*7d050*/ 0x00,0xf4,0x73,0x18,0x00,0x00,0x06,0xda,0x0a,0xa1,0x18,0xd8,0x00,0x00,0x16,0x00,\r\n /*7d060*/ 0xe0,0x00,0x90,0x46,0xfe,0x28,0x16,0x00,0xf0,0x00,0x18,0x00,0x23,0x8c,0x90,0x46,\r\n /*7d070*/ 0xfe,0x28,0x5c,0x00,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x2f,0x16,0x00,0xf4,\r\n /*7d080*/ 0x72,0x18,0x00,0x00,0x03,0x90,0x46,0xfe,0x28,0x0f,0x6c,0x56,0x00,0x0a,0x0f,0x86,\r\n /*7d090*/ 0x16,0x00,0x00,0x00,0x12,0x00,0x00,0x0a,0x90,0x46,0xfe,0x32,0x90,0x46,0xfe,0x28,\r\n /*7d0a0*/ 0x16,0x00,0xf4,0x1b,0x18,0x00,0x00,0x06,0x90,0x46,0xfe,0x28,0xa3,0xfa,0xf8,0xf2,\r\n /*7d0b0*/ 0xf6,0x39,0x0a,0xa7,0x38,0x00,0xea,0xe0,0xe2,0xa2,0x1a,0x00,0x00,0x00,0x13,0x00,\r\n /*7d0c0*/ 0x00,0x11,0xd8,0x00,0x00,0x59,0x22,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x02,0x7b,\r\n /*7d0d0*/ 0xff,0x5b,0xff,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x1a,0x59,0x61,0x9b,0x00,0x00,\r\n /*7d0e0*/ 0x04,0x90,0x04,0x00,0x10,0x59,0x7b,0x93,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x61,\r\n /*7d0f0*/ 0xdf,0x21,0xd8,0x00,0x00,0xca,0x59,0x00,0x98,0x00,0xff,0xc5,0x11,0x00,0x22,0x04,\r\n /*7d100*/ 0x13,0x0f,0x71,0xa3,0xf2,0xf0,0xfa,0x39,0x00,0xa7,0xa2,0x03,0x75,0x93,0x01,0x0f,\r\n /*7d110*/ 0x09,0x24,0x03,0x75,0x90,0x01,0x03,0x9b,0x01,0x05,0xa3,0xb0,0x90,0x05,0x02,0xa3,\r\n /*7d120*/ 0xb8,0xa7,0xe4,0x14,0x00,0x39,0x30,0x90,0x06,0xff,0xdf,0xf4,0xa7,0xe4,0x14,0x00,\r\n /*7d130*/ 0x5a,0x41,0x90,0x06,0xff,0xd4,0xf4,0xa7,0x90,0x06,0xff,0xe6,0x90,0x01,0x04,0x90,\r\n /*7d140*/ 0x06,0xff,0xea,0xa7,0x90,0x06,0xff,0xda,0x90,0x01,0x0a,0xe4,0x14,0x00,0x46,0x41,\r\n /*7d150*/ 0x90,0x06,0xff,0xb6,0xf4,0xa7,0x38,0x06,0xe8,0xea,0xe4,0xe2,0x1a,0x00,0x00,0x01,\r\n /*7d160*/ 0x2a,0x87,0xff,0xfa,0x1a,0x00,0x00,0x00,0x2a,0x87,0xff,0xfe,0x2a,0x87,0xff,0xfc,\r\n /*7d170*/ 0x17,0x00,0x00,0x90,0x06,0x02,0xee,0x17,0xa8,0x00,0x08,0x90,0x06,0x02,0xfa,0x5f,\r\n /*7d180*/ 0x20,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x1d,0x17,0xa8,0x00,0x08,0x5f,0x20,0x90,\r\n /*7d190*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x04,0xca,0x90,0x05,0xee,0x90,0x06,0x02,0xd0,0x17,\r\n /*7d1a0*/ 0x00,0x20,0x90,0x04,0x02,0x99,0x90,0x06,0xff,0x78,0x98,0x00,0x00,0xba,0x14,0x00,\r\n /*7d1b0*/ 0x00,0x00,0x12,0x00,0x00,0x0a,0x90,0x06,0x02,0xab,0xba,0x57,0x30,0xa8,0x42,0x5f,\r\n /*7d1c0*/ 0x0a,0x9b,0x00,0x00,0x04,0x90,0x04,0x00,0x03,0xba,0x57,0x07,0x03,0x73,0x9b,0x00,\r\n /*7d1d0*/ 0x00,0x4c,0xba,0x01,0x47,0x17,0xa8,0x00,0x08,0x5f,0x58,0x90,0x00,0x00,0x04,0x90,\r\n /*7d1e0*/ 0x04,0x00,0x1c,0x5c,0x00,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,\r\n /*7d1f0*/ 0x01,0x90,0x04,0x02,0x5f,0x17,0x00,0x30,0x13,0x00,0x10,0x90,0x04,0x00,0x1a,0x5b,\r\n /*7d200*/ 0x0a,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x90,0x06,0xff,0x15,0x90,0x04,0x00,\r\n /*7d210*/ 0x04,0x90,0x06,0xff,0x2f,0x98,0x00,0x00,0x05,0xca,0x90,0x04,0xff,0x9c,0x90,0x06,\r\n /*7d220*/ 0x02,0x4d,0x90,0x06,0x02,0x44,0x09,0x24,0x5d,0x00,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7d230*/ 0x00,0x07,0x17,0x00,0xff,0x90,0x04,0x00,0x03,0x17,0x00,0xfe,0x09,0x24,0x27,0xa8,\r\n /*7d240*/ 0x00,0x04,0xca,0x5f,0xfe,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x0a,0x24,0xa8,0x00,\r\n /*7d250*/ 0x04,0xca,0xca,0x90,0x04,0x00,0x05,0x25,0xa8,0x00,0x04,0xca,0x90,0x06,0x02,0x14,\r\n /*7d260*/ 0x90,0x06,0x02,0x5f,0x90,0x04,0xff,0x0b,0x5f,0x22,0x98,0x01,0x41,0x90,0x06,0x01,\r\n /*7d270*/ 0xf9,0x17,0x00,0xfb,0x27,0xa8,0x00,0x04,0x90,0x06,0x02,0x05,0x90,0x06,0x01,0xe5,\r\n /*7d280*/ 0x17,0xa8,0x00,0x08,0x90,0x06,0x01,0xf1,0x5f,0x22,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7d290*/ 0x00,0x03,0x17,0x00,0x00,0x90,0x06,0x01,0xd1,0x27,0xa8,0x00,0x04,0x90,0x06,0x01,\r\n /*7d2a0*/ 0xe0,0x5f,0x00,0x98,0x01,0xd6,0x90,0x06,0x02,0x19,0x90,0x04,0xfe,0xc5,0x14,0x00,\r\n /*7d2b0*/ 0x7e,0x21,0x90,0x06,0xfe,0x54,0x98,0x00,0x00,0x73,0xe6,0x16,0x00,0xe0,0x00,0x18,\r\n /*7d2c0*/ 0x00,0xa3,0xf2,0x12,0x80,0x00,0x0a,0xba,0x01,0x2a,0xd2,0xe2,0x12,0x80,0x00,0x08,\r\n /*7d2d0*/ 0xe2,0x13,0xd0,0x00,0x00,0x5b,0x00,0x90,0x01,0x4c,0xb8,0x90,0x46,0xfe,0x36,0x98,\r\n /*7d2e0*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x10,0xc8,0x13,0xd0,0x00,0x00,0x5b,0x00,0x98,0x00,\r\n /*7d2f0*/ 0xff,0xf5,0xc8,0xc8,0x90,0x05,0xda,0xba,0x01,0x84,0xc8,0x13,0xd0,0x00,0x00,0x90,\r\n /*7d300*/ 0x06,0x01,0x86,0x90,0x06,0x01,0x63,0x23,0xa8,0x00,0x04,0x90,0x06,0x01,0x72,0x90,\r\n /*7d310*/ 0x06,0x01,0x52,0xba,0x01,0xa4,0xda,0x90,0x06,0x01,0x54,0x12,0x00,0x00,0x04,0x01,\r\n /*7d320*/ 0xe2,0xf6,0x90,0x04,0xfe,0x4d,0x12,0x00,0x00,0x04,0x01,0xe2,0xf6,0x90,0x06,0xfd,\r\n /*7d330*/ 0xfc,0x98,0x00,0x01,0x0a,0xba,0x57,0x41,0x90,0x06,0x01,0x2e,0x15,0x00,0xfa,0x25,\r\n /*7d340*/ 0xa8,0x00,0x04,0x90,0x06,0x01,0x3a,0x09,0x26,0x90,0x06,0x01,0x18,0x17,0xa8,0x00,\r\n /*7d350*/ 0x08,0xca,0x90,0x06,0xfd,0xe2,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0xda,0x17,\r\n /*7d360*/ 0x00,0xff,0x90,0x04,0x00,0x0e,0xba,0x57,0x41,0x93,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7d370*/ 0x03,0xba,0x4f,0x2b,0x14,0x00,0x00,0x00,0x5f,0xff,0x98,0x00,0x00,0x04,0x90,0x04,\r\n /*7d380*/ 0x00,0x11,0x09,0x26,0x0f,0x47,0x18,0x00,0x00,0x24,0xa8,0x48,0xba,0x18,0x00,0x00,\r\n /*7d390*/ 0x1a,0x01,0x48,0x09,0x26,0xba,0x01,0x47,0x0a,0x41,0x90,0x06,0x00,0xcc,0xea,0x24,\r\n /*7d3a0*/ 0xa8,0x00,0x04,0xca,0xca,0x90,0x06,0x00,0xcb,0x90,0x06,0x00,0xb8,0xda,0x90,0x06,\r\n /*7d3b0*/ 0x00,0xbd,0x13,0x00,0x00,0xc3,0xca,0x17,0xa8,0x00,0x08,0x90,0x06,0xfd,0x79,0x90,\r\n /*7d3c0*/ 0x00,0xff,0xf2,0x90,0x06,0x00,0xa3,0x23,0xa8,0x00,0x04,0x90,0x06,0x00,0xb2,0x90,\r\n /*7d3d0*/ 0x06,0x00,0x92,0x17,0xa8,0x00,0x08,0x90,0x06,0x00,0x9e,0x90,0x06,0x00,0x8b,0x27,\r\n /*7d3e0*/ 0xa8,0x00,0x04,0x90,0x06,0x00,0x9a,0xd3,0x98,0x00,0xff,0xe3,0x90,0x06,0x00,0x75,\r\n /*7d3f0*/ 0x17,0xa8,0x00,0x08,0x0f,0x8a,0xfa,0x13,0xa8,0x00,0x04,0xc8,0x5f,0x24,0x90,0x00,\r\n /*7d400*/ 0x00,0x04,0x90,0x04,0x00,0x06,0x6b,0x40,0x90,0x04,0x00,0x21,0x5f,0x23,0x90,0x00,\r\n /*7d410*/ 0x00,0x04,0x90,0x04,0x00,0x06,0x6b,0x80,0x90,0x04,0x00,0x11,0xd8,0x5f,0x28,0x90,\r\n /*7d420*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x6b,0xc0,0x90,0x04,0x00,0x00,0x23,0xa8,0x00,\r\n /*7d430*/ 0x04,0x0f,0xa8,0x90,0x06,0x00,0x38,0x90,0x06,0x00,0x88,0x90,0x04,0xfd,0x34,0x90,\r\n /*7d440*/ 0x06,0x00,0x27,0x27,0xa8,0x00,0x04,0x90,0x06,0x00,0x36,0x5f,0x00,0x98,0x00,0xfd,\r\n /*7d450*/ 0x22,0x17,0x00,0x00,0x09,0x26,0x90,0x06,0x00,0x10,0x0f,0x7b,0x09,0x26,0xf2,0xf4,\r\n /*7d460*/ 0xfa,0xf8,0x39,0x06,0xa7,0x1a,0x87,0xff,0xfe,0xa7,0x1a,0x87,0xff,0xfc,0xa7,0x2a,\r\n /*7d470*/ 0x87,0xff,0xfe,0xa7,0x2a,0x87,0xff,0xfc,0xa7,0x90,0x07,0xe9,0xca,0x90,0x07,0xef,\r\n /*7d480*/ 0xa7,0x90,0x07,0xe6,0xca,0x90,0x07,0xec,0xa7,0x5b,0xe8,0x90,0x00,0x00,0x04,0x90,\r\n /*7d490*/ 0x04,0x00,0x19,0xea,0xe4,0x1a,0x87,0xff,0xfa,0x14,0x00,0x00,0x01,0x03,0xa4,0x90,\r\n /*7d4a0*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x03,0x13,0x00,0xe9,0xf4,0xfa,0x5b,0xf5,0x90,0x00,\r\n /*7d4b0*/ 0x00,0x04,0x90,0x04,0x00,0x08,0x90,0x06,0x00,0x09,0x90,0x04,0x00,0x04,0x90,0x06,\r\n /*7d4c0*/ 0x00,0x0c,0xa7,0xea,0x1a,0x00,0x00,0x00,0x2a,0x87,0xff,0xfa,0xfa,0xa7,0xea,0x1a,\r\n /*7d4d0*/ 0x00,0x00,0x01,0x2a,0x87,0xff,0xfa,0xfa,0xa7,0xe8,0xea,0x18,0x40,0xb4,0x08,0x1a,\r\n /*7d4e0*/ 0x00,0x00,0x00,0x17,0x68,0xb4,0x06,0xca,0x5f,0x20,0x90,0x01,0xf6,0xfa,0xf8,0xa7,\r\n /*7d4f0*/ 0xe8,0x17,0x60,0xb4,0x06,0x18,0x40,0xb4,0x08,0xc8,0x28,0x40,0xb4,0x08,0x5f,0x20,\r\n /*7d500*/ 0x90,0x01,0xee,0xf8,0xa7,0xe8,0x17,0x60,0xb4,0x06,0x18,0x40,0xb4,0x08,0xc8,0x28,\r\n /*7d510*/ 0x40,0xb4,0x08,0xf8,0xa7,0xe6,0xe8,0x18,0x40,0xb4,0x08,0xd8,0x28,0x40,0xb4,0x08,\r\n /*7d520*/ 0x17,0x60,0xb4,0x06,0x5f,0x20,0x90,0x01,0xee,0xf8,0xf6,0xa7,0xe8,0x16,0x60,0xb4,\r\n /*7d530*/ 0x06,0x18,0x40,0xb4,0x08,0xc8,0xc8,0x28,0x40,0xb4,0x08,0xf8,0xa7,0x17,0x00,0x00,\r\n /*7d540*/ 0xa7,0x17,0x00,0x27,0xa7,0x17,0x00,0x01,0xa7,0x38,0x00,0xe0,0xe2,0xe4,0x90,0x06,\r\n /*7d550*/ 0x13,0xd6,0x09,0x14,0x90,0x06,0x12,0x93,0x17,0x00,0x00,0xf4,0xf2,0xf0,0x39,0x00,\r\n /*7d560*/ 0xa7,0x38,0x00,0xe0,0xe2,0xe4,0x90,0x06,0x12,0xe1,0x0f,0x04,0x0f,0x26,0x90,0x06,\r\n /*7d570*/ 0x12,0xd9,0x03,0x37,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,0x02,0x90,\r\n /*7d580*/ 0x05,0x0b,0x01,0x04,0x0f,0x40,0x90,0x06,0x12,0x61,0x17,0x00,0x00,0xf4,0xf2,0xf0,\r\n /*7d590*/ 0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,0x90,0x06,0x13,0x8c,0x97,0x01,0x16,0x0f,\r\n /*7d5a0*/ 0x04,0x0f,0x26,0x90,0x06,0x13,0x81,0x97,0x01,0x0b,0x02,0x04,0x0f,0x40,0x90,0x06,\r\n /*7d5b0*/ 0x12,0x39,0x17,0x00,0x00,0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,\r\n /*7d5c0*/ 0x90,0x06,0x13,0x64,0x97,0x01,0x16,0x0f,0x04,0x0f,0x26,0x90,0x06,0x13,0x59,0x97,\r\n /*7d5d0*/ 0x01,0x0b,0xa8,0x04,0x0f,0x40,0x90,0x06,0x12,0x11,0x17,0x00,0x00,0xf4,0xf2,0xf0,\r\n /*7d5e0*/ 0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,0x90,0x06,0x13,0x3c,0x97,0x01,0x16,0x0f,\r\n /*7d5f0*/ 0x04,0x0f,0x26,0x90,0x06,0x13,0x31,0x97,0x01,0x0b,0xa9,0x04,0x0f,0x40,0x90,0x06,\r\n /*7d600*/ 0x11,0xe9,0x17,0x00,0x00,0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,\r\n /*7d610*/ 0x90,0x06,0x13,0x14,0x97,0x01,0x16,0x0f,0x04,0x0f,0x26,0x90,0x06,0x13,0x09,0x97,\r\n /*7d620*/ 0x01,0x0b,0xaa,0x04,0x0f,0x40,0x90,0x06,0x11,0xc1,0x17,0x00,0x00,0xf4,0xf2,0xf0,\r\n /*7d630*/ 0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,0x90,0x06,0x12,0x0f,0x0f,0x04,0x0f,0x26,\r\n /*7d640*/ 0x90,0x06,0x12,0x07,0x03,0x37,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,\r\n /*7d650*/ 0x02,0x90,0x05,0x1d,0x03,0x04,0x93,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x14,0x00,\r\n /*7d660*/ 0x00,0x01,0x90,0x04,0x00,0x04,0x14,0x00,0x00,0x00,0x90,0x06,0x11,0x7d,0x17,0x00,\r\n /*7d670*/ 0x00,0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,0x90,0x06,0x11,0xcb,\r\n /*7d680*/ 0x0f,0x04,0x0f,0x26,0x90,0x06,0x11,0xc3,0x03,0x37,0x98,0x00,0x00,0x04,0x90,0x04,\r\n /*7d690*/ 0x00,0x06,0x17,0x00,0x02,0x90,0x05,0x2d,0x03,0x04,0x93,0x00,0x00,0x04,0x90,0x04,\r\n /*7d6a0*/ 0x00,0x08,0x14,0x00,0x00,0x01,0x90,0x04,0x00,0x14,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7d6b0*/ 0x00,0x08,0x14,0x00,0x00,0x01,0x90,0x04,0x00,0x04,0x14,0x00,0x00,0x00,0x90,0x06,\r\n /*7d6c0*/ 0x11,0x29,0x17,0x00,0x00,0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,\r\n /*7d6d0*/ 0x90,0x06,0x11,0x77,0x0f,0x04,0x0f,0x26,0x90,0x06,0x11,0x6f,0x03,0x37,0x98,0x00,\r\n /*7d6e0*/ 0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,0x02,0x90,0x05,0x1d,0x03,0x04,0x93,0x00,\r\n /*7d6f0*/ 0x00,0x04,0x90,0x04,0x00,0x08,0x14,0x00,0x00,0x01,0x90,0x04,0x00,0x04,0x14,0x00,\r\n /*7d700*/ 0x00,0x00,0x90,0x06,0x10,0xe5,0x17,0x00,0x00,0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x38,\r\n /*7d710*/ 0x00,0xe0,0xe2,0xe4,0x90,0x06,0x11,0x33,0x0f,0x04,0x0f,0x26,0x90,0x06,0x11,0x2b,\r\n /*7d720*/ 0x03,0x37,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,0x02,0x90,0x05,0x2d,\r\n /*7d730*/ 0x03,0x04,0x93,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x14,0x00,0x00,0x01,0x90,0x04,\r\n /*7d740*/ 0x00,0x14,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x14,0x00,0x00,0x01,0x90,0x04,\r\n /*7d750*/ 0x00,0x04,0x14,0x00,0x00,0x00,0x90,0x06,0x10,0x91,0x17,0x00,0x00,0xf4,0xf2,0xf0,\r\n /*7d760*/ 0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,0x90,0x06,0x10,0xdf,0x0f,0x04,0x0f,0x26,\r\n /*7d770*/ 0x90,0x06,0x10,0xd7,0x03,0x37,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,\r\n /*7d780*/ 0x02,0x90,0x05,0x1d,0x03,0x40,0x93,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x14,0x00,\r\n /*7d790*/ 0x00,0x01,0x90,0x04,0x00,0x04,0x14,0x00,0x00,0x00,0x90,0x06,0x10,0x4d,0x17,0x00,\r\n /*7d7a0*/ 0x00,0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,0x90,0x06,0x10,0x9b,\r\n /*7d7b0*/ 0x0f,0x04,0x0f,0x26,0x90,0x06,0x10,0x93,0x03,0x37,0x98,0x00,0x00,0x04,0x90,0x04,\r\n /*7d7c0*/ 0x00,0x06,0x17,0x00,0x02,0x90,0x05,0x2d,0x03,0x40,0x93,0x00,0x00,0x04,0x90,0x04,\r\n /*7d7d0*/ 0x00,0x08,0x14,0x00,0x00,0x01,0x90,0x04,0x00,0x14,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7d7e0*/ 0x00,0x08,0x14,0x00,0x00,0x01,0x90,0x04,0x00,0x04,0x14,0x00,0x00,0x00,0x90,0x06,\r\n /*7d7f0*/ 0x0f,0xf9,0x17,0x00,0x00,0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x38,0x00,0xe0,0xe2,0xe4,\r\n /*7d800*/ 0x90,0x06,0x10,0x47,0x0f,0x04,0x0f,0x26,0x90,0x06,0x10,0x3f,0x03,0x37,0x98,0x00,\r\n /*7d810*/ 0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,0x02,0x90,0x05,0x1d,0x03,0x04,0x90,0x00,\r\n /*7d820*/ 0x00,0x04,0x90,0x04,0x00,0x08,0x14,0x00,0x00,0x01,0x90,0x04,0x00,0x04,0x14,0x00,\r\n /*7d830*/ 0x00,0x00,0x90,0x06,0x0f,0xb5,0x17,0x00,0x00,0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x38,\r\n /*7d840*/ 0x00,0xe0,0xe2,0xe4,0x90,0x06,0x10,0x03,0x0f,0x04,0x0f,0x26,0x90,0x06,0x0f,0xfb,\r\n /*7d850*/ 0x03,0x37,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,0x02,0x90,0x05,0x1d,\r\n /*7d860*/ 0x03,0x04,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x14,0x00,0x00,0x00,0x90,0x04,\r\n /*7d870*/ 0x00,0x04,0x14,0x00,0x00,0x01,0x90,0x06,0x0f,0x71,0x17,0x00,0x00,0xf4,0xf2,0xf0,\r\n /*7d880*/ 0x39,0x00,0xa7,0x38,0x00,0xe4,0x90,0x06,0x10,0x9e,0x97,0x01,0x0b,0x90,0x06,0xdc,\r\n /*7d890*/ 0x02,0x90,0x06,0x0f,0x56,0x17,0x00,0x00,0xf4,0x39,0x00,0xa7,0x38,0x00,0xe4,0xe0,\r\n /*7d8a0*/ 0x90,0x06,0x10,0x84,0x97,0x01,0x13,0x30,0x10,0x0c,0x09,0x20,0x30,0x10,0x0d,0xaa,\r\n /*7d8b0*/ 0x04,0x0f,0x40,0x90,0x06,0x0f,0x34,0x17,0x00,0x00,0xf0,0xf4,0x39,0x00,0xa7,0x38,\r\n /*7d8c0*/ 0x00,0xe0,0xe2,0xe4,0xe8,0x90,0x06,0x10,0x5f,0x97,0x01,0x23,0x0f,0x04,0x0f,0x26,\r\n /*7d8d0*/ 0x90,0x06,0x10,0x54,0x97,0x01,0x18,0x0f,0x84,0x0f,0x60,0x0a,0x6d,0x14,0x00,0x00,\r\n /*7d8e0*/ 0x00,0x15,0xd0,0x00,0x00,0x17,0x00,0xfe,0x90,0x06,0x0e,0xff,0x17,0x00,0x00,0xf8,\r\n /*7d8f0*/ 0xf4,0xf2,0xf0,0x39,0x00,0xa7,0x90,0x46,0xfe,0x00,0x17,0x00,0x00,0xa7,0x16,0x00,\r\n /*7d900*/ 0x00,0x00,0x90,0x46,0xfe,0x04,0x17,0x00,0x00,0xa7,0x90,0x06,0x16,0x47,0x17,0x00,\r\n /*7d910*/ 0x00,0xa7,0x17,0x00,0xff,0xa7,0x38,0x04,0xe4,0xea,0xe8,0xe0,0x1a,0x00,0x00,0x00,\r\n /*7d920*/ 0x90,0x06,0xfb,0xcc,0x5f,0x00,0x90,0x00,0x00,0x51,0x5f,0xf8,0x90,0x00,0x00,0x4b,\r\n /*7d930*/ 0x90,0x06,0xfb,0xe1,0x90,0x06,0x10,0x16,0x5f,0x00,0x98,0x00,0x00,0x60,0x90,0x06,\r\n /*7d940*/ 0x0f,0x09,0x5f,0xfe,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x02,0x90,\r\n /*7d950*/ 0x04,0x00,0x4b,0x24,0x8f,0xff,0xfc,0xca,0xca,0x11,0x00,0x04,0x03,0xb1,0x90,0x00,\r\n /*7d960*/ 0x00,0x19,0x90,0x06,0xfb,0x8a,0x5f,0xf6,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,\r\n /*7d970*/ 0x17,0x00,0x01,0x90,0x04,0x00,0x27,0x90,0x04,0xff,0xa5,0x11,0x00,0x04,0x03,0xb1,\r\n /*7d980*/ 0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x0f,0x10,\r\n /*7d990*/ 0x87,0xff,0xfe,0x14,0x87,0xff,0xfc,0x90,0x06,0xdb,0x04,0x17,0x00,0x00,0xf0,0xf8,\r\n /*7d9a0*/ 0xfa,0xf4,0x39,0x04,0xa7,0x38,0x06,0xe4,0xea,0xe8,0xe0,0x1a,0x00,0x00,0x00,0x90,\r\n /*7d9b0*/ 0x06,0xfb,0x3d,0x5f,0x00,0x90,0x00,0x00,0x51,0x5f,0xf8,0x90,0x00,0x00,0x4b,0x90,\r\n /*7d9c0*/ 0x06,0xfb,0x52,0x90,0x06,0x0f,0x87,0x5f,0x00,0x98,0x00,0x00,0x66,0x90,0x06,0x0e,\r\n /*7d9d0*/ 0x7a,0x5f,0xfe,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x02,0x90,0x04,\r\n /*7d9e0*/ 0x00,0x51,0x24,0x8f,0xff,0xfa,0xca,0xca,0x11,0x00,0x06,0x03,0xb1,0x90,0x00,0x00,\r\n /*7d9f0*/ 0x19,0x90,0x06,0xfa,0xfb,0x5f,0xf6,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,\r\n /*7da00*/ 0x00,0x01,0x90,0x04,0x00,0x2d,0x90,0x04,0xff,0xa5,0x11,0x00,0x06,0x03,0xb1,0x98,\r\n /*7da10*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x15,0x10,0x87,\r\n /*7da20*/ 0xff,0xfe,0x18,0x87,0xff,0xfc,0x16,0x87,0xff,0xfa,0x0a,0x6d,0x21,0xd0,0x00,0x00,\r\n /*7da30*/ 0x17,0x00,0x00,0xf0,0xf8,0xfa,0xf4,0x39,0x06,0xa7,0x38,0x00,0xe0,0xe2,0xe4,0xe8,\r\n /*7da40*/ 0xea,0x90,0x06,0xfa,0xd0,0x90,0x06,0xfa,0xa7,0x5f,0xfa,0x98,0x00,0x00,0x04,0x90,\r\n /*7da50*/ 0x04,0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0xb3,0x90,0x06,0xfa,0xce,0x0f,0x26,\r\n /*7da60*/ 0x0c,0x2e,0x66,0x3f,0xff,0x0f,0xa6,0x16,0x00,0x00,0x00,0x5b,0x00,0x90,0x00,0x00,\r\n /*7da70*/ 0x04,0x90,0x04,0x00,0x0b,0x13,0x00,0xfe,0x18,0x00,0x20,0x00,0x90,0x04,0x00,0x33,\r\n /*7da80*/ 0x5b,0x01,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x0b,0x13,0x00,0xfc,0x18,0x00,0x27,\r\n /*7da90*/ 0x84,0x90,0x04,0x00,0x1e,0x5b,0x02,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x0d,0x13,\r\n /*7daa0*/ 0x00,0xf9,0x18,0x00,0x2f,0x08,0x0a,0xa2,0x90,0x04,0x00,0x07,0x17,0x00,0x27,0x90,\r\n /*7dab0*/ 0x04,0x00,0x5a,0x0f,0x06,0x90,0x06,0xfa,0x4c,0x90,0x06,0xfa,0x48,0x5f,0x00,0x90,\r\n /*7dac0*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x3f,0x5f,0xf8,\r\n /*7dad0*/ 0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x2e,0x5f,\r\n /*7dae0*/ 0xf3,0x98,0x00,0xff,0xd4,0x90,0x06,0x0e,0x65,0x5f,0x00,0x98,0x00,0x00,0x1e,0x90,\r\n /*7daf0*/ 0x06,0x0d,0x58,0x03,0x73,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x02,\r\n /*7db00*/ 0x90,0x04,0x00,0x09,0x0e,0x06,0x24,0xd8,0x00,0x00,0x17,0x00,0x00,0xfa,0xf8,0xf4,\r\n /*7db10*/ 0xf2,0xf0,0x39,0x00,0xa7,0x38,0x00,0x90,0x06,0xf9,0xd5,0x90,0x06,0xff,0x1b,0x39,\r\n /*7db20*/ 0x00,0xa7,0x38,0x00,0xe4,0x90,0x06,0xf9,0xc7,0x5f,0x00,0x90,0x00,0x00,0x04,0x90,\r\n /*7db30*/ 0x04,0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x42,0x5f,0xf8,0x90,0x00,0x00,0x04,\r\n /*7db40*/ 0x90,0x04,0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x31,0x90,0x06,0xf9,0xc6,0x90,\r\n /*7db50*/ 0x06,0x0d,0xfb,0x5f,0x00,0x98,0x00,0x00,0x23,0x90,0x06,0x0c,0xee,0x5f,0xfe,0x98,\r\n /*7db60*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x02,0x90,0x04,0x00,0x0e,0x24,0x40,\r\n /*7db70*/ 0xb4,0x02,0x17,0x00,0x00,0x15,0x00,0x01,0x25,0x40,0xb4,0x01,0xf4,0x39,0x00,0xa7,\r\n /*7db80*/ 0x38,0x00,0xe4,0x90,0x06,0xf9,0x52,0x5f,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7db90*/ 0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x5a,0x5f,0xf8,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7dba0*/ 0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x49,0x90,0x06,0x0d,0xa1,0x5f,0x00,0x98,\r\n /*7dbb0*/ 0x00,0x00,0x3f,0x90,0x06,0x0c,0x94,0x5f,0xfe,0x98,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7dbc0*/ 0x07,0x17,0x00,0x02,0x90,0x04,0x00,0x2a,0x5c,0x00,0x00,0x90,0x00,0x00,0x04,0x90,\r\n /*7dbd0*/ 0x04,0x00,0x07,0x17,0x00,0xff,0x90,0x04,0x00,0x18,0x90,0x06,0xf9,0x12,0x5f,0xde,\r\n /*7dbe0*/ 0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x01,0x90,0x04,0x00,0x03,0x17,\r\n /*7dbf0*/ 0x00,0xfe,0xf4,0x39,0x00,0xa7,0x38,0x00,0xe4,0x14,0x00,0x00,0x00,0x24,0x40,0xb4,\r\n /*7dc00*/ 0x02,0x90,0x06,0xf8,0xeb,0x5f,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x90,\r\n /*7dc10*/ 0x06,0xf9,0x02,0x90,0x04,0x00,0x39,0x5f,0xf8,0x90,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7dc20*/ 0x08,0x90,0x06,0xf8,0xf0,0x90,0x04,0x00,0x27,0x90,0x06,0xf8,0xe8,0x90,0x06,0x0d,\r\n /*7dc30*/ 0x1d,0x5f,0x00,0x98,0x00,0x00,0x23,0x90,0x06,0x0c,0x10,0x5f,0xfe,0x98,0x00,0x00,\r\n /*7dc40*/ 0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x02,0x90,0x04,0x00,0x0e,0x24,0x40,0xb4,0x02,\r\n /*7dc50*/ 0x17,0x00,0x00,0x15,0x00,0x01,0x25,0x40,0xb4,0x01,0xf4,0x39,0x00,0xa7,0x38,0x06,\r\n /*7dc60*/ 0xe4,0xe8,0xe0,0xe2,0x90,0x46,0xfe,0x0c,0xe6,0x14,0x00,0x00,0x00,0x25,0x87,0xff,\r\n /*7dc70*/ 0xfb,0x25,0x87,0xff,0xfa,0x24,0x87,0xff,0xfe,0x90,0x06,0x02,0xa1,0x90,0x06,0xf8,\r\n /*7dc80*/ 0x6f,0x5f,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x90,0x06,0xf8,0x86,0x90,\r\n /*7dc90*/ 0x04,0x00,0x99,0x5f,0xf8,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x90,0x06,0xf8,\r\n /*7dca0*/ 0x74,0x90,0x04,0x00,0x87,0x5f,0xf6,0x90,0x00,0x00,0x2c,0x90,0x06,0xf8,0x66,0x90,\r\n /*7dcb0*/ 0x06,0x0c,0x9b,0x5f,0x00,0x98,0x00,0x02,0x55,0x90,0x06,0x0b,0x8e,0x5f,0xfe,0x98,\r\n /*7dcc0*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x02,0x90,0x04,0x02,0x40,0x24,0x87,\r\n /*7dcd0*/ 0xff,0xfe,0xc4,0x24,0x87,0xff,0xfc,0x90,0x06,0xf8,0x15,0x5f,0xf6,0x90,0x01,0xf7,\r\n /*7dce0*/ 0x5f,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x90,0x06,0xf8,0x27,0x90,0x04,\r\n /*7dcf0*/ 0x00,0x3a,0x5f,0xf8,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x90,0x06,0xf8,0x15,\r\n /*7dd00*/ 0x90,0x04,0x00,0x28,0x90,0x06,0xf8,0x0d,0x90,0x06,0x0c,0x42,0x5f,0x00,0x98,0x00,\r\n /*7dd10*/ 0x01,0xfc,0x90,0x06,0x0b,0x35,0x5f,0xfe,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,\r\n /*7dd20*/ 0x17,0x00,0x02,0x90,0x04,0x01,0xe7,0xc4,0x24,0x87,0xff,0xfc,0x14,0x87,0xff,0xfe,\r\n /*7dd30*/ 0x16,0x87,0xff,0xfc,0x90,0x06,0xf2,0xd5,0x97,0x00,0x01,0xcf,0x16,0x00,0x60,0x00,\r\n /*7dd40*/ 0x0f,0x84,0x0a,0x81,0x10,0xd0,0x00,0x00,0x58,0x00,0x00,0x98,0x00,0x00,0x04,0x90,\r\n /*7dd50*/ 0x04,0x01,0xad,0x17,0x40,0xb4,0x8b,0x90,0x46,0xfe,0x0a,0xe6,0xe8,0x12,0x00,0x00,\r\n /*7dd60*/ 0x0a,0x16,0x00,0x00,0x00,0x18,0x00,0xb4,0x69,0x90,0x46,0xfe,0x32,0x90,0x46,0xfe,\r\n /*7dd70*/ 0x28,0xf8,0xf6,0x13,0x87,0xff,0xfb,0x17,0x00,0x20,0x90,0x46,0xfe,0x24,0xd3,0x9b,\r\n /*7dd80*/ 0x00,0xff,0xf7,0x17,0x00,0x00,0x27,0x87,0xff,0xfa,0x16,0x00,0x80,0x00,0x0f,0x80,\r\n /*7dd90*/ 0x10,0xd0,0x00,0x00,0x0f,0x31,0x09,0x20,0x59,0x80,0x93,0x00,0x00,0x04,0x90,0x04,\r\n /*7dda0*/ 0x00,0x0c,0xe6,0x0f,0x71,0x90,0x46,0xfe,0x24,0xf6,0x90,0x04,0x01,0x33,0x59,0xff,\r\n /*7ddb0*/ 0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x11,0xc8,0x10,0x00,0x00,0x00,0x11,0xd0,0x00,\r\n /*7ddc0*/ 0x00,0x90,0x06,0x01,0x63,0x90,0x04,0x01,0x18,0x59,0xfe,0x90,0x00,0x00,0x04,0x90,\r\n /*7ddd0*/ 0x04,0x00,0x0e,0xc8,0x10,0xd0,0x00,0x00,0xc8,0x90,0x06,0x01,0x4b,0x90,0x04,0x01,\r\n /*7dde0*/ 0x00,0x59,0xfb,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x09,0xc8,0x90,0x06,0x01,0x5f,\r\n /*7ddf0*/ 0x90,0x04,0x00,0xed,0x59,0xf9,0x90,0x00,0x00,0xe7,0x59,0xfa,0x90,0x00,0x00,0x04,\r\n /*7de00*/ 0x90,0x04,0x00,0x09,0xc8,0x90,0x06,0x01,0x73,0x90,0x04,0x00,0xd4,0xe6,0xe8,0x17,\r\n /*7de10*/ 0x40,0xb4,0x8f,0x90,0x46,0xfe,0x0a,0x16,0x00,0xe0,0x00,0x18,0x00,0xa6,0xb1,0x60,\r\n /*7de20*/ 0x00,0x7f,0x0a,0x02,0x01,0x80,0xc8,0xc8,0x10,0xd0,0x00,0x00,0x70,0x00,0x01,0x98,\r\n /*7de30*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x0a,0xe6,0x17,0x40,0xb4,0x8c,0x90,0x46,0xfe,0x0a,\r\n /*7de40*/ 0xf6,0x70,0x00,0x04,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x0a,0xe6,0x17,0x40,0xb4,\r\n /*7de50*/ 0x8d,0x90,0x46,0xfe,0x0a,0xf6,0x70,0x00,0x08,0x98,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7de60*/ 0x0a,0xe6,0x17,0x40,0xb4,0x8e,0x90,0x46,0xfe,0x0a,0xf6,0x70,0x40,0x00,0x98,0x00,\r\n /*7de70*/ 0x00,0x04,0x90,0x04,0x00,0x24,0x70,0x20,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7de80*/ 0x06,0x5b,0x00,0x98,0x00,0x00,0x13,0xe6,0xe0,0x17,0x40,0xb4,0x8a,0x11,0x87,0xff,\r\n /*7de90*/ 0xfb,0xba,0x01,0x17,0x21,0x87,0xff,0xfb,0xf0,0xf6,0x70,0x80,0x00,0x98,0x00,0x00,\r\n /*7dea0*/ 0x04,0x90,0x04,0x00,0x30,0xe6,0x13,0x87,0xff,0xfa,0x5b,0x00,0x90,0x00,0x00,0x04,\r\n /*7deb0*/ 0x90,0x04,0x00,0x11,0x13,0x40,0xb4,0x8a,0xd3,0x17,0x00,0x11,0x90,0x46,0xfe,0x24,\r\n /*7dec0*/ 0xd3,0x9b,0x00,0xff,0xf7,0x17,0x40,0xb4,0x8a,0x11,0x87,0xff,0xfb,0xba,0x02,0x17,\r\n /*7ded0*/ 0x21,0x87,0xff,0xfb,0xf6,0xd8,0xd8,0x18,0xd0,0x00,0x00,0x90,0x46,0xfe,0x28,0xf8,\r\n /*7dee0*/ 0xf6,0xc8,0x11,0x00,0x01,0x21,0x87,0xff,0xfa,0x10,0xd0,0x00,0x00,0x0f,0x31,0x09,\r\n /*7def0*/ 0x20,0x59,0x00,0x98,0x00,0xfe,0xa1,0xe6,0x17,0x00,0x0d,0x90,0x46,0xfe,0x24,0xf6,\r\n /*7df00*/ 0xc4,0x16,0x87,0xff,0xfc,0x03,0x46,0x93,0x00,0xfe,0x29,0x17,0x00,0x00,0x0f,0x57,\r\n /*7df10*/ 0xf6,0x90,0x46,0xfe,0x0a,0x0f,0x75,0xf2,0xf0,0xf8,0xf4,0x39,0x06,0xa7,0x14,0x40,\r\n /*7df20*/ 0xb4,0x04,0xc4,0x24,0x87,0xff,0xfc,0xa7,0xe2,0xe4,0xe6,0xe8,0x17,0x40,0xb4,0x90,\r\n /*7df30*/ 0x90,0x46,0xfe,0x0a,0x16,0x00,0x00,0x00,0x18,0x00,0xb4,0x69,0x0f,0x40,0x12,0x00,\r\n /*7df40*/ 0x00,0x0a,0x90,0x46,0xfe,0x32,0x90,0x46,0xfe,0x28,0xf8,0xf6,0xf4,0xf2,0xa7,0xe8,\r\n /*7df50*/ 0xe6,0x17,0x40,0xb4,0x91,0x90,0x46,0xfe,0x0a,0x17,0x00,0x22,0x90,0x46,0xfe,0x24,\r\n /*7df60*/ 0xf6,0x90,0x46,0xfe,0x30,0xe6,0x17,0x00,0x22,0x90,0x46,0xfe,0x24,0xf6,0xf8,0x11,\r\n /*7df70*/ 0xd0,0x00,0x00,0xc8,0x59,0x00,0x98,0x00,0xff,0xf5,0xd8,0xa7,0xe6,0x17,0x40,0xb4,\r\n /*7df80*/ 0x92,0x90,0x46,0xfe,0x0a,0xf6,0xe2,0x12,0xd0,0x00,0x00,0x0c,0x2e,0xc8,0xc8,0x11,\r\n /*7df90*/ 0xd0,0x00,0x00,0xc8,0xe6,0x17,0xd0,0x00,0x00,0x90,0x46,0xfe,0x24,0xf6,0xd1,0x98,\r\n /*7dfa0*/ 0x00,0xff,0xf0,0x5b,0x01,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x0d,0xe6,0x17,0x00,\r\n /*7dfb0*/ 0x24,0x90,0x46,0xfe,0x24,0xf6,0x90,0x04,0x00,0x13,0x5b,0x02,0x90,0x00,0x00,0x04,\r\n /*7dfc0*/ 0x90,0x04,0x00,0x09,0xe6,0x17,0x00,0x23,0x90,0x46,0xfe,0x24,0xf6,0xf2,0xa7,0x38,\r\n /*7dfd0*/ 0x00,0xe0,0xe4,0x90,0x06,0x09,0x77,0x5f,0x00,0x98,0x00,0x00,0x69,0x90,0x06,0x09,\r\n /*7dfe0*/ 0x47,0x97,0x00,0x00,0x61,0x31,0x50,0x12,0x90,0x06,0xf5,0x04,0x5f,0x00,0x90,0x00,\r\n /*7dff0*/ 0x00,0x4d,0x5f,0xf8,0x90,0x00,0x00,0x47,0x5f,0xb8,0x90,0x00,0x00,0x4d,0x5f,0xb7,\r\n /*7e000*/ 0x90,0x00,0x00,0x53,0x5f,0xd0,0x90,0x00,0x00,0x59,0x5f,0xcf,0x90,0x00,0x00,0x73,\r\n /*7e010*/ 0x5f,0xdf,0x90,0x00,0x00,0x8f,0x5f,0x8e,0x90,0x00,0x00,0xa9,0x5f,0x85,0x90,0x00,\r\n /*7e020*/ 0x00,0xd1,0x5f,0xc2,0x90,0x00,0x00,0xef,0x5f,0xb2,0x90,0x00,0x01,0x0d,0x5f,0xa9,\r\n /*7e030*/ 0x90,0x00,0x01,0x27,0x90,0x06,0xf4,0xdd,0x17,0x00,0x01,0x90,0x04,0x00,0x07,0x90,\r\n /*7e040*/ 0x06,0xf4,0xd2,0x17,0x00,0x00,0xf4,0xf0,0x39,0x00,0xa7,0x30,0x50,0x13,0x6d,0x80,\r\n /*7e050*/ 0x31,0x50,0x13,0x90,0x04,0xff,0x91,0x30,0x50,0x13,0x65,0x7f,0x31,0x50,0x13,0x90,\r\n /*7e060*/ 0x04,0xff,0x85,0x90,0x06,0x08,0xe7,0x5f,0x00,0x98,0x00,0xff,0xd9,0x90,0x06,0x08,\r\n /*7e070*/ 0xb7,0x97,0x00,0xff,0xd1,0x30,0x10,0x13,0x61,0xe0,0x05,0x15,0x31,0x10,0x13,0x90,\r\n /*7e080*/ 0x04,0xff,0x65,0x90,0x06,0x08,0xc7,0x5f,0x00,0x98,0x00,0xff,0xb9,0x90,0x06,0x08,\r\n /*7e090*/ 0x97,0x97,0x00,0xff,0xb1,0x30,0x10,0x14,0x61,0x3f,0x0a,0x56,0x05,0x15,0x31,0x10,\r\n /*7e0a0*/ 0x14,0x90,0x04,0xff,0x43,0x90,0x06,0x08,0xa5,0x5f,0x00,0x98,0x00,0xff,0x97,0x90,\r\n /*7e0b0*/ 0x06,0x08,0x75,0x97,0x00,0xff,0x8f,0x30,0x10,0x14,0x61,0xe0,0x05,0x15,0x31,0x10,\r\n /*7e0c0*/ 0x14,0x90,0x04,0xff,0x23,0x90,0x06,0x08,0x8e,0x5f,0x00,0x98,0x00,0xff,0x77,0x90,\r\n /*7e0d0*/ 0x06,0x08,0x55,0x97,0x00,0xff,0x6f,0x31,0x50,0x16,0x90,0x06,0x08,0x4a,0x97,0x00,\r\n /*7e0e0*/ 0x00,0x04,0x90,0x04,0x00,0x06,0x5f,0x06,0x90,0x04,0xff,0x57,0x31,0x50,0x15,0x90,\r\n /*7e0f0*/ 0x04,0xfe,0xf5,0x90,0x06,0x08,0x60,0x5f,0x00,0x98,0x00,0xff,0x49,0x90,0x06,0x08,\r\n /*7e100*/ 0x27,0x97,0x00,0xff,0x41,0x31,0x50,0x17,0x90,0x06,0x08,0x1c,0x97,0x00,0xff,0x36,\r\n /*7e110*/ 0x31,0x50,0x18,0x90,0x04,0xfe,0xd1,0x90,0x06,0x08,0x3c,0x5f,0x00,0x98,0x00,0xff,\r\n /*7e120*/ 0x25,0x90,0x06,0x08,0x03,0x97,0x00,0xff,0x1d,0x31,0x50,0x19,0x90,0x06,0x07,0xf8,\r\n /*7e130*/ 0x97,0x00,0xff,0x12,0x31,0x50,0x1a,0x90,0x04,0xfe,0xad,0x90,0x06,0x08,0x0f,0x5f,\r\n /*7e140*/ 0x00,0x98,0x00,0xff,0x01,0x90,0x06,0x07,0xdf,0x97,0x00,0xfe,0xf9,0x30,0x10,0x1b,\r\n /*7e150*/ 0x61,0xfc,0x05,0x15,0x31,0x10,0x1b,0x90,0x04,0xfe,0x8d,0x90,0x06,0x07,0xef,0x5f,\r\n /*7e160*/ 0x00,0x98,0x00,0xfe,0xe1,0x90,0x06,0x07,0xbf,0x97,0x00,0xfe,0xd9,0x30,0x10,0x14,\r\n /*7e170*/ 0x61,0xdf,0x0a,0x55,0x05,0x15,0x31,0x10,0x14,0x90,0x04,0xfe,0x6b,0x38,0x02,0x90,\r\n /*7e180*/ 0x06,0xf3,0x6d,0x5f,0x00,0x90,0x00,0x00,0xa8,0x5f,0xf8,0x90,0x00,0x00,0xa2,0x5f,\r\n /*7e190*/ 0xf7,0x90,0x00,0x00,0xca,0x5f,0xf6,0x90,0x00,0x00,0xd0,0x5f,0x89,0x90,0x00,0x00,\r\n /*7e1a0*/ 0xd5,0x5f,0x88,0x90,0x00,0x00,0xeb,0x5f,0x85,0x90,0x00,0x01,0x05,0x5f,0xd1,0x90,\r\n /*7e1b0*/ 0x00,0x01,0x69,0x5f,0xdc,0x90,0x00,0x01,0x5c,0x90,0x06,0xf3,0x58,0x90,0x06,0x07,\r\n /*7e1c0*/ 0x8d,0x5f,0x00,0x98,0x01,0x68,0x90,0x06,0x06,0x81,0x5f,0xfb,0x90,0x00,0x00,0x04,\r\n /*7e1d0*/ 0x90,0x04,0x00,0x24,0x17,0x40,0xb4,0x01,0x5f,0x00,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7e1e0*/ 0x00,0x08,0x16,0x00,0x00,0x00,0x90,0x04,0x00,0x04,0x16,0x00,0x80,0x00,0x0f,0x84,\r\n /*7e1f0*/ 0x90,0x46,0xfe,0x28,0x90,0x04,0x00,0x2e,0x5f,0xfc,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7e200*/ 0x00,0x0e,0x16,0x00,0x40,0x00,0x0f,0x84,0x90,0x46,0xfe,0x28,0x90,0x04,0x00,0x16,\r\n /*7e210*/ 0x12,0x00,0x00,0x0a,0x0f,0x44,0x16,0x00,0x00,0x00,0x18,0x00,0xb4,0x69,0x90,0x46,\r\n /*7e220*/ 0xfe,0x34,0x90,0x46,0xfe,0x28,0x90,0x06,0x00,0x2c,0x90,0x04,0xff,0x51,0x39,0x02,\r\n /*7e230*/ 0xa7,0x16,0x87,0xff,0xfe,0x5e,0x00,0x01,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x0c,\r\n /*7e240*/ 0x16,0x00,0xf4,0x1b,0x18,0x00,0x00,0x06,0x90,0x46,0xfe,0x28,0x17,0x00,0x00,0x90,\r\n /*7e250*/ 0x06,0xf2,0xc2,0x90,0x05,0xd8,0x16,0x00,0x00,0x00,0x26,0x87,0xff,0xfe,0xa7,0x16,\r\n /*7e260*/ 0x00,0x00,0x01,0x26,0x87,0xff,0xfe,0x90,0x04,0xff,0x14,0x17,0x00,0x09,0x90,0x46,\r\n /*7e270*/ 0xfe,0x24,0x90,0x04,0xff,0xe9,0x90,0x06,0x06,0xd4,0x5f,0x00,0x98,0x00,0xff,0xae,\r\n /*7e280*/ 0x90,0x06,0x06,0xa4,0x97,0x00,0xff,0xa6,0x0f,0x75,0x90,0x46,0xfe,0x24,0x90,0x04,\r\n /*7e290*/ 0xfe,0xed,0x90,0x06,0x06,0xb8,0x5f,0x00,0x98,0x00,0xff,0x92,0x90,0x06,0x06,0x88,\r\n /*7e2a0*/ 0x97,0x00,0xff,0x8a,0x0f,0x35,0x90,0x06,0x06,0x7e,0x97,0x00,0xff,0x80,0x90,0x04,\r\n /*7e2b0*/ 0x00,0x7f,0x90,0x06,0x06,0x98,0x5f,0x00,0x98,0x00,0xff,0x72,0x90,0x06,0x05,0x8b,\r\n /*7e2c0*/ 0x5f,0xfe,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,0x02,0x90,0x04,0xff,\r\n /*7e2d0*/ 0x5d,0x0f,0x24,0x90,0x06,0xf2,0x19,0x5f,0xf6,0x98,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7e2e0*/ 0x07,0x17,0x00,0x01,0x90,0x04,0xff,0x46,0x90,0x06,0x06,0x62,0x5f,0x00,0x98,0x00,\r\n /*7e2f0*/ 0xff,0x3c,0x90,0x06,0x05,0x55,0x5f,0xfe,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x07,\r\n /*7e300*/ 0x17,0x00,0x02,0x90,0x04,0xff,0x27,0x0f,0x62,0x09,0x26,0x0f,0x75,0x90,0x46,0xfe,\r\n /*7e310*/ 0x04,0x90,0x04,0xfe,0x6a,0x13,0x00,0x09,0x90,0x04,0x00,0x03,0x13,0x00,0x20,0x90,\r\n /*7e320*/ 0x06,0x06,0x2b,0x5f,0x00,0x98,0x00,0xff,0x05,0x90,0x06,0x05,0xfb,0x97,0x00,0xfe,\r\n /*7e330*/ 0xfd,0x5c,0x00,0x00,0x0f,0x73,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x09,0x90,0x46,\r\n /*7e340*/ 0xfe,0x24,0xd4,0x90,0x04,0xff,0xef,0x90,0x04,0xff,0x14,0x38,0x00,0xe0,0xe4,0x90,\r\n /*7e350*/ 0x06,0x05,0xfb,0x5f,0x00,0x98,0x00,0x00,0x5d,0x90,0x06,0x05,0xcb,0x97,0x00,0x00,\r\n /*7e360*/ 0x55,0x31,0x50,0x1c,0x90,0x06,0xf1,0x88,0x5f,0x00,0x90,0x00,0x00,0x41,0x5f,0xf8,\r\n /*7e370*/ 0x90,0x00,0x00,0x3b,0x5f,0xb8,0x90,0x00,0x00,0x41,0x5f,0xb7,0x90,0x00,0x00,0x47,\r\n /*7e380*/ 0x5f,0xd0,0x90,0x00,0x00,0x4d,0x5f,0xcf,0x90,0x00,0x00,0x72,0x5f,0xdf,0x90,0x00,\r\n /*7e390*/ 0x00,0xb7,0x5f,0x8e,0x90,0x00,0x00,0xd1,0x5f,0x85,0x90,0x00,0x00,0xf9,0x5f,0xa5,\r\n /*7e3a0*/ 0x90,0x00,0x01,0x25,0x90,0x06,0xf1,0x6d,0x17,0x00,0x01,0x90,0x04,0x00,0x07,0x90,\r\n /*7e3b0*/ 0x06,0xf1,0x62,0x17,0x00,0x00,0xf4,0xf0,0x39,0x00,0xa7,0x30,0x50,0x1d,0x6d,0x80,\r\n /*7e3c0*/ 0x31,0x50,0x1d,0x90,0x04,0xff,0x9d,0x30,0x50,0x1d,0x65,0x7f,0x31,0x50,0x1d,0x90,\r\n /*7e3d0*/ 0x04,0xff,0x91,0x90,0x06,0x05,0x80,0x5f,0x00,0x98,0x00,0xff,0xd9,0x90,0x06,0x05,\r\n /*7e3e0*/ 0x47,0x97,0x00,0xff,0xd1,0x30,0x10,0x1d,0x61,0xe0,0x05,0x15,0x31,0x10,0x1d,0x90,\r\n /*7e3f0*/ 0x06,0x05,0x35,0x97,0x00,0xff,0xbf,0x31,0x50,0x1e,0x90,0x04,0xff,0x66,0x90,0x06,\r\n /*7e400*/ 0x05,0x55,0x5f,0x00,0x98,0x00,0xff,0xae,0x90,0x06,0x05,0x1c,0x97,0x00,0xff,0xa6,\r\n /*7e410*/ 0x0f,0x15,0x61,0x0f,0x90,0x06,0x05,0x10,0x97,0x00,0xff,0x9a,0x0a,0x14,0x65,0x0f,\r\n /*7e420*/ 0x05,0x15,0x09,0x21,0x31,0x10,0x20,0x90,0x06,0x04,0xfd,0x97,0x00,0x00,0x04,0x90,\r\n /*7e430*/ 0x04,0x00,0x06,0x5f,0x06,0x90,0x04,0xff,0x7a,0x30,0x10,0x1f,0x61,0x3f,0x0a,0x56,\r\n /*7e440*/ 0x05,0x15,0x31,0x10,0x1f,0x90,0x04,0xff,0x1b,0x90,0x06,0x05,0x01,0x5f,0x00,0x98,\r\n /*7e450*/ 0x00,0xff,0x63,0x90,0x06,0x04,0xd1,0x97,0x00,0xff,0x5b,0x30,0x10,0x1f,0x61,0xe0,\r\n /*7e460*/ 0x05,0x15,0x31,0x10,0x1f,0x90,0x04,0xfe,0xfb,0x90,0x06,0x04,0xea,0x5f,0x00,0x98,\r\n /*7e470*/ 0x00,0xff,0x43,0x90,0x06,0x04,0xb1,0x97,0x00,0xff,0x3b,0x31,0x50,0x22,0x90,0x06,\r\n /*7e480*/ 0x04,0xa6,0x97,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x5f,0x06,0x90,0x04,0xff,0x23,\r\n /*7e490*/ 0x31,0x50,0x21,0x90,0x04,0xfe,0xcd,0x90,0x06,0x04,0xbc,0x5f,0x00,0x98,0x00,0xff,\r\n /*7e4a0*/ 0x15,0x90,0x06,0x04,0x83,0x97,0x00,0xff,0x0d,0x09,0x24,0x31,0x50,0x23,0x09,0x24,\r\n /*7e4b0*/ 0x31,0x50,0x24,0x90,0x06,0x04,0x71,0x97,0x00,0xfe,0xfb,0x09,0x24,0x31,0x50,0x25,\r\n /*7e4c0*/ 0x09,0x24,0x31,0x50,0x26,0x90,0x04,0xfe,0x9b,0x90,0x06,0x04,0x81,0x5f,0x00,0x98,\r\n /*7e4d0*/ 0x00,0xfe,0xe3,0x90,0x06,0x04,0x51,0x97,0x00,0xfe,0xdb,0x30,0x10,0x1d,0x61,0x9f,\r\n /*7e4e0*/ 0x0a,0x55,0x05,0x15,0x31,0x10,0x1d,0x90,0x04,0xfe,0x79,0xd5,0x41,0x10,0x14,0xd5,\r\n /*7e4f0*/ 0x41,0x20,0x06,0xd5,0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,\r\n /*7e500*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x41,0x20,0x14,0xd5,\r\n /*7e510*/ 0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e520*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,\r\n /*7e530*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e540*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,\r\n /*7e550*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e560*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e570*/ 0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd8,0x83,0x10,0x14,0xd5,0x41,0x00,0x14,0xd5,\r\n /*7e580*/ 0x45,0x00,0x00,0xd5,0x41,0x20,0x14,0xd5,0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e590*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e5a0*/ 0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e5b0*/ 0x41,0x30,0x14,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e5c0*/ 0x45,0x00,0x00,0xd5,0x41,0x1f,0x11,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e5d0*/ 0x45,0x00,0x00,0xd5,0x41,0x20,0x05,0xd5,0x45,0x00,0x00,0xd8,0xbf,0x20,0x14,0xd5,\r\n /*7e5e0*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e5f0*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e600*/ 0x41,0x20,0x14,0xd8,0x9c,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e610*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e620*/ 0x41,0x10,0x14,0xd5,0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e630*/ 0x41,0x10,0x14,0xd5,0x41,0x20,0x14,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,\r\n /*7e640*/ 0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x41,0x20,0x14,0xd5,0x45,0x00,0x00,0xd5,\r\n /*7e650*/ 0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,\r\n /*7e660*/ 0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,\r\n /*7e670*/ 0x45,0x00,0x00,0xd5,0x45,0x00,0x00,0xd5,0x41,0x10,0x14,0xd5,0x41,0x10,0x14,0xd5,\r\n /*7e680*/ 0x41,0x10,0x14,0xd5,0x45,0x00,0x00,0xd5,0x61,0x20,0x0e,0xd5,0x93,0x20,0x0e,0xd5,\r\n /*7e690*/ 0x49,0x10,0x11,0xd5,0xbb,0x20,0x0f,0xd5,0xe3,0x20,0x0f,0xd6,0x0b,0x20,0x0f,0xd5,\r\n /*7e6a0*/ 0x41,0x2f,0x10,0xd8,0x3f,0x20,0x0b,0xd7,0x0f,0x20,0x0c,0xd7,0xa7,0x20,0x0c,0xd6,\r\n /*7e6b0*/ 0xcb,0x20,0x0c,0xd7,0x63,0x20,0x0c,0xd7,0xfb,0x20,0x0b,0xff,0xfe,0x20,0x15,0xff,\r\n /*7e6c0*/ 0xff,0x20,0x15,0x00,0x00,0x00,0x01,0xd5,0x41,0x00,0xff,0xd5,0x41,0x00,0xff,0xd5,\r\n /*7e6d0*/ 0x41,0x00,0xff,0xd5,0x41,0x00,0xff,0xd5,0x41,0x00,0xff,0xd5,0x41,0x00,0xff,0xd5,\r\n /*7e6e0*/ 0x41,0x00,0xff,0xd5,0x41,0x00,0xff,0xd5,0x41,0x00,0xff,0xd5,0x45,0xd5,0x45,0xd5,\r\n /*7e6f0*/ 0x45,0xd5,0x41,0xd5,0x45,0xd5,0x45,0xd5,0x41,0xd5,0x41,0xd5,0x45,0xd5,0x45,0xd5,\r\n /*7e700*/ 0x41,0xd8,0xf6,0xd5,0x41,0xd5,0x41,0xd5,0x41,0xd5,0x41,0xd5,0x45,0xd5,0x41,0xd5,\r\n /*7e710*/ 0x41,0xd5,0x41,0xd5,0x41,0xd5,0x41,0xd5,0x41,0xd5,0x41,0xd5,0x45,0xd5,0x41,0xd5,\r\n /*7e720*/ 0x41,0xd5,0x41,0xd5,0x41,0xd5,0x41,0xdb,0x22,0xd5,0x45,0xdb,0x80,0xd5,0x41,0xd5,\r\n /*7e730*/ 0x45,0xd5,0x45,0xd5,0x45,0xdf,0xcf,0xd5,0x45,0xd5,0x45,0xdb,0x15,0xd5,0x41,0xdc,\r\n /*7e740*/ 0x5e,0xd5,0x41,0xd5,0x41,0xd5,0x45,0xd5,0x41,0xd5,0x45,0xd5,0x41,0xd5,0x45,0xd5,\r\n /*7e750*/ 0x41,0xd5,0x45,0xd9,0x0a,0xd5,0x41,0xd5,0x45,0xd5,0x41,0xd5,0x41,0xd5,0x41,0xd5,\r\n /*7e760*/ 0x45,0xd9,0x16,0xd5,0x45,0xd5,0x41,0xd5,0x41,0xd9,0xa5,0xe1,0x7d,0xd5,0x41,0xd5,\r\n /*7e770*/ 0x41,0xd9,0x12,0xd5,0x41,0xd5,0x45,0xd5,0x45,0xd5,0x41,0xd5,0x41,0xd5,0x41,0xdb,\r\n /*7e780*/ 0xf6,0xd5,0x41,0xd5,0x41,0xd5,0x45,0xd5,0x45,0xd5,0x41,0xd5,0x41,0xd5,0x45,0xd5,\r\n /*7e790*/ 0x45,0xe3,0x4b,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,\r\n /*7e7a0*/ 0x41,0xd5,0x41,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x41,0xd5,0x45,0xd5,0x45,0xd5,\r\n /*7e7b0*/ 0x41,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x41,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,\r\n /*7e7c0*/ 0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,\r\n /*7e7d0*/ 0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x41,0xd5,0x45,0xda,\r\n /*7e7e0*/ 0x3a,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0xd5,0x45,0x38,0x00,0xe8,0x18,0x00,\r\n /*7e7f0*/ 0x00,0x00,0x19,0x40,0xb4,0x0e,0x27,0x50,0xb4,0x0f,0x0a,0x83,0x5f,0xf9,0x98,0x00,\r\n /*7e800*/ 0x00,0x04,0x90,0x04,0x00,0x08,0x24,0x50,0xb4,0x19,0x90,0x04,0x00,0x30,0xea,0x0f,\r\n /*7e810*/ 0xa4,0x14,0x48,0x2f,0x08,0x24,0x50,0xb4,0x19,0xca,0xca,0xc8,0xc8,0x14,0x48,0x2f,\r\n /*7e820*/ 0x08,0x24,0x50,0xb4,0x19,0xca,0xca,0xc8,0xc8,0x14,0x48,0x2f,0x08,0x24,0x50,0xb4,\r\n /*7e830*/ 0x19,0xca,0xca,0xc8,0xc8,0x14,0x48,0x2f,0x08,0x24,0x50,0xb4,0x19,0xfa,0x19,0x40,\r\n /*7e840*/ 0xb4,0x0e,0xc9,0x29,0x40,0xb4,0x0e,0xf8,0x39,0x00,0xa7,0x38,0x00,0xe8,0x18,0x00,\r\n /*7e850*/ 0x00,0x00,0x19,0x40,0xb4,0x0e,0xd9,0x93,0x00,0x00,0x04,0x90,0x04,0x00,0x05,0xb7,\r\n /*7e860*/ 0x90,0x04,0x00,0x14,0xbf,0x17,0x50,0xb4,0x0f,0x0a,0x83,0x14,0x50,0xb4,0x19,0x19,\r\n /*7e870*/ 0x40,0xb4,0x0e,0xd9,0x29,0x40,0xb4,0x0e,0xf8,0x39,0x00,0xa7,0x38,0x00,0xe8,0xea,\r\n /*7e880*/ 0x1a,0x00,0x00,0x00,0x1b,0x40,0xb4,0x0e,0x03,0x9b,0x9b,0x00,0x00,0x04,0x90,0x04,\r\n /*7e890*/ 0x00,0x05,0xb7,0x90,0x04,0x00,0x10,0x02,0xb9,0xdb,0x0f,0x9b,0xbf,0x17,0x50,0xb4,\r\n /*7e8a0*/ 0x0f,0x0a,0x83,0x14,0x50,0xb4,0x19,0xfa,0xf8,0x39,0x00,0xa7,0x38,0x00,0xe8,0x18,\r\n /*7e8b0*/ 0x00,0x00,0x00,0x28,0x40,0xb4,0x0e,0xf8,0x39,0x00,0xa7,0xe8,0xe2,0xea,0x90,0x06,\r\n /*7e8c0*/ 0xec,0x6a,0x0f,0x26,0x62,0xc0,0x00,0x0c,0x2e,0x66,0x3f,0xff,0xe6,0x90,0x06,0xec,\r\n /*7e8d0*/ 0x34,0x18,0x40,0xb4,0x08,0xba,0x01,0x87,0x28,0x40,0xb4,0x08,0xf6,0x0f,0x86,0x5a,\r\n /*7e8e0*/ 0x00,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x0c,0x16,0x00,0x00,0xfe,0x14,0x50,\r\n /*7e8f0*/ 0x20,0x00,0x90,0x04,0x00,0x2e,0x5a,0x00,0x01,0x90,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7e900*/ 0x0c,0x16,0x00,0x00,0xfc,0x14,0x50,0x27,0x84,0x90,0x04,0x00,0x17,0x5a,0x00,0x02,\r\n /*7e910*/ 0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x0c,0x16,0x00,0x00,0xf9,0x0a,0x82,0x0f,0x48,\r\n /*7e920*/ 0x90,0x04,0x00,0x00,0xfa,0xf2,0xf8,0xa7,0x90,0x06,0xff,0x1f,0x97,0x00,0x00,0x04,\r\n /*7e930*/ 0x90,0x04,0x00,0x07,0x17,0x00,0x06,0x90,0x04,0x00,0x12,0x5f,0xfe,0x98,0x00,0x00,\r\n /*7e940*/ 0x04,0x90,0x04,0x00,0x08,0x17,0x00,0x02,0xb7,0x90,0x04,0x00,0x00,0xa7,0x90,0x06,\r\n /*7e950*/ 0xff,0x5a,0xbf,0x90,0x04,0x00,0x13,0x90,0x06,0xff,0x51,0xb7,0x90,0x04,0x00,0x0a,\r\n /*7e960*/ 0xbf,0x90,0x04,0x00,0x05,0xb7,0x90,0x04,0x00,0x00,0xec,0xe0,0x0f,0xce,0x10,0x00,\r\n /*7e970*/ 0x01,0x0f,0xba,0x02,0xe0,0xea,0xe8,0xe4,0xe2,0xe0,0x2e,0x87,0xff,0xfa,0x97,0x00,\r\n /*7e980*/ 0x00,0x04,0x90,0x04,0x00,0x0b,0x11,0x00,0xff,0x21,0x87,0xfe,0xf1,0x90,0x04,0x00,\r\n /*7e990*/ 0x07,0x11,0x00,0x00,0x21,0x87,0xfe,0xf1,0xe6,0xe8,0x16,0x00,0xff,0x74,0x0f,0x8c,\r\n /*7e9a0*/ 0xba,0x01,0x86,0x16,0x00,0x00,0x00,0x26,0xd0,0x00,0x00,0xf8,0xf6,0xe6,0xe8,0x16,\r\n /*7e9b0*/ 0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0x26,0xd0,0x00,0x00,\r\n /*7e9c0*/ 0xf8,0xf6,0x10,0x00,0x00,0x00,0x21,0x87,0xff,0xfc,0x21,0x87,0xff,0xfd,0x18,0x87,\r\n /*7e9d0*/ 0xfe,0xf2,0x14,0x00,0x00,0x40,0x03,0x84,0x9b,0x00,0x03,0x26,0x18,0x87,0xff,0x74,\r\n /*7e9e0*/ 0x14,0x00,0x00,0x40,0x03,0x84,0x9b,0x00,0x03,0x18,0x90,0x06,0xeb,0x02,0x5f,0x00,\r\n /*7e9f0*/ 0x90,0x00,0x02,0x61,0x5f,0xf8,0x90,0x00,0x02,0x5b,0x11,0x87,0xff,0xfd,0x59,0x00,\r\n /*7ea00*/ 0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x1e,0x11,0x87,0xfe,0xf1,0x59,0x00,0x90,0x00,\r\n /*7ea10*/ 0x00,0x04,0x90,0x04,0x00,0x06,0x5f,0xf6,0x90,0x00,0x02,0x39,0x5f,0xf7,0x90,0x00,\r\n /*7ea20*/ 0x02,0x33,0x90,0x04,0x00,0x1f,0x5f,0xf6,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x04,\r\n /*7ea30*/ 0x90,0x04,0xff,0x9a,0x5f,0xf7,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x07,0x17,0x00,\r\n /*7ea40*/ 0x01,0x90,0x04,0x02,0xaa,0x0f,0x47,0x65,0x7f,0x0a,0x42,0xe8,0x0f,0x84,0x10,0x57,\r\n /*7ea50*/ 0xe4,0xeb,0xc8,0xc8,0x12,0x57,0xe4,0xeb,0xf8,0x5a,0x00,0x00,0x90,0x00,0x00,0x04,\r\n /*7ea60*/ 0x90,0x04,0x00,0x04,0x90,0x04,0x01,0xed,0x5f,0xfa,0x90,0x00,0x00,0x04,0x90,0x04,\r\n /*7ea70*/ 0x00,0x3c,0x90,0x06,0xfe,0x45,0xe4,0xe6,0xe8,0x0f,0x46,0x16,0x00,0xfe,0xf2,0x0f,\r\n /*7ea80*/ 0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,0xf4,0x0f,\r\n /*7ea90*/ 0x64,0xe4,0xe6,0xe8,0x0f,0x46,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,\r\n /*7eaa0*/ 0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,0xf4,0x90,0x04,0xff,0x20,0x5f,0xff,\r\n /*7eab0*/ 0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x41,0x17,0x00,0xfe,0xe4,0xe6,0xe8,0x0f,0x46,\r\n /*7eac0*/ 0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0x90,0x46,0xfe,\r\n /*7ead0*/ 0x38,0xf8,0xf6,0xf4,0x16,0x00,0x00,0x00,0x90,0x06,0xea,0x29,0xe4,0xe6,0xe8,0x0f,\r\n /*7eae0*/ 0x46,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0x90,0x46,\r\n /*7eaf0*/ 0xfe,0x38,0xf8,0xf6,0xf4,0x90,0x04,0xfe,0xd5,0x5f,0xfe,0x90,0x00,0x00,0x04,0x90,\r\n /*7eb00*/ 0x04,0x00,0x3a,0xe4,0xe6,0xe8,0x0f,0x46,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,\r\n /*7eb10*/ 0x86,0x16,0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,0xf4,0x90,0x06,0xea,0x0c,\r\n /*7eb20*/ 0xe4,0xe6,0xe8,0x0f,0x46,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,\r\n /*7eb30*/ 0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,0xf4,0x90,0x04,0xfe,0x91,0x5f,0xfb,0x90,\r\n /*7eb40*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x44,0xe4,0xe6,0xe8,0x0f,0x46,0x16,0x00,0xfe,0xf2,\r\n /*7eb50*/ 0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,0xf4,\r\n /*7eb60*/ 0x16,0x40,0xb4,0x08,0xe4,0xe6,0xe8,0x0f,0x46,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,\r\n /*7eb70*/ 0x01,0x86,0x16,0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,0xf4,0x90,0x06,0xe9,\r\n /*7eb80*/ 0x84,0x5f,0x00,0x98,0x00,0xff,0xf6,0x90,0x04,0xfe,0x43,0x5f,0xf4,0x90,0x00,0x00,\r\n /*7eb90*/ 0x04,0x90,0x04,0x00,0x11,0x90,0x06,0x01,0x6f,0x11,0x87,0xff,0xfd,0xc1,0x21,0x87,\r\n /*7eba0*/ 0xff,0xfd,0x90,0x04,0xfe,0x28,0x5f,0xf5,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x42,\r\n /*7ebb0*/ 0x18,0x87,0xff,0x74,0x14,0x00,0x00,0x00,0x03,0x84,0x98,0x00,0x00,0x04,0x90,0x04,\r\n /*7ebc0*/ 0x00,0x1c,0x90,0x06,0x01,0x75,0x58,0xff,0xfe,0x90,0x01,0x19,0x90,0x06,0x01,0xa0,\r\n /*7ebd0*/ 0x18,0x87,0xff,0x74,0x14,0x00,0x00,0x00,0x03,0x84,0x90,0x04,0xff,0xdc,0x17,0x00,\r\n /*7ebe0*/ 0x23,0x90,0x04,0x01,0x0a,0x11,0x87,0xff,0xfd,0xd1,0x21,0x87,0xff,0xfd,0x90,0x04,\r\n /*7ebf0*/ 0xfd,0xdc,0x18,0x87,0xff,0x74,0x14,0x00,0x00,0x00,0x03,0x84,0x0f,0x80,0x0f,0xa2,\r\n /*7ec00*/ 0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x3d,0x90,0x06,0x01,0x2f,0x03,0x3b,0x93,0x00,\r\n /*7ec10*/ 0x00,0x04,0x90,0x04,0x00,0x08,0x90,0x06,0x00,0xee,0x90,0x04,0x00,0x27,0x58,0xff,\r\n /*7ec20*/ 0xfe,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x08,0x90,0x06,0x00,0xdb,0x90,0x04,0x00,\r\n /*7ec30*/ 0x14,0x90,0x06,0x01,0x3b,0xe8,0x18,0x87,0xff,0x74,0x14,0x00,0x00,0x00,0x03,0x84,\r\n /*7ec40*/ 0xf8,0x90,0x04,0xff,0xbb,0x0f,0x08,0x0f,0x2a,0x90,0x06,0x00,0xbb,0x90,0x04,0xfd,\r\n /*7ec50*/ 0x7d,0x90,0x00,0xfd,0x79,0x90,0x06,0xe8,0xbc,0x18,0x87,0xff,0x74,0x14,0x00,0x00,\r\n /*7ec60*/ 0x00,0x03,0x84,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x27,0x90,0x06,0x00,0xcc,0x58,\r\n /*7ec70*/ 0xff,0xfe,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,0x24,0x90,0x05,0x6f,\r\n /*7ec80*/ 0x90,0x06,0x00,0xec,0x18,0x87,0xff,0x74,0x14,0x00,0x00,0x00,0x03,0x84,0x90,0x04,\r\n /*7ec90*/ 0xff,0xd1,0xe4,0xe6,0xe8,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,\r\n /*7eca0*/ 0x00,0x00,0xb8,0x90,0x46,0xfe,0x3a,0xf8,0xf6,0x0f,0x64,0xf4,0x97,0x00,0x00,0x32,\r\n /*7ecb0*/ 0x0f,0x46,0xe4,0xe6,0xe8,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,\r\n /*7ecc0*/ 0x00,0x00,0xb8,0x90,0x46,0xfe,0x3a,0xf8,0xf6,0x0f,0x64,0xf4,0x97,0x00,0x00,0x12,\r\n /*7ecd0*/ 0x13,0x40,0xb4,0x0e,0x5b,0x0a,0x90,0x00,0x00,0x28,0x90,0x06,0xfb,0x0d,0x90,0x04,\r\n /*7ece0*/ 0xff,0xb0,0x15,0x40,0xb4,0x0e,0x5d,0x01,0x93,0x00,0x01,0x31,0x17,0x00,0x00,0x1e,\r\n /*7ecf0*/ 0x87,0xff,0xfa,0xf0,0xf2,0xf4,0xf8,0xfa,0x10,0x00,0x01,0x0f,0xba,0x01,0xe0,0xf0,\r\n /*7ed00*/ 0xfc,0xa7,0x17,0x00,0x20,0x90,0x05,0xe7,0xe4,0xe6,0xe8,0x0f,0x40,0x16,0x00,0xff,\r\n /*7ed10*/ 0x74,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,\r\n /*7ed20*/ 0xf4,0xe4,0xe6,0xe8,0x0f,0x42,0x16,0x00,0xff,0x74,0x0f,0x8c,0xba,0x01,0x86,0x16,\r\n /*7ed30*/ 0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,0xf4,0xa7,0xe4,0xe6,0xe8,0x16,0x00,\r\n /*7ed40*/ 0xff,0x74,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0xb8,0x90,0x46,0xfe,0x3a,\r\n /*7ed50*/ 0xf8,0xf6,0x0f,0x24,0xf4,0xe4,0xe6,0xe8,0x16,0x00,0xff,0x74,0x0f,0x8c,0xba,0x01,\r\n /*7ed60*/ 0x86,0x16,0x00,0x00,0x00,0xb8,0x90,0x46,0xfe,0x3a,0xf8,0xf6,0x0f,0x04,0xf4,0xa7,\r\n /*7ed70*/ 0x58,0x00,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x01,0xa7,0x0f,0x62,0x66,0xf0,\r\n /*7ed80*/ 0x00,0x0c,0x6c,0x5f,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x49,0x0f,0x26,0xe4,\r\n /*7ed90*/ 0xe6,0xe8,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0xb8,\r\n /*7eda0*/ 0x90,0x46,0xfe,0x3a,0xf8,0xf6,0x0f,0x64,0xf4,0x97,0x00,0x00,0x77,0x0f,0x46,0xe4,\r\n /*7edb0*/ 0xe6,0xe8,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0xb8,\r\n /*7edc0*/ 0x90,0x46,0xfe,0x3a,0xf8,0xf6,0x0f,0x64,0xf4,0x97,0x00,0x00,0x57,0x90,0x06,0xfa,\r\n /*7edd0*/ 0x1a,0xd3,0x98,0x00,0xff,0xb9,0x20,0x87,0xff,0xf6,0x90,0x86,0xff,0xf6,0x5f,0x00,\r\n /*7ede0*/ 0x98,0x00,0xff,0x0b,0x90,0x06,0xfa,0x63,0xe4,0xe6,0xe8,0x0f,0x46,0x16,0x00,0xfe,\r\n /*7edf0*/ 0xf2,0x0f,0x8c,0xba,0x01,0x86,0x16,0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,\r\n /*7ee00*/ 0xf4,0x0f,0x64,0xe4,0xe6,0xe8,0x0f,0x46,0x16,0x00,0xfe,0xf2,0x0f,0x8c,0xba,0x01,\r\n /*7ee10*/ 0x86,0x16,0x00,0x00,0x00,0x90,0x46,0xfe,0x38,0xf8,0xf6,0xf4,0xa7,0x17,0x00,0x01,\r\n /*7ee20*/ 0x90,0x04,0xfe,0xcb,0x17,0x00,0x06,0x90,0x04,0xfe,0xc4,0x38,0x00,0xe8,0xe0,0xea,\r\n /*7ee30*/ 0xe4,0x1a,0x00,0x00,0x00,0x90,0x06,0xe1,0xd4,0x97,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7ee40*/ 0x0e,0x17,0x00,0x00,0x27,0x40,0xb4,0x01,0x17,0x00,0x19,0x90,0x04,0x00,0x77,0x90,\r\n /*7ee50*/ 0x06,0xe6,0x9d,0x0f,0x47,0x74,0x00,0x80,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x17,\r\n /*7ee60*/ 0x5c,0x00,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x06,0x17,0x00,0x00,0x90,0x05,\r\n /*7ee70*/ 0x55,0x17,0x00,0x01,0x90,0x05,0x4f,0x64,0x00,0x7f,0x0a,0x41,0x0f,0x84,0x90,0x56,\r\n /*7ee80*/ 0xe6,0xeb,0x5f,0xfe,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x04,0x90,0x04,0xff,0xa5,\r\n /*7ee90*/ 0x5f,0x00,0x98,0x01,0x31,0x90,0x06,0xe6,0x57,0x5f,0x00,0x90,0x00,0x00,0x04,0x90,\r\n /*7eea0*/ 0x04,0x00,0x07,0x90,0x05,0x20,0x90,0x04,0x00,0x18,0x5f,0xf8,0x90,0x00,0x00,0x04,\r\n /*7eeb0*/ 0x90,0x04,0x00,0x08,0x90,0x04,0xff,0x7d,0x90,0x04,0x00,0x06,0x17,0x00,0x01,0x90,\r\n /*7eec0*/ 0x05,0x04,0x90,0x00,0xff,0x6f,0x5f,0xff,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x03,\r\n /*7eed0*/ 0x17,0x00,0x00,0xf4,0xfa,0xf0,0xf8,0x39,0x00,0xa7,0x18,0x00,0x00,0x14,0x17,0x57,\r\n /*7eee0*/ 0xee,0xec,0x27,0x50,0xb4,0x93,0xd8,0x9a,0x00,0xff,0xf3,0xa7,0x25,0x40,0xb4,0x9d,\r\n /*7eef0*/ 0x14,0x00,0x00,0x00,0x30,0x50,0x00,0xa7,0x25,0x40,0xb4,0xa5,0x31,0x10,0x00,0xa7,\r\n /*7ef00*/ 0x16,0x00,0xf4,0x00,0x18,0x00,0x00,0x00,0x90,0x46,0xfe,0x28,0x90,0x06,0x00,0x45,\r\n /*7ef10*/ 0x90,0x06,0x00,0x01,0xa7,0x17,0x00,0x01,0x27,0x40,0xb4,0x8a,0x17,0x00,0x17,0x27,\r\n /*7ef20*/ 0x40,0xb4,0x8b,0x17,0x00,0x16,0x27,0x40,0xb4,0x8c,0x17,0x00,0x16,0x27,0x40,0xb4,\r\n /*7ef30*/ 0x8d,0x17,0x00,0x17,0x27,0x40,0xb4,0x8e,0x17,0x00,0x13,0x27,0x40,0xb4,0x90,0x17,\r\n /*7ef40*/ 0x00,0x15,0x27,0x40,0xb4,0x91,0x17,0x00,0x17,0x27,0x40,0xb4,0x92,0x17,0x00,0x16,\r\n /*7ef50*/ 0x27,0x40,0xb4,0x8f,0xa7,0x16,0x00,0x00,0x00,0x26,0x40,0xb4,0x00,0x26,0x40,0xb4,\r\n /*7ef60*/ 0x04,0x26,0x40,0xb4,0x02,0x16,0x00,0x00,0x01,0x26,0x40,0xb4,0x0a,0x26,0x40,0xb4,\r\n /*7ef70*/ 0x0c,0x16,0x00,0x80,0x00,0x18,0x00,0x00,0x00,0x26,0x40,0xb4,0x06,0x28,0x40,0xb4,\r\n /*7ef80*/ 0x08,0x16,0x00,0x00,0x00,0x26,0x40,0xb4,0x01,0x11,0x00,0x00,0x16,0x00,0x00,0x00,\r\n /*7ef90*/ 0x18,0x00,0x20,0x00,0x1a,0x00,0x3c,0x20,0xda,0x21,0xd8,0x00,0x00,0x98,0x00,0xff,\r\n /*7efa0*/ 0xf7,0x16,0x00,0x60,0x00,0x18,0x00,0x00,0x00,0x1a,0x00,0x00,0x00,0xda,0x21,0xd8,\r\n /*7efb0*/ 0x00,0x00,0x98,0x00,0xff,0xf7,0xe4,0xe6,0xe8,0x16,0x00,0x40,0x00,0x18,0x00,0x00,\r\n /*7efc0*/ 0x00,0x14,0x00,0xff,0xfc,0x90,0x46,0xfe,0x3c,0xf8,0xf6,0xf4,0xa7,0x16,0x00,0xf4,\r\n /*7efd0*/ 0x1a,0x18,0x00,0x00,0x07,0x90,0x46,0xfe,0x28,0x16,0x00,0x16,0x00,0x18,0x00,0x00,\r\n /*7efe0*/ 0x00,0x14,0x00,0x00,0xff,0x90,0x46,0xfe,0x2a,0x16,0x00,0xf4,0x1b,0x18,0x00,0x00,\r\n /*7eff0*/ 0x06,0x90,0x46,0xfe,0x28,0x5c,0x00,0x00,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x04,\r\n /*7f000*/ 0x90,0x04,0xff,0xd5,0x93,0x00,0x00,0x04,0x90,0x04,0x00,0x0f,0x14,0x00,0x00,0x00,\r\n /*7f010*/ 0x17,0x00,0x1b,0x90,0x06,0xe0,0x19,0x90,0x04,0xff,0xb2,0x16,0x00,0x16,0x00,0x18,\r\n /*7f020*/ 0x00,0x00,0x00,0x90,0x06,0xe0,0x8d,0x5f,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,\r\n /*7f030*/ 0x0c,0x14,0x00,0x00,0x00,0x90,0x06,0xdf,0xf7,0x90,0x04,0xff,0x90,0x16,0x00,0x16,\r\n /*7f040*/ 0x00,0x18,0x00,0x00,0x00,0x1a,0x00,0x00,0x00,0x11,0xd8,0x00,0x00,0xca,0x59,0x20,\r\n /*7f050*/ 0x90,0x00,0xff,0xf5,0xda,0xea,0x11,0xd8,0x00,0x00,0xca,0x59,0x00,0x98,0x00,0xff,\r\n /*7f060*/ 0xf5,0xda,0xda,0x11,0xd8,0x00,0x00,0x59,0x20,0x90,0x00,0xff,0xf5,0xca,0x11,0x00,\r\n /*7f070*/ 0x00,0x21,0xd8,0x00,0x00,0xfa,0x16,0x00,0x16,0x00,0x18,0x00,0x00,0x00,0xe8,0xe6,\r\n /*7f080*/ 0x16,0x00,0x16,0x20,0x18,0x00,0x00,0x00,0xe8,0xe6,0x90,0x06,0xe0,0xc8,0x5f,0x00,\r\n /*7f090*/ 0x98,0x00,0x00,0xf8,0x09,0x26,0x0f,0x37,0x09,0x26,0x10,0x00,0x00,0x08,0xba,0x01,\r\n /*7f0a0*/ 0xe0,0x16,0x00,0x00,0x00,0x18,0x00,0xb1,0x00,0x11,0xd0,0x00,0x00,0x59,0x20,0x90,\r\n /*7f0b0*/ 0x00,0x00,0x04,0x90,0x04,0x00,0x06,0xc8,0xd3,0x11,0xd0,0x00,0x00,0x59,0xff,0x90,\r\n /*7f0c0*/ 0x01,0x24,0x59,0xfe,0x90,0x01,0x1f,0x15,0x00,0x00,0x25,0x40,0xb4,0x01,0x14,0x00,\r\n /*7f0d0*/ 0xff,0xff,0x24,0x40,0xb4,0x02,0x26,0x40,0xb4,0x06,0x28,0x40,0xb4,0x08,0x90,0x06,\r\n /*7f0e0*/ 0xfd,0x49,0x90,0x04,0x00,0xa6,0x14,0x00,0x00,0x00,0x59,0xff,0x90,0x00,0x00,0x04,\r\n /*7f0f0*/ 0x90,0x04,0x00,0x0c,0xc8,0xd3,0x15,0xd0,0x00,0x00,0xc8,0xd3,0x90,0x04,0x00,0x0a,\r\n /*7f100*/ 0xc8,0xd3,0x14,0xd0,0x00,0x00,0xc8,0xd3,0xc8,0xd3,0x11,0xd0,0x00,0x00,0x59,0x20,\r\n /*7f110*/ 0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x02,0xc8,0xd3,0x24,0x40,0xb4,0x02,0xe2,0x12,\r\n /*7f120*/ 0x40,0xb4,0x04,0x03,0x42,0x9b,0x00,0x00,0x04,0x90,0x04,0x00,0x04,0x24,0x40,0xb4,\r\n /*7f130*/ 0x04,0xf2,0x5b,0x01,0x90,0x00,0x00,0x04,0x90,0x04,0x00,0x0c,0x12,0x00,0x00,0x00,\r\n /*7f140*/ 0x22,0x40,0xb4,0x08,0x90,0x04,0x00,0x2b,0x10,0x40,0xb4,0x0c,0x20,0x40,0xb4,0x08,\r\n /*7f150*/ 0x10,0x40,0xb4,0x0c,0xba,0x01,0x03,0x20,0x40,0xb4,0x0c,0x10,0x00,0x80,0x00,0x20,\r\n /*7f160*/ 0x40,0xb4,0x06,0x0f,0xa3,0xda,0x11,0xd8,0x00,0x00,0x21,0x68,0xb4,0x06,0xda,0x9a,\r\n /*7f170*/ 0x00,0xff,0xf3,0x16,0x00,0x60,0x00,0x18,0x00,0x00,0x00,0x0a,0x41,0xba,0x0f,0xa4,\r\n /*7f180*/ 0x12,0x40,0xb4,0x08,0x22,0xd8,0x00,0x00,0x90,0x04,0xfe,0x4d,0x14,0x00,0x00,0x00,\r\n /*7f190*/ 0x5f,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x04,0x90,0x06,0xde,0x92,0x17,0x40,\r\n /*7f1a0*/ 0xb4,0x01,0x5f,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x6b,0x14,0x40,0xb4,0x02,\r\n /*7f1b0*/ 0x16,0x00,0x60,0x00,0x18,0x00,0x00,0x00,0x0a,0x41,0x0f,0xa4,0x14,0x40,0xb4,0x02,\r\n /*7f1c0*/ 0xc4,0x24,0x40,0xb4,0x02,0x12,0xd8,0x00,0x00,0x5a,0x00,0x00,0x90,0x00,0x00,0x27,\r\n /*7f1d0*/ 0x10,0x00,0x80,0x00,0x20,0x40,0xb4,0x06,0x22,0x40,0xb4,0x08,0x90,0x06,0xfc,0x4b,\r\n /*7f1e0*/ 0x5f,0x00,0x98,0x00,0x00,0x04,0x90,0x04,0x00,0x0d,0x10,0x00,0x00,0x00,0x21,0x40,\r\n /*7f1f0*/ 0xb4,0x01,0xd4,0x90,0x06,0xde,0x39,0x17,0x40,0xb4,0x01,0x5f,0x00,0x98,0x00,0x00,\r\n /*7f200*/ 0x04,0x90,0x04,0x00,0x12,0x14,0x40,0xb4,0x02,0x12,0x40,0xb4,0x04,0x03,0x42,0x90,\r\n /*7f210*/ 0x00,0xff,0x99,0x93,0x00,0xff,0x95,0x90,0x04,0xfd,0xb2,0xa7,\r\n]},\r\n{addr: 523776, data: [\r\n /*7fe00*/ 0xc0,0xd9,0xc2,0x5a,0xc1,0xb8,0xc1,0xd6,0xc1,0xe1,0xc4,0x11,0xc4,0x1a,0xc4,0x30,\r\n /*7fe10*/ 0xc4,0x35,0xc1,0xfc,0xc2,0x12,0xc2,0x1b,0xc2,0x3b,0xc2,0xc2,0xc2,0xe1,0xc3,0x15,\r\n /*7fe20*/ 0xc3,0x58,0xc3,0x81,0xc4,0x9a,0xc5,0x22,0xc5,0x3c,0xc5,0x7b,0xc0,0xc5,0xc0,0xcf,\r\n /*7fe30*/ 0xc5,0x64,0xc6,0x29,0xc6,0x98,0xc6,0xbe,0xc7,0x58,0xc7,0x29,0xc7,0x74,0xc7,0x8b,\r\n /*7fe40*/ 0xc7,0xa1,\r\n]},\r\n{addr: 524032, data: [\r\n /*7ff00*/ 0xb6,0x10,0x00,0x7c,0x41,0xe0,0xa5,0x16,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x14,\r\n /*7ff10*/ 0x00,0x02,0x00,0x10,0x00,0x00,0x00,0x21,0xd0,0x00,0x00,0xc8,0xd4,0x5c,0x00,0x00,\r\n /*7ff20*/ 0x98,0x00,0xff,0xf3,0x18,0x00,0xa7,0xa7,0x28,0x40,0x00,0x00,0x1c,0x00,0x20,0x00,\r\n /*7ff30*/ 0x0f,0xec,0x90,0x06,0xc0,0xca,0xbe,0x30,0x10,0x38,0x71,0x01,0x98,0x00,0x00,0x04,\r\n /*7ff40*/ 0x90,0x04,0x00,0x08,0x90,0x04,0x20,0xb8,0x90,0x04,0x00,0x04,0x90,0x04,0xd0,0xb0,\r\n]},\r\n];\r\nexport const kdata = {\n  \"screen-data-start\": 4352,\n  \"screen-width\": 4352,\n  \"screen-rows\": 4353,\n  \"screen-cols\": 4354,\n  \"screen-length\": 4355,\n  \"screen-part-length\": 4357,\n  \"cursor-scale\": 4359,\n  \"cursor-row\": 4360,\n  \"cursor-col\": 4361,\n  \"cursor-fg\": 4362,\n  \"cursor-bg\": 4363,\n  \"cursor-tile\": 4364,\n  \"cursor-visible\": 4365,\n  \"cursor-blink-toggle\": 4366,\n  \"cursor-blink-speed\": 4367,\n  \"cursor-blink-counter\": 4368,\n  \"screen-text-fg\": 4369,\n  \"screen-text-bg\": 4370,\n  \"screen-page\": 4371,\n  \"screen-line-height\": 4373,\n  \"screen-layer\": 4374,\n  \"print-data-start\": 4375,\n  \"print-mode\": 4375,\n  \"print-control-param\": 4376\n};\r\nexport const krodata = {\n  \"screen-init-start\": 491520,\n  \"screen-width\": 491520,\n  \"screen-rows\": 491521,\n  \"screen-cols\": 491522,\n  \"screen-length\": 491523,\n  \"screen-part-length\": 491525,\n  \"cursor-scale\": 491527,\n  \"cursor-row\": 491528,\n  \"cursor-col\": 491529,\n  \"cursor-fg\": 491530,\n  \"cursor-bg\": 491531,\n  \"cursor-tile\": 491532,\n  \"cursor-visible\": 491533,\n  \"cursor-blink-toggle\": 491534,\n  \"cursor-blink-speed\": 491535,\n  \"cursor-blink-counter\": 491536,\n  \"screen-text-fg\": 491537,\n  \"screen-text-bg\": 491538,\n  \"screen-page\": 491539,\n  \"screen-line-height\": 491541,\n  \"screen-layer\": 491542,\n  \"screen-init-end\": 491543,\n  \"SCREEN-INIT-DATA-LENGTH\": {\n    \"type\": \"binary.expression\",\n    \"op\": \"-\",\n    \"l\": {\n      \"type\": \"binary.expression\",\n      \"op\": \"-\",\n      \"l\": {\n        \"type\": \"identifier\",\n        \"ident\": \"screen.krodata.screen-init-end\",\n        \"pos\": {\n          \"offset\": 2076,\n          \"line\": 52,\n          \"column\": 42\n        }\n      },\n      \"r\": {\n        \"type\": \"identifier\",\n        \"ident\": \"screen.krodata.screen-init-start\",\n        \"pos\": {\n          \"offset\": 2109,\n          \"line\": 52,\n          \"column\": 75\n        }\n      },\n      \"pos\": {\n        \"offset\": 2076,\n        \"line\": 52,\n        \"column\": 42\n      }\n    },\n    \"r\": {\n      \"type\": \"integer\",\n      \"value\": 1,\n      \"pos\": {\n        \"offset\": 2145,\n        \"line\": 52,\n        \"column\": 111\n      }\n    },\n    \"pos\": {\n      \"offset\": 2075,\n      \"line\": 52,\n      \"column\": 41\n    }\n  },\n  \"screen-mode-start\": 491544,\n  \"screen-mode-0-width\": 491544,\n  \"screen-mode-0-rows\": 491545,\n  \"screen-mode-0-cols\": 491546,\n  \"screen-mode-0-length\": 491547,\n  \"screen-mode-0-part-length\": 491548,\n  \"screen-mode-0-cursor-scale\": 491549,\n  \"screen-mode-0-line-height\": 491550,\n  \"screen-mode-0-cfg\": 491551,\n  \"screen-mode-1-width\": 491552,\n  \"screen-mode-1-rows\": 491553,\n  \"screen-mode-1-cols\": 491554,\n  \"screen-mode-1-length\": 491555,\n  \"screen-mode-1-part-length\": 491556,\n  \"screen-mode-1-cursor-scale\": 491557,\n  \"screen-mode-1-line-height\": 491558,\n  \"screen-mode-1-cfg\": 491559,\n  \"screen-mode-2-width\": 491560,\n  \"screen-mode-2-rows\": 491561,\n  \"screen-mode-2-cols\": 491562,\n  \"screen-mode-2-length\": 491563,\n  \"screen-mode-2-part-length\": 491564,\n  \"screen-mode-2-cursor-scale\": 491565,\n  \"screen-mode-2-line-height\": 491566,\n  \"screen-mode-2-cfg\": 491567,\n  \"screen-mode-3-width\": 491568,\n  \"screen-mode-3-rows\": 491569,\n  \"screen-mode-3-cols\": 491570,\n  \"screen-mode-3-length\": 491571,\n  \"screen-mode-3-part-length\": 491572,\n  \"screen-mode-3-cursor-scale\": 491573,\n  \"screen-mode-3-line-height\": 491574,\n  \"screen-mode-3-cfg\": 491575\n};\r\nexport const vectors = {\n  \"CLEAR_SCREEN\": 523776,\n  \"SCROLL_SCREEN_UP\": 523778,\n  \"SET_CURSOR_POS\": 523780,\n  \"GET_CURSOR_POS\": 523782,\n  \"GET_CURSOR_ADDR\": 523784,\n  \"SET_FG_COLOR\": 523786,\n  \"GET_FG_COLOR\": 523788,\n  \"SET_BG_COLOR\": 523790,\n  \"GET_BG_COLOR\": 523792,\n  \"CVT_ADDR_TO_POS\": 523794,\n  \"GET_CHAR_UNDER_CURSOR\": 523796,\n  \"GET_LOGICAL_LINE_START_ADDR\": 523798,\n  \"GET_LOGICAL_LINE_END_ADDR\": 523800,\n  \"CURSOR_UP\": 523802,\n  \"CURSOR_LEFT\": 523804,\n  \"CURSOR_RIGHT\": 523806,\n  \"CURSOR_DOWN\": 523808,\n  \"CURSOR_NEWLINE\": 523810,\n  \"PUT_CHAR\": 523812,\n  \"GET_CHAR\": 523814,\n  \"PRINT\": 523816,\n  \"INPUT\": 523818,\n  \"SHOW_CURSOR\": 523820,\n  \"HIDE_CURSOR\": 523822,\n  \"PRINT_RAW\": 523824,\n  \"U16_TO_STR\": 523826,\n  \"I16_TO_STR\": 523828,\n  \"STRCMP\": 523830,\n  \"STACK_PUSH\": 523832,\n  \"STACK_POP\": 523834,\n  \"MAKE_HEAP\": 523836,\n  \"GET_HEAP_FREE\": 523838,\n  \"ALLOC\": 523840\n};", "import { Diagnostics } from \"../../core/Diagnostics.js\";\nimport { Computer, TIMING_METHODS } from \"../../core/Computer.js\";\nimport { BrowserConsole } from \"./BrowserConsole.js\";\nimport { Screen } from \"../../devices/Screen.js\";\nimport { DMA } from \"../../devices/DMA.js\";\nimport { Keyboard } from \"../../devices/Keyboard.js\";\nimport { Timers } from \"../../devices/Timers.js\";\n\nimport rom from \"../../roms/kernel.js\";\n\nclass System {\n    constructor(opts) {\n        this.config = Object.assign({}, {\n            options: {\n                timingMethod: TIMING_METHODS.SENTINEL,\n                sliceGranularity: 16384,\n                sliceTime: 16,\n                ticksBetweenRasterLines: \"AUTO\",\n                accurateScreen: true,\n                sentinel: undefined\n            },\n        }, opts);\n        const computer = new Computer({ \n            performance, \n            debug: true, \n            timingMethod: this.config.options.timingMethod,\n            sliceTime: this.config.options.sliceTime, \n            sliceGranularity: this.config.options.sliceGranularity,\n            sentinel: this.config.options.sentinel\n        });\n        computer.memory.loadFromJS(rom, true);\n        const diagnostics = new Diagnostics(computer);\n\n        const timers = new Timers({\n            device: 0,\n            length: 16,\n            controller: computer.controller,\n            memory: computer.memory,\n            clock: computer.clock,\n            performance\n        });\n\n        const simpleConsole = new BrowserConsole({\n            device: 8,\n            length: 16,\n            controller: computer.controller,\n            memory: computer.memory,\n            clock: computer.clock\n        });\n\n        const screen = new Screen({\n            device: 1,\n            length: 32,\n            controller: computer.controller,\n            memory: computer.memory,\n            clock: computer.clock,\n            performance\n        });\n\n        screen.adjustPerformance = this.config.options.ticksBetweenRasterLines === \"AUTO\";\n\n        if (this.config.options.ticksBetweenRasterLines !== \"AUTO\") {\n            screen.ticksBetweenRasterLines = Number(this.config.options.ticksBetweenRasterLines);\n        }\n\n        screen.mode = 2; //this.config.accurateScreen ? 2 : 1;\n\n        const dma = new DMA({\n            device: 13,\n            length: 16,\n            controller: computer.controller,\n            memory: computer.memory,\n            clock: computer.clock\n        });\n\n        const keyboard = new Keyboard({\n            device: 3,\n            length: 16,\n            controller: computer.controller,\n            memory: computer.memory,\n            clock: computer.clock\n        });\n\n        this.computer = computer;\n        this.diagnostics = diagnostics;\n        this.devices = {\n            console: simpleConsole,\n            screen,\n            dma,\n            keyboard,\n            timers\n        };\n\n        computer.reset();\n    }\n}\n\nlet system;\nonmessage = evt => {\n    const { data } = evt;\n    const { command, options } = data;\n\n    switch (command) {\n        case \"sys-init\":        /* initialize the system */\n            system = new System({options}); \n            break;\n        case \"sys-config\":      /* update the system configuration */\n            break;\n        case \"cpu-reset\":       /* reset the computer */\n            system.computer.reset();\n            if (system.diagnostics.state === \"running\") return;\n            system.computer.run();\n\n// temporary\n/*\nconst text = `10 PRINT CHR$(RND(2)+238);:GOTO 10\nRUN\n`;\nArray.from(text).forEach(ch => {\n    system.devices.keyboard.keyPressed(ch===\"\\n\"?13:ch.charCodeAt(0));\n});\n*/\n\n\n            break;\n        case \"cpu-start\":       /* start the computer */\n            system.computer.processor.jump(Number(options.startAddress || \"0xFF00\"));\n            system.computer.processor.registers.SINGLE_STEP = 0;\n            if (system.diagnostics.state === \"running\") return;\n            system.computer.run();\n            break;\n        case \"cpu-stop\":        /* stop the computer */\n            system.computer.stop();\n            break;\n        case \"cpu-continue\":    /* continue the computer */\n            if (system.diagnostics.state === \"running\") return;\n            system.computer.processor.registers.SINGLE_STEP = 0;\n            system.computer.processor.registers.INTERRUPT_DISABLE = 0;\n            system.computer.run();\n            break;\n        case \"cpu-step\":        /* single-step the computer */\n            if (system.diagnostics.state === \"running\") {\n                system.computer.processor.registers.INTERRUPT_DISABLE = 1;\n                system.computer.processor.registers.SINGLE_STEP = 1;\n            };\n            system.computer.step();\n            break;\n        case \"cpu-jump\":        /* jump the CPU to a new location */\n            system.computer.processor.jump(Number(options.startAddress || \"0xFF00\"));\n            break;\n\n        case \"frame-dump\":      /* get a frame */\n            const frame = system.devices.screen.frame;\n            if (system.devices.screen._wait) system.devices.screen.resetWait();\n            postMessage({\n                command: \"frame\",\n                frame\n            } );\n            break;\n        case \"frame-tick\":      /* tick the screen driver */\n            break;\n\n        case \"dump-statistics\": /* get the computer's current stats */\n            break;\n        case \"dump-registers\":  /* get the computer's current registers */\n            break;\n        case \"dump-flags\":      /* get the computer's current flags */\n            break;\n        case \"dump-fpu\":        /* get the computer's current fpu */\n            break;\n\n        case \"key-get-gr\":      /* is GR down? */\n            break;\n        case \"key-get-ctrl\":    /* is CTRL down? */ \n            break;\n        case \"key-get-shifted\": /* is SHIFT down? */\n            break;\n        case \"key-down\": {      /* send key down */\n            const { keyboard } = system.devices;\n            keyboard.keyDown(options.which);\n            break;\n        }\n        case \"key-up\": {        /* send key up */\n            const { keyboard } = system.devices;\n            keyboard.keyUp(options.which);\n            break;\n        }\n        case \"key-pressed\": {   /* send key press */\n            const { keyboard } = system.devices;\n            keyboard.keyPressed(options.which);\n            break;\n        }\n        case \"key-set-raw\": {   /* set raw matrix value */\n            break;\n        }\n        case \"key-clear-raw\": { /* clear raw matrix value */\n            break;\n        }\n        case \"mem-peek\":        /* peek a value from memory */\n            break;\n        case \"mem-poke\":        /* poke a value into memory */\n            break;\n        case \"io-peek\":         /* peek a value from i/o */\n            break;\n        case \"io-poke\":         /* poke a value into i/o */\n            break;\n        case \"io-dump\": {       /* get the IO from the computer */\n            postMessage({\n                command: \"io-dump\",\n                io: system.computer.controller.readBytes(0, 256)\n            });\n            break;\n        }\n        case \"mem-dump\": {      /* get a range of memory from the computer */\n            postMessage({\n                command:\"mem-dump\",\n                memory:system.computer.memory.readBytes(options.address, options.length)\n            })\n            break;\n        }\n        case \"disassemble\": {   /* disassemble a range of memory */\n            const { address, length } = options;\n            \n            let realAddress = Number(address);\n            if (address === \"PC\") {\n                realAddress = system.computer.processor.registers.PC\n            }\n            \n            const asm = system.diagnostics.disassembleMemory({start: Number(realAddress), length: Number(length)})\n                        .split(\"\\n\")\n                        .map(str => ({\n                            address: str.substr(0, 5), \n                            bytes: str.substr(7, 11).trim(),\n                            asm: str.substr(22).trim()\n                        }));\n            \n            postMessage({\n                command:\"disassemble\",\n                asm\n            });\n            break;\n        }\n        default:\n            console.log(`Received unsupported event: ${evt}`)\n    }\n}"],
  "mappings": "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EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,GAC3E,GAAK,GAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,GAC3E,GAAK,IAAK,IAAK,GAAK,GAAK,EAAK,MAEztF,CAAC,KAAM,OAAQ,KAAM,CACV,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,EAC3E,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,GAAK,EAAK,EAAK,GAAK,GAAK,GAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,EAC3E,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAC3E,GAAK,EAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAAK,GAAK,GAAK,EAAK,EAAK,GAAK,GAAK,GAAK,EAC3E,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAC3E,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAC3E,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,EAC3E,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAC3E,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAC3E,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,EAC3E,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAC3E,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,EAC3E,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAC3E,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,EAC3E,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAC3E,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,EAC3E,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAC3E,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,EAC3E,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAEtnD,CAAC,KAAM,OAAQ,KAAM,CACV,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAC3E,GAAK,IAAK,EAAK,IAAK,GAAK,EAAK,GAAK,GAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,GAAK,EAC3E,EAAK,IAAK,EAAK,IAAK,IAAK,EAAK,GAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAC3E,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAC3E,IAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,EAC3E,GAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAC3E,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAC3E,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAC3E,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAC3E,EAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAC3E,EAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAC3E,IAAK,GAAK,EAAK,MAE1B,CAAC,KAAM,MAAQ,KAAM,CACV,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,GAAK,GAAK,EAAK,IAC3E,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,GAAK,IAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAC3E,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,IAAK,GAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,GAC3E,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAC3E,IAAK,EAAK,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,IAAK,EAAK,GAAK,EAAK,GAAK,IAAK,IAAK,GAC3E,IAAK,GAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAC3E,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,GAAK,IAAK,GAAK,EAAK,GAAK,GAAK,IAC3E,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAC3E,GAAK,EAAK,IAAK,GAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,GAAK,GAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAC3E,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,GAAK,EAC3E,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,GAC3E,EAAK,GAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAC3E,IAAK,IAAK,IAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAC3E,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAC3E,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,GAAK,GAC3E,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAC3E,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,GAC3E,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,GAAK,IAAK,GAAK,GAC3E,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,GAAK,GAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAC3E,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,GAAK,GAAK,IAC3E,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAC3E,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAC3E,IAAK,GAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAC3E,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,GAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,GAC3E,EAAK,IAAK,IAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAC3E,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAC3E,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAC3E,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,GAC3E,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAC3E,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAC3E,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,GAAK,GAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAAK,EAAK,EAC3E,GAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAC3E,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAC3E,EAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAC3E,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAC3E,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,GAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,GAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,GAAK,IAC3E,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,IAC3E,GAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,IAC3E,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAC3E,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,EAAK,GAC3E,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAC3E,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAC3E,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAAK,EAC3E,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAC3E,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,EAC3E,IAAK,GAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAC3E,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAC3E,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAC3E,EAAK,GAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAC3E,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,GAC3E,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAC3E,GAAK,GAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAC3E,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAC3E,EAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAC3E,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAC3E,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAC3E,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAC3E,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,EAAK,IAC3E,EAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAC3E,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAC3E,IAAK,EAAK,GAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,IAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAC3E,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAC3E,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,GAAK,GAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAC3E,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAC3E,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,GAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAC3E,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,GAAK,GAC3E,IAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,IAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAC3E,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAC3E,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAC3E,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,EAAK,GAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAC3E,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,GAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAC3E,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,EAAK,IAC3E,EAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAC3E,IAAK,EAAK,GAAK,IAAK,IAAK,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAC3E,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAC3E,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,EAAK,GAAK,GAC3E,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,EAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,EAAK,IAAK,GAAK,IAAK,EAAK,GAAK,EAAK,EAAK,IAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAC3E,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAC3E,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAC3E,GAAK,EAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAC3E,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,EAAK,GAAK,EAAK,EAAK,IAAK,IAC3E,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,IAAK,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAC3E,EAAK,IAAK,GAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,GAC3E,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAC3E,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAC3E,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAC3E,GAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,GAAK,EAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,GAAK,EAAK,GAC3E,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAC3E,EAAK,IAAK,GAAK,EAAK,GAAK,EAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,IAC3E,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAC3E,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAC3E,EAAK,GAAK,GAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAC3E,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAC3E,EAAK,GAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,GAAK,IAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAC3E,IAAK,EAAK,GAAK,EAAK,EAAK,GAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAAK,EAAK,IAC3E,GAAK,EAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,GAAK,EAAK,IAC3E,EAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAC3E,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,EAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,IAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,GAC3E,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAAK,EAC3E,GAAK,EAAK,EAAK,GAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAC3E,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAC3E,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAC3E,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAC3E,EAAK,GAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,GAAK,IAAK,GAAK,IAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAAK,IAAK,EAAK,IAC3E,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAC3E,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,GAC3E,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,IAAK,EAC3E,EAAK,IAAK,IAAK,EAAK,GAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAC3E,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,GAAK,EAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,EAAK,EAC3E,GAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAC3E,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,GAAK,IAC3E,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAC3E,EAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAC3E,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAC3E,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,IAAK,EAAK,GAAK,EAAK,IAAK,IAAK,GAC3E,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,GAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,GAAK,IAAK,IAC3E,IAAK,IAAK,EAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAC3E,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAC3E,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAC3E,GAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,IAAK,GAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,EAAK,GAAK,GAC3E,IAAK,IAAK,GAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,GAC3E,IAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAC3E,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAC3E,EAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAC3E,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAC3E,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,GAC3E,IAAK,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAC3E,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,EAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAC3E,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAC3E,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAC3E,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAC3E,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAC3E,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAC3E,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAC3E,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAC3E,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAC3E,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAC3E,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAC3E,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,IAC3E,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAC3E,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAC3E,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAC3E,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAC3E,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAC3E,GAAK,IAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAC3E,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAC3E,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAC3E,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAC3E,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAC3E,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,GAAK,IAC3E,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,GAAK,EAAK,GAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAC3E,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,EAAK,IAAK,GAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,EAAK,IAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,EAAK,IAAK,GAC3E,IAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAC3E,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAC3E,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,EAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAC3E,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAC3E,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,GAAK,EAAK,EAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,IAAK,GAAK,IAC3E,EAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,IAC3E,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAC3E,IAAK,GAAK,EAAK,EAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAC3E,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,IAAK,IAAK,IAC3E,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAC3E,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAC3E,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,IAAK,GAAK,GAAK,EAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAC3E,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAC3E,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAC3E,EAAK,GAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAC3E,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,IAAK,GAC3E,EAAK,GAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAC3E,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAC3E,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC3E,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAC3E,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAC3E,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,IAAK,GAC3E,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAC3E,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,GAC3E,GAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,EAAK,GAAK,GAAK,GAAK,GAC3E,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAC3E,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAAK,GAAK,EAAK,GAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,IAAK,GAAK,GAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAC3E,IAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAC3E,IAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAC3E,GAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAC3E,GAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,EAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,IAAK,GAAK,IAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAC3E,IAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAC3E,EAAK,GAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAC3E,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,IAAK,GAAK,IAAK,GAAK,GAC3E,IAAK,GAAK,IAAK,GAAK,GAAK,IAAK,GAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,EAAK,GAAK,GAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,GAAK,IAAK,GAAK,GAAK,IAAK,GAAK,GAAK,IAAK,GAAK,GAC3E,GAAK,IAAK,GAAK,IAAK,GAAK,GAAK,IAAK,GAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,IAC3E,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,GAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,IAAK,GAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,IAAK,GAC3E,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,GAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,GAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,EAAK,IAC3E,GAAK,GAAK,GAAK,IAAK,EAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,GAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAC3E,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,GAAK,GAAK,EAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,GAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAC3E,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,GAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAC3E,EAAK,GAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAC3E,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAC3E,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,IAC3E,GAAK,EAAK,EAAK,GAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,EAAK,GAAK,EAC3E,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,IAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,IAAK,GAAK,IAAK,GAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAC3E,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAC3E,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAC3E,GAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAC3E,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAC3E,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAC3E,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAC3E,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAC3E,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAC3E,IAAK,GAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAC3E,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAC3E,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAC3E,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,EAC3E,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,IAC3E,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,GAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,EAAK,IAC3E,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAC3E,EAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAAK,IAC3E,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAC3E,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAC3E,IAAK,IAAK,GAAK,GAAK,IAAK,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAC3E,IAAK,IAAK,GAAK,EAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAC3E,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAC3E,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,GAC3E,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAC3E,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAC3E,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,GAAK,IAAK,IAC3E,EAAK,GAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAC3E,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,EAAK,EAAK,IAAK,GAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAC3E,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,IAC3E,GAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAC3E,IAAK,GAAK,IAAK,IAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAC3E,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,GAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAC3E,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAC3E,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,IAC3E,IAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,GAAK,GAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAC3E,EAAK,IAAK,IAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAC3E,GAAK,GAAK,EAAK,EAAK,IAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAC3E,GAAK,EAAK,IAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAC3E,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,GAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,GAAK,EAAK,EAAK,GAAK,GAAK,GAC3E,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAC3E,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,EAAK,IAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,EAAK,IAC3E,GAAK,EAAK,IAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,GAAK,EAAK,GAAK,GAC3E,GAAK,IAAK,IAAK,GAAK,EAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,EAAK,GAAK,GAAK,GAAK,IAC3E,IAAK,GAAK,EAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,EAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAC3E,EAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,EAAK,GAAK,GAAK,GAAK,IAAK,IAAK,GAAK,EAAK,GAC3E,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAC3E,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAC3E,GAAK,GAAK,EAAK,IAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAC3E,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAC3E,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,IAC3E,IAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAC3E,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,EAC3E,EAAK,GAAK,EAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAC3E,GAAK,GAAK,EAAK,EAAK,EAAK,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,EAC3E,EAAK,GAAK,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,IAAK,GAAK,GAAK,EAAK,EAC3E,EAAK,IAAK,GAAK,IAAK,GAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,EAC3E,GAAK,EAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,GAAK,EAAK,GAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAC3E,GAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAAK,GAC3E,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,GAC3E,IAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,IAC3E,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,GAAK,EAC3E,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,EAAK,EAAK,IAAK,IAC3E,GAAK,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,GAAK,EAC3E,IAAK,EAAK,EAAK,IAAK,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,EAAK,EAAK,EAAK,IAAK,EAC3E,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,EAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,IAC3E,EAAK,GAAK,GAAK,IAAK,IAAK,EAAK,GAAK,GAAK,EAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,EAC3E,IAAK,IAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,EAC3E,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,EAAK,EAAK,EAC3E,IAAK,EAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAC3E,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAC3E,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,IAAK,GAAK,GAAK,IAAK,EAAK,IAAK,GAC3E,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAC3E,EAAK,IAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,EAC3E,GAAK,GAAK,IAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,EAC3E,GAAK,GAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,GAAK,IAAK,GAAK,GAAK,EAAK,IAAK,EAAK,GAC3E,GAAK,IAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,GAAK,IAAK,IAAK,EAAK,IAAK,IAC3E,EAAK,IAAK,IAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,EAAK,EAC3E,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,IAAK,IAAK,GAAK,GAC3E,IAAK,EAAK,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,IAAK,GAAK,GAAK,IAAK,EAC3E,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAAK,GAAK,GAAK,IAAK,EAC3E,IAAK,GAAK,GAAK,IAAK,EAAK,GAAK,IAAK,EAAK,EAAK,GAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAC3E,GAAK,EAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IAAK,EAAK,IAAK,EAAK,IAAK,GAC3E,GAAK,EAAK,IAAK,EAAK,EAAK,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAC3E,IAAK,EAAK,IAAK,IAAK,EAAK,IAAK,GAAK,GAAK,GAAK,IAAK,EAAK,GAAK,EAAK,IAAK,EAAK,EAC3E,EAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,IAAK,EAAK,GAAK,GAAK,IA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",
  "names": []
}
